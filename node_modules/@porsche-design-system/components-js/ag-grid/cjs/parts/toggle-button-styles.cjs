'use strict';

var agGridCommunity = require('ag-grid-community');
var themeMode = require('../types/theme-mode.cjs');
var colorUtils = require('../shared/dist/esm/styles/color-utils.cjs');
var themeLightNotificationSuccess = require('../utilities/projects/utilities/dist/esm/theme/themeLightNotificationSuccess.cjs');
var themeLightBackgroundBase = require('../utilities/projects/utilities/dist/esm/theme/themeLightBackgroundBase.cjs');
var themeLightPrimary = require('../utilities/projects/utilities/dist/esm/theme/themeLightPrimary.cjs');
var themeLightContrastMedium = require('../utilities/projects/utilities/dist/esm/theme/themeLightContrastMedium.cjs');
var themeLightStateDisabled = require('../utilities/projects/utilities/dist/esm/theme/themeLightStateDisabled.cjs');
var themeDarkNotificationSuccess = require('../utilities/projects/utilities/dist/esm/theme/themeDarkNotificationSuccess.cjs');
var themeDarkBackgroundBase = require('../utilities/projects/utilities/dist/esm/theme/themeDarkBackgroundBase.cjs');
var themeDarkPrimary = require('../utilities/projects/utilities/dist/esm/theme/themeDarkPrimary.cjs');
var themeDarkContrastMedium = require('../utilities/projects/utilities/dist/esm/theme/themeDarkContrastMedium.cjs');
var themeDarkStateDisabled = require('../utilities/projects/utilities/dist/esm/theme/themeDarkStateDisabled.cjs');
var borderWidthBase = require('../utilities/projects/utilities/dist/esm/border/borderWidthBase.cjs');
var spacingStaticXSmall = require('../utilities/projects/utilities/dist/esm/spacing/spacingStaticXSmall.cjs');

const themeLightSuccessColorDarken = colorUtils.darkenColor(themeLightNotificationSuccess.themeLightNotificationSuccess);
const themeDarkSuccessColorDarken = colorUtils.darkenColor(themeDarkNotificationSuccess.themeDarkNotificationSuccess);
const toggleButtonStyle = agGridCommunity.createPart({
    feature: 'toggleButtonStyle',
    params: {
        toggleButtonOnBackgroundColor: themeLightNotificationSuccess.themeLightNotificationSuccess,
        toggleButtonOffBackgroundColor: themeLightBackgroundBase.themeLightBackgroundBase,
        toggleButtonSwitchBackgroundColor: themeLightPrimary.themeLightPrimary,
        toggleButtonOnHoverBackgroundColor: themeLightSuccessColorDarken,
        toggleButtonOnBorderColor: themeLightNotificationSuccess.themeLightNotificationSuccess,
        toggleButtonOnHoverBorderColor: themeLightSuccessColorDarken,
        toggleButtonOffHoverBorderColor: themeLightPrimary.themeLightPrimary,
        toggleButtonOffBorderColor: themeLightContrastMedium.themeLightContrastMedium,
        toggleButtonDisabledColor: themeLightStateDisabled.themeLightStateDisabled,
    },
    modeParams: {
        [themeMode.pdsThemeModeDark]: {
            toggleButtonOnBackgroundColor: themeDarkNotificationSuccess.themeDarkNotificationSuccess,
            toggleButtonOffBackgroundColor: themeDarkBackgroundBase.themeDarkBackgroundBase,
            toggleButtonSwitchBackgroundColor: themeDarkPrimary.themeDarkPrimary,
            toggleButtonOnHoverBackgroundColor: themeDarkSuccessColorDarken,
            toggleButtonOnBorderColor: themeDarkNotificationSuccess.themeDarkNotificationSuccess,
            toggleButtonOnHoverBorderColor: themeDarkSuccessColorDarken,
            toggleButtonOffHoverBorderColor: themeDarkPrimary.themeDarkPrimary,
            toggleButtonOffBorderColor: themeDarkContrastMedium.themeDarkContrastMedium,
            toggleButtonDisabledColor: themeDarkStateDisabled.themeDarkStateDisabled,
        },
    },
    css: `
    .ag-toggle-button-input-wrapper {
        border: ${borderWidthBase.borderWidthBase} solid var(--ag-toggle-button-off-border-color);
        position: relative;

        &::before {
            height: calc(var(--ag-toggle-button-height) - ${spacingStaticXSmall.spacingStaticXSmall} * 2) !important;
            width: calc(var(--ag-toggle-button-height) - ${spacingStaticXSmall.spacingStaticXSmall} * 2) !important;
            top: calc(${spacingStaticXSmall.spacingStaticXSmall} - ${borderWidthBase.borderWidthBase}) !important;
            left: calc(${spacingStaticXSmall.spacingStaticXSmall} - ${borderWidthBase.borderWidthBase}) !important;
        }

        &.ag-checked {
            border-color: var(--ag-toggle-button-on-border-color);

            &::before {
                --ag-toggle-button-switch-background-color: ${themeLightBackgroundBase.themeLightBackgroundBase};
                --ag-toggle-button-on-border-color: ${themeLightBackgroundBase.themeLightBackgroundBase};
                left: calc(100% - var(--ag-toggle-button-height) + 6px) !important;
            }
        }

        &:not(.ag-disabled):hover {
            border-color: var(--ag-toggle-button-off-hover-border-color);
        }

        &.ag-checked:not(.ag-disabled):hover {
            border-color: var(--ag-toggle-button-on-hover-border-color);
            background-color: var(--ag-toggle-button-on-hover-background-color);
        }

        &.ag-disabled {
            opacity: 1 !important;
            border-color: var(--ag-toggle-button-disabled-color);

            &:hover input {
                cursor: not-allowed;
            }

            &:not(.ag-checked)::before {
                background-color: var(--ag-toggle-button-disabled-color);
            }

            &.ag-checked {
                background-color: var(--ag-toggle-button-disabled-color);
            }
        }
    }
  `,
});

exports.toggleButtonStyle = toggleButtonStyle;
