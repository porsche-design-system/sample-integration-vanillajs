'use strict';

var agGridCommunity = require('ag-grid-community');
var checkboxStyles = require('../parts/checkbox-styles.cjs');
var iconSet = require('../parts/icon-set.cjs');
var toggleButtonStyles = require('../parts/toggle-button-styles.cjs');
var themeMode = require('../types/theme-mode.cjs');
var borderRadiusSmall = require('../utilities/projects/utilities/dist/esm/border/borderRadiusSmall.cjs');
var borderRadiusMedium = require('../utilities/projects/utilities/dist/esm/border/borderRadiusMedium.cjs');
var fontFamily = require('../utilities/projects/utilities/dist/esm/font/fontFamily.cjs');
var fontSizeTextSmall = require('../utilities/projects/utilities/dist/esm/font/fontSizeTextSmall.cjs');
var fontWeightSemiBold = require('../utilities/projects/utilities/dist/esm/font/fontWeightSemiBold.cjs');
var fontSizeTextXSmall = require('../utilities/projects/utilities/dist/esm/font/fontSizeTextXSmall.cjs');
var themeLightNotificationInfo = require('../utilities/projects/utilities/dist/esm/theme/themeLightNotificationInfo.cjs');
var themeLightBackgroundBase = require('../utilities/projects/utilities/dist/esm/theme/themeLightBackgroundBase.cjs');
var themeLightPrimary = require('../utilities/projects/utilities/dist/esm/theme/themeLightPrimary.cjs');
var themeLightBackgroundSurface = require('../utilities/projects/utilities/dist/esm/theme/themeLightBackgroundSurface.cjs');
var colorUtils = require('../shared/dist/esm/styles/color-utils.cjs');
var themeLightBackgroundFrosted = require('../utilities/projects/utilities/dist/esm/theme/themeLightBackgroundFrosted.cjs');
var themeLightStateHover = require('../utilities/projects/utilities/dist/esm/theme/themeLightStateHover.cjs');
var themeLightStateFocus = require('../utilities/projects/utilities/dist/esm/theme/themeLightStateFocus.cjs');
var themeLightContrastLow = require('../utilities/projects/utilities/dist/esm/theme/themeLightContrastLow.cjs');
var themeLightContrastMedium = require('../utilities/projects/utilities/dist/esm/theme/themeLightContrastMedium.cjs');
var themeLightNotificationError = require('../utilities/projects/utilities/dist/esm/theme/themeLightNotificationError.cjs');
var themeLightStateDisabled = require('../utilities/projects/utilities/dist/esm/theme/themeLightStateDisabled.cjs');
var themeDarkNotificationInfo = require('../utilities/projects/utilities/dist/esm/theme/themeDarkNotificationInfo.cjs');
var themeDarkBackgroundBase = require('../utilities/projects/utilities/dist/esm/theme/themeDarkBackgroundBase.cjs');
var themeDarkPrimary = require('../utilities/projects/utilities/dist/esm/theme/themeDarkPrimary.cjs');
var themeDarkBackgroundSurface = require('../utilities/projects/utilities/dist/esm/theme/themeDarkBackgroundSurface.cjs');
var themeDarkBackgroundFrosted = require('../utilities/projects/utilities/dist/esm/theme/themeDarkBackgroundFrosted.cjs');
var themeDarkStateHover = require('../utilities/projects/utilities/dist/esm/theme/themeDarkStateHover.cjs');
var themeDarkStateFocus = require('../utilities/projects/utilities/dist/esm/theme/themeDarkStateFocus.cjs');
var themeDarkContrastLow = require('../utilities/projects/utilities/dist/esm/theme/themeDarkContrastLow.cjs');
var themeDarkContrastMedium = require('../utilities/projects/utilities/dist/esm/theme/themeDarkContrastMedium.cjs');
var themeDarkNotificationError = require('../utilities/projects/utilities/dist/esm/theme/themeDarkNotificationError.cjs');
var themeDarkStateDisabled = require('../utilities/projects/utilities/dist/esm/theme/themeDarkStateDisabled.cjs');

const pdsTheme = agGridCommunity.themeQuartz
    .withParams({
    checkboxBorderWidth: 2,
    checkboxBorderRadius: borderRadiusSmall.borderRadiusSmall,
    focusShadow: 'none',
    inputFocusShadow: 'none',
    spacing: 10,
    toggleButtonHeight: 28,
    toggleButtonWidth: 48,
    iconSize: 24,
    borderRadius: borderRadiusSmall.borderRadiusSmall,
    wrapperBorderRadius: borderRadiusMedium.borderRadiusMedium,
    fontFamily: fontFamily.fontFamily,
    fontSize: fontSizeTextSmall.fontSizeTextSmall,
    headerFontWeight: fontWeightSemiBold.fontWeightSemiBold,
    headerFontSize: fontSizeTextXSmall.fontSizeTextXSmall,
    headerHeight: 'calc(var(--ag-font-size) + var(--ag-spacing) * 2.9)',
    rowHeight: 'calc(var(--ag-font-size) + var(--ag-spacing) * 4)',
    toggleButtonSwitchInset: 3,
    browserColorScheme: 'light',
    accentColor: themeLightNotificationInfo.themeLightNotificationInfo,
    backgroundColor: themeLightBackgroundBase.themeLightBackgroundBase,
    foregroundColor: themeLightPrimary.themeLightPrimary,
    headerBackgroundColor: themeLightBackgroundSurface.themeLightBackgroundSurface,
    selectedRowBackgroundColor: colorUtils.darkenColor(themeLightBackgroundSurface.themeLightBackgroundSurface),
    oddRowBackgroundColor: themeLightBackgroundSurface.themeLightBackgroundSurface,
    modalOverlayBackgroundColor: themeLightBackgroundFrosted.themeLightBackgroundFrosted,
    rowHoverColor: themeLightStateHover.themeLightStateHover,
    columnHoverColor: themeLightStateHover.themeLightStateHover,
    rangeSelectionBorderColor: themeLightStateFocus.themeLightStateFocus,
    borderColor: themeLightContrastLow.themeLightContrastLow,
    inputBorder: `1px solid ${themeLightContrastMedium.themeLightContrastMedium}`,
    inputInvalidBorder: `1px solid ${themeLightNotificationError.themeLightNotificationError}`,
    inputDisabledBorder: `1px solid ${themeLightStateDisabled.themeLightStateDisabled}`,
    inputDisabledBackgroundColor: themeLightBackgroundBase.themeLightBackgroundBase,
    invalidColor: themeLightNotificationError.themeLightNotificationError,
    inputFocusBorder: `1px solid ${themeLightPrimary.themeLightPrimary}`,
})
    .withParams({
    browserColorScheme: 'dark',
    accentColor: themeDarkNotificationInfo.themeDarkNotificationInfo,
    backgroundColor: themeDarkBackgroundBase.themeDarkBackgroundBase,
    foregroundColor: themeDarkPrimary.themeDarkPrimary,
    headerBackgroundColor: themeDarkBackgroundSurface.themeDarkBackgroundSurface,
    selectedRowBackgroundColor: colorUtils.darkenColor(themeDarkBackgroundSurface.themeDarkBackgroundSurface),
    oddRowBackgroundColor: themeDarkBackgroundSurface.themeDarkBackgroundSurface,
    modalOverlayBackgroundColor: themeDarkBackgroundFrosted.themeDarkBackgroundFrosted,
    rowHoverColor: themeDarkStateHover.themeDarkStateHover,
    columnHoverColor: themeDarkStateHover.themeDarkStateHover,
    rangeSelectionBorderColor: themeDarkStateFocus.themeDarkStateFocus,
    borderColor: themeDarkContrastLow.themeDarkContrastLow,
    inputBorder: `1px solid ${themeDarkContrastMedium.themeDarkContrastMedium}`,
    inputInvalidBorder: `1px solid ${themeDarkNotificationError.themeDarkNotificationError}`,
    inputDisabledBorder: `1px solid ${themeDarkStateDisabled.themeDarkStateDisabled}`,
    inputDisabledBackgroundColor: themeDarkBackgroundBase.themeDarkBackgroundBase,
    invalidColor: themeDarkNotificationError.themeDarkNotificationError,
    inputFocusBorder: `1px solid ${themeDarkPrimary.themeDarkPrimary}`,
}, themeMode.pdsThemeModeDark)
    .withPart(iconSet.pdsSvgIcons)
    .withPart(toggleButtonStyles.toggleButtonStyle)
    .withPart(checkboxStyles.checkboxStyle);

exports.pdsTheme = pdsTheme;
