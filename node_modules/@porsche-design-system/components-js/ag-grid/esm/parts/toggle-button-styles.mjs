import { createPart } from 'ag-grid-community';
import { pdsThemeModeDark } from '../types/theme-mode.mjs';
import { darkenColor } from '../shared/dist/esm/styles/color-utils.mjs';
import { themeLightNotificationSuccess } from '../utilities/projects/utilities/dist/esm/theme/themeLightNotificationSuccess.mjs';
import { themeLightBackgroundBase } from '../utilities/projects/utilities/dist/esm/theme/themeLightBackgroundBase.mjs';
import { themeLightPrimary } from '../utilities/projects/utilities/dist/esm/theme/themeLightPrimary.mjs';
import { themeLightContrastMedium } from '../utilities/projects/utilities/dist/esm/theme/themeLightContrastMedium.mjs';
import { themeLightStateDisabled } from '../utilities/projects/utilities/dist/esm/theme/themeLightStateDisabled.mjs';
import { themeDarkNotificationSuccess } from '../utilities/projects/utilities/dist/esm/theme/themeDarkNotificationSuccess.mjs';
import { themeDarkBackgroundBase } from '../utilities/projects/utilities/dist/esm/theme/themeDarkBackgroundBase.mjs';
import { themeDarkPrimary } from '../utilities/projects/utilities/dist/esm/theme/themeDarkPrimary.mjs';
import { themeDarkContrastMedium } from '../utilities/projects/utilities/dist/esm/theme/themeDarkContrastMedium.mjs';
import { themeDarkStateDisabled } from '../utilities/projects/utilities/dist/esm/theme/themeDarkStateDisabled.mjs';
import { borderWidthBase } from '../utilities/projects/utilities/dist/esm/border/borderWidthBase.mjs';
import { spacingStaticXSmall } from '../utilities/projects/utilities/dist/esm/spacing/spacingStaticXSmall.mjs';

const themeLightSuccessColorDarken = darkenColor(themeLightNotificationSuccess);
const themeDarkSuccessColorDarken = darkenColor(themeDarkNotificationSuccess);
const toggleButtonStyle = createPart({
    feature: 'toggleButtonStyle',
    params: {
        toggleButtonOnBackgroundColor: themeLightNotificationSuccess,
        toggleButtonOffBackgroundColor: themeLightBackgroundBase,
        toggleButtonSwitchBackgroundColor: themeLightPrimary,
        toggleButtonOnHoverBackgroundColor: themeLightSuccessColorDarken,
        toggleButtonOnBorderColor: themeLightNotificationSuccess,
        toggleButtonOnHoverBorderColor: themeLightSuccessColorDarken,
        toggleButtonOffHoverBorderColor: themeLightPrimary,
        toggleButtonOffBorderColor: themeLightContrastMedium,
        toggleButtonDisabledColor: themeLightStateDisabled,
    },
    modeParams: {
        [pdsThemeModeDark]: {
            toggleButtonOnBackgroundColor: themeDarkNotificationSuccess,
            toggleButtonOffBackgroundColor: themeDarkBackgroundBase,
            toggleButtonSwitchBackgroundColor: themeDarkPrimary,
            toggleButtonOnHoverBackgroundColor: themeDarkSuccessColorDarken,
            toggleButtonOnBorderColor: themeDarkNotificationSuccess,
            toggleButtonOnHoverBorderColor: themeDarkSuccessColorDarken,
            toggleButtonOffHoverBorderColor: themeDarkPrimary,
            toggleButtonOffBorderColor: themeDarkContrastMedium,
            toggleButtonDisabledColor: themeDarkStateDisabled,
        },
    },
    css: `
    .ag-toggle-button-input-wrapper {
        border: ${borderWidthBase} solid var(--ag-toggle-button-off-border-color);
        position: relative;

        &::before {
            height: calc(var(--ag-toggle-button-height) - ${spacingStaticXSmall} * 2) !important;
            width: calc(var(--ag-toggle-button-height) - ${spacingStaticXSmall} * 2) !important;
            top: calc(${spacingStaticXSmall} - ${borderWidthBase}) !important;
            left: calc(${spacingStaticXSmall} - ${borderWidthBase}) !important;
        }

        &.ag-checked {
            border-color: var(--ag-toggle-button-on-border-color);

            &::before {
                --ag-toggle-button-switch-background-color: ${themeLightBackgroundBase};
                --ag-toggle-button-on-border-color: ${themeLightBackgroundBase};
                left: calc(100% - var(--ag-toggle-button-height) + 6px) !important;
            }
        }

        &:not(.ag-disabled):hover {
            border-color: var(--ag-toggle-button-off-hover-border-color);
        }

        &.ag-checked:not(.ag-disabled):hover {
            border-color: var(--ag-toggle-button-on-hover-border-color);
            background-color: var(--ag-toggle-button-on-hover-background-color);
        }

        &.ag-disabled {
            opacity: 1 !important;
            border-color: var(--ag-toggle-button-disabled-color);

            &:hover input {
                cursor: not-allowed;
            }

            &:not(.ag-checked)::before {
                background-color: var(--ag-toggle-button-disabled-color);
            }

            &.ag-checked {
                background-color: var(--ag-toggle-button-disabled-color);
            }
        }
    }
  `,
});

export { toggleButtonStyle };
