'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*!
 Stencil Mock Doc v4.3.0 | MIT Licensed | https://stenciljs.com
 */
const CONTENT_REF_ID = 'r';
const ORG_LOCATION_ID = 'o';
const SLOT_NODE_ID = 's';
const TEXT_NODE_ID = 't';
const XLINK_NS = 'http://www.w3.org/1999/xlink';

const attrHandler = {
  get(obj, prop) {
    if (prop in obj) {
      return obj[prop];
    }
    if (typeof prop !== 'symbol' && !isNaN(prop)) {
      return obj.__items[prop];
    }
    return undefined;
  },
};
const createAttributeProxy = (caseInsensitive) => new Proxy(new MockAttributeMap(caseInsensitive), attrHandler);
class MockAttributeMap {
  constructor(caseInsensitive = false) {
    this.caseInsensitive = caseInsensitive;
    this.__items = [];
  }
  get length() {
    return this.__items.length;
  }
  item(index) {
    return this.__items[index] || null;
  }
  setNamedItem(attr) {
    attr.namespaceURI = null;
    this.setNamedItemNS(attr);
  }
  setNamedItemNS(attr) {
    if (attr != null && attr.value != null) {
      attr.value = String(attr.value);
    }
    const existingAttr = this.__items.find((a) => a.name === attr.name && a.namespaceURI === attr.namespaceURI);
    if (existingAttr != null) {
      existingAttr.value = attr.value;
    }
    else {
      this.__items.push(attr);
    }
  }
  getNamedItem(attrName) {
    if (this.caseInsensitive) {
      attrName = attrName.toLowerCase();
    }
    return this.getNamedItemNS(null, attrName);
  }
  getNamedItemNS(namespaceURI, attrName) {
    namespaceURI = getNamespaceURI(namespaceURI);
    return (this.__items.find((attr) => attr.name === attrName && getNamespaceURI(attr.namespaceURI) === namespaceURI) || null);
  }
  removeNamedItem(attr) {
    this.removeNamedItemNS(attr);
  }
  removeNamedItemNS(attr) {
    for (let i = 0, ii = this.__items.length; i < ii; i++) {
      if (this.__items[i].name === attr.name && this.__items[i].namespaceURI === attr.namespaceURI) {
        this.__items.splice(i, 1);
        break;
      }
    }
  }
  [Symbol.iterator]() {
    let i = 0;
    return {
      next: () => ({
        done: i === this.length,
        value: this.item(i++),
      }),
    };
  }
  get [Symbol.toStringTag]() {
    return 'MockAttributeMap';
  }
}
function getNamespaceURI(namespaceURI) {
  return namespaceURI === XLINK_NS ? null : namespaceURI;
}
function cloneAttributes(srcAttrs, sortByName = false) {
  const dstAttrs = new MockAttributeMap(srcAttrs.caseInsensitive);
  if (srcAttrs != null) {
    const attrLen = srcAttrs.length;
    if (sortByName && attrLen > 1) {
      const sortedAttrs = [];
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        sortedAttrs.push(dstAttr);
      }
      sortedAttrs.sort(sortAttributes).forEach((attr) => {
        dstAttrs.setNamedItemNS(attr);
      });
    }
    else {
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        dstAttrs.setNamedItemNS(dstAttr);
      }
    }
  }
  return dstAttrs;
}
function sortAttributes(a, b) {
  if (a.name < b.name)
    return -1;
  if (a.name > b.name)
    return 1;
  return 0;
}
class MockAttr {
  constructor(attrName, attrValue, namespaceURI = null) {
    this._name = attrName;
    this._value = String(attrValue);
    this._namespaceURI = namespaceURI;
  }
  get name() {
    return this._name;
  }
  set name(value) {
    this._name = value;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    this._value = String(value);
  }
  get nodeName() {
    return this._name;
  }
  set nodeName(value) {
    this._name = value;
  }
  get nodeValue() {
    return this._value;
  }
  set nodeValue(value) {
    this._value = String(value);
  }
  get namespaceURI() {
    return this._namespaceURI;
  }
  set namespaceURI(namespaceURI) {
    this._namespaceURI = namespaceURI;
  }
}

class MockClassList {
  constructor(elm) {
    this.elm = elm;
  }
  add(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach((className) => {
      className = String(className);
      validateClass(className);
      if (clsNames.includes(className) === false) {
        clsNames.push(className);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.join(' '));
    }
  }
  remove(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach((className) => {
      className = String(className);
      validateClass(className);
      const index = clsNames.indexOf(className);
      if (index > -1) {
        clsNames.splice(index, 1);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.filter((c) => c.length > 0).join(' '));
    }
  }
  contains(className) {
    className = String(className);
    return getItems(this.elm).includes(className);
  }
  toggle(className) {
    className = String(className);
    if (this.contains(className) === true) {
      this.remove(className);
    }
    else {
      this.add(className);
    }
  }
  get length() {
    return getItems(this.elm).length;
  }
  item(index) {
    return getItems(this.elm)[index];
  }
  toString() {
    return getItems(this.elm).join(' ');
  }
}
function validateClass(className) {
  if (className === '') {
    throw new Error('The token provided must not be empty.');
  }
  if (/\s/.test(className)) {
    throw new Error(`The token provided ('${className}') contains HTML space characters, which are not valid in tokens.`);
  }
}
function getItems(elm) {
  const className = elm.getAttribute('class');
  if (typeof className === 'string' && className.length > 0) {
    return className
      .trim()
      .split(' ')
      .filter((c) => c.length > 0);
  }
  return [];
}

class MockCSSStyleDeclaration {
  constructor() {
    this._styles = new Map();
  }
  setProperty(prop, value) {
    prop = jsCaseToCssCase(prop);
    if (value == null || value === '') {
      this._styles.delete(prop);
    }
    else {
      this._styles.set(prop, String(value));
    }
  }
  getPropertyValue(prop) {
    prop = jsCaseToCssCase(prop);
    return String(this._styles.get(prop) || '');
  }
  removeProperty(prop) {
    prop = jsCaseToCssCase(prop);
    this._styles.delete(prop);
  }
  get length() {
    return this._styles.size;
  }
  get cssText() {
    const cssText = [];
    this._styles.forEach((value, prop) => {
      cssText.push(`${prop}: ${value};`);
    });
    return cssText.join(' ').trim();
  }
  set cssText(cssText) {
    if (cssText == null || cssText === '') {
      this._styles.clear();
      return;
    }
    cssText.split(';').forEach((rule) => {
      rule = rule.trim();
      if (rule.length > 0) {
        const splt = rule.split(':');
        if (splt.length > 1) {
          const prop = splt[0].trim();
          const value = splt.slice(1).join(':').trim();
          if (prop !== '' && value !== '') {
            this._styles.set(jsCaseToCssCase(prop), value);
          }
        }
      }
    });
  }
}
function createCSSStyleDeclaration() {
  return new Proxy(new MockCSSStyleDeclaration(), cssProxyHandler);
}
const cssProxyHandler = {
  get(cssStyle, prop) {
    if (prop in cssStyle) {
      return cssStyle[prop];
    }
    prop = cssCaseToJsCase(prop);
    return cssStyle.getPropertyValue(prop);
  },
  set(cssStyle, prop, value) {
    if (prop in cssStyle) {
      cssStyle[prop] = value;
    }
    else {
      cssStyle.setProperty(prop, value);
    }
    return true;
  },
};
function cssCaseToJsCase(str) {
  // font-size to fontSize
  if (str.length > 1 && str.includes('-') === true) {
    str = str
      .toLowerCase()
      .split('-')
      .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))
      .join('');
    str = str.slice(0, 1).toLowerCase() + str.slice(1);
  }
  return str;
}
function jsCaseToCssCase(str) {
  // fontSize to font-size
  if (str.length > 1 && str.includes('-') === false && /[A-Z]/.test(str) === true) {
    str = str
      .replace(/([A-Z])/g, (g) => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase();
  }
  return str;
}

class MockCustomElementRegistry {
  constructor(win) {
    this.win = win;
  }
  define(tagName, cstr, options) {
    if (tagName.toLowerCase() !== tagName) {
      throw new Error(`Failed to execute 'define' on 'CustomElementRegistry': "${tagName}" is not a valid custom element name`);
    }
    if (this.__registry == null) {
      this.__registry = new Map();
    }
    this.__registry.set(tagName, { cstr, options });
    if (this.__whenDefined != null) {
      const whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns != null) {
        whenDefinedResolveFns.forEach((whenDefinedResolveFn) => {
          whenDefinedResolveFn();
        });
        whenDefinedResolveFns.length = 0;
        this.__whenDefined.delete(tagName);
      }
    }
    const doc = this.win.document;
    if (doc != null) {
      const hosts = doc.querySelectorAll(tagName);
      hosts.forEach((host) => {
        if (upgradedElements.has(host) === false) {
          tempDisableCallbacks.add(doc);
          const upgradedCmp = createCustomElement(this, doc, tagName);
          for (let i = 0; i < host.childNodes.length; i++) {
            const childNode = host.childNodes[i];
            childNode.remove();
            upgradedCmp.appendChild(childNode);
          }
          tempDisableCallbacks.delete(doc);
          if (proxyElements.has(host)) {
            proxyElements.set(host, upgradedCmp);
          }
        }
        fireConnectedCallback(host);
      });
    }
  }
  get(tagName) {
    if (this.__registry != null) {
      const def = this.__registry.get(tagName.toLowerCase());
      if (def != null) {
        return def.cstr;
      }
    }
    return undefined;
  }
  upgrade(_rootNode) {
    //
  }
  clear() {
    if (this.__registry != null) {
      this.__registry.clear();
    }
    if (this.__whenDefined != null) {
      this.__whenDefined.clear();
    }
  }
  whenDefined(tagName) {
    tagName = tagName.toLowerCase();
    if (this.__registry != null && this.__registry.has(tagName) === true) {
      return Promise.resolve(this.__registry.get(tagName).cstr);
    }
    return new Promise((resolve) => {
      if (this.__whenDefined == null) {
        this.__whenDefined = new Map();
      }
      let whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns == null) {
        whenDefinedResolveFns = [];
        this.__whenDefined.set(tagName, whenDefinedResolveFns);
      }
      whenDefinedResolveFns.push(resolve);
    });
  }
}
function createCustomElement(customElements, ownerDocument, tagName) {
  const Cstr = customElements.get(tagName);
  if (Cstr != null) {
    const cmp = new Cstr(ownerDocument);
    cmp.nodeName = tagName.toUpperCase();
    upgradedElements.add(cmp);
    return cmp;
  }
  const host = new Proxy({}, {
    get(obj, prop) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        return elm[prop];
      }
      return obj[prop];
    },
    set(obj, prop, val) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        elm[prop] = val;
      }
      else {
        obj[prop] = val;
      }
      return true;
    },
    has(obj, prop) {
      const elm = proxyElements.get(host);
      if (prop in elm) {
        return true;
      }
      if (prop in obj) {
        return true;
      }
      return false;
    },
  });
  const elm = new MockHTMLElement(ownerDocument, tagName);
  proxyElements.set(host, elm);
  return host;
}
const proxyElements = new WeakMap();
const upgradedElements = new WeakSet();
function connectNode(ownerDocument, node) {
  node.ownerDocument = ownerDocument;
  if (node.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */) {
    if (ownerDocument != null && node.nodeName.includes('-')) {
      const win = ownerDocument.defaultView;
      if (win != null && typeof node.connectedCallback === 'function' && node.isConnected) {
        fireConnectedCallback(node);
      }
      const shadowRoot = node.shadowRoot;
      if (shadowRoot != null) {
        shadowRoot.childNodes.forEach((childNode) => {
          connectNode(ownerDocument, childNode);
        });
      }
    }
    node.childNodes.forEach((childNode) => {
      connectNode(ownerDocument, childNode);
    });
  }
  else {
    node.childNodes.forEach((childNode) => {
      childNode.ownerDocument = ownerDocument;
    });
  }
}
function fireConnectedCallback(node) {
  if (typeof node.connectedCallback === 'function') {
    if (tempDisableCallbacks.has(node.ownerDocument) === false) {
      try {
        node.connectedCallback();
      }
      catch (e) {
        console.error(e);
      }
    }
  }
}
function disconnectNode(node) {
  if (node.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */) {
    if (node.nodeName.includes('-') === true && typeof node.disconnectedCallback === 'function') {
      if (tempDisableCallbacks.has(node.ownerDocument) === false) {
        try {
          node.disconnectedCallback();
        }
        catch (e) {
          console.error(e);
        }
      }
    }
    node.childNodes.forEach(disconnectNode);
  }
}
function attributeChanged(node, attrName, oldValue, newValue) {
  attrName = attrName.toLowerCase();
  const observedAttributes = node.constructor.observedAttributes;
  if (Array.isArray(observedAttributes) === true &&
    observedAttributes.some((obs) => obs.toLowerCase() === attrName) === true) {
    try {
      node.attributeChangedCallback(attrName, oldValue, newValue);
    }
    catch (e) {
      console.error(e);
    }
  }
}
function checkAttributeChanged(node) {
  return node.nodeName.includes('-') === true && typeof node.attributeChangedCallback === 'function';
}
const tempDisableCallbacks = new Set();

function dataset(elm) {
  const ds = {};
  const attributes = elm.attributes;
  const attrLen = attributes.length;
  for (let i = 0; i < attrLen; i++) {
    const attr = attributes.item(i);
    const nodeName = attr.nodeName;
    if (nodeName.startsWith('data-')) {
      ds[dashToPascalCase(nodeName)] = attr.nodeValue;
    }
  }
  return new Proxy(ds, {
    get(_obj, camelCaseProp) {
      return ds[camelCaseProp];
    },
    set(_obj, camelCaseProp, value) {
      const dataAttr = toDataAttribute(camelCaseProp);
      elm.setAttribute(dataAttr, value);
      return true;
    },
  });
}
function toDataAttribute(str) {
  return ('data-' +
    String(str)
      .replace(/([A-Z0-9])/g, (g) => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase());
}
function dashToPascalCase(str) {
  str = String(str).slice(5);
  return str
    .split('-')
    .map((segment, index) => {
    if (index === 0) {
      return segment.charAt(0).toLowerCase() + segment.slice(1);
    }
    return segment.charAt(0).toUpperCase() + segment.slice(1);
  })
    .join('');
}

class MockEvent {
  constructor(type, eventInitDict) {
    this.bubbles = false;
    this.cancelBubble = false;
    this.cancelable = false;
    this.composed = false;
    this.currentTarget = null;
    this.defaultPrevented = false;
    this.srcElement = null;
    this.target = null;
    if (typeof type !== 'string') {
      throw new Error(`Event type required`);
    }
    this.type = type;
    this.timeStamp = Date.now();
    if (eventInitDict != null) {
      Object.assign(this, eventInitDict);
    }
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopPropagation() {
    this.cancelBubble = true;
  }
  stopImmediatePropagation() {
    this.cancelBubble = true;
  }
  composedPath() {
    const composedPath = [];
    let currentElement = this.target;
    while (currentElement) {
      composedPath.push(currentElement);
      if (!currentElement.parentElement && currentElement.nodeName === "#document" /* NODE_NAMES.DOCUMENT_NODE */) {
        // the current element doesn't have a parent, but we've detected it's our root document node. push the window
        // object associated with the document onto the path
        composedPath.push(currentElement.defaultView);
        break;
      }
      currentElement = currentElement.parentElement;
    }
    return composedPath;
  }
}
class MockCustomEvent extends MockEvent {
  constructor(type, customEventInitDic) {
    super(type);
    this.detail = null;
    if (customEventInitDic != null) {
      Object.assign(this, customEventInitDic);
    }
  }
}
class MockKeyboardEvent extends MockEvent {
  constructor(type, keyboardEventInitDic) {
    super(type);
    this.code = '';
    this.key = '';
    this.altKey = false;
    this.ctrlKey = false;
    this.metaKey = false;
    this.shiftKey = false;
    this.location = 0;
    this.repeat = false;
    if (keyboardEventInitDic != null) {
      Object.assign(this, keyboardEventInitDic);
    }
  }
}
class MockMouseEvent extends MockEvent {
  constructor(type, mouseEventInitDic) {
    super(type);
    this.screenX = 0;
    this.screenY = 0;
    this.clientX = 0;
    this.clientY = 0;
    this.ctrlKey = false;
    this.shiftKey = false;
    this.altKey = false;
    this.metaKey = false;
    this.button = 0;
    this.buttons = 0;
    this.relatedTarget = null;
    if (mouseEventInitDic != null) {
      Object.assign(this, mouseEventInitDic);
    }
  }
}
class MockUIEvent extends MockEvent {
  constructor(type, uiEventInitDic) {
    super(type);
    this.detail = null;
    this.view = null;
    if (uiEventInitDic != null) {
      Object.assign(this, uiEventInitDic);
    }
  }
}
class MockFocusEvent extends MockUIEvent {
  constructor(type, focusEventInitDic) {
    super(type);
    this.relatedTarget = null;
    if (focusEventInitDic != null) {
      Object.assign(this, focusEventInitDic);
    }
  }
}
class MockEventListener {
  constructor(type, handler) {
    this.type = type;
    this.handler = handler;
  }
}
function addEventListener(elm, type, handler) {
  const target = elm;
  if (target.__listeners == null) {
    target.__listeners = [];
  }
  target.__listeners.push(new MockEventListener(type, handler));
}
function removeEventListener(elm, type, handler) {
  const target = elm;
  if (target != null && Array.isArray(target.__listeners) === true) {
    const elmListener = target.__listeners.find((e) => e.type === type && e.handler === handler);
    if (elmListener != null) {
      const index = target.__listeners.indexOf(elmListener);
      target.__listeners.splice(index, 1);
    }
  }
}
function resetEventListeners(target) {
  if (target != null && target.__listeners != null) {
    target.__listeners = null;
  }
}
function triggerEventListener(elm, ev) {
  if (elm == null || ev.cancelBubble === true) {
    return;
  }
  const target = elm;
  ev.currentTarget = elm;
  if (Array.isArray(target.__listeners) === true) {
    const listeners = target.__listeners.filter((e) => e.type === ev.type);
    listeners.forEach((listener) => {
      try {
        listener.handler.call(target, ev);
      }
      catch (err) {
        console.error(err);
      }
    });
  }
  if (ev.bubbles === false) {
    return;
  }
  if (elm.nodeName === "#document" /* NODE_NAMES.DOCUMENT_NODE */) {
    triggerEventListener(elm.defaultView, ev);
  }
  else {
    triggerEventListener(elm.parentElement, ev);
  }
}
function dispatchEvent(currentTarget, ev) {
  ev.target = currentTarget;
  triggerEventListener(currentTarget, ev);
  return true;
}

// Parse5 7.1.2
const e=function(e){const t=new Set([65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111]),s="�";var a;!function(e){e[e.EOF=-1]="EOF",e[e.NULL=0]="NULL",e[e.TABULATION=9]="TABULATION",e[e.CARRIAGE_RETURN=13]="CARRIAGE_RETURN",e[e.LINE_FEED=10]="LINE_FEED",e[e.FORM_FEED=12]="FORM_FEED",e[e.SPACE=32]="SPACE",e[e.EXCLAMATION_MARK=33]="EXCLAMATION_MARK",e[e.QUOTATION_MARK=34]="QUOTATION_MARK",e[e.NUMBER_SIGN=35]="NUMBER_SIGN",e[e.AMPERSAND=38]="AMPERSAND",e[e.APOSTROPHE=39]="APOSTROPHE",e[e.HYPHEN_MINUS=45]="HYPHEN_MINUS",e[e.SOLIDUS=47]="SOLIDUS",e[e.DIGIT_0=48]="DIGIT_0",e[e.DIGIT_9=57]="DIGIT_9",e[e.SEMICOLON=59]="SEMICOLON",e[e.LESS_THAN_SIGN=60]="LESS_THAN_SIGN",e[e.EQUALS_SIGN=61]="EQUALS_SIGN",e[e.GREATER_THAN_SIGN=62]="GREATER_THAN_SIGN",e[e.QUESTION_MARK=63]="QUESTION_MARK",e[e.LATIN_CAPITAL_A=65]="LATIN_CAPITAL_A",e[e.LATIN_CAPITAL_F=70]="LATIN_CAPITAL_F",e[e.LATIN_CAPITAL_X=88]="LATIN_CAPITAL_X",e[e.LATIN_CAPITAL_Z=90]="LATIN_CAPITAL_Z",e[e.RIGHT_SQUARE_BRACKET=93]="RIGHT_SQUARE_BRACKET",e[e.GRAVE_ACCENT=96]="GRAVE_ACCENT",e[e.LATIN_SMALL_A=97]="LATIN_SMALL_A",e[e.LATIN_SMALL_F=102]="LATIN_SMALL_F",e[e.LATIN_SMALL_X=120]="LATIN_SMALL_X",e[e.LATIN_SMALL_Z=122]="LATIN_SMALL_Z",e[e.REPLACEMENT_CHARACTER=65533]="REPLACEMENT_CHARACTER";}(a=a||(a={}));const r="[CDATA[",n="doctype",i="script";function o(e){return e>=55296&&e<=57343}function c(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159}function E(e){return e>=64976&&e<=65007||t.has(e)}var T,h;!function(e){e.controlCharacterInInputStream="control-character-in-input-stream",e.noncharacterInInputStream="noncharacter-in-input-stream",e.surrogateInInputStream="surrogate-in-input-stream",e.nonVoidHtmlElementStartTagWithTrailingSolidus="non-void-html-element-start-tag-with-trailing-solidus",e.endTagWithAttributes="end-tag-with-attributes",e.endTagWithTrailingSolidus="end-tag-with-trailing-solidus",e.unexpectedSolidusInTag="unexpected-solidus-in-tag",e.unexpectedNullCharacter="unexpected-null-character",e.unexpectedQuestionMarkInsteadOfTagName="unexpected-question-mark-instead-of-tag-name",e.invalidFirstCharacterOfTagName="invalid-first-character-of-tag-name",e.unexpectedEqualsSignBeforeAttributeName="unexpected-equals-sign-before-attribute-name",e.missingEndTagName="missing-end-tag-name",e.unexpectedCharacterInAttributeName="unexpected-character-in-attribute-name",e.unknownNamedCharacterReference="unknown-named-character-reference",e.missingSemicolonAfterCharacterReference="missing-semicolon-after-character-reference",e.unexpectedCharacterAfterDoctypeSystemIdentifier="unexpected-character-after-doctype-system-identifier",e.unexpectedCharacterInUnquotedAttributeValue="unexpected-character-in-unquoted-attribute-value",e.eofBeforeTagName="eof-before-tag-name",e.eofInTag="eof-in-tag",e.missingAttributeValue="missing-attribute-value",e.missingWhitespaceBetweenAttributes="missing-whitespace-between-attributes",e.missingWhitespaceAfterDoctypePublicKeyword="missing-whitespace-after-doctype-public-keyword",e.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers="missing-whitespace-between-doctype-public-and-system-identifiers",e.missingWhitespaceAfterDoctypeSystemKeyword="missing-whitespace-after-doctype-system-keyword",e.missingQuoteBeforeDoctypePublicIdentifier="missing-quote-before-doctype-public-identifier",e.missingQuoteBeforeDoctypeSystemIdentifier="missing-quote-before-doctype-system-identifier",e.missingDoctypePublicIdentifier="missing-doctype-public-identifier",e.missingDoctypeSystemIdentifier="missing-doctype-system-identifier",e.abruptDoctypePublicIdentifier="abrupt-doctype-public-identifier",e.abruptDoctypeSystemIdentifier="abrupt-doctype-system-identifier",e.cdataInHtmlContent="cdata-in-html-content",e.incorrectlyOpenedComment="incorrectly-opened-comment",e.eofInScriptHtmlCommentLikeText="eof-in-script-html-comment-like-text",e.eofInDoctype="eof-in-doctype",e.nestedComment="nested-comment",e.abruptClosingOfEmptyComment="abrupt-closing-of-empty-comment",e.eofInComment="eof-in-comment",e.incorrectlyClosedComment="incorrectly-closed-comment",e.eofInCdata="eof-in-cdata",e.absenceOfDigitsInNumericCharacterReference="absence-of-digits-in-numeric-character-reference",e.nullCharacterReference="null-character-reference",e.surrogateCharacterReference="surrogate-character-reference",e.characterReferenceOutsideUnicodeRange="character-reference-outside-unicode-range",e.controlCharacterReference="control-character-reference",e.noncharacterCharacterReference="noncharacter-character-reference",e.missingWhitespaceBeforeDoctypeName="missing-whitespace-before-doctype-name",e.missingDoctypeName="missing-doctype-name",e.invalidCharacterSequenceAfterDoctypeName="invalid-character-sequence-after-doctype-name",e.duplicateAttribute="duplicate-attribute",e.nonConformingDoctype="non-conforming-doctype",e.missingDoctype="missing-doctype",e.misplacedDoctype="misplaced-doctype",e.endTagWithoutMatchingOpenElement="end-tag-without-matching-open-element",e.closingOfElementWithOpenChildElements="closing-of-element-with-open-child-elements",e.disallowedContentInNoscriptInHead="disallowed-content-in-noscript-in-head",e.openElementsLeftAfterEof="open-elements-left-after-eof",e.abandonedHeadElementChild="abandoned-head-element-child",e.misplacedStartTagForHeadElement="misplaced-start-tag-for-head-element",e.nestedNoscriptInHead="nested-noscript-in-head",e.eofInElementThatCanContainOnlyText="eof-in-element-that-can-contain-only-text";}(T=T||(T={}));class _{constructor(e){this.handler=e,this.html="",this.pos=-1,this.lastGapPos=-2,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.line=1,this.lastErrOffset=-1;}get col(){return this.pos-this.lineStartPos+Number(this.lastGapPos!==this.pos)}get offset(){return this.droppedBufferSize+this.pos}getError(e){const{line:t,col:s,offset:a}=this;return {code:e,startLine:t,endLine:t,startCol:s,endCol:s,startOffset:a,endOffset:a}}_err(e){this.handler.onParseError&&this.lastErrOffset!==this.offset&&(this.lastErrOffset=this.offset,this.handler.onParseError(this.getError(e)));}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos;}_processSurrogate(e){if(this.pos!==this.html.length-1){const t=this.html.charCodeAt(this.pos+1);if(function(e){return e>=56320&&e<=57343}(t))return this.pos++,this._addGap(),1024*(e-55296)+9216+t}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,a.EOF;return this._err(T.surrogateInInputStream),e}willDropParsedChunk(){return this.pos>this.bufferWaterline}dropParsedChunk(){this.willDropParsedChunk()&&(this.html=this.html.substring(this.pos),this.lineStartPos-=this.pos,this.droppedBufferSize+=this.pos,this.pos=0,this.lastGapPos=-2,this.gapStack.length=0);}write(e,t){this.html.length>0?this.html+=e:this.html=e,this.endOfChunkHit=!1,this.lastChunkWritten=t;}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1),this.endOfChunkHit=!1;}startsWith(e,t){if(this.pos+e.length>this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,!1;if(t)return this.html.startsWith(e,this.pos);for(let t=0;t<e.length;t++)if((32|this.html.charCodeAt(this.pos+t))!==e.charCodeAt(t))return !1;return !0}peek(e){const t=this.pos+e;if(t>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,a.EOF;const s=this.html.charCodeAt(t);return s===a.CARRIAGE_RETURN?a.LINE_FEED:s}advance(){if(this.pos++,this.isEol&&(this.isEol=!1,this.line++,this.lineStartPos=this.pos),this.pos>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,a.EOF;let e=this.html.charCodeAt(this.pos);return e===a.CARRIAGE_RETURN?(this.isEol=!0,this.skipNextNewLine=!0,a.LINE_FEED):e===a.LINE_FEED&&(this.isEol=!0,this.skipNextNewLine)?(this.line--,this.skipNextNewLine=!1,this._addGap(),this.advance()):(this.skipNextNewLine=!1,o(e)&&(e=this._processSurrogate(e)),null===this.handler.onParseError||e>31&&e<127||e===a.LINE_FEED||e===a.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){c(e)?this._err(T.controlCharacterInInputStream):E(e)&&this._err(T.noncharacterInInputStream);}retreat(e){for(this.pos-=e;this.pos<this.lastGapPos;)this.lastGapPos=this.gapStack.pop(),this.pos--;this.isEol=!1;}}function A(e,t){for(let s=e.attrs.length-1;s>=0;s--)if(e.attrs[s].name===t)return e.attrs[s].value;return null}!function(e){e[e.CHARACTER=0]="CHARACTER",e[e.NULL_CHARACTER=1]="NULL_CHARACTER",e[e.WHITESPACE_CHARACTER=2]="WHITESPACE_CHARACTER",e[e.START_TAG=3]="START_TAG",e[e.END_TAG=4]="END_TAG",e[e.COMMENT=5]="COMMENT",e[e.DOCTYPE=6]="DOCTYPE",e[e.EOF=7]="EOF",e[e.HIBERNATION=8]="HIBERNATION";}(h=h||(h={}));var l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function m(e,t,s){return e(s={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&s.path)}},s.exports),s.exports}var p,d,I,N,u,C=m((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((function(e){return e.charCodeAt(0)})));})),D=m((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((function(e){return e.charCodeAt(0)})));})),S=m((function(e,t){var s;Object.defineProperty(t,"__esModule",{value:!0}),t.replaceCodePoint=t.fromCodePoint=void 0;var a=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);function r(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=a.get(e))&&void 0!==t?t:e}t.fromCodePoint=null!==(s=String.fromCodePoint)&&void 0!==s?s:function(e){var t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+String.fromCharCode(e)},t.replaceCodePoint=r,t.default=function(e){return (0, t.fromCodePoint)(r(e))};})),R=m((function(e,t){var s=l&&l.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.decodeXML=t.decodeHTMLStrict=t.decodeHTML=t.determineBranch=t.BinTrieFlags=t.fromCodePoint=t.replaceCodePoint=t.decodeCodePoint=t.xmlDecodeTree=t.htmlDecodeTree=void 0;var a=s(C);t.htmlDecodeTree=a.default;var r=s(D);t.xmlDecodeTree=r.default;var n=s(S);t.decodeCodePoint=n.default;var i,o,c=S;function E(e){return function(t,s){for(var a="",r=0,c=0;(c=t.indexOf("&",c))>=0;)if(a+=t.slice(r,c),r=c,c+=1,t.charCodeAt(c)!==i.NUM){for(var E=0,h=1,_=0,A=e[_];c<t.length&&!((_=T(e,A,_+1,t.charCodeAt(c)))<0);c++,h++){var l=(A=e[_])&o.VALUE_LENGTH;if(l){var m;if(s&&t.charCodeAt(c)!==i.SEMI||(E=_,h=0),0==(m=(l>>14)-1))break;_+=m;}}0!==E&&(a+=1==(m=(e[E]&o.VALUE_LENGTH)>>14)?String.fromCharCode(e[E]&~o.VALUE_LENGTH):2===m?String.fromCharCode(e[E+1]):String.fromCharCode(e[E+1],e[E+2]),r=c-h+1);}else {var p=c+1,d=10,I=t.charCodeAt(p);(I|i.To_LOWER_BIT)===i.LOWER_X&&(d=16,c+=1,p+=1);do{I=t.charCodeAt(++c);}while(I>=i.ZERO&&I<=i.NINE||16===d&&(I|i.To_LOWER_BIT)>=i.LOWER_A&&(I|i.To_LOWER_BIT)<=i.LOWER_F);if(p!==c){var N=t.substring(p,c),u=parseInt(N,d);if(t.charCodeAt(c)===i.SEMI)c+=1;else if(s)continue;a+=(0, n.default)(u),r=c;}}return a+t.slice(r)}}function T(e,t,s,a){var r=(t&o.BRANCH_LENGTH)>>7,n=t&o.JUMP_TABLE;if(0===r)return 0!==n&&a===n?s:-1;if(n){var i=a-n;return i<0||i>=r?-1:e[s+i]-1}for(var c=s,E=c+r-1;c<=E;){var T=c+E>>>1,h=e[T];if(h<a)c=T+1;else {if(!(h>a))return e[T+r];E=T-1;}}return -1}Object.defineProperty(t,"replaceCodePoint",{enumerable:!0,get:function(){return c.replaceCodePoint}}),Object.defineProperty(t,"fromCodePoint",{enumerable:!0,get:function(){return c.fromCodePoint}}),function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.To_LOWER_BIT=32]="To_LOWER_BIT";}(i||(i={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE";}(o=t.BinTrieFlags||(t.BinTrieFlags={})),t.determineBranch=T;var h=E(a.default),_=E(r.default);t.decodeHTML=function(e){return h(e,!1)},t.decodeHTMLStrict=function(e){return h(e,!0)},t.decodeXML=function(e){return _(e,!0)};}));!function(e){e.HTML="http://www.w3.org/1999/xhtml",e.MATHML="http://www.w3.org/1998/Math/MathML",e.SVG="http://www.w3.org/2000/svg",e.XLINK="http://www.w3.org/1999/xlink",e.XML="http://www.w3.org/XML/1998/namespace",e.XMLNS="http://www.w3.org/2000/xmlns/";}(p=p||(p={})),function(e){e.TYPE="type",e.ACTION="action",e.ENCODING="encoding",e.PROMPT="prompt",e.NAME="name",e.COLOR="color",e.FACE="face",e.SIZE="size";}(d=d||(d={})),function(e){e.NO_QUIRKS="no-quirks",e.QUIRKS="quirks",e.LIMITED_QUIRKS="limited-quirks";}(I=I||(I={})),function(e){e.A="a",e.ADDRESS="address",e.ANNOTATION_XML="annotation-xml",e.APPLET="applet",e.AREA="area",e.ARTICLE="article",e.ASIDE="aside",e.B="b",e.BASE="base",e.BASEFONT="basefont",e.BGSOUND="bgsound",e.BIG="big",e.BLOCKQUOTE="blockquote",e.BODY="body",e.BR="br",e.BUTTON="button",e.CAPTION="caption",e.CENTER="center",e.CODE="code",e.COL="col",e.COLGROUP="colgroup",e.DD="dd",e.DESC="desc",e.DETAILS="details",e.DIALOG="dialog",e.DIR="dir",e.DIV="div",e.DL="dl",e.DT="dt",e.EM="em",e.EMBED="embed",e.FIELDSET="fieldset",e.FIGCAPTION="figcaption",e.FIGURE="figure",e.FONT="font",e.FOOTER="footer",e.FOREIGN_OBJECT="foreignObject",e.FORM="form",e.FRAME="frame",e.FRAMESET="frameset",e.H1="h1",e.H2="h2",e.H3="h3",e.H4="h4",e.H5="h5",e.H6="h6",e.HEAD="head",e.HEADER="header",e.HGROUP="hgroup",e.HR="hr",e.HTML="html",e.I="i",e.IMG="img",e.IMAGE="image",e.INPUT="input",e.IFRAME="iframe",e.KEYGEN="keygen",e.LABEL="label",e.LI="li",e.LINK="link",e.LISTING="listing",e.MAIN="main",e.MALIGNMARK="malignmark",e.MARQUEE="marquee",e.MATH="math",e.MENU="menu",e.META="meta",e.MGLYPH="mglyph",e.MI="mi",e.MO="mo",e.MN="mn",e.MS="ms",e.MTEXT="mtext",e.NAV="nav",e.NOBR="nobr",e.NOFRAMES="noframes",e.NOEMBED="noembed",e.NOSCRIPT="noscript",e.OBJECT="object",e.OL="ol",e.OPTGROUP="optgroup",e.OPTION="option",e.P="p",e.PARAM="param",e.PLAINTEXT="plaintext",e.PRE="pre",e.RB="rb",e.RP="rp",e.RT="rt",e.RTC="rtc",e.RUBY="ruby",e.S="s",e.SCRIPT="script",e.SECTION="section",e.SELECT="select",e.SOURCE="source",e.SMALL="small",e.SPAN="span",e.STRIKE="strike",e.STRONG="strong",e.STYLE="style",e.SUB="sub",e.SUMMARY="summary",e.SUP="sup",e.TABLE="table",e.TBODY="tbody",e.TEMPLATE="template",e.TEXTAREA="textarea",e.TFOOT="tfoot",e.TD="td",e.TH="th",e.THEAD="thead",e.TITLE="title",e.TR="tr",e.TRACK="track",e.TT="tt",e.U="u",e.UL="ul",e.SVG="svg",e.VAR="var",e.WBR="wbr",e.XMP="xmp";}(N=N||(N={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.A=1]="A",e[e.ADDRESS=2]="ADDRESS",e[e.ANNOTATION_XML=3]="ANNOTATION_XML",e[e.APPLET=4]="APPLET",e[e.AREA=5]="AREA",e[e.ARTICLE=6]="ARTICLE",e[e.ASIDE=7]="ASIDE",e[e.B=8]="B",e[e.BASE=9]="BASE",e[e.BASEFONT=10]="BASEFONT",e[e.BGSOUND=11]="BGSOUND",e[e.BIG=12]="BIG",e[e.BLOCKQUOTE=13]="BLOCKQUOTE",e[e.BODY=14]="BODY",e[e.BR=15]="BR",e[e.BUTTON=16]="BUTTON",e[e.CAPTION=17]="CAPTION",e[e.CENTER=18]="CENTER",e[e.CODE=19]="CODE",e[e.COL=20]="COL",e[e.COLGROUP=21]="COLGROUP",e[e.DD=22]="DD",e[e.DESC=23]="DESC",e[e.DETAILS=24]="DETAILS",e[e.DIALOG=25]="DIALOG",e[e.DIR=26]="DIR",e[e.DIV=27]="DIV",e[e.DL=28]="DL",e[e.DT=29]="DT",e[e.EM=30]="EM",e[e.EMBED=31]="EMBED",e[e.FIELDSET=32]="FIELDSET",e[e.FIGCAPTION=33]="FIGCAPTION",e[e.FIGURE=34]="FIGURE",e[e.FONT=35]="FONT",e[e.FOOTER=36]="FOOTER",e[e.FOREIGN_OBJECT=37]="FOREIGN_OBJECT",e[e.FORM=38]="FORM",e[e.FRAME=39]="FRAME",e[e.FRAMESET=40]="FRAMESET",e[e.H1=41]="H1",e[e.H2=42]="H2",e[e.H3=43]="H3",e[e.H4=44]="H4",e[e.H5=45]="H5",e[e.H6=46]="H6",e[e.HEAD=47]="HEAD",e[e.HEADER=48]="HEADER",e[e.HGROUP=49]="HGROUP",e[e.HR=50]="HR",e[e.HTML=51]="HTML",e[e.I=52]="I",e[e.IMG=53]="IMG",e[e.IMAGE=54]="IMAGE",e[e.INPUT=55]="INPUT",e[e.IFRAME=56]="IFRAME",e[e.KEYGEN=57]="KEYGEN",e[e.LABEL=58]="LABEL",e[e.LI=59]="LI",e[e.LINK=60]="LINK",e[e.LISTING=61]="LISTING",e[e.MAIN=62]="MAIN",e[e.MALIGNMARK=63]="MALIGNMARK",e[e.MARQUEE=64]="MARQUEE",e[e.MATH=65]="MATH",e[e.MENU=66]="MENU",e[e.META=67]="META",e[e.MGLYPH=68]="MGLYPH",e[e.MI=69]="MI",e[e.MO=70]="MO",e[e.MN=71]="MN",e[e.MS=72]="MS",e[e.MTEXT=73]="MTEXT",e[e.NAV=74]="NAV",e[e.NOBR=75]="NOBR",e[e.NOFRAMES=76]="NOFRAMES",e[e.NOEMBED=77]="NOEMBED",e[e.NOSCRIPT=78]="NOSCRIPT",e[e.OBJECT=79]="OBJECT",e[e.OL=80]="OL",e[e.OPTGROUP=81]="OPTGROUP",e[e.OPTION=82]="OPTION",e[e.P=83]="P",e[e.PARAM=84]="PARAM",e[e.PLAINTEXT=85]="PLAINTEXT",e[e.PRE=86]="PRE",e[e.RB=87]="RB",e[e.RP=88]="RP",e[e.RT=89]="RT",e[e.RTC=90]="RTC",e[e.RUBY=91]="RUBY",e[e.S=92]="S",e[e.SCRIPT=93]="SCRIPT",e[e.SECTION=94]="SECTION",e[e.SELECT=95]="SELECT",e[e.SOURCE=96]="SOURCE",e[e.SMALL=97]="SMALL",e[e.SPAN=98]="SPAN",e[e.STRIKE=99]="STRIKE",e[e.STRONG=100]="STRONG",e[e.STYLE=101]="STYLE",e[e.SUB=102]="SUB",e[e.SUMMARY=103]="SUMMARY",e[e.SUP=104]="SUP",e[e.TABLE=105]="TABLE",e[e.TBODY=106]="TBODY",e[e.TEMPLATE=107]="TEMPLATE",e[e.TEXTAREA=108]="TEXTAREA",e[e.TFOOT=109]="TFOOT",e[e.TD=110]="TD",e[e.TH=111]="TH",e[e.THEAD=112]="THEAD",e[e.TITLE=113]="TITLE",e[e.TR=114]="TR",e[e.TRACK=115]="TRACK",e[e.TT=116]="TT",e[e.U=117]="U",e[e.UL=118]="UL",e[e.SVG=119]="SVG",e[e.VAR=120]="VAR",e[e.WBR=121]="WBR",e[e.XMP=122]="XMP";}(u=u||(u={}));const O=new Map([[N.A,u.A],[N.ADDRESS,u.ADDRESS],[N.ANNOTATION_XML,u.ANNOTATION_XML],[N.APPLET,u.APPLET],[N.AREA,u.AREA],[N.ARTICLE,u.ARTICLE],[N.ASIDE,u.ASIDE],[N.B,u.B],[N.BASE,u.BASE],[N.BASEFONT,u.BASEFONT],[N.BGSOUND,u.BGSOUND],[N.BIG,u.BIG],[N.BLOCKQUOTE,u.BLOCKQUOTE],[N.BODY,u.BODY],[N.BR,u.BR],[N.BUTTON,u.BUTTON],[N.CAPTION,u.CAPTION],[N.CENTER,u.CENTER],[N.CODE,u.CODE],[N.COL,u.COL],[N.COLGROUP,u.COLGROUP],[N.DD,u.DD],[N.DESC,u.DESC],[N.DETAILS,u.DETAILS],[N.DIALOG,u.DIALOG],[N.DIR,u.DIR],[N.DIV,u.DIV],[N.DL,u.DL],[N.DT,u.DT],[N.EM,u.EM],[N.EMBED,u.EMBED],[N.FIELDSET,u.FIELDSET],[N.FIGCAPTION,u.FIGCAPTION],[N.FIGURE,u.FIGURE],[N.FONT,u.FONT],[N.FOOTER,u.FOOTER],[N.FOREIGN_OBJECT,u.FOREIGN_OBJECT],[N.FORM,u.FORM],[N.FRAME,u.FRAME],[N.FRAMESET,u.FRAMESET],[N.H1,u.H1],[N.H2,u.H2],[N.H3,u.H3],[N.H4,u.H4],[N.H5,u.H5],[N.H6,u.H6],[N.HEAD,u.HEAD],[N.HEADER,u.HEADER],[N.HGROUP,u.HGROUP],[N.HR,u.HR],[N.HTML,u.HTML],[N.I,u.I],[N.IMG,u.IMG],[N.IMAGE,u.IMAGE],[N.INPUT,u.INPUT],[N.IFRAME,u.IFRAME],[N.KEYGEN,u.KEYGEN],[N.LABEL,u.LABEL],[N.LI,u.LI],[N.LINK,u.LINK],[N.LISTING,u.LISTING],[N.MAIN,u.MAIN],[N.MALIGNMARK,u.MALIGNMARK],[N.MARQUEE,u.MARQUEE],[N.MATH,u.MATH],[N.MENU,u.MENU],[N.META,u.META],[N.MGLYPH,u.MGLYPH],[N.MI,u.MI],[N.MO,u.MO],[N.MN,u.MN],[N.MS,u.MS],[N.MTEXT,u.MTEXT],[N.NAV,u.NAV],[N.NOBR,u.NOBR],[N.NOFRAMES,u.NOFRAMES],[N.NOEMBED,u.NOEMBED],[N.NOSCRIPT,u.NOSCRIPT],[N.OBJECT,u.OBJECT],[N.OL,u.OL],[N.OPTGROUP,u.OPTGROUP],[N.OPTION,u.OPTION],[N.P,u.P],[N.PARAM,u.PARAM],[N.PLAINTEXT,u.PLAINTEXT],[N.PRE,u.PRE],[N.RB,u.RB],[N.RP,u.RP],[N.RT,u.RT],[N.RTC,u.RTC],[N.RUBY,u.RUBY],[N.S,u.S],[N.SCRIPT,u.SCRIPT],[N.SECTION,u.SECTION],[N.SELECT,u.SELECT],[N.SOURCE,u.SOURCE],[N.SMALL,u.SMALL],[N.SPAN,u.SPAN],[N.STRIKE,u.STRIKE],[N.STRONG,u.STRONG],[N.STYLE,u.STYLE],[N.SUB,u.SUB],[N.SUMMARY,u.SUMMARY],[N.SUP,u.SUP],[N.TABLE,u.TABLE],[N.TBODY,u.TBODY],[N.TEMPLATE,u.TEMPLATE],[N.TEXTAREA,u.TEXTAREA],[N.TFOOT,u.TFOOT],[N.TD,u.TD],[N.TH,u.TH],[N.THEAD,u.THEAD],[N.TITLE,u.TITLE],[N.TR,u.TR],[N.TRACK,u.TRACK],[N.TT,u.TT],[N.U,u.U],[N.UL,u.UL],[N.SVG,u.SVG],[N.VAR,u.VAR],[N.WBR,u.WBR],[N.XMP,u.XMP]]);function f(e){var t;return null!==(t=O.get(e))&&void 0!==t?t:u.UNKNOWN}const L=u,M={[p.HTML]:new Set([L.ADDRESS,L.APPLET,L.AREA,L.ARTICLE,L.ASIDE,L.BASE,L.BASEFONT,L.BGSOUND,L.BLOCKQUOTE,L.BODY,L.BR,L.BUTTON,L.CAPTION,L.CENTER,L.COL,L.COLGROUP,L.DD,L.DETAILS,L.DIR,L.DIV,L.DL,L.DT,L.EMBED,L.FIELDSET,L.FIGCAPTION,L.FIGURE,L.FOOTER,L.FORM,L.FRAME,L.FRAMESET,L.H1,L.H2,L.H3,L.H4,L.H5,L.H6,L.HEAD,L.HEADER,L.HGROUP,L.HR,L.HTML,L.IFRAME,L.IMG,L.INPUT,L.LI,L.LINK,L.LISTING,L.MAIN,L.MARQUEE,L.MENU,L.META,L.NAV,L.NOEMBED,L.NOFRAMES,L.NOSCRIPT,L.OBJECT,L.OL,L.P,L.PARAM,L.PLAINTEXT,L.PRE,L.SCRIPT,L.SECTION,L.SELECT,L.SOURCE,L.STYLE,L.SUMMARY,L.TABLE,L.TBODY,L.TD,L.TEMPLATE,L.TEXTAREA,L.TFOOT,L.TH,L.THEAD,L.TITLE,L.TR,L.TRACK,L.UL,L.WBR,L.XMP]),[p.MATHML]:new Set([L.MI,L.MO,L.MN,L.MS,L.MTEXT,L.ANNOTATION_XML]),[p.SVG]:new Set([L.TITLE,L.FOREIGN_OBJECT,L.DESC]),[p.XLINK]:new Set,[p.XML]:new Set,[p.XMLNS]:new Set};function g(e){return e===L.H1||e===L.H2||e===L.H3||e===L.H4||e===L.H5||e===L.H6}new Set([N.STYLE,N.SCRIPT,N.XMP,N.IFRAME,N.NOEMBED,N.NOFRAMES,N.PLAINTEXT]);const k=new Map([[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);var P;!function(e){e[e.DATA=0]="DATA",e[e.RCDATA=1]="RCDATA",e[e.RAWTEXT=2]="RAWTEXT",e[e.SCRIPT_DATA=3]="SCRIPT_DATA",e[e.PLAINTEXT=4]="PLAINTEXT",e[e.TAG_OPEN=5]="TAG_OPEN",e[e.END_TAG_OPEN=6]="END_TAG_OPEN",e[e.TAG_NAME=7]="TAG_NAME",e[e.RCDATA_LESS_THAN_SIGN=8]="RCDATA_LESS_THAN_SIGN",e[e.RCDATA_END_TAG_OPEN=9]="RCDATA_END_TAG_OPEN",e[e.RCDATA_END_TAG_NAME=10]="RCDATA_END_TAG_NAME",e[e.RAWTEXT_LESS_THAN_SIGN=11]="RAWTEXT_LESS_THAN_SIGN",e[e.RAWTEXT_END_TAG_OPEN=12]="RAWTEXT_END_TAG_OPEN",e[e.RAWTEXT_END_TAG_NAME=13]="RAWTEXT_END_TAG_NAME",e[e.SCRIPT_DATA_LESS_THAN_SIGN=14]="SCRIPT_DATA_LESS_THAN_SIGN",e[e.SCRIPT_DATA_END_TAG_OPEN=15]="SCRIPT_DATA_END_TAG_OPEN",e[e.SCRIPT_DATA_END_TAG_NAME=16]="SCRIPT_DATA_END_TAG_NAME",e[e.SCRIPT_DATA_ESCAPE_START=17]="SCRIPT_DATA_ESCAPE_START",e[e.SCRIPT_DATA_ESCAPE_START_DASH=18]="SCRIPT_DATA_ESCAPE_START_DASH",e[e.SCRIPT_DATA_ESCAPED=19]="SCRIPT_DATA_ESCAPED",e[e.SCRIPT_DATA_ESCAPED_DASH=20]="SCRIPT_DATA_ESCAPED_DASH",e[e.SCRIPT_DATA_ESCAPED_DASH_DASH=21]="SCRIPT_DATA_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN=22]="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_OPEN=23]="SCRIPT_DATA_ESCAPED_END_TAG_OPEN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_NAME=24]="SCRIPT_DATA_ESCAPED_END_TAG_NAME",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_START=25]="SCRIPT_DATA_DOUBLE_ESCAPE_START",e[e.SCRIPT_DATA_DOUBLE_ESCAPED=26]="SCRIPT_DATA_DOUBLE_ESCAPED",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH=27]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH=28]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN=29]="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_END=30]="SCRIPT_DATA_DOUBLE_ESCAPE_END",e[e.BEFORE_ATTRIBUTE_NAME=31]="BEFORE_ATTRIBUTE_NAME",e[e.ATTRIBUTE_NAME=32]="ATTRIBUTE_NAME",e[e.AFTER_ATTRIBUTE_NAME=33]="AFTER_ATTRIBUTE_NAME",e[e.BEFORE_ATTRIBUTE_VALUE=34]="BEFORE_ATTRIBUTE_VALUE",e[e.ATTRIBUTE_VALUE_DOUBLE_QUOTED=35]="ATTRIBUTE_VALUE_DOUBLE_QUOTED",e[e.ATTRIBUTE_VALUE_SINGLE_QUOTED=36]="ATTRIBUTE_VALUE_SINGLE_QUOTED",e[e.ATTRIBUTE_VALUE_UNQUOTED=37]="ATTRIBUTE_VALUE_UNQUOTED",e[e.AFTER_ATTRIBUTE_VALUE_QUOTED=38]="AFTER_ATTRIBUTE_VALUE_QUOTED",e[e.SELF_CLOSING_START_TAG=39]="SELF_CLOSING_START_TAG",e[e.BOGUS_COMMENT=40]="BOGUS_COMMENT",e[e.MARKUP_DECLARATION_OPEN=41]="MARKUP_DECLARATION_OPEN",e[e.COMMENT_START=42]="COMMENT_START",e[e.COMMENT_START_DASH=43]="COMMENT_START_DASH",e[e.COMMENT=44]="COMMENT",e[e.COMMENT_LESS_THAN_SIGN=45]="COMMENT_LESS_THAN_SIGN",e[e.COMMENT_LESS_THAN_SIGN_BANG=46]="COMMENT_LESS_THAN_SIGN_BANG",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH=47]="COMMENT_LESS_THAN_SIGN_BANG_DASH",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH=48]="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH",e[e.COMMENT_END_DASH=49]="COMMENT_END_DASH",e[e.COMMENT_END=50]="COMMENT_END",e[e.COMMENT_END_BANG=51]="COMMENT_END_BANG",e[e.DOCTYPE=52]="DOCTYPE",e[e.BEFORE_DOCTYPE_NAME=53]="BEFORE_DOCTYPE_NAME",e[e.DOCTYPE_NAME=54]="DOCTYPE_NAME",e[e.AFTER_DOCTYPE_NAME=55]="AFTER_DOCTYPE_NAME",e[e.AFTER_DOCTYPE_PUBLIC_KEYWORD=56]="AFTER_DOCTYPE_PUBLIC_KEYWORD",e[e.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER=57]="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER",e[e.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED=58]="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED=59]="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_PUBLIC_IDENTIFIER=60]="AFTER_DOCTYPE_PUBLIC_IDENTIFIER",e[e.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS=61]="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS",e[e.AFTER_DOCTYPE_SYSTEM_KEYWORD=62]="AFTER_DOCTYPE_SYSTEM_KEYWORD",e[e.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER=63]="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER",e[e.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED=64]="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED=65]="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_SYSTEM_IDENTIFIER=66]="AFTER_DOCTYPE_SYSTEM_IDENTIFIER",e[e.BOGUS_DOCTYPE=67]="BOGUS_DOCTYPE",e[e.CDATA_SECTION=68]="CDATA_SECTION",e[e.CDATA_SECTION_BRACKET=69]="CDATA_SECTION_BRACKET",e[e.CDATA_SECTION_END=70]="CDATA_SECTION_END",e[e.CHARACTER_REFERENCE=71]="CHARACTER_REFERENCE",e[e.NAMED_CHARACTER_REFERENCE=72]="NAMED_CHARACTER_REFERENCE",e[e.AMBIGUOUS_AMPERSAND=73]="AMBIGUOUS_AMPERSAND",e[e.NUMERIC_CHARACTER_REFERENCE=74]="NUMERIC_CHARACTER_REFERENCE",e[e.HEXADEMICAL_CHARACTER_REFERENCE_START=75]="HEXADEMICAL_CHARACTER_REFERENCE_START",e[e.HEXADEMICAL_CHARACTER_REFERENCE=76]="HEXADEMICAL_CHARACTER_REFERENCE",e[e.DECIMAL_CHARACTER_REFERENCE=77]="DECIMAL_CHARACTER_REFERENCE",e[e.NUMERIC_CHARACTER_REFERENCE_END=78]="NUMERIC_CHARACTER_REFERENCE_END";}(P||(P={}));const b={DATA:P.DATA,RCDATA:P.RCDATA,RAWTEXT:P.RAWTEXT,SCRIPT_DATA:P.SCRIPT_DATA,PLAINTEXT:P.PLAINTEXT,CDATA_SECTION:P.CDATA_SECTION};function B(e){return e>=a.DIGIT_0&&e<=a.DIGIT_9}function H(e){return e>=a.LATIN_CAPITAL_A&&e<=a.LATIN_CAPITAL_Z}function F(e){return function(e){return e>=a.LATIN_SMALL_A&&e<=a.LATIN_SMALL_Z}(e)||H(e)}function U(e){return F(e)||B(e)}function G(e){return e>=a.LATIN_CAPITAL_A&&e<=a.LATIN_CAPITAL_F}function y(e){return e>=a.LATIN_SMALL_A&&e<=a.LATIN_SMALL_F}function w(e){return e+32}function Y(e){return e===a.SPACE||e===a.LINE_FEED||e===a.TABULATION||e===a.FORM_FEED}function x(e){return Y(e)||e===a.SOLIDUS||e===a.GREATER_THAN_SIGN}class v{constructor(e,t){this.options=e,this.handler=t,this.paused=!1,this.inLoop=!1,this.inForeignNode=!1,this.lastStartTagName="",this.active=!1,this.state=P.DATA,this.returnState=P.DATA,this.charRefCode=-1,this.consumedAfterSnapshot=-1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr={name:"",value:""},this.preprocessor=new _(t),this.currentLocation=this.getCurrentLocation(-1);}_err(e){var t,s;null===(s=(t=this.handler).onParseError)||void 0===s||s.call(t,this.preprocessor.getError(e));}getCurrentLocation(e){return this.options.sourceCodeLocationInfo?{startLine:this.preprocessor.line,startCol:this.preprocessor.col-e,startOffset:this.preprocessor.offset-e,endLine:-1,endCol:-1,endOffset:-1}:null}_runParsingLoop(){if(!this.inLoop){for(this.inLoop=!0;this.active&&!this.paused;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this._callState(e);}this.inLoop=!1;}}pause(){this.paused=!0;}resume(e){if(!this.paused)throw new Error("Parser was already resumed");this.paused=!1,this.inLoop||(this._runParsingLoop(),this.paused||null==e||e());}write(e,t,s){this.active=!0,this.preprocessor.write(e,t),this._runParsingLoop(),this.paused||null==s||s();}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e),this._runParsingLoop();}_ensureHibernation(){return !!this.preprocessor.endOfChunkHit&&(this._unconsume(this.consumedAfterSnapshot),this.active=!1,!0)}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_unconsume(e){this.consumedAfterSnapshot-=e,this.preprocessor.retreat(e);}_reconsumeInState(e,t){this.state=e,this._callState(t);}_advanceBy(e){this.consumedAfterSnapshot+=e;for(let t=0;t<e;t++)this.preprocessor.advance();}_consumeSequenceIfMatch(e,t){return !!this.preprocessor.startsWith(e,t)&&(this._advanceBy(e.length-1),!0)}_createStartTagToken(){this.currentToken={type:h.START_TAG,tagName:"",tagID:u.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(1)};}_createEndTagToken(){this.currentToken={type:h.END_TAG,tagName:"",tagID:u.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(2)};}_createCommentToken(e){this.currentToken={type:h.COMMENT,data:"",location:this.getCurrentLocation(e)};}_createDoctypeToken(e){this.currentToken={type:h.DOCTYPE,name:e,forceQuirks:!1,publicId:null,systemId:null,location:this.currentLocation};}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t,location:this.currentLocation};}_createAttr(e){this.currentAttr={name:e,value:""},this.currentLocation=this.getCurrentLocation(0);}_leaveAttrName(){var e,t;const s=this.currentToken;null===A(s,this.currentAttr.name)?(s.attrs.push(this.currentAttr),s.location&&this.currentLocation&&((null!==(e=(t=s.location).attrs)&&void 0!==e?e:t.attrs=Object.create(null))[this.currentAttr.name]=this.currentLocation,this._leaveAttrValue())):this._err(T.duplicateAttribute);}_leaveAttrValue(){this.currentLocation&&(this.currentLocation.endLine=this.preprocessor.line,this.currentLocation.endCol=this.preprocessor.col,this.currentLocation.endOffset=this.preprocessor.offset);}prepareToken(e){this._emitCurrentCharacterToken(e.location),this.currentToken=null,e.location&&(e.location.endLine=this.preprocessor.line,e.location.endCol=this.preprocessor.col+1,e.location.endOffset=this.preprocessor.offset+1),this.currentLocation=this.getCurrentLocation(-1);}emitCurrentTagToken(){const e=this.currentToken;this.prepareToken(e),e.tagID=f(e.tagName),e.type===h.START_TAG?(this.lastStartTagName=e.tagName,this.handler.onStartTag(e)):(e.attrs.length>0&&this._err(T.endTagWithAttributes),e.selfClosing&&this._err(T.endTagWithTrailingSolidus),this.handler.onEndTag(e)),this.preprocessor.dropParsedChunk();}emitCurrentComment(e){this.prepareToken(e),this.handler.onComment(e),this.preprocessor.dropParsedChunk();}emitCurrentDoctype(e){this.prepareToken(e),this.handler.onDoctype(e),this.preprocessor.dropParsedChunk();}_emitCurrentCharacterToken(e){if(this.currentCharacterToken){switch(e&&this.currentCharacterToken.location&&(this.currentCharacterToken.location.endLine=e.startLine,this.currentCharacterToken.location.endCol=e.startCol,this.currentCharacterToken.location.endOffset=e.startOffset),this.currentCharacterToken.type){case h.CHARACTER:this.handler.onCharacter(this.currentCharacterToken);break;case h.NULL_CHARACTER:this.handler.onNullCharacter(this.currentCharacterToken);break;case h.WHITESPACE_CHARACTER:this.handler.onWhitespaceCharacter(this.currentCharacterToken);}this.currentCharacterToken=null;}}_emitEOFToken(){const e=this.getCurrentLocation(0);e&&(e.endLine=e.startLine,e.endCol=e.startCol,e.endOffset=e.startOffset),this._emitCurrentCharacterToken(e),this.handler.onEof({type:h.EOF,location:e}),this.active=!1;}_appendCharToCurrentCharacterToken(e,t){if(this.currentCharacterToken){if(this.currentCharacterToken.type===e)return void(this.currentCharacterToken.chars+=t);this.currentLocation=this.getCurrentLocation(0),this._emitCurrentCharacterToken(this.currentLocation),this.preprocessor.dropParsedChunk();}this._createCharacterToken(e,t);}_emitCodePoint(e){const t=Y(e)?h.WHITESPACE_CHARACTER:e===a.NULL?h.NULL_CHARACTER:h.CHARACTER;this._appendCharToCurrentCharacterToken(t,String.fromCodePoint(e));}_emitChars(e){this._appendCharToCurrentCharacterToken(h.CHARACTER,e);}_matchNamedCharacterReference(e){let t=null,s=0,r=!1;for(let i=0,o=R.htmlDecodeTree[0];i>=0&&(i=R.determineBranch(R.htmlDecodeTree,o,i+1,e),!(i<0));e=this._consume()){s+=1,o=R.htmlDecodeTree[i];const c=o&R.BinTrieFlags.VALUE_LENGTH;if(c){const o=(c>>14)-1;if(e!==a.SEMICOLON&&this._isCharacterReferenceInAttribute()&&((n=this.preprocessor.peek(1))===a.EQUALS_SIGN||U(n))?(t=[a.AMPERSAND],i+=o):(t=0===o?[R.htmlDecodeTree[i]&~R.BinTrieFlags.VALUE_LENGTH]:1===o?[R.htmlDecodeTree[++i]]:[R.htmlDecodeTree[++i],R.htmlDecodeTree[++i]],s=0,r=e!==a.SEMICOLON),0===o){this._consume();break}}}var n;return this._unconsume(s),r&&!this.preprocessor.endOfChunkHit&&this._err(T.missingSemicolonAfterCharacterReference),this._unconsume(1),t}_isCharacterReferenceInAttribute(){return this.returnState===P.ATTRIBUTE_VALUE_DOUBLE_QUOTED||this.returnState===P.ATTRIBUTE_VALUE_SINGLE_QUOTED||this.returnState===P.ATTRIBUTE_VALUE_UNQUOTED}_flushCodePointConsumedAsCharacterReference(e){this._isCharacterReferenceInAttribute()?this.currentAttr.value+=String.fromCodePoint(e):this._emitCodePoint(e);}_callState(e){switch(this.state){case P.DATA:this._stateData(e);break;case P.RCDATA:this._stateRcdata(e);break;case P.RAWTEXT:this._stateRawtext(e);break;case P.SCRIPT_DATA:this._stateScriptData(e);break;case P.PLAINTEXT:this._statePlaintext(e);break;case P.TAG_OPEN:this._stateTagOpen(e);break;case P.END_TAG_OPEN:this._stateEndTagOpen(e);break;case P.TAG_NAME:this._stateTagName(e);break;case P.RCDATA_LESS_THAN_SIGN:this._stateRcdataLessThanSign(e);break;case P.RCDATA_END_TAG_OPEN:this._stateRcdataEndTagOpen(e);break;case P.RCDATA_END_TAG_NAME:this._stateRcdataEndTagName(e);break;case P.RAWTEXT_LESS_THAN_SIGN:this._stateRawtextLessThanSign(e);break;case P.RAWTEXT_END_TAG_OPEN:this._stateRawtextEndTagOpen(e);break;case P.RAWTEXT_END_TAG_NAME:this._stateRawtextEndTagName(e);break;case P.SCRIPT_DATA_LESS_THAN_SIGN:this._stateScriptDataLessThanSign(e);break;case P.SCRIPT_DATA_END_TAG_OPEN:this._stateScriptDataEndTagOpen(e);break;case P.SCRIPT_DATA_END_TAG_NAME:this._stateScriptDataEndTagName(e);break;case P.SCRIPT_DATA_ESCAPE_START:this._stateScriptDataEscapeStart(e);break;case P.SCRIPT_DATA_ESCAPE_START_DASH:this._stateScriptDataEscapeStartDash(e);break;case P.SCRIPT_DATA_ESCAPED:this._stateScriptDataEscaped(e);break;case P.SCRIPT_DATA_ESCAPED_DASH:this._stateScriptDataEscapedDash(e);break;case P.SCRIPT_DATA_ESCAPED_DASH_DASH:this._stateScriptDataEscapedDashDash(e);break;case P.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataEscapedLessThanSign(e);break;case P.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:this._stateScriptDataEscapedEndTagOpen(e);break;case P.SCRIPT_DATA_ESCAPED_END_TAG_NAME:this._stateScriptDataEscapedEndTagName(e);break;case P.SCRIPT_DATA_DOUBLE_ESCAPE_START:this._stateScriptDataDoubleEscapeStart(e);break;case P.SCRIPT_DATA_DOUBLE_ESCAPED:this._stateScriptDataDoubleEscaped(e);break;case P.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:this._stateScriptDataDoubleEscapedDash(e);break;case P.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:this._stateScriptDataDoubleEscapedDashDash(e);break;case P.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataDoubleEscapedLessThanSign(e);break;case P.SCRIPT_DATA_DOUBLE_ESCAPE_END:this._stateScriptDataDoubleEscapeEnd(e);break;case P.BEFORE_ATTRIBUTE_NAME:this._stateBeforeAttributeName(e);break;case P.ATTRIBUTE_NAME:this._stateAttributeName(e);break;case P.AFTER_ATTRIBUTE_NAME:this._stateAfterAttributeName(e);break;case P.BEFORE_ATTRIBUTE_VALUE:this._stateBeforeAttributeValue(e);break;case P.ATTRIBUTE_VALUE_DOUBLE_QUOTED:this._stateAttributeValueDoubleQuoted(e);break;case P.ATTRIBUTE_VALUE_SINGLE_QUOTED:this._stateAttributeValueSingleQuoted(e);break;case P.ATTRIBUTE_VALUE_UNQUOTED:this._stateAttributeValueUnquoted(e);break;case P.AFTER_ATTRIBUTE_VALUE_QUOTED:this._stateAfterAttributeValueQuoted(e);break;case P.SELF_CLOSING_START_TAG:this._stateSelfClosingStartTag(e);break;case P.BOGUS_COMMENT:this._stateBogusComment(e);break;case P.MARKUP_DECLARATION_OPEN:this._stateMarkupDeclarationOpen(e);break;case P.COMMENT_START:this._stateCommentStart(e);break;case P.COMMENT_START_DASH:this._stateCommentStartDash(e);break;case P.COMMENT:this._stateComment(e);break;case P.COMMENT_LESS_THAN_SIGN:this._stateCommentLessThanSign(e);break;case P.COMMENT_LESS_THAN_SIGN_BANG:this._stateCommentLessThanSignBang(e);break;case P.COMMENT_LESS_THAN_SIGN_BANG_DASH:this._stateCommentLessThanSignBangDash(e);break;case P.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:this._stateCommentLessThanSignBangDashDash(e);break;case P.COMMENT_END_DASH:this._stateCommentEndDash(e);break;case P.COMMENT_END:this._stateCommentEnd(e);break;case P.COMMENT_END_BANG:this._stateCommentEndBang(e);break;case P.DOCTYPE:this._stateDoctype(e);break;case P.BEFORE_DOCTYPE_NAME:this._stateBeforeDoctypeName(e);break;case P.DOCTYPE_NAME:this._stateDoctypeName(e);break;case P.AFTER_DOCTYPE_NAME:this._stateAfterDoctypeName(e);break;case P.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._stateAfterDoctypePublicKeyword(e);break;case P.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:this._stateBeforeDoctypePublicIdentifier(e);break;case P.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypePublicIdentifierDoubleQuoted(e);break;case P.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypePublicIdentifierSingleQuoted(e);break;case P.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:this._stateAfterDoctypePublicIdentifier(e);break;case P.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:this._stateBetweenDoctypePublicAndSystemIdentifiers(e);break;case P.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._stateAfterDoctypeSystemKeyword(e);break;case P.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:this._stateBeforeDoctypeSystemIdentifier(e);break;case P.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypeSystemIdentifierDoubleQuoted(e);break;case P.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypeSystemIdentifierSingleQuoted(e);break;case P.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:this._stateAfterDoctypeSystemIdentifier(e);break;case P.BOGUS_DOCTYPE:this._stateBogusDoctype(e);break;case P.CDATA_SECTION:this._stateCdataSection(e);break;case P.CDATA_SECTION_BRACKET:this._stateCdataSectionBracket(e);break;case P.CDATA_SECTION_END:this._stateCdataSectionEnd(e);break;case P.CHARACTER_REFERENCE:this._stateCharacterReference(e);break;case P.NAMED_CHARACTER_REFERENCE:this._stateNamedCharacterReference(e);break;case P.AMBIGUOUS_AMPERSAND:this._stateAmbiguousAmpersand(e);break;case P.NUMERIC_CHARACTER_REFERENCE:this._stateNumericCharacterReference(e);break;case P.HEXADEMICAL_CHARACTER_REFERENCE_START:this._stateHexademicalCharacterReferenceStart(e);break;case P.HEXADEMICAL_CHARACTER_REFERENCE:this._stateHexademicalCharacterReference(e);break;case P.DECIMAL_CHARACTER_REFERENCE:this._stateDecimalCharacterReference(e);break;case P.NUMERIC_CHARACTER_REFERENCE_END:this._stateNumericCharacterReferenceEnd(e);break;default:throw new Error("Unknown state")}}_stateData(e){switch(e){case a.LESS_THAN_SIGN:this.state=P.TAG_OPEN;break;case a.AMPERSAND:this.returnState=P.DATA,this.state=P.CHARACTER_REFERENCE;break;case a.NULL:this._err(T.unexpectedNullCharacter),this._emitCodePoint(e);break;case a.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e);}}_stateRcdata(e){switch(e){case a.AMPERSAND:this.returnState=P.RCDATA,this.state=P.CHARACTER_REFERENCE;break;case a.LESS_THAN_SIGN:this.state=P.RCDATA_LESS_THAN_SIGN;break;case a.NULL:this._err(T.unexpectedNullCharacter),this._emitChars(s);break;case a.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e);}}_stateRawtext(e){switch(e){case a.LESS_THAN_SIGN:this.state=P.RAWTEXT_LESS_THAN_SIGN;break;case a.NULL:this._err(T.unexpectedNullCharacter),this._emitChars(s);break;case a.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e);}}_stateScriptData(e){switch(e){case a.LESS_THAN_SIGN:this.state=P.SCRIPT_DATA_LESS_THAN_SIGN;break;case a.NULL:this._err(T.unexpectedNullCharacter),this._emitChars(s);break;case a.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e);}}_statePlaintext(e){switch(e){case a.NULL:this._err(T.unexpectedNullCharacter),this._emitChars(s);break;case a.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e);}}_stateTagOpen(e){if(F(e))this._createStartTagToken(),this.state=P.TAG_NAME,this._stateTagName(e);else switch(e){case a.EXCLAMATION_MARK:this.state=P.MARKUP_DECLARATION_OPEN;break;case a.SOLIDUS:this.state=P.END_TAG_OPEN;break;case a.QUESTION_MARK:this._err(T.unexpectedQuestionMarkInsteadOfTagName),this._createCommentToken(1),this.state=P.BOGUS_COMMENT,this._stateBogusComment(e);break;case a.EOF:this._err(T.eofBeforeTagName),this._emitChars("<"),this._emitEOFToken();break;default:this._err(T.invalidFirstCharacterOfTagName),this._emitChars("<"),this.state=P.DATA,this._stateData(e);}}_stateEndTagOpen(e){if(F(e))this._createEndTagToken(),this.state=P.TAG_NAME,this._stateTagName(e);else switch(e){case a.GREATER_THAN_SIGN:this._err(T.missingEndTagName),this.state=P.DATA;break;case a.EOF:this._err(T.eofBeforeTagName),this._emitChars("</"),this._emitEOFToken();break;default:this._err(T.invalidFirstCharacterOfTagName),this._createCommentToken(2),this.state=P.BOGUS_COMMENT,this._stateBogusComment(e);}}_stateTagName(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this.state=P.BEFORE_ATTRIBUTE_NAME;break;case a.SOLIDUS:this.state=P.SELF_CLOSING_START_TAG;break;case a.GREATER_THAN_SIGN:this.state=P.DATA,this.emitCurrentTagToken();break;case a.NULL:this._err(T.unexpectedNullCharacter),t.tagName+=s;break;case a.EOF:this._err(T.eofInTag),this._emitEOFToken();break;default:t.tagName+=String.fromCodePoint(H(e)?w(e):e);}}_stateRcdataLessThanSign(e){e===a.SOLIDUS?this.state=P.RCDATA_END_TAG_OPEN:(this._emitChars("<"),this.state=P.RCDATA,this._stateRcdata(e));}_stateRcdataEndTagOpen(e){F(e)?(this.state=P.RCDATA_END_TAG_NAME,this._stateRcdataEndTagName(e)):(this._emitChars("</"),this.state=P.RCDATA,this._stateRcdata(e));}handleSpecialEndTag(e){if(!this.preprocessor.startsWith(this.lastStartTagName,!1))return !this._ensureHibernation();switch(this._createEndTagToken(),this.currentToken.tagName=this.lastStartTagName,this.preprocessor.peek(this.lastStartTagName.length)){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:return this._advanceBy(this.lastStartTagName.length),this.state=P.BEFORE_ATTRIBUTE_NAME,!1;case a.SOLIDUS:return this._advanceBy(this.lastStartTagName.length),this.state=P.SELF_CLOSING_START_TAG,!1;case a.GREATER_THAN_SIGN:return this._advanceBy(this.lastStartTagName.length),this.emitCurrentTagToken(),this.state=P.DATA,!1;default:return !this._ensureHibernation()}}_stateRcdataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=P.RCDATA,this._stateRcdata(e));}_stateRawtextLessThanSign(e){e===a.SOLIDUS?this.state=P.RAWTEXT_END_TAG_OPEN:(this._emitChars("<"),this.state=P.RAWTEXT,this._stateRawtext(e));}_stateRawtextEndTagOpen(e){F(e)?(this.state=P.RAWTEXT_END_TAG_NAME,this._stateRawtextEndTagName(e)):(this._emitChars("</"),this.state=P.RAWTEXT,this._stateRawtext(e));}_stateRawtextEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=P.RAWTEXT,this._stateRawtext(e));}_stateScriptDataLessThanSign(e){switch(e){case a.SOLIDUS:this.state=P.SCRIPT_DATA_END_TAG_OPEN;break;case a.EXCLAMATION_MARK:this.state=P.SCRIPT_DATA_ESCAPE_START,this._emitChars("<!");break;default:this._emitChars("<"),this.state=P.SCRIPT_DATA,this._stateScriptData(e);}}_stateScriptDataEndTagOpen(e){F(e)?(this.state=P.SCRIPT_DATA_END_TAG_NAME,this._stateScriptDataEndTagName(e)):(this._emitChars("</"),this.state=P.SCRIPT_DATA,this._stateScriptData(e));}_stateScriptDataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=P.SCRIPT_DATA,this._stateScriptData(e));}_stateScriptDataEscapeStart(e){e===a.HYPHEN_MINUS?(this.state=P.SCRIPT_DATA_ESCAPE_START_DASH,this._emitChars("-")):(this.state=P.SCRIPT_DATA,this._stateScriptData(e));}_stateScriptDataEscapeStartDash(e){e===a.HYPHEN_MINUS?(this.state=P.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-")):(this.state=P.SCRIPT_DATA,this._stateScriptData(e));}_stateScriptDataEscaped(e){switch(e){case a.HYPHEN_MINUS:this.state=P.SCRIPT_DATA_ESCAPED_DASH,this._emitChars("-");break;case a.LESS_THAN_SIGN:this.state=P.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case a.NULL:this._err(T.unexpectedNullCharacter),this._emitChars(s);break;case a.EOF:this._err(T.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e);}}_stateScriptDataEscapedDash(e){switch(e){case a.HYPHEN_MINUS:this.state=P.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-");break;case a.LESS_THAN_SIGN:this.state=P.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case a.NULL:this._err(T.unexpectedNullCharacter),this.state=P.SCRIPT_DATA_ESCAPED,this._emitChars(s);break;case a.EOF:this._err(T.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=P.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e);}}_stateScriptDataEscapedDashDash(e){switch(e){case a.HYPHEN_MINUS:this._emitChars("-");break;case a.LESS_THAN_SIGN:this.state=P.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case a.GREATER_THAN_SIGN:this.state=P.SCRIPT_DATA,this._emitChars(">");break;case a.NULL:this._err(T.unexpectedNullCharacter),this.state=P.SCRIPT_DATA_ESCAPED,this._emitChars(s);break;case a.EOF:this._err(T.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=P.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e);}}_stateScriptDataEscapedLessThanSign(e){e===a.SOLIDUS?this.state=P.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:F(e)?(this._emitChars("<"),this.state=P.SCRIPT_DATA_DOUBLE_ESCAPE_START,this._stateScriptDataDoubleEscapeStart(e)):(this._emitChars("<"),this.state=P.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e));}_stateScriptDataEscapedEndTagOpen(e){F(e)?(this.state=P.SCRIPT_DATA_ESCAPED_END_TAG_NAME,this._stateScriptDataEscapedEndTagName(e)):(this._emitChars("</"),this.state=P.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e));}_stateScriptDataEscapedEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=P.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e));}_stateScriptDataDoubleEscapeStart(e){if(this.preprocessor.startsWith(i,!1)&&x(this.preprocessor.peek(6))){this._emitCodePoint(e);for(let e=0;e<6;e++)this._emitCodePoint(this._consume());this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED;}else this._ensureHibernation()||(this.state=P.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e));}_stateScriptDataDoubleEscaped(e){switch(e){case a.HYPHEN_MINUS:this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED_DASH,this._emitChars("-");break;case a.LESS_THAN_SIGN:this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case a.NULL:this._err(T.unexpectedNullCharacter),this._emitChars(s);break;case a.EOF:this._err(T.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e);}}_stateScriptDataDoubleEscapedDash(e){switch(e){case a.HYPHEN_MINUS:this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH,this._emitChars("-");break;case a.LESS_THAN_SIGN:this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case a.NULL:this._err(T.unexpectedNullCharacter),this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(s);break;case a.EOF:this._err(T.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e);}}_stateScriptDataDoubleEscapedDashDash(e){switch(e){case a.HYPHEN_MINUS:this._emitChars("-");break;case a.LESS_THAN_SIGN:this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case a.GREATER_THAN_SIGN:this.state=P.SCRIPT_DATA,this._emitChars(">");break;case a.NULL:this._err(T.unexpectedNullCharacter),this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(s);break;case a.EOF:this._err(T.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e);}}_stateScriptDataDoubleEscapedLessThanSign(e){e===a.SOLIDUS?(this.state=P.SCRIPT_DATA_DOUBLE_ESCAPE_END,this._emitChars("/")):(this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e));}_stateScriptDataDoubleEscapeEnd(e){if(this.preprocessor.startsWith(i,!1)&&x(this.preprocessor.peek(6))){this._emitCodePoint(e);for(let e=0;e<6;e++)this._emitCodePoint(this._consume());this.state=P.SCRIPT_DATA_ESCAPED;}else this._ensureHibernation()||(this.state=P.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e));}_stateBeforeAttributeName(e){switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.SOLIDUS:case a.GREATER_THAN_SIGN:case a.EOF:this.state=P.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case a.EQUALS_SIGN:this._err(T.unexpectedEqualsSignBeforeAttributeName),this._createAttr("="),this.state=P.ATTRIBUTE_NAME;break;default:this._createAttr(""),this.state=P.ATTRIBUTE_NAME,this._stateAttributeName(e);}}_stateAttributeName(e){switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:case a.SOLIDUS:case a.GREATER_THAN_SIGN:case a.EOF:this._leaveAttrName(),this.state=P.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case a.EQUALS_SIGN:this._leaveAttrName(),this.state=P.BEFORE_ATTRIBUTE_VALUE;break;case a.QUOTATION_MARK:case a.APOSTROPHE:case a.LESS_THAN_SIGN:this._err(T.unexpectedCharacterInAttributeName),this.currentAttr.name+=String.fromCodePoint(e);break;case a.NULL:this._err(T.unexpectedNullCharacter),this.currentAttr.name+=s;break;default:this.currentAttr.name+=String.fromCodePoint(H(e)?w(e):e);}}_stateAfterAttributeName(e){switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.SOLIDUS:this.state=P.SELF_CLOSING_START_TAG;break;case a.EQUALS_SIGN:this.state=P.BEFORE_ATTRIBUTE_VALUE;break;case a.GREATER_THAN_SIGN:this.state=P.DATA,this.emitCurrentTagToken();break;case a.EOF:this._err(T.eofInTag),this._emitEOFToken();break;default:this._createAttr(""),this.state=P.ATTRIBUTE_NAME,this._stateAttributeName(e);}}_stateBeforeAttributeValue(e){switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.QUOTATION_MARK:this.state=P.ATTRIBUTE_VALUE_DOUBLE_QUOTED;break;case a.APOSTROPHE:this.state=P.ATTRIBUTE_VALUE_SINGLE_QUOTED;break;case a.GREATER_THAN_SIGN:this._err(T.missingAttributeValue),this.state=P.DATA,this.emitCurrentTagToken();break;default:this.state=P.ATTRIBUTE_VALUE_UNQUOTED,this._stateAttributeValueUnquoted(e);}}_stateAttributeValueDoubleQuoted(e){switch(e){case a.QUOTATION_MARK:this.state=P.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case a.AMPERSAND:this.returnState=P.ATTRIBUTE_VALUE_DOUBLE_QUOTED,this.state=P.CHARACTER_REFERENCE;break;case a.NULL:this._err(T.unexpectedNullCharacter),this.currentAttr.value+=s;break;case a.EOF:this._err(T.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e);}}_stateAttributeValueSingleQuoted(e){switch(e){case a.APOSTROPHE:this.state=P.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case a.AMPERSAND:this.returnState=P.ATTRIBUTE_VALUE_SINGLE_QUOTED,this.state=P.CHARACTER_REFERENCE;break;case a.NULL:this._err(T.unexpectedNullCharacter),this.currentAttr.value+=s;break;case a.EOF:this._err(T.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e);}}_stateAttributeValueUnquoted(e){switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this._leaveAttrValue(),this.state=P.BEFORE_ATTRIBUTE_NAME;break;case a.AMPERSAND:this.returnState=P.ATTRIBUTE_VALUE_UNQUOTED,this.state=P.CHARACTER_REFERENCE;break;case a.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=P.DATA,this.emitCurrentTagToken();break;case a.NULL:this._err(T.unexpectedNullCharacter),this.currentAttr.value+=s;break;case a.QUOTATION_MARK:case a.APOSTROPHE:case a.LESS_THAN_SIGN:case a.EQUALS_SIGN:case a.GRAVE_ACCENT:this._err(T.unexpectedCharacterInUnquotedAttributeValue),this.currentAttr.value+=String.fromCodePoint(e);break;case a.EOF:this._err(T.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e);}}_stateAfterAttributeValueQuoted(e){switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this._leaveAttrValue(),this.state=P.BEFORE_ATTRIBUTE_NAME;break;case a.SOLIDUS:this._leaveAttrValue(),this.state=P.SELF_CLOSING_START_TAG;break;case a.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=P.DATA,this.emitCurrentTagToken();break;case a.EOF:this._err(T.eofInTag),this._emitEOFToken();break;default:this._err(T.missingWhitespaceBetweenAttributes),this.state=P.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e);}}_stateSelfClosingStartTag(e){switch(e){case a.GREATER_THAN_SIGN:this.currentToken.selfClosing=!0,this.state=P.DATA,this.emitCurrentTagToken();break;case a.EOF:this._err(T.eofInTag),this._emitEOFToken();break;default:this._err(T.unexpectedSolidusInTag),this.state=P.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e);}}_stateBogusComment(e){const t=this.currentToken;switch(e){case a.GREATER_THAN_SIGN:this.state=P.DATA,this.emitCurrentComment(t);break;case a.EOF:this.emitCurrentComment(t),this._emitEOFToken();break;case a.NULL:this._err(T.unexpectedNullCharacter),t.data+=s;break;default:t.data+=String.fromCodePoint(e);}}_stateMarkupDeclarationOpen(e){this._consumeSequenceIfMatch("--",!0)?(this._createCommentToken(3),this.state=P.COMMENT_START):this._consumeSequenceIfMatch(n,!1)?(this.currentLocation=this.getCurrentLocation(8),this.state=P.DOCTYPE):this._consumeSequenceIfMatch(r,!0)?this.inForeignNode?this.state=P.CDATA_SECTION:(this._err(T.cdataInHtmlContent),this._createCommentToken(8),this.currentToken.data="[CDATA[",this.state=P.BOGUS_COMMENT):this._ensureHibernation()||(this._err(T.incorrectlyOpenedComment),this._createCommentToken(2),this.state=P.BOGUS_COMMENT,this._stateBogusComment(e));}_stateCommentStart(e){switch(e){case a.HYPHEN_MINUS:this.state=P.COMMENT_START_DASH;break;case a.GREATER_THAN_SIGN:{this._err(T.abruptClosingOfEmptyComment),this.state=P.DATA;const e=this.currentToken;this.emitCurrentComment(e);break}default:this.state=P.COMMENT,this._stateComment(e);}}_stateCommentStartDash(e){const t=this.currentToken;switch(e){case a.HYPHEN_MINUS:this.state=P.COMMENT_END;break;case a.GREATER_THAN_SIGN:this._err(T.abruptClosingOfEmptyComment),this.state=P.DATA,this.emitCurrentComment(t);break;case a.EOF:this._err(T.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=P.COMMENT,this._stateComment(e);}}_stateComment(e){const t=this.currentToken;switch(e){case a.HYPHEN_MINUS:this.state=P.COMMENT_END_DASH;break;case a.LESS_THAN_SIGN:t.data+="<",this.state=P.COMMENT_LESS_THAN_SIGN;break;case a.NULL:this._err(T.unexpectedNullCharacter),t.data+=s;break;case a.EOF:this._err(T.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+=String.fromCodePoint(e);}}_stateCommentLessThanSign(e){const t=this.currentToken;switch(e){case a.EXCLAMATION_MARK:t.data+="!",this.state=P.COMMENT_LESS_THAN_SIGN_BANG;break;case a.LESS_THAN_SIGN:t.data+="<";break;default:this.state=P.COMMENT,this._stateComment(e);}}_stateCommentLessThanSignBang(e){e===a.HYPHEN_MINUS?this.state=P.COMMENT_LESS_THAN_SIGN_BANG_DASH:(this.state=P.COMMENT,this._stateComment(e));}_stateCommentLessThanSignBangDash(e){e===a.HYPHEN_MINUS?this.state=P.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:(this.state=P.COMMENT_END_DASH,this._stateCommentEndDash(e));}_stateCommentLessThanSignBangDashDash(e){e!==a.GREATER_THAN_SIGN&&e!==a.EOF&&this._err(T.nestedComment),this.state=P.COMMENT_END,this._stateCommentEnd(e);}_stateCommentEndDash(e){const t=this.currentToken;switch(e){case a.HYPHEN_MINUS:this.state=P.COMMENT_END;break;case a.EOF:this._err(T.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=P.COMMENT,this._stateComment(e);}}_stateCommentEnd(e){const t=this.currentToken;switch(e){case a.GREATER_THAN_SIGN:this.state=P.DATA,this.emitCurrentComment(t);break;case a.EXCLAMATION_MARK:this.state=P.COMMENT_END_BANG;break;case a.HYPHEN_MINUS:t.data+="-";break;case a.EOF:this._err(T.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--",this.state=P.COMMENT,this._stateComment(e);}}_stateCommentEndBang(e){const t=this.currentToken;switch(e){case a.HYPHEN_MINUS:t.data+="--!",this.state=P.COMMENT_END_DASH;break;case a.GREATER_THAN_SIGN:this._err(T.incorrectlyClosedComment),this.state=P.DATA,this.emitCurrentComment(t);break;case a.EOF:this._err(T.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--!",this.state=P.COMMENT,this._stateComment(e);}}_stateDoctype(e){switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this.state=P.BEFORE_DOCTYPE_NAME;break;case a.GREATER_THAN_SIGN:this.state=P.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e);break;case a.EOF:{this._err(T.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._err(T.missingWhitespaceBeforeDoctypeName),this.state=P.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e);}}_stateBeforeDoctypeName(e){if(H(e))this._createDoctypeToken(String.fromCharCode(w(e))),this.state=P.DOCTYPE_NAME;else switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.NULL:this._err(T.unexpectedNullCharacter),this._createDoctypeToken(s),this.state=P.DOCTYPE_NAME;break;case a.GREATER_THAN_SIGN:{this._err(T.missingDoctypeName),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this.state=P.DATA;break}case a.EOF:{this._err(T.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._createDoctypeToken(String.fromCodePoint(e)),this.state=P.DOCTYPE_NAME;}}_stateDoctypeName(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this.state=P.AFTER_DOCTYPE_NAME;break;case a.GREATER_THAN_SIGN:this.state=P.DATA,this.emitCurrentDoctype(t);break;case a.NULL:this._err(T.unexpectedNullCharacter),t.name+=s;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.name+=String.fromCodePoint(H(e)?w(e):e);}}_stateAfterDoctypeName(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.GREATER_THAN_SIGN:this.state=P.DATA,this.emitCurrentDoctype(t);break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._consumeSequenceIfMatch("public",!1)?this.state=P.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._consumeSequenceIfMatch("system",!1)?this.state=P.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._ensureHibernation()||(this._err(T.invalidCharacterSequenceAfterDoctypeName),t.forceQuirks=!0,this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e));}}_stateAfterDoctypePublicKeyword(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this.state=P.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;break;case a.QUOTATION_MARK:this._err(T.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=P.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case a.APOSTROPHE:this._err(T.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=P.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case a.GREATER_THAN_SIGN:this._err(T.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=P.DATA,this.emitCurrentDoctype(t);break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(T.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e);}}_stateBeforeDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.QUOTATION_MARK:t.publicId="",this.state=P.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case a.APOSTROPHE:t.publicId="",this.state=P.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case a.GREATER_THAN_SIGN:this._err(T.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=P.DATA,this.emitCurrentDoctype(t);break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(T.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e);}}_stateDoctypePublicIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case a.QUOTATION_MARK:this.state=P.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case a.NULL:this._err(T.unexpectedNullCharacter),t.publicId+=s;break;case a.GREATER_THAN_SIGN:this._err(T.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=P.DATA;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e);}}_stateDoctypePublicIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case a.APOSTROPHE:this.state=P.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case a.NULL:this._err(T.unexpectedNullCharacter),t.publicId+=s;break;case a.GREATER_THAN_SIGN:this._err(T.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=P.DATA;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e);}}_stateAfterDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this.state=P.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;break;case a.GREATER_THAN_SIGN:this.state=P.DATA,this.emitCurrentDoctype(t);break;case a.QUOTATION_MARK:this._err(T.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case a.APOSTROPHE:this._err(T.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(T.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e);}}_stateBetweenDoctypePublicAndSystemIdentifiers(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=P.DATA;break;case a.QUOTATION_MARK:t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case a.APOSTROPHE:t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(T.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e);}}_stateAfterDoctypeSystemKeyword(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:this.state=P.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;break;case a.QUOTATION_MARK:this._err(T.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case a.APOSTROPHE:this._err(T.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case a.GREATER_THAN_SIGN:this._err(T.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=P.DATA,this.emitCurrentDoctype(t);break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(T.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e);}}_stateBeforeDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.QUOTATION_MARK:t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case a.APOSTROPHE:t.systemId="",this.state=P.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case a.GREATER_THAN_SIGN:this._err(T.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=P.DATA,this.emitCurrentDoctype(t);break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(T.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e);}}_stateDoctypeSystemIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case a.QUOTATION_MARK:this.state=P.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case a.NULL:this._err(T.unexpectedNullCharacter),t.systemId+=s;break;case a.GREATER_THAN_SIGN:this._err(T.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=P.DATA;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e);}}_stateDoctypeSystemIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case a.APOSTROPHE:this.state=P.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case a.NULL:this._err(T.unexpectedNullCharacter),t.systemId+=s;break;case a.GREATER_THAN_SIGN:this._err(T.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=P.DATA;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e);}}_stateAfterDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case a.SPACE:case a.LINE_FEED:case a.TABULATION:case a.FORM_FEED:break;case a.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=P.DATA;break;case a.EOF:this._err(T.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(T.unexpectedCharacterAfterDoctypeSystemIdentifier),this.state=P.BOGUS_DOCTYPE,this._stateBogusDoctype(e);}}_stateBogusDoctype(e){const t=this.currentToken;switch(e){case a.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=P.DATA;break;case a.NULL:this._err(T.unexpectedNullCharacter);break;case a.EOF:this.emitCurrentDoctype(t),this._emitEOFToken();}}_stateCdataSection(e){switch(e){case a.RIGHT_SQUARE_BRACKET:this.state=P.CDATA_SECTION_BRACKET;break;case a.EOF:this._err(T.eofInCdata),this._emitEOFToken();break;default:this._emitCodePoint(e);}}_stateCdataSectionBracket(e){e===a.RIGHT_SQUARE_BRACKET?this.state=P.CDATA_SECTION_END:(this._emitChars("]"),this.state=P.CDATA_SECTION,this._stateCdataSection(e));}_stateCdataSectionEnd(e){switch(e){case a.GREATER_THAN_SIGN:this.state=P.DATA;break;case a.RIGHT_SQUARE_BRACKET:this._emitChars("]");break;default:this._emitChars("]]"),this.state=P.CDATA_SECTION,this._stateCdataSection(e);}}_stateCharacterReference(e){e===a.NUMBER_SIGN?this.state=P.NUMERIC_CHARACTER_REFERENCE:U(e)?(this.state=P.NAMED_CHARACTER_REFERENCE,this._stateNamedCharacterReference(e)):(this._flushCodePointConsumedAsCharacterReference(a.AMPERSAND),this._reconsumeInState(this.returnState,e));}_stateNamedCharacterReference(e){const t=this._matchNamedCharacterReference(e);if(this._ensureHibernation());else if(t){for(let e=0;e<t.length;e++)this._flushCodePointConsumedAsCharacterReference(t[e]);this.state=this.returnState;}else this._flushCodePointConsumedAsCharacterReference(a.AMPERSAND),this.state=P.AMBIGUOUS_AMPERSAND;}_stateAmbiguousAmpersand(e){U(e)?this._flushCodePointConsumedAsCharacterReference(e):(e===a.SEMICOLON&&this._err(T.unknownNamedCharacterReference),this._reconsumeInState(this.returnState,e));}_stateNumericCharacterReference(e){this.charRefCode=0,e===a.LATIN_SMALL_X||e===a.LATIN_CAPITAL_X?this.state=P.HEXADEMICAL_CHARACTER_REFERENCE_START:B(e)?(this.state=P.DECIMAL_CHARACTER_REFERENCE,this._stateDecimalCharacterReference(e)):(this._err(T.absenceOfDigitsInNumericCharacterReference),this._flushCodePointConsumedAsCharacterReference(a.AMPERSAND),this._flushCodePointConsumedAsCharacterReference(a.NUMBER_SIGN),this._reconsumeInState(this.returnState,e));}_stateHexademicalCharacterReferenceStart(e){!function(e){return B(e)||G(e)||y(e)}(e)?(this._err(T.absenceOfDigitsInNumericCharacterReference),this._flushCodePointConsumedAsCharacterReference(a.AMPERSAND),this._flushCodePointConsumedAsCharacterReference(a.NUMBER_SIGN),this._unconsume(2),this.state=this.returnState):(this.state=P.HEXADEMICAL_CHARACTER_REFERENCE,this._stateHexademicalCharacterReference(e));}_stateHexademicalCharacterReference(e){G(e)?this.charRefCode=16*this.charRefCode+e-55:y(e)?this.charRefCode=16*this.charRefCode+e-87:B(e)?this.charRefCode=16*this.charRefCode+e-48:e===a.SEMICOLON?this.state=P.NUMERIC_CHARACTER_REFERENCE_END:(this._err(T.missingSemicolonAfterCharacterReference),this.state=P.NUMERIC_CHARACTER_REFERENCE_END,this._stateNumericCharacterReferenceEnd(e));}_stateDecimalCharacterReference(e){B(e)?this.charRefCode=10*this.charRefCode+e-48:e===a.SEMICOLON?this.state=P.NUMERIC_CHARACTER_REFERENCE_END:(this._err(T.missingSemicolonAfterCharacterReference),this.state=P.NUMERIC_CHARACTER_REFERENCE_END,this._stateNumericCharacterReferenceEnd(e));}_stateNumericCharacterReferenceEnd(e){if(this.charRefCode===a.NULL)this._err(T.nullCharacterReference),this.charRefCode=a.REPLACEMENT_CHARACTER;else if(this.charRefCode>1114111)this._err(T.characterReferenceOutsideUnicodeRange),this.charRefCode=a.REPLACEMENT_CHARACTER;else if(o(this.charRefCode))this._err(T.surrogateCharacterReference),this.charRefCode=a.REPLACEMENT_CHARACTER;else if(E(this.charRefCode))this._err(T.noncharacterCharacterReference);else if(c(this.charRefCode)||this.charRefCode===a.CARRIAGE_RETURN){this._err(T.controlCharacterReference);const e=k.get(this.charRefCode);void 0!==e&&(this.charRefCode=e);}this._flushCodePointConsumedAsCharacterReference(this.charRefCode),this._reconsumeInState(this.returnState,e);}}const Q=new Set([u.DD,u.DT,u.LI,u.OPTGROUP,u.OPTION,u.P,u.RB,u.RP,u.RT,u.RTC]),q=new Set([...Q,u.CAPTION,u.COLGROUP,u.TBODY,u.TD,u.TFOOT,u.TH,u.THEAD,u.TR]),W=new Map([[u.APPLET,p.HTML],[u.CAPTION,p.HTML],[u.HTML,p.HTML],[u.MARQUEE,p.HTML],[u.OBJECT,p.HTML],[u.TABLE,p.HTML],[u.TD,p.HTML],[u.TEMPLATE,p.HTML],[u.TH,p.HTML],[u.ANNOTATION_XML,p.MATHML],[u.MI,p.MATHML],[u.MN,p.MATHML],[u.MO,p.MATHML],[u.MS,p.MATHML],[u.MTEXT,p.MATHML],[u.DESC,p.SVG],[u.FOREIGN_OBJECT,p.SVG],[u.TITLE,p.SVG]]),X=[u.H1,u.H2,u.H3,u.H4,u.H5,u.H6],K=[u.TR,u.TEMPLATE,u.HTML],V=[u.TBODY,u.TFOOT,u.THEAD,u.TEMPLATE,u.HTML],z=[u.TABLE,u.TEMPLATE,u.HTML],j=[u.TD,u.TH];class J{get currentTmplContentOrNode(){return this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):this.current}constructor(e,t,s){this.treeAdapter=t,this.handler=s,this.items=[],this.tagIDs=[],this.stackTop=-1,this.tmplCount=0,this.currentTagId=u.UNKNOWN,this.current=e;}_indexOf(e){return this.items.lastIndexOf(e,this.stackTop)}_isInTemplate(){return this.currentTagId===u.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===p.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagId=this.tagIDs[this.stackTop];}push(e,t){this.stackTop++,this.items[this.stackTop]=e,this.current=e,this.tagIDs[this.stackTop]=t,this.currentTagId=t,this._isInTemplate()&&this.tmplCount++,this.handler.onItemPush(e,t,!0);}pop(){const e=this.current;this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!0);}replace(e,t){const s=this._indexOf(e);this.items[s]=t,s===this.stackTop&&(this.current=t);}insertAfter(e,t,s){const a=this._indexOf(e)+1;this.items.splice(a,0,t),this.tagIDs.splice(a,0,s),this.stackTop++,a===this.stackTop&&this._updateCurrentElement(),this.handler.onItemPush(this.current,this.currentTagId,a===this.stackTop);}popUntilTagNamePopped(e){let t=this.stackTop+1;do{t=this.tagIDs.lastIndexOf(e,t-1);}while(t>0&&this.treeAdapter.getNamespaceURI(this.items[t])!==p.HTML);this.shortenToLength(t<0?0:t);}shortenToLength(e){for(;this.stackTop>=e;){const t=this.current;this.tmplCount>0&&this._isInTemplate()&&(this.tmplCount-=1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(t,this.stackTop<e);}}popUntilElementPopped(e){const t=this._indexOf(e);this.shortenToLength(t<0?0:t);}popUntilPopped(e,t){const s=this._indexOfTagNames(e,t);this.shortenToLength(s<0?0:s);}popUntilNumberedHeaderPopped(){this.popUntilPopped(X,p.HTML);}popUntilTableCellPopped(){this.popUntilPopped(j,p.HTML);}popAllUpToHtmlElement(){this.tmplCount=0,this.shortenToLength(1);}_indexOfTagNames(e,t){for(let s=this.stackTop;s>=0;s--)if(e.includes(this.tagIDs[s])&&this.treeAdapter.getNamespaceURI(this.items[s])===t)return s;return -1}clearBackTo(e,t){const s=this._indexOfTagNames(e,t);this.shortenToLength(s+1);}clearBackToTableContext(){this.clearBackTo(z,p.HTML);}clearBackToTableBodyContext(){this.clearBackTo(V,p.HTML);}clearBackToTableRowContext(){this.clearBackTo(K,p.HTML);}remove(e){const t=this._indexOf(e);t>=0&&(t===this.stackTop?this.pop():(this.items.splice(t,1),this.tagIDs.splice(t,1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!1)));}tryPeekProperlyNestedBodyElement(){return this.stackTop>=1&&this.tagIDs[1]===u.BODY?this.items[1]:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){const t=this._indexOf(e)-1;return t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.tagIDs[0]===u.HTML}hasInScope(e){for(let t=this.stackTop;t>=0;t--){const s=this.tagIDs[t],a=this.treeAdapter.getNamespaceURI(this.items[t]);if(s===e&&a===p.HTML)return !0;if(W.get(s)===a)return !1}return !0}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.tagIDs[e],s=this.treeAdapter.getNamespaceURI(this.items[e]);if(g(t)&&s===p.HTML)return !0;if(W.get(t)===s)return !1}return !0}hasInListItemScope(e){for(let t=this.stackTop;t>=0;t--){const s=this.tagIDs[t],a=this.treeAdapter.getNamespaceURI(this.items[t]);if(s===e&&a===p.HTML)return !0;if((s===u.UL||s===u.OL)&&a===p.HTML||W.get(s)===a)return !1}return !0}hasInButtonScope(e){for(let t=this.stackTop;t>=0;t--){const s=this.tagIDs[t],a=this.treeAdapter.getNamespaceURI(this.items[t]);if(s===e&&a===p.HTML)return !0;if(s===u.BUTTON&&a===p.HTML||W.get(s)===a)return !1}return !0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--){const s=this.tagIDs[t];if(this.treeAdapter.getNamespaceURI(this.items[t])===p.HTML){if(s===e)return !0;if(s===u.TABLE||s===u.TEMPLATE||s===u.HTML)return !1}}return !0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--){const t=this.tagIDs[e];if(this.treeAdapter.getNamespaceURI(this.items[e])===p.HTML){if(t===u.TBODY||t===u.THEAD||t===u.TFOOT)return !0;if(t===u.TABLE||t===u.HTML)return !1}}return !0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--){const s=this.tagIDs[t];if(this.treeAdapter.getNamespaceURI(this.items[t])===p.HTML){if(s===e)return !0;if(s!==u.OPTION&&s!==u.OPTGROUP)return !1}}return !0}generateImpliedEndTags(){for(;Q.has(this.currentTagId);)this.pop();}generateImpliedEndTagsThoroughly(){for(;q.has(this.currentTagId);)this.pop();}generateImpliedEndTagsWithExclusion(e){for(;this.currentTagId!==e&&q.has(this.currentTagId);)this.pop();}}var Z;!function(e){e[e.Marker=0]="Marker",e[e.Element=1]="Element";}(Z=Z||(Z={}));const $={type:Z.Marker};class ee{constructor(e){this.treeAdapter=e,this.entries=[],this.bookmark=null;}_getNoahArkConditionCandidates(e,t){const s=[],a=t.length,r=this.treeAdapter.getTagName(e),n=this.treeAdapter.getNamespaceURI(e);for(let e=0;e<this.entries.length;e++){const t=this.entries[e];if(t.type===Z.Marker)break;const{element:i}=t;if(this.treeAdapter.getTagName(i)===r&&this.treeAdapter.getNamespaceURI(i)===n){const t=this.treeAdapter.getAttrList(i);t.length===a&&s.push({idx:e,attrs:t});}}return s}_ensureNoahArkCondition(e){if(this.entries.length<3)return;const t=this.treeAdapter.getAttrList(e),s=this._getNoahArkConditionCandidates(e,t);if(s.length<3)return;const a=new Map(t.map((e=>[e.name,e.value])));let r=0;for(let e=0;e<s.length;e++){const t=s[e];t.attrs.every((e=>a.get(e.name)===e.value))&&(r+=1,r>=3&&this.entries.splice(t.idx,1));}}insertMarker(){this.entries.unshift($);}pushElement(e,t){this._ensureNoahArkCondition(e),this.entries.unshift({type:Z.Element,element:e,token:t});}insertElementAfterBookmark(e,t){const s=this.entries.indexOf(this.bookmark);this.entries.splice(s,0,{type:Z.Element,element:e,token:t});}removeEntry(e){const t=this.entries.indexOf(e);t>=0&&this.entries.splice(t,1);}clearToLastMarker(){const e=this.entries.indexOf($);e>=0?this.entries.splice(0,e+1):this.entries.length=0;}getElementEntryInScopeWithTagName(e){const t=this.entries.find((t=>t.type===Z.Marker||this.treeAdapter.getTagName(t.element)===e));return t&&t.type===Z.Element?t:null}getElementEntry(e){return this.entries.find((t=>t.type===Z.Element&&t.element===e))}}function te(e){return {nodeName:"#text",value:e,parentNode:null}}const se={createDocument:()=>({nodeName:"#document",mode:I.NO_QUIRKS,childNodes:[]}),createDocumentFragment:()=>({nodeName:"#document-fragment",childNodes:[]}),createElement:(e,t,s)=>({nodeName:e,tagName:e,attrs:s,namespaceURI:t,childNodes:[],parentNode:null}),createCommentNode:e=>({nodeName:"#comment",data:e,parentNode:null}),appendChild(e,t){e.childNodes.push(t),t.parentNode=e;},insertBefore(e,t,s){const a=e.childNodes.indexOf(s);e.childNodes.splice(a,0,t),t.parentNode=e;},setTemplateContent(e,t){e.content=t;},getTemplateContent:e=>e.content,setDocumentType(e,t,s,a){const r=e.childNodes.find((e=>"#documentType"===e.nodeName));if(r)r.name=t,r.publicId=s,r.systemId=a;else {const r={nodeName:"#documentType",name:t,publicId:s,systemId:a,parentNode:null};se.appendChild(e,r);}},setDocumentMode(e,t){e.mode=t;},getDocumentMode:e=>e.mode,detachNode(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null;}},insertText(e,t){if(e.childNodes.length>0){const s=e.childNodes[e.childNodes.length-1];if(se.isTextNode(s))return void(s.value+=t)}se.appendChild(e,te(t));},insertTextBefore(e,t,s){const a=e.childNodes[e.childNodes.indexOf(s)-1];a&&se.isTextNode(a)?a.value+=t:se.insertBefore(e,te(t),s);},adoptAttributes(e,t){const s=new Set(e.attrs.map((e=>e.name)));for(let a=0;a<t.length;a++)s.has(t[a].name)||e.attrs.push(t[a]);},getFirstChild:e=>e.childNodes[0],getChildNodes:e=>e.childNodes,getParentNode:e=>e.parentNode,getAttrList:e=>e.attrs,getTagName:e=>e.tagName,getNamespaceURI:e=>e.namespaceURI,getTextNodeContent:e=>e.value,getCommentNodeContent:e=>e.data,getDocumentTypeNodeName:e=>e.name,getDocumentTypeNodePublicId:e=>e.publicId,getDocumentTypeNodeSystemId:e=>e.systemId,isTextNode:e=>"#text"===e.nodeName,isCommentNode:e=>"#comment"===e.nodeName,isDocumentTypeNode:e=>"#documentType"===e.nodeName,isElementNode:e=>Object.prototype.hasOwnProperty.call(e,"tagName"),setNodeSourceCodeLocation(e,t){e.sourceCodeLocation=t;},getNodeSourceCodeLocation:e=>e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){e.sourceCodeLocation={...e.sourceCodeLocation,...t};}},ae="html",re=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],ne=[...re,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"],ie=new Set(["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"]),oe=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],ce=[...oe,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"];function Ee(e,t){return t.some((t=>e.startsWith(t)))}const Te="text/html",he="application/xhtml+xml",_e="definitionurl",Ae="definitionURL",le=new Map(["attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),me=new Map([["xlink:actuate",{prefix:"xlink",name:"actuate",namespace:p.XLINK}],["xlink:arcrole",{prefix:"xlink",name:"arcrole",namespace:p.XLINK}],["xlink:href",{prefix:"xlink",name:"href",namespace:p.XLINK}],["xlink:role",{prefix:"xlink",name:"role",namespace:p.XLINK}],["xlink:show",{prefix:"xlink",name:"show",namespace:p.XLINK}],["xlink:title",{prefix:"xlink",name:"title",namespace:p.XLINK}],["xlink:type",{prefix:"xlink",name:"type",namespace:p.XLINK}],["xml:base",{prefix:"xml",name:"base",namespace:p.XML}],["xml:lang",{prefix:"xml",name:"lang",namespace:p.XML}],["xml:space",{prefix:"xml",name:"space",namespace:p.XML}],["xmlns",{prefix:"",name:"xmlns",namespace:p.XMLNS}],["xmlns:xlink",{prefix:"xmlns",name:"xlink",namespace:p.XMLNS}]]),pe=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e]))),de=new Set([u.B,u.BIG,u.BLOCKQUOTE,u.BODY,u.BR,u.CENTER,u.CODE,u.DD,u.DIV,u.DL,u.DT,u.EM,u.EMBED,u.H1,u.H2,u.H3,u.H4,u.H5,u.H6,u.HEAD,u.HR,u.I,u.IMG,u.LI,u.LISTING,u.MENU,u.META,u.NOBR,u.OL,u.P,u.PRE,u.RUBY,u.S,u.SMALL,u.SPAN,u.STRONG,u.STRIKE,u.SUB,u.SUP,u.TABLE,u.TT,u.U,u.UL,u.VAR]);function Ie(e){for(let t=0;t<e.attrs.length;t++)if(e.attrs[t].name===_e){e.attrs[t].name=Ae;break}}function Ne(e){for(let t=0;t<e.attrs.length;t++){const s=le.get(e.attrs[t].name);null!=s&&(e.attrs[t].name=s);}}function ue(e){for(let t=0;t<e.attrs.length;t++){const s=me.get(e.attrs[t].name);s&&(e.attrs[t].prefix=s.prefix,e.attrs[t].name=s.name,e.attrs[t].namespace=s.namespace);}}const Ce="hidden",De=8,Se=3;var Re;!function(e){e[e.INITIAL=0]="INITIAL",e[e.BEFORE_HTML=1]="BEFORE_HTML",e[e.BEFORE_HEAD=2]="BEFORE_HEAD",e[e.IN_HEAD=3]="IN_HEAD",e[e.IN_HEAD_NO_SCRIPT=4]="IN_HEAD_NO_SCRIPT",e[e.AFTER_HEAD=5]="AFTER_HEAD",e[e.IN_BODY=6]="IN_BODY",e[e.TEXT=7]="TEXT",e[e.IN_TABLE=8]="IN_TABLE",e[e.IN_TABLE_TEXT=9]="IN_TABLE_TEXT",e[e.IN_CAPTION=10]="IN_CAPTION",e[e.IN_COLUMN_GROUP=11]="IN_COLUMN_GROUP",e[e.IN_TABLE_BODY=12]="IN_TABLE_BODY",e[e.IN_ROW=13]="IN_ROW",e[e.IN_CELL=14]="IN_CELL",e[e.IN_SELECT=15]="IN_SELECT",e[e.IN_SELECT_IN_TABLE=16]="IN_SELECT_IN_TABLE",e[e.IN_TEMPLATE=17]="IN_TEMPLATE",e[e.AFTER_BODY=18]="AFTER_BODY",e[e.IN_FRAMESET=19]="IN_FRAMESET",e[e.AFTER_FRAMESET=20]="AFTER_FRAMESET",e[e.AFTER_AFTER_BODY=21]="AFTER_AFTER_BODY",e[e.AFTER_AFTER_FRAMESET=22]="AFTER_AFTER_FRAMESET";}(Re||(Re={}));const Oe={startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1},fe=new Set([u.TABLE,u.TBODY,u.TFOOT,u.THEAD,u.TR]),Le={scriptingEnabled:!0,sourceCodeLocationInfo:!1,treeAdapter:se,onParseError:null};class Me{constructor(e,t,s=null,a=null){this.fragmentContext=s,this.scriptHandler=a,this.currentToken=null,this.stopped=!1,this.insertionMode=Re.INITIAL,this.originalInsertionMode=Re.INITIAL,this.headElement=null,this.formElement=null,this.currentNotInHTML=!1,this.tmplInsertionModeStack=[],this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1,this.options={...Le,...e},this.treeAdapter=this.options.treeAdapter,this.onParseError=this.options.onParseError,this.onParseError&&(this.options.sourceCodeLocationInfo=!0),this.document=null!=t?t:this.treeAdapter.createDocument(),this.tokenizer=new v(this.options,this),this.activeFormattingElements=new ee(this.treeAdapter),this.fragmentContextID=s?f(this.treeAdapter.getTagName(s)):u.UNKNOWN,this._setContextModes(null!=s?s:this.document,this.fragmentContextID),this.openElements=new J(this.document,this.treeAdapter,this);}static parse(e,t){const s=new this(t);return s.tokenizer.write(e,!0),s.document}static getFragmentParser(e,t){const s={...Le,...t};null!=e||(e=s.treeAdapter.createElement(N.TEMPLATE,p.HTML,[]));const a=s.treeAdapter.createElement("documentmock",p.HTML,[]),r=new this(s,a,e);return r.fragmentContextID===u.TEMPLATE&&r.tmplInsertionModeStack.unshift(Re.IN_TEMPLATE),r._initTokenizerForFragmentParsing(),r._insertFakeRootElement(),r._resetInsertionMode(),r._findFormInFragmentContext(),r}getFragment(){const e=this.treeAdapter.getFirstChild(this.document),t=this.treeAdapter.createDocumentFragment();return this._adoptNodes(e,t),t}_err(e,t,s){var a;if(!this.onParseError)return;const r=null!==(a=e.location)&&void 0!==a?a:Oe,n={code:t,startLine:r.startLine,startCol:r.startCol,startOffset:r.startOffset,endLine:s?r.startLine:r.endLine,endCol:s?r.startCol:r.endCol,endOffset:s?r.startOffset:r.endOffset};this.onParseError(n);}onItemPush(e,t,s){var a,r;null===(r=(a=this.treeAdapter).onItemPush)||void 0===r||r.call(a,e),s&&this.openElements.stackTop>0&&this._setContextModes(e,t);}onItemPop(e,t){var s,a;if(this.options.sourceCodeLocationInfo&&this._setEndLocation(e,this.currentToken),null===(a=(s=this.treeAdapter).onItemPop)||void 0===a||a.call(s,e,this.openElements.current),t){let e,t;0===this.openElements.stackTop&&this.fragmentContext?(e=this.fragmentContext,t=this.fragmentContextID):({current:e,currentTagId:t}=this.openElements),this._setContextModes(e,t);}}_setContextModes(e,t){const s=e===this.document||this.treeAdapter.getNamespaceURI(e)===p.HTML;this.currentNotInHTML=!s,this.tokenizer.inForeignNode=!s&&!this._isIntegrationPoint(t,e);}_switchToTextParsing(e,t){this._insertElement(e,p.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=Re.TEXT;}switchToPlaintextParsing(){this.insertionMode=Re.TEXT,this.originalInsertionMode=Re.IN_BODY,this.tokenizer.state=b.PLAINTEXT;}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;for(;e;){if(this.treeAdapter.getTagName(e)===N.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e);}}_initTokenizerForFragmentParsing(){if(this.fragmentContext&&this.treeAdapter.getNamespaceURI(this.fragmentContext)===p.HTML)switch(this.fragmentContextID){case u.TITLE:case u.TEXTAREA:this.tokenizer.state=b.RCDATA;break;case u.STYLE:case u.XMP:case u.IFRAME:case u.NOEMBED:case u.NOFRAMES:case u.NOSCRIPT:this.tokenizer.state=b.RAWTEXT;break;case u.SCRIPT:this.tokenizer.state=b.SCRIPT_DATA;break;case u.PLAINTEXT:this.tokenizer.state=b.PLAINTEXT;}}_setDocumentType(e){const t=e.name||"",s=e.publicId||"",a=e.systemId||"";if(this.treeAdapter.setDocumentType(this.document,t,s,a),e.location){const t=this.treeAdapter.getChildNodes(this.document).find((e=>this.treeAdapter.isDocumentTypeNode(e)));t&&this.treeAdapter.setNodeSourceCodeLocation(t,e.location);}}_attachElementToTree(e,t){if(this.options.sourceCodeLocationInfo){const s=t&&{...t,startTag:t};this.treeAdapter.setNodeSourceCodeLocation(e,s);}if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else {const t=this.openElements.currentTmplContentOrNode;this.treeAdapter.appendChild(t,e);}}_appendElement(e,t){const s=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(s,e.location);}_insertElement(e,t){const s=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(s,e.location),this.openElements.push(s,e.tagID);}_insertFakeElement(e,t){const s=this.treeAdapter.createElement(e,p.HTML,[]);this._attachElementToTree(s,null),this.openElements.push(s,t);}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,p.HTML,e.attrs),s=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,s),this._attachElementToTree(t,e.location),this.openElements.push(t,e.tagID),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(s,null);}_insertFakeRootElement(){const e=this.treeAdapter.createElement(N.HTML,p.HTML,[]);this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(e,null),this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e,u.HTML);}_appendCommentNode(e,t){const s=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,s),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(s,e.location);}_insertCharacters(e){let t,s;if(this._shouldFosterParentOnInsertion()?(({parent:t,beforeElement:s}=this._findFosterParentingLocation()),s?this.treeAdapter.insertTextBefore(t,e.chars,s):this.treeAdapter.insertText(t,e.chars)):(t=this.openElements.currentTmplContentOrNode,this.treeAdapter.insertText(t,e.chars)),!e.location)return;const a=this.treeAdapter.getChildNodes(t),r=s?a.lastIndexOf(s):a.length,n=a[r-1];if(this.treeAdapter.getNodeSourceCodeLocation(n)){const{endLine:t,endCol:s,endOffset:a}=e.location;this.treeAdapter.updateNodeSourceCodeLocation(n,{endLine:t,endCol:s,endOffset:a});}else this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(n,e.location);}_adoptNodes(e,t){for(let s=this.treeAdapter.getFirstChild(e);s;s=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(s),this.treeAdapter.appendChild(t,s);}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const s=t.location,a=this.treeAdapter.getTagName(e),r=t.type===h.END_TAG&&a===t.tagName?{endTag:{...s},endLine:s.endLine,endCol:s.endCol,endOffset:s.endOffset}:{endLine:s.startLine,endCol:s.startCol,endOffset:s.startOffset};this.treeAdapter.updateNodeSourceCodeLocation(e,r);}}shouldProcessStartTagTokenInForeignContent(e){if(!this.currentNotInHTML)return !1;let t,s;return 0===this.openElements.stackTop&&this.fragmentContext?(t=this.fragmentContext,s=this.fragmentContextID):({current:t,currentTagId:s}=this.openElements),(e.tagID!==u.SVG||this.treeAdapter.getTagName(t)!==N.ANNOTATION_XML||this.treeAdapter.getNamespaceURI(t)!==p.MATHML)&&(this.tokenizer.inForeignNode||(e.tagID===u.MGLYPH||e.tagID===u.MALIGNMARK)&&!this._isIntegrationPoint(s,t,p.HTML))}_processToken(e){switch(e.type){case h.CHARACTER:this.onCharacter(e);break;case h.NULL_CHARACTER:this.onNullCharacter(e);break;case h.COMMENT:this.onComment(e);break;case h.DOCTYPE:this.onDoctype(e);break;case h.START_TAG:this._processStartTag(e);break;case h.END_TAG:this.onEndTag(e);break;case h.EOF:this.onEof(e);break;case h.WHITESPACE_CHARACTER:this.onWhitespaceCharacter(e);}}_isIntegrationPoint(e,t,s){return function(e,t,s,a){return (!a||a===p.HTML)&&function(e,t,s){if(t===p.MATHML&&e===u.ANNOTATION_XML)for(let e=0;e<s.length;e++)if(s[e].name===d.ENCODING){const t=s[e].value.toLowerCase();return t===Te||t===he}return t===p.SVG&&(e===u.FOREIGN_OBJECT||e===u.DESC||e===u.TITLE)}(e,t,s)||(!a||a===p.MATHML)&&function(e,t){return t===p.MATHML&&(e===u.MI||e===u.MO||e===u.MN||e===u.MS||e===u.MTEXT)}(e,t)}(e,this.treeAdapter.getNamespaceURI(t),this.treeAdapter.getAttrList(t),s)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.entries.length;if(e){const t=this.activeFormattingElements.entries.findIndex((e=>e.type===Z.Marker||this.openElements.contains(e.element)));for(let s=t<0?e-1:t-1;s>=0;s--){const e=this.activeFormattingElements.entries[s];this._insertElement(e.token,this.treeAdapter.getNamespaceURI(e.element)),e.element=this.openElements.current;}}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=Re.IN_ROW;}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(u.P),this.openElements.popUntilTagNamePopped(u.P);}_resetInsertionMode(){for(let e=this.openElements.stackTop;e>=0;e--)switch(0===e&&this.fragmentContext?this.fragmentContextID:this.openElements.tagIDs[e]){case u.TR:return void(this.insertionMode=Re.IN_ROW);case u.TBODY:case u.THEAD:case u.TFOOT:return void(this.insertionMode=Re.IN_TABLE_BODY);case u.CAPTION:return void(this.insertionMode=Re.IN_CAPTION);case u.COLGROUP:return void(this.insertionMode=Re.IN_COLUMN_GROUP);case u.TABLE:return void(this.insertionMode=Re.IN_TABLE);case u.BODY:return void(this.insertionMode=Re.IN_BODY);case u.FRAMESET:return void(this.insertionMode=Re.IN_FRAMESET);case u.SELECT:return void this._resetInsertionModeForSelect(e);case u.TEMPLATE:return void(this.insertionMode=this.tmplInsertionModeStack[0]);case u.HTML:return void(this.insertionMode=this.headElement?Re.AFTER_HEAD:Re.BEFORE_HEAD);case u.TD:case u.TH:if(e>0)return void(this.insertionMode=Re.IN_CELL);break;case u.HEAD:if(e>0)return void(this.insertionMode=Re.IN_HEAD)}this.insertionMode=Re.IN_BODY;}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.tagIDs[t];if(e===u.TEMPLATE)break;if(e===u.TABLE)return void(this.insertionMode=Re.IN_SELECT_IN_TABLE)}this.insertionMode=Re.IN_SELECT;}_isElementCausesFosterParenting(e){return fe.has(e)}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.currentTagId)}_findFosterParentingLocation(){for(let e=this.openElements.stackTop;e>=0;e--){const t=this.openElements.items[e];switch(this.openElements.tagIDs[e]){case u.TEMPLATE:if(this.treeAdapter.getNamespaceURI(t)===p.HTML)return {parent:this.treeAdapter.getTemplateContent(t),beforeElement:null};break;case u.TABLE:{const s=this.treeAdapter.getParentNode(t);return s?{parent:s,beforeElement:t}:{parent:this.openElements.items[e-1],beforeElement:null}}}}return {parent:this.openElements.items[0],beforeElement:null}}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e);}_isSpecialElement(e,t){const s=this.treeAdapter.getNamespaceURI(e);return M[s].has(t)}onCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){e._insertCharacters(t),e.framesetOk=!1;}(this,e);else switch(this.insertionMode){case Re.INITIAL:ye(this,e);break;case Re.BEFORE_HTML:we(this,e);break;case Re.BEFORE_HEAD:Ye(this,e);break;case Re.IN_HEAD:Qe(this,e);break;case Re.IN_HEAD_NO_SCRIPT:qe(this,e);break;case Re.AFTER_HEAD:We(this,e);break;case Re.IN_BODY:case Re.IN_CAPTION:case Re.IN_CELL:case Re.IN_TEMPLATE:Ve(this,e);break;case Re.TEXT:case Re.IN_SELECT:case Re.IN_SELECT_IN_TABLE:this._insertCharacters(e);break;case Re.IN_TABLE:case Re.IN_TABLE_BODY:case Re.IN_ROW:at(this,e);break;case Re.IN_TABLE_TEXT:ct(this,e);break;case Re.IN_COLUMN_GROUP:_t(this,e);break;case Re.AFTER_BODY:Ct(this,e);break;case Re.AFTER_AFTER_BODY:Dt(this,e);}}onNullCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){t.chars=s,e._insertCharacters(t);}(this,e);else switch(this.insertionMode){case Re.INITIAL:ye(this,e);break;case Re.BEFORE_HTML:we(this,e);break;case Re.BEFORE_HEAD:Ye(this,e);break;case Re.IN_HEAD:Qe(this,e);break;case Re.IN_HEAD_NO_SCRIPT:qe(this,e);break;case Re.AFTER_HEAD:We(this,e);break;case Re.TEXT:this._insertCharacters(e);break;case Re.IN_TABLE:case Re.IN_TABLE_BODY:case Re.IN_ROW:at(this,e);break;case Re.IN_COLUMN_GROUP:_t(this,e);break;case Re.AFTER_BODY:Ct(this,e);break;case Re.AFTER_AFTER_BODY:Dt(this,e);}}onComment(e){if(this.skipNextNewLine=!1,this.currentNotInHTML)Ue(this,e);else switch(this.insertionMode){case Re.INITIAL:case Re.BEFORE_HTML:case Re.BEFORE_HEAD:case Re.IN_HEAD:case Re.IN_HEAD_NO_SCRIPT:case Re.AFTER_HEAD:case Re.IN_BODY:case Re.IN_TABLE:case Re.IN_CAPTION:case Re.IN_COLUMN_GROUP:case Re.IN_TABLE_BODY:case Re.IN_ROW:case Re.IN_CELL:case Re.IN_SELECT:case Re.IN_SELECT_IN_TABLE:case Re.IN_TEMPLATE:case Re.IN_FRAMESET:case Re.AFTER_FRAMESET:Ue(this,e);break;case Re.IN_TABLE_TEXT:Et(this,e);break;case Re.AFTER_BODY:!function(e,t){e._appendCommentNode(t,e.openElements.items[0]);}(this,e);break;case Re.AFTER_AFTER_BODY:case Re.AFTER_AFTER_FRAMESET:!function(e,t){e._appendCommentNode(t,e.document);}(this,e);}}onDoctype(e){switch(this.skipNextNewLine=!1,this.insertionMode){case Re.INITIAL:!function(e,t){e._setDocumentType(t);const s=t.forceQuirks?I.QUIRKS:function(e){if(e.name!==ae)return I.QUIRKS;const{systemId:t}=e;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return I.QUIRKS;let{publicId:s}=e;if(null!==s){if(s=s.toLowerCase(),ie.has(s))return I.QUIRKS;let e=null===t?ne:re;if(Ee(s,e))return I.QUIRKS;if(e=null===t?oe:ce,Ee(s,e))return I.LIMITED_QUIRKS}return I.NO_QUIRKS}(t);(function(e){return e.name===ae&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)})(t)||e._err(t,T.nonConformingDoctype),e.treeAdapter.setDocumentMode(e.document,s),e.insertionMode=Re.BEFORE_HTML;}(this,e);break;case Re.BEFORE_HEAD:case Re.IN_HEAD:case Re.IN_HEAD_NO_SCRIPT:case Re.AFTER_HEAD:this._err(e,T.misplacedDoctype);break;case Re.IN_TABLE_TEXT:Et(this,e);}}onStartTag(e){this.skipNextNewLine=!1,this.currentToken=e,this._processStartTag(e),e.selfClosing&&!e.ackSelfClosing&&this._err(e,T.nonVoidHtmlElementStartTagWithTrailingSolidus);}_processStartTag(e){this.shouldProcessStartTagTokenInForeignContent(e)?function(e,t){if(function(e){const t=e.tagID;return t===u.FONT&&e.attrs.some((({name:e})=>e===d.COLOR||e===d.SIZE||e===d.FACE))||de.has(t)}(t))St(e),e._startTagOutsideForeignContent(t);else {const s=e._getAdjustedCurrentElement(),a=e.treeAdapter.getNamespaceURI(s);a===p.MATHML?Ie(t):a===p.SVG&&(function(e){const t=pe.get(e.tagName);null!=t&&(e.tagName=t,e.tagID=f(e.tagName));}(t),Ne(t)),ue(t),t.selfClosing?e._appendElement(t,a):e._insertElement(t,a),t.ackSelfClosing=!0;}}(this,e):this._startTagOutsideForeignContent(e);}_startTagOutsideForeignContent(e){switch(this.insertionMode){case Re.INITIAL:ye(this,e);break;case Re.BEFORE_HTML:!function(e,t){t.tagID===u.HTML?(e._insertElement(t,p.HTML),e.insertionMode=Re.BEFORE_HEAD):we(e,t);}(this,e);break;case Re.BEFORE_HEAD:!function(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.HEAD:e._insertElement(t,p.HTML),e.headElement=e.openElements.current,e.insertionMode=Re.IN_HEAD;break;default:Ye(e,t);}}(this,e);break;case Re.IN_HEAD:xe(this,e);break;case Re.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.BASEFONT:case u.BGSOUND:case u.HEAD:case u.LINK:case u.META:case u.NOFRAMES:case u.STYLE:xe(e,t);break;case u.NOSCRIPT:e._err(t,T.nestedNoscriptInHead);break;default:qe(e,t);}}(this,e);break;case Re.AFTER_HEAD:!function(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.BODY:e._insertElement(t,p.HTML),e.framesetOk=!1,e.insertionMode=Re.IN_BODY;break;case u.FRAMESET:e._insertElement(t,p.HTML),e.insertionMode=Re.IN_FRAMESET;break;case u.BASE:case u.BASEFONT:case u.BGSOUND:case u.LINK:case u.META:case u.NOFRAMES:case u.SCRIPT:case u.STYLE:case u.TEMPLATE:case u.TITLE:e._err(t,T.abandonedHeadElementChild),e.openElements.push(e.headElement,u.HEAD),xe(e,t),e.openElements.remove(e.headElement);break;case u.HEAD:e._err(t,T.misplacedStartTagForHeadElement);break;default:We(e,t);}}(this,e);break;case Re.IN_BODY:$e(this,e);break;case Re.IN_TABLE:rt(this,e);break;case Re.IN_TABLE_TEXT:Et(this,e);break;case Re.IN_CAPTION:!function(e,t){const s=t.tagID;Tt.has(s)?e.openElements.hasInTableScope(u.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(u.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Re.IN_TABLE,rt(e,t)):$e(e,t);}(this,e);break;case Re.IN_COLUMN_GROUP:ht(this,e);break;case Re.IN_TABLE_BODY:At(this,e);break;case Re.IN_ROW:mt(this,e);break;case Re.IN_CELL:!function(e,t){const s=t.tagID;Tt.has(s)?(e.openElements.hasInTableScope(u.TD)||e.openElements.hasInTableScope(u.TH))&&(e._closeTableCell(),mt(e,t)):$e(e,t);}(this,e);break;case Re.IN_SELECT:dt(this,e);break;case Re.IN_SELECT_IN_TABLE:!function(e,t){const s=t.tagID;s===u.CAPTION||s===u.TABLE||s===u.TBODY||s===u.TFOOT||s===u.THEAD||s===u.TR||s===u.TD||s===u.TH?(e.openElements.popUntilTagNamePopped(u.SELECT),e._resetInsertionMode(),e._processStartTag(t)):dt(e,t);}(this,e);break;case Re.IN_TEMPLATE:!function(e,t){switch(t.tagID){case u.BASE:case u.BASEFONT:case u.BGSOUND:case u.LINK:case u.META:case u.NOFRAMES:case u.SCRIPT:case u.STYLE:case u.TEMPLATE:case u.TITLE:xe(e,t);break;case u.CAPTION:case u.COLGROUP:case u.TBODY:case u.TFOOT:case u.THEAD:e.tmplInsertionModeStack[0]=Re.IN_TABLE,e.insertionMode=Re.IN_TABLE,rt(e,t);break;case u.COL:e.tmplInsertionModeStack[0]=Re.IN_COLUMN_GROUP,e.insertionMode=Re.IN_COLUMN_GROUP,ht(e,t);break;case u.TR:e.tmplInsertionModeStack[0]=Re.IN_TABLE_BODY,e.insertionMode=Re.IN_TABLE_BODY,At(e,t);break;case u.TD:case u.TH:e.tmplInsertionModeStack[0]=Re.IN_ROW,e.insertionMode=Re.IN_ROW,mt(e,t);break;default:e.tmplInsertionModeStack[0]=Re.IN_BODY,e.insertionMode=Re.IN_BODY,$e(e,t);}}(this,e);break;case Re.AFTER_BODY:!function(e,t){t.tagID===u.HTML?$e(e,t):Ct(e,t);}(this,e);break;case Re.IN_FRAMESET:!function(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.FRAMESET:e._insertElement(t,p.HTML);break;case u.FRAME:e._appendElement(t,p.HTML),t.ackSelfClosing=!0;break;case u.NOFRAMES:xe(e,t);}}(this,e);break;case Re.AFTER_FRAMESET:!function(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.NOFRAMES:xe(e,t);}}(this,e);break;case Re.AFTER_AFTER_BODY:!function(e,t){t.tagID===u.HTML?$e(e,t):Dt(e,t);}(this,e);break;case Re.AFTER_AFTER_FRAMESET:!function(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.NOFRAMES:xe(e,t);}}(this,e);}}onEndTag(e){this.skipNextNewLine=!1,this.currentToken=e,this.currentNotInHTML?function(e,t){if(t.tagID===u.P||t.tagID===u.BR)return St(e),void e._endTagOutsideForeignContent(t);for(let s=e.openElements.stackTop;s>0;s--){const a=e.openElements.items[s];if(e.treeAdapter.getNamespaceURI(a)===p.HTML){e._endTagOutsideForeignContent(t);break}const r=e.treeAdapter.getTagName(a);if(r.toLowerCase()===t.tagName){t.tagName=r,e.openElements.shortenToLength(s);break}}}(this,e):this._endTagOutsideForeignContent(e);}_endTagOutsideForeignContent(e){switch(this.insertionMode){case Re.INITIAL:ye(this,e);break;case Re.BEFORE_HTML:!function(e,t){const s=t.tagID;s!==u.HTML&&s!==u.HEAD&&s!==u.BODY&&s!==u.BR||we(e,t);}(this,e);break;case Re.BEFORE_HEAD:!function(e,t){const s=t.tagID;s===u.HEAD||s===u.BODY||s===u.HTML||s===u.BR?Ye(e,t):e._err(t,T.endTagWithoutMatchingOpenElement);}(this,e);break;case Re.IN_HEAD:!function(e,t){switch(t.tagID){case u.HEAD:e.openElements.pop(),e.insertionMode=Re.AFTER_HEAD;break;case u.BODY:case u.BR:case u.HTML:Qe(e,t);break;case u.TEMPLATE:ve(e,t);break;default:e._err(t,T.endTagWithoutMatchingOpenElement);}}(this,e);break;case Re.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case u.NOSCRIPT:e.openElements.pop(),e.insertionMode=Re.IN_HEAD;break;case u.BR:qe(e,t);break;default:e._err(t,T.endTagWithoutMatchingOpenElement);}}(this,e);break;case Re.AFTER_HEAD:!function(e,t){switch(t.tagID){case u.BODY:case u.HTML:case u.BR:We(e,t);break;case u.TEMPLATE:ve(e,t);break;default:e._err(t,T.endTagWithoutMatchingOpenElement);}}(this,e);break;case Re.IN_BODY:tt(this,e);break;case Re.TEXT:!function(e,t){var s;t.tagID===u.SCRIPT&&(null===(s=e.scriptHandler)||void 0===s||s.call(e,e.openElements.current)),e.openElements.pop(),e.insertionMode=e.originalInsertionMode;}(this,e);break;case Re.IN_TABLE:nt(this,e);break;case Re.IN_TABLE_TEXT:Et(this,e);break;case Re.IN_CAPTION:!function(e,t){const s=t.tagID;switch(s){case u.CAPTION:case u.TABLE:e.openElements.hasInTableScope(u.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(u.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Re.IN_TABLE,s===u.TABLE&&nt(e,t));break;case u.BODY:case u.COL:case u.COLGROUP:case u.HTML:case u.TBODY:case u.TD:case u.TFOOT:case u.TH:case u.THEAD:case u.TR:break;default:tt(e,t);}}(this,e);break;case Re.IN_COLUMN_GROUP:!function(e,t){switch(t.tagID){case u.COLGROUP:e.openElements.currentTagId===u.COLGROUP&&(e.openElements.pop(),e.insertionMode=Re.IN_TABLE);break;case u.TEMPLATE:ve(e,t);break;case u.COL:break;default:_t(e,t);}}(this,e);break;case Re.IN_TABLE_BODY:lt(this,e);break;case Re.IN_ROW:pt(this,e);break;case Re.IN_CELL:!function(e,t){const s=t.tagID;switch(s){case u.TD:case u.TH:e.openElements.hasInTableScope(s)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(s),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Re.IN_ROW);break;case u.TABLE:case u.TBODY:case u.TFOOT:case u.THEAD:case u.TR:e.openElements.hasInTableScope(s)&&(e._closeTableCell(),pt(e,t));break;case u.BODY:case u.CAPTION:case u.COL:case u.COLGROUP:case u.HTML:break;default:tt(e,t);}}(this,e);break;case Re.IN_SELECT:It(this,e);break;case Re.IN_SELECT_IN_TABLE:!function(e,t){const s=t.tagID;s===u.CAPTION||s===u.TABLE||s===u.TBODY||s===u.TFOOT||s===u.THEAD||s===u.TR||s===u.TD||s===u.TH?e.openElements.hasInTableScope(s)&&(e.openElements.popUntilTagNamePopped(u.SELECT),e._resetInsertionMode(),e.onEndTag(t)):It(e,t);}(this,e);break;case Re.IN_TEMPLATE:!function(e,t){t.tagID===u.TEMPLATE&&ve(e,t);}(this,e);break;case Re.AFTER_BODY:ut(this,e);break;case Re.IN_FRAMESET:!function(e,t){t.tagID!==u.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagId===u.FRAMESET||(e.insertionMode=Re.AFTER_FRAMESET));}(this,e);break;case Re.AFTER_FRAMESET:!function(e,t){t.tagID===u.HTML&&(e.insertionMode=Re.AFTER_AFTER_FRAMESET);}(this,e);break;case Re.AFTER_AFTER_BODY:Dt(this,e);}}onEof(e){switch(this.insertionMode){case Re.INITIAL:ye(this,e);break;case Re.BEFORE_HTML:we(this,e);break;case Re.BEFORE_HEAD:Ye(this,e);break;case Re.IN_HEAD:Qe(this,e);break;case Re.IN_HEAD_NO_SCRIPT:qe(this,e);break;case Re.AFTER_HEAD:We(this,e);break;case Re.IN_BODY:case Re.IN_TABLE:case Re.IN_CAPTION:case Re.IN_COLUMN_GROUP:case Re.IN_TABLE_BODY:case Re.IN_ROW:case Re.IN_CELL:case Re.IN_SELECT:case Re.IN_SELECT_IN_TABLE:st(this,e);break;case Re.TEXT:!function(e,t){e._err(t,T.eofInElementThatCanContainOnlyText),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e.onEof(t);}(this,e);break;case Re.IN_TABLE_TEXT:Et(this,e);break;case Re.IN_TEMPLATE:Nt(this,e);break;case Re.AFTER_BODY:case Re.IN_FRAMESET:case Re.AFTER_FRAMESET:case Re.AFTER_AFTER_BODY:case Re.AFTER_AFTER_FRAMESET:Ge(this,e);}}onWhitespaceCharacter(e){if(this.skipNextNewLine&&(this.skipNextNewLine=!1,e.chars.charCodeAt(0)===a.LINE_FEED)){if(1===e.chars.length)return;e.chars=e.chars.substr(1);}if(this.tokenizer.inForeignNode)this._insertCharacters(e);else switch(this.insertionMode){case Re.IN_HEAD:case Re.IN_HEAD_NO_SCRIPT:case Re.AFTER_HEAD:case Re.TEXT:case Re.IN_COLUMN_GROUP:case Re.IN_SELECT:case Re.IN_SELECT_IN_TABLE:case Re.IN_FRAMESET:case Re.AFTER_FRAMESET:this._insertCharacters(e);break;case Re.IN_BODY:case Re.IN_CAPTION:case Re.IN_CELL:case Re.IN_TEMPLATE:case Re.AFTER_BODY:case Re.AFTER_AFTER_BODY:case Re.AFTER_AFTER_FRAMESET:Ke(this,e);break;case Re.IN_TABLE:case Re.IN_TABLE_BODY:case Re.IN_ROW:at(this,e);break;case Re.IN_TABLE_TEXT:ot(this,e);}}}function ge(e,t){let s=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return s?e.openElements.contains(s.element)?e.openElements.hasInScope(t.tagID)||(s=null):(e.activeFormattingElements.removeEntry(s),s=null):et(e,t),s}function ke(e,t){let s=null,a=e.openElements.stackTop;for(;a>=0;a--){const r=e.openElements.items[a];if(r===t.element)break;e._isSpecialElement(r,e.openElements.tagIDs[a])&&(s=r);}return s||(e.openElements.shortenToLength(a<0?0:a),e.activeFormattingElements.removeEntry(t)),s}function Pe(e,t,s){let a=t,r=e.openElements.getCommonAncestor(t);for(let n=0,i=r;i!==s;n++,i=r){r=e.openElements.getCommonAncestor(i);const s=e.activeFormattingElements.getElementEntry(i),o=s&&n>=Se;!s||o?(o&&e.activeFormattingElements.removeEntry(s),e.openElements.remove(i)):(i=be(e,s),a===t&&(e.activeFormattingElements.bookmark=s),e.treeAdapter.detachNode(a),e.treeAdapter.appendChild(i,a),a=i);}return a}function be(e,t){const s=e.treeAdapter.getNamespaceURI(t.element),a=e.treeAdapter.createElement(t.token.tagName,s,t.token.attrs);return e.openElements.replace(t.element,a),t.element=a,a}function Be(e,t,s){const a=f(e.treeAdapter.getTagName(t));if(e._isElementCausesFosterParenting(a))e._fosterParentElement(s);else {const r=e.treeAdapter.getNamespaceURI(t);a===u.TEMPLATE&&r===p.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,s);}}function He(e,t,s){const a=e.treeAdapter.getNamespaceURI(s.element),{token:r}=s,n=e.treeAdapter.createElement(r.tagName,a,r.attrs);e._adoptNodes(t,n),e.treeAdapter.appendChild(t,n),e.activeFormattingElements.insertElementAfterBookmark(n,r),e.activeFormattingElements.removeEntry(s),e.openElements.remove(s.element),e.openElements.insertAfter(t,n,r.tagID);}function Fe(e,t){for(let s=0;s<De;s++){const s=ge(e,t);if(!s)break;const a=ke(e,s);if(!a)break;e.activeFormattingElements.bookmark=s;const r=Pe(e,a,s.element),n=e.openElements.getCommonAncestor(s.element);e.treeAdapter.detachNode(r),n&&Be(e,n,r),He(e,a,s);}}function Ue(e,t){e._appendCommentNode(t,e.openElements.currentTmplContentOrNode);}function Ge(e,t){if(e.stopped=!0,t.location){const s=e.fragmentContext?0:2;for(let a=e.openElements.stackTop;a>=s;a--)e._setEndLocation(e.openElements.items[a],t);if(!e.fragmentContext&&e.openElements.stackTop>=0){const s=e.openElements.items[0],a=e.treeAdapter.getNodeSourceCodeLocation(s);if(a&&!a.endTag&&(e._setEndLocation(s,t),e.openElements.stackTop>=1)){const s=e.openElements.items[1],a=e.treeAdapter.getNodeSourceCodeLocation(s);a&&!a.endTag&&e._setEndLocation(s,t);}}}}function ye(e,t){e._err(t,T.missingDoctype,!0),e.treeAdapter.setDocumentMode(e.document,I.QUIRKS),e.insertionMode=Re.BEFORE_HTML,e._processToken(t);}function we(e,t){e._insertFakeRootElement(),e.insertionMode=Re.BEFORE_HEAD,e._processToken(t);}function Ye(e,t){e._insertFakeElement(N.HEAD,u.HEAD),e.headElement=e.openElements.current,e.insertionMode=Re.IN_HEAD,e._processToken(t);}function xe(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.BASE:case u.BASEFONT:case u.BGSOUND:case u.LINK:case u.META:e._appendElement(t,p.HTML),t.ackSelfClosing=!0;break;case u.TITLE:e._switchToTextParsing(t,b.RCDATA);break;case u.NOSCRIPT:e.options.scriptingEnabled?e._switchToTextParsing(t,b.RAWTEXT):(e._insertElement(t,p.HTML),e.insertionMode=Re.IN_HEAD_NO_SCRIPT);break;case u.NOFRAMES:case u.STYLE:e._switchToTextParsing(t,b.RAWTEXT);break;case u.SCRIPT:e._switchToTextParsing(t,b.SCRIPT_DATA);break;case u.TEMPLATE:e._insertTemplate(t),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=Re.IN_TEMPLATE,e.tmplInsertionModeStack.unshift(Re.IN_TEMPLATE);break;case u.HEAD:e._err(t,T.misplacedStartTagForHeadElement);break;default:Qe(e,t);}}function ve(e,t){e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagId!==u.TEMPLATE&&e._err(t,T.closingOfElementWithOpenChildElements),e.openElements.popUntilTagNamePopped(u.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode()):e._err(t,T.endTagWithoutMatchingOpenElement);}function Qe(e,t){e.openElements.pop(),e.insertionMode=Re.AFTER_HEAD,e._processToken(t);}function qe(e,t){const s=t.type===h.EOF?T.openElementsLeftAfterEof:T.disallowedContentInNoscriptInHead;e._err(t,s),e.openElements.pop(),e.insertionMode=Re.IN_HEAD,e._processToken(t);}function We(e,t){e._insertFakeElement(N.BODY,u.BODY),e.insertionMode=Re.IN_BODY,Xe(e,t);}function Xe(e,t){switch(t.type){case h.CHARACTER:Ve(e,t);break;case h.WHITESPACE_CHARACTER:Ke(e,t);break;case h.COMMENT:Ue(e,t);break;case h.START_TAG:$e(e,t);break;case h.END_TAG:tt(e,t);break;case h.EOF:st(e,t);}}function Ke(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t);}function Ve(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1;}function ze(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,p.HTML),e.framesetOk=!1,t.ackSelfClosing=!0;}function je(e){const t=A(e,d.TYPE);return null!=t&&t.toLowerCase()===Ce}function Je(e,t){e._switchToTextParsing(t,b.RAWTEXT);}function Ze(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,p.HTML);}function $e(e,t){switch(t.tagID){case u.I:case u.S:case u.B:case u.U:case u.EM:case u.TT:case u.BIG:case u.CODE:case u.FONT:case u.SMALL:case u.STRIKE:case u.STRONG:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,p.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t);break;case u.A:!function(e,t){const s=e.activeFormattingElements.getElementEntryInScopeWithTagName(N.A);s&&(Fe(e,t),e.openElements.remove(s.element),e.activeFormattingElements.removeEntry(s)),e._reconstructActiveFormattingElements(),e._insertElement(t,p.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t);break;case u.H1:case u.H2:case u.H3:case u.H4:case u.H5:case u.H6:!function(e,t){e.openElements.hasInButtonScope(u.P)&&e._closePElement(),g(e.openElements.currentTagId)&&e.openElements.pop(),e._insertElement(t,p.HTML);}(e,t);break;case u.P:case u.DL:case u.OL:case u.UL:case u.DIV:case u.DIR:case u.NAV:case u.MAIN:case u.MENU:case u.ASIDE:case u.CENTER:case u.FIGURE:case u.FOOTER:case u.HEADER:case u.HGROUP:case u.DIALOG:case u.DETAILS:case u.ADDRESS:case u.ARTICLE:case u.SECTION:case u.SUMMARY:case u.FIELDSET:case u.BLOCKQUOTE:case u.FIGCAPTION:!function(e,t){e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._insertElement(t,p.HTML);}(e,t);break;case u.LI:case u.DD:case u.DT:!function(e,t){e.framesetOk=!1;const s=t.tagID;for(let t=e.openElements.stackTop;t>=0;t--){const a=e.openElements.tagIDs[t];if(s===u.LI&&a===u.LI||(s===u.DD||s===u.DT)&&(a===u.DD||a===u.DT)){e.openElements.generateImpliedEndTagsWithExclusion(a),e.openElements.popUntilTagNamePopped(a);break}if(a!==u.ADDRESS&&a!==u.DIV&&a!==u.P&&e._isSpecialElement(e.openElements.items[t],a))break}e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._insertElement(t,p.HTML);}(e,t);break;case u.BR:case u.IMG:case u.WBR:case u.AREA:case u.EMBED:case u.KEYGEN:ze(e,t);break;case u.HR:!function(e,t){e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._appendElement(t,p.HTML),e.framesetOk=!1,t.ackSelfClosing=!0;}(e,t);break;case u.RB:case u.RTC:!function(e,t){e.openElements.hasInScope(u.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,p.HTML);}(e,t);break;case u.RT:case u.RP:!function(e,t){e.openElements.hasInScope(u.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(u.RTC),e._insertElement(t,p.HTML);}(e,t);break;case u.PRE:case u.LISTING:!function(e,t){e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._insertElement(t,p.HTML),e.skipNextNewLine=!0,e.framesetOk=!1;}(e,t);break;case u.XMP:!function(e,t){e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,b.RAWTEXT);}(e,t);break;case u.SVG:!function(e,t){e._reconstructActiveFormattingElements(),Ne(t),ue(t),t.selfClosing?e._appendElement(t,p.SVG):e._insertElement(t,p.SVG),t.ackSelfClosing=!0;}(e,t);break;case u.HTML:!function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs);}(e,t);break;case u.BASE:case u.LINK:case u.META:case u.STYLE:case u.TITLE:case u.SCRIPT:case u.BGSOUND:case u.BASEFONT:case u.TEMPLATE:xe(e,t);break;case u.BODY:!function(e,t){const s=e.openElements.tryPeekProperlyNestedBodyElement();s&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(s,t.attrs));}(e,t);break;case u.FORM:!function(e,t){const s=e.openElements.tmplCount>0;e.formElement&&!s||(e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._insertElement(t,p.HTML),s||(e.formElement=e.openElements.current));}(e,t);break;case u.NOBR:!function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(u.NOBR)&&(Fe(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,p.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t);break;case u.MATH:!function(e,t){e._reconstructActiveFormattingElements(),Ie(t),ue(t),t.selfClosing?e._appendElement(t,p.MATHML):e._insertElement(t,p.MATHML),t.ackSelfClosing=!0;}(e,t);break;case u.TABLE:!function(e,t){e.treeAdapter.getDocumentMode(e.document)!==I.QUIRKS&&e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._insertElement(t,p.HTML),e.framesetOk=!1,e.insertionMode=Re.IN_TABLE;}(e,t);break;case u.INPUT:!function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,p.HTML),je(t)||(e.framesetOk=!1),t.ackSelfClosing=!0;}(e,t);break;case u.PARAM:case u.TRACK:case u.SOURCE:!function(e,t){e._appendElement(t,p.HTML),t.ackSelfClosing=!0;}(e,t);break;case u.IMAGE:!function(e,t){t.tagName=N.IMG,t.tagID=u.IMG,ze(e,t);}(e,t);break;case u.BUTTON:!function(e,t){e.openElements.hasInScope(u.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(u.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,p.HTML),e.framesetOk=!1;}(e,t);break;case u.APPLET:case u.OBJECT:case u.MARQUEE:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,p.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1;}(e,t);break;case u.IFRAME:!function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,b.RAWTEXT);}(e,t);break;case u.SELECT:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,p.HTML),e.framesetOk=!1,e.insertionMode=e.insertionMode===Re.IN_TABLE||e.insertionMode===Re.IN_CAPTION||e.insertionMode===Re.IN_TABLE_BODY||e.insertionMode===Re.IN_ROW||e.insertionMode===Re.IN_CELL?Re.IN_SELECT_IN_TABLE:Re.IN_SELECT;}(e,t);break;case u.OPTION:case u.OPTGROUP:!function(e,t){e.openElements.currentTagId===u.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,p.HTML);}(e,t);break;case u.NOEMBED:Je(e,t);break;case u.FRAMESET:!function(e,t){const s=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&s&&(e.treeAdapter.detachNode(s),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,p.HTML),e.insertionMode=Re.IN_FRAMESET);}(e,t);break;case u.TEXTAREA:!function(e,t){e._insertElement(t,p.HTML),e.skipNextNewLine=!0,e.tokenizer.state=b.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=Re.TEXT;}(e,t);break;case u.NOSCRIPT:e.options.scriptingEnabled?Je(e,t):Ze(e,t);break;case u.PLAINTEXT:!function(e,t){e.openElements.hasInButtonScope(u.P)&&e._closePElement(),e._insertElement(t,p.HTML),e.tokenizer.state=b.PLAINTEXT;}(e,t);break;case u.COL:case u.TH:case u.TD:case u.TR:case u.HEAD:case u.FRAME:case u.TBODY:case u.TFOOT:case u.THEAD:case u.CAPTION:case u.COLGROUP:break;default:Ze(e,t);}}function et(e,t){const s=t.tagName,a=t.tagID;for(let t=e.openElements.stackTop;t>0;t--){const r=e.openElements.items[t],n=e.openElements.tagIDs[t];if(a===n&&(a!==u.UNKNOWN||e.treeAdapter.getTagName(r)===s)){e.openElements.generateImpliedEndTagsWithExclusion(a),e.openElements.stackTop>=t&&e.openElements.shortenToLength(t);break}if(e._isSpecialElement(r,n))break}}function tt(e,t){switch(t.tagID){case u.A:case u.B:case u.I:case u.S:case u.U:case u.EM:case u.TT:case u.BIG:case u.CODE:case u.FONT:case u.NOBR:case u.SMALL:case u.STRIKE:case u.STRONG:Fe(e,t);break;case u.P:!function(e){e.openElements.hasInButtonScope(u.P)||e._insertFakeElement(N.P,u.P),e._closePElement();}(e);break;case u.DL:case u.UL:case u.OL:case u.DIR:case u.DIV:case u.NAV:case u.PRE:case u.MAIN:case u.MENU:case u.ASIDE:case u.BUTTON:case u.CENTER:case u.FIGURE:case u.FOOTER:case u.HEADER:case u.HGROUP:case u.DIALOG:case u.ADDRESS:case u.ARTICLE:case u.DETAILS:case u.SECTION:case u.SUMMARY:case u.LISTING:case u.FIELDSET:case u.BLOCKQUOTE:case u.FIGCAPTION:!function(e,t){const s=t.tagID;e.openElements.hasInScope(s)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(s));}(e,t);break;case u.LI:!function(e){e.openElements.hasInListItemScope(u.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(u.LI),e.openElements.popUntilTagNamePopped(u.LI));}(e);break;case u.DD:case u.DT:!function(e,t){const s=t.tagID;e.openElements.hasInScope(s)&&(e.openElements.generateImpliedEndTagsWithExclusion(s),e.openElements.popUntilTagNamePopped(s));}(e,t);break;case u.H1:case u.H2:case u.H3:case u.H4:case u.H5:case u.H6:!function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped());}(e);break;case u.BR:!function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(N.BR,u.BR),e.openElements.pop(),e.framesetOk=!1;}(e);break;case u.BODY:!function(e,t){if(e.openElements.hasInScope(u.BODY)&&(e.insertionMode=Re.AFTER_BODY,e.options.sourceCodeLocationInfo)){const s=e.openElements.tryPeekProperlyNestedBodyElement();s&&e._setEndLocation(s,t);}}(e,t);break;case u.HTML:!function(e,t){e.openElements.hasInScope(u.BODY)&&(e.insertionMode=Re.AFTER_BODY,ut(e,t));}(e,t);break;case u.FORM:!function(e){const t=e.openElements.tmplCount>0,{formElement:s}=e;t||(e.formElement=null),(s||t)&&e.openElements.hasInScope(u.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(u.FORM):s&&e.openElements.remove(s));}(e);break;case u.APPLET:case u.OBJECT:case u.MARQUEE:!function(e,t){const s=t.tagID;e.openElements.hasInScope(s)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(s),e.activeFormattingElements.clearToLastMarker());}(e,t);break;case u.TEMPLATE:ve(e,t);break;default:et(e,t);}}function st(e,t){e.tmplInsertionModeStack.length>0?Nt(e,t):Ge(e,t);}function at(e,t){if(fe.has(e.openElements.currentTagId))switch(e.pendingCharacterTokens.length=0,e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=Re.IN_TABLE_TEXT,t.type){case h.CHARACTER:ct(e,t);break;case h.WHITESPACE_CHARACTER:ot(e,t);}else it(e,t);}function rt(e,t){switch(t.tagID){case u.TD:case u.TH:case u.TR:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(N.TBODY,u.TBODY),e.insertionMode=Re.IN_TABLE_BODY,At(e,t);}(e,t);break;case u.STYLE:case u.SCRIPT:case u.TEMPLATE:xe(e,t);break;case u.COL:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(N.COLGROUP,u.COLGROUP),e.insertionMode=Re.IN_COLUMN_GROUP,ht(e,t);}(e,t);break;case u.FORM:!function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,p.HTML),e.formElement=e.openElements.current,e.openElements.pop());}(e,t);break;case u.TABLE:!function(e,t){e.openElements.hasInTableScope(u.TABLE)&&(e.openElements.popUntilTagNamePopped(u.TABLE),e._resetInsertionMode(),e._processStartTag(t));}(e,t);break;case u.TBODY:case u.TFOOT:case u.THEAD:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,p.HTML),e.insertionMode=Re.IN_TABLE_BODY;}(e,t);break;case u.INPUT:!function(e,t){je(t)?e._appendElement(t,p.HTML):it(e,t),t.ackSelfClosing=!0;}(e,t);break;case u.CAPTION:!function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,p.HTML),e.insertionMode=Re.IN_CAPTION;}(e,t);break;case u.COLGROUP:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,p.HTML),e.insertionMode=Re.IN_COLUMN_GROUP;}(e,t);break;default:it(e,t);}}function nt(e,t){switch(t.tagID){case u.TABLE:e.openElements.hasInTableScope(u.TABLE)&&(e.openElements.popUntilTagNamePopped(u.TABLE),e._resetInsertionMode());break;case u.TEMPLATE:ve(e,t);break;case u.BODY:case u.CAPTION:case u.COL:case u.COLGROUP:case u.HTML:case u.TBODY:case u.TD:case u.TFOOT:case u.TH:case u.THEAD:case u.TR:break;default:it(e,t);}}function it(e,t){const s=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,Xe(e,t),e.fosterParentingEnabled=s;}function ot(e,t){e.pendingCharacterTokens.push(t);}function ct(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0;}function Et(e,t){let s=0;if(e.hasNonWhitespacePendingCharacterToken)for(;s<e.pendingCharacterTokens.length;s++)it(e,e.pendingCharacterTokens[s]);else for(;s<e.pendingCharacterTokens.length;s++)e._insertCharacters(e.pendingCharacterTokens[s]);e.insertionMode=e.originalInsertionMode,e._processToken(t);}const Tt=new Set([u.CAPTION,u.COL,u.COLGROUP,u.TBODY,u.TD,u.TFOOT,u.TH,u.THEAD,u.TR]);function ht(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.COL:e._appendElement(t,p.HTML),t.ackSelfClosing=!0;break;case u.TEMPLATE:xe(e,t);break;default:_t(e,t);}}function _t(e,t){e.openElements.currentTagId===u.COLGROUP&&(e.openElements.pop(),e.insertionMode=Re.IN_TABLE,e._processToken(t));}function At(e,t){switch(t.tagID){case u.TR:e.openElements.clearBackToTableBodyContext(),e._insertElement(t,p.HTML),e.insertionMode=Re.IN_ROW;break;case u.TH:case u.TD:e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(N.TR,u.TR),e.insertionMode=Re.IN_ROW,mt(e,t);break;case u.CAPTION:case u.COL:case u.COLGROUP:case u.TBODY:case u.TFOOT:case u.THEAD:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Re.IN_TABLE,rt(e,t));break;default:rt(e,t);}}function lt(e,t){const s=t.tagID;switch(t.tagID){case u.TBODY:case u.TFOOT:case u.THEAD:e.openElements.hasInTableScope(s)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Re.IN_TABLE);break;case u.TABLE:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Re.IN_TABLE,nt(e,t));break;case u.BODY:case u.CAPTION:case u.COL:case u.COLGROUP:case u.HTML:case u.TD:case u.TH:case u.TR:break;default:nt(e,t);}}function mt(e,t){switch(t.tagID){case u.TH:case u.TD:e.openElements.clearBackToTableRowContext(),e._insertElement(t,p.HTML),e.insertionMode=Re.IN_CELL,e.activeFormattingElements.insertMarker();break;case u.CAPTION:case u.COL:case u.COLGROUP:case u.TBODY:case u.TFOOT:case u.THEAD:case u.TR:e.openElements.hasInTableScope(u.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Re.IN_TABLE_BODY,At(e,t));break;default:rt(e,t);}}function pt(e,t){switch(t.tagID){case u.TR:e.openElements.hasInTableScope(u.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Re.IN_TABLE_BODY);break;case u.TABLE:e.openElements.hasInTableScope(u.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Re.IN_TABLE_BODY,lt(e,t));break;case u.TBODY:case u.TFOOT:case u.THEAD:(e.openElements.hasInTableScope(t.tagID)||e.openElements.hasInTableScope(u.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Re.IN_TABLE_BODY,lt(e,t));break;case u.BODY:case u.CAPTION:case u.COL:case u.COLGROUP:case u.HTML:case u.TD:case u.TH:break;default:nt(e,t);}}function dt(e,t){switch(t.tagID){case u.HTML:$e(e,t);break;case u.OPTION:e.openElements.currentTagId===u.OPTION&&e.openElements.pop(),e._insertElement(t,p.HTML);break;case u.OPTGROUP:e.openElements.currentTagId===u.OPTION&&e.openElements.pop(),e.openElements.currentTagId===u.OPTGROUP&&e.openElements.pop(),e._insertElement(t,p.HTML);break;case u.INPUT:case u.KEYGEN:case u.TEXTAREA:case u.SELECT:e.openElements.hasInSelectScope(u.SELECT)&&(e.openElements.popUntilTagNamePopped(u.SELECT),e._resetInsertionMode(),t.tagID!==u.SELECT&&e._processStartTag(t));break;case u.SCRIPT:case u.TEMPLATE:xe(e,t);}}function It(e,t){switch(t.tagID){case u.OPTGROUP:e.openElements.stackTop>0&&e.openElements.currentTagId===u.OPTION&&e.openElements.tagIDs[e.openElements.stackTop-1]===u.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagId===u.OPTGROUP&&e.openElements.pop();break;case u.OPTION:e.openElements.currentTagId===u.OPTION&&e.openElements.pop();break;case u.SELECT:e.openElements.hasInSelectScope(u.SELECT)&&(e.openElements.popUntilTagNamePopped(u.SELECT),e._resetInsertionMode());break;case u.TEMPLATE:ve(e,t);}}function Nt(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(u.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode(),e.onEof(t)):Ge(e,t);}function ut(e,t){var s;if(t.tagID===u.HTML){if(e.fragmentContext||(e.insertionMode=Re.AFTER_AFTER_BODY),e.options.sourceCodeLocationInfo&&e.openElements.tagIDs[0]===u.HTML){e._setEndLocation(e.openElements.items[0],t);const a=e.openElements.items[1];a&&!(null===(s=e.treeAdapter.getNodeSourceCodeLocation(a))||void 0===s?void 0:s.endTag)&&e._setEndLocation(a,t);}}else Ct(e,t);}function Ct(e,t){e.insertionMode=Re.IN_BODY,Xe(e,t);}function Dt(e,t){e.insertionMode=Re.IN_BODY,Xe(e,t);}function St(e){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==p.HTML&&!e._isIntegrationPoint(e.openElements.currentTagId,e.openElements.current);)e.openElements.pop();}return new Set([N.AREA,N.BASE,N.BASEFONT,N.BGSOUND,N.BR,N.COL,N.EMBED,N.FRAME,N.HR,N.IMG,N.INPUT,N.KEYGEN,N.LINK,N.META,N.PARAM,N.SOURCE,N.TRACK,N.WBR]),e.parse=function(e,t){return Me.parse(e,t)},e.parseFragment=function(e,t,s){"string"==typeof e&&(s=t,t=e,e=null);const a=Me.getFragmentParser(e,s);return a.tokenizer.write(t,!0),a.getFragment()},Object.defineProperty(e,"__esModule",{value:!0}),e}({});const parse=e.parse;const parseFragment=e.parseFragment;

const docParser = new WeakMap();
function parseDocumentUtil(ownerDocument, html) {
  const doc = parse(html.trim(), getParser(ownerDocument));
  doc.documentElement = doc.firstElementChild;
  doc.head = doc.documentElement.firstElementChild;
  doc.body = doc.head.nextElementSibling;
  return doc;
}
function parseFragmentUtil(ownerDocument, html) {
  if (typeof html === 'string') {
    html = html.trim();
  }
  else {
    html = '';
  }
  const frag = parseFragment(html, getParser(ownerDocument));
  return frag;
}
function getParser(ownerDocument) {
  let parseOptions = docParser.get(ownerDocument);
  if (parseOptions != null) {
    return parseOptions;
  }
  const treeAdapter = {
    createDocument() {
      const doc = ownerDocument.createElement("#document" /* NODE_NAMES.DOCUMENT_NODE */);
      doc['x-mode'] = 'no-quirks';
      return doc;
    },
    setNodeSourceCodeLocation(node, location) {
      node.sourceCodeLocation = location;
    },
    getNodeSourceCodeLocation(node) {
      return node.sourceCodeLocation;
    },
    createDocumentFragment() {
      return ownerDocument.createDocumentFragment();
    },
    createElement(tagName, namespaceURI, attrs) {
      const elm = ownerDocument.createElementNS(namespaceURI, tagName);
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (attr.namespace == null || attr.namespace === 'http://www.w3.org/1999/xhtml') {
          elm.setAttribute(attr.name, attr.value);
        }
        else {
          elm.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
      return elm;
    },
    createCommentNode(data) {
      return ownerDocument.createComment(data);
    },
    appendChild(parentNode, newNode) {
      parentNode.appendChild(newNode);
    },
    insertBefore(parentNode, newNode, referenceNode) {
      parentNode.insertBefore(newNode, referenceNode);
    },
    setTemplateContent(templateElement, contentElement) {
      templateElement.content = contentElement;
    },
    getTemplateContent(templateElement) {
      return templateElement.content;
    },
    setDocumentType(doc, name, publicId, systemId) {
      let doctypeNode = doc.childNodes.find((n) => n.nodeType === 10 /* NODE_TYPES.DOCUMENT_TYPE_NODE */);
      if (doctypeNode == null) {
        doctypeNode = ownerDocument.createDocumentTypeNode();
        doc.insertBefore(doctypeNode, doc.firstChild);
      }
      doctypeNode.nodeValue = '!DOCTYPE';
      doctypeNode['x-name'] = name;
      doctypeNode['x-publicId'] = publicId;
      doctypeNode['x-systemId'] = systemId;
    },
    setDocumentMode(doc, mode) {
      doc['x-mode'] = mode;
    },
    getDocumentMode(doc) {
      return doc['x-mode'];
    },
    detachNode(node) {
      node.remove();
    },
    insertText(parentNode, text) {
      const lastChild = parentNode.lastChild;
      if (lastChild != null && lastChild.nodeType === 3 /* NODE_TYPES.TEXT_NODE */) {
        lastChild.nodeValue += text;
      }
      else {
        parentNode.appendChild(ownerDocument.createTextNode(text));
      }
    },
    insertTextBefore(parentNode, text, referenceNode) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
      if (prevNode != null && prevNode.nodeType === 3 /* NODE_TYPES.TEXT_NODE */) {
        prevNode.nodeValue += text;
      }
      else {
        parentNode.insertBefore(ownerDocument.createTextNode(text), referenceNode);
      }
    },
    adoptAttributes(recipient, attrs) {
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (recipient.hasAttributeNS(attr.namespace, attr.name) === false) {
          recipient.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
    },
    getFirstChild(node) {
      return node.childNodes[0];
    },
    getChildNodes(node) {
      return node.childNodes;
    },
    getParentNode(node) {
      return node.parentNode;
    },
    getAttrList(element) {
      const attrs = element.attributes.__items.map((attr) => {
        return {
          name: attr.name,
          value: attr.value,
          namespace: attr.namespaceURI,
          prefix: null,
        };
      });
      return attrs;
    },
    getTagName(element) {
      if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
        return element.nodeName.toLowerCase();
      }
      else {
        return element.nodeName;
      }
    },
    getNamespaceURI(element) {
      // mock-doc widens the type of an element's namespace uri to 'string | null'
      // we use a type assertion here to adhere to parse5's type definitions
      return element.namespaceURI;
    },
    getTextNodeContent(textNode) {
      return textNode.nodeValue;
    },
    getCommentNodeContent(commentNode) {
      return commentNode.nodeValue;
    },
    getDocumentTypeNodeName(doctypeNode) {
      return doctypeNode['x-name'];
    },
    getDocumentTypeNodePublicId(doctypeNode) {
      return doctypeNode['x-publicId'];
    },
    getDocumentTypeNodeSystemId(doctypeNode) {
      return doctypeNode['x-systemId'];
    },
    // @ts-ignore - a `MockNode` will never be assignable to a `TreeAdapterTypeMap['text']`. As a result, we cannot
    // complete this function signature
    isTextNode(node) {
      return node.nodeType === 3 /* NODE_TYPES.TEXT_NODE */;
    },
    // @ts-ignore - a `MockNode` will never be assignable to a `TreeAdapterTypeMap['comment']`. As a result, we cannot
    // complete this function signature (which requires its return type to be a type predicate)
    isCommentNode(node) {
      return node.nodeType === 8 /* NODE_TYPES.COMMENT_NODE */;
    },
    // @ts-ignore - a `MockNode` will never be assignable to a `TreeAdapterTypeMap['document']`. As a result, we cannot
    // complete this function signature (which requires its return type to be a type predicate)
    isDocumentTypeNode(node) {
      return node.nodeType === 10 /* NODE_TYPES.DOCUMENT_TYPE_NODE */;
    },
    // @ts-ignore - a `MockNode` will never be assignable to a `TreeAdapterTypeMap['element']`. As a result, we cannot
    // complete this function signature (which requires its return type to be a type predicate)
    isElementNode(node) {
      return node.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */;
    },
  };
  parseOptions = {
    treeAdapter: treeAdapter,
  };
  docParser.set(ownerDocument, parseOptions);
  return parseOptions;
}

// Sizzle 2.3.10
const Sizzle = (function() {
const window = {
  document: {
  createElement() {
    return {};
  },
  nodeType: 9,
  documentElement: {
    nodeType: 1,
    nodeName: 'HTML'
  }
  }
};
const module = { exports: {} };

/*! Sizzle v2.3.10 | (c) JS Foundation and other contributors | js.foundation */
!function(e){var t,n,r,i,o,u,l,a,c,s,f,d,p,h,g,m,y,v,w,b="sizzle"+1*new Date,N=e.document,C=0,x=0,E=ae(),A=ae(),S=ae(),D=ae(),T=function(e,t){return e===t&&(f=!0),0},L={}.hasOwnProperty,q=[],I=q.pop,B=q.push,R=q.push,$=q.slice,k=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return -1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",z="\\["+M+"*("+P+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+M+"*\\]",F=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",O=new RegExp(M+"+","g"),j=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),G=new RegExp("^"+M+"*,"+M+"*"),U=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),V=new RegExp(M+"|>"),X=new RegExp(F),J=new RegExp("^"+P+"$"),K={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,W=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){d();},ue=ve(function(e){return !0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{R.apply(q=$.call(N.childNodes),N.childNodes),q[N.childNodes.length].nodeType;}catch(e){R={apply:q.length?function(e,t){B.apply(e,$.call(t));}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1;}};}function le(e,t,r,i){var o,l,c,s,f,h,y,v=t&&t.ownerDocument,N=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==N&&9!==N&&11!==N)return r;if(!i&&(d(t),t=t||p,g)){if(11!==N&&(f=_.exec(e)))if(o=f[1]){if(9===N){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(v&&(c=v.getElementById(o))&&w(t,c)&&c.id===o)return r.push(c),r}else {if(f[2])return R.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return R.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!D[e+" "]&&(!m||!m.test(e))&&(1!==N||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===N&&(V.test(e)||U.test(e))){(v=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((s=t.getAttribute("id"))?s=s.replace(re,ie):t.setAttribute("id",s=b)),l=(h=u(e)).length;while(l--)h[l]=(s?"#"+s:":scope")+" "+ye(h[l]);y=h.join(",");}try{return R.apply(r,v.querySelectorAll(y)),r}catch(t){D(e,!0);}finally{s===b&&t.removeAttribute("id");}}}return a(e.replace(j,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function ce(e){return e[b]=!0,e}function se(e){var t=p.createElement("fieldset");try{return !!e(t)}catch(e){return !1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null;}}function fe(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t;}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return -1;return e?1:-1}function pe(e){return function(t){return "form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ue(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return ce(function(t){return t=+t,ce(function(n,r){var i,o=e([],n.length,t),u=o.length;while(u--)n[i=o[u]]&&(n[i]=!(r[i]=n[i]));})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}n=le.support={},o=le.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return !Q.test(t||n&&n.nodeName||"HTML")},d=le.setDocument=function(e){var t,i,u=e?e.ownerDocument||e:N;return u!=p&&9===u.nodeType&&u.documentElement?(p=u,h=p.documentElement,g=!o(p),N!=p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=se(function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),n.cssHas=se(function(){try{return p.querySelector(":has(*,:jqfake)"),!1}catch(e){return !0}}),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=se(function(e){return h.appendChild(e).id=b,!p.getElementsByName||!p.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return [o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return [o]}return []}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(se(function(e){var t;h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]");}),se(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:");})),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&se(function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",F);}),n.cssHas||m.push(":has"),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=Z.test(h.compareDocumentPosition),w=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType&&e.documentElement||e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return !0;return !1},T=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==N&&w(N,e)?-1:t==p||t.ownerDocument==N&&w(N,t)?1:s?k(s,e)-k(s,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,u=[e],l=[t];if(!i||!o)return e==p?-1:t==p?1:i?-1:o?1:s?k(s,e)-k(s,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)u.unshift(n);n=t;while(n=n.parentNode)l.unshift(n);while(u[r]===l[r])r++;return r?de(u[r],l[r]):u[r]==N?-1:l[r]==N?1:0},p):p},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&g&&!D[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){D(t,!0);}return le(t,p,null,[e]).length>0},le.contains=function(e,t){return (e.ownerDocument||e)!=p&&d(e),w(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!=p&&d(e);var i=r.attrHandle[t.toLowerCase()],o=i&&L.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},le.escape=function(e){return (e+"").replace(re,ie)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,s=!n.sortStable&&e.slice(0),e.sort(T),f){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1);}return s=null,e},i=le.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e);}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=le.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=u(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return "*"===e?function(){return !0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=le.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(O," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),u="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===i?function(e){return !!e.parentNode}:function(t,n,a){var c,s,f,d,p,h,g=o!==u?"nextSibling":"previousSibling",m=t.parentNode,y=l&&t.nodeName.toLowerCase(),v=!a&&!l,w=!1;if(m){if(o){while(g){d=t;while(d=d[g])if(l?d.nodeName.toLowerCase()===y:1===d.nodeType)return !1;h=g="only"===e&&!h&&"nextSibling";}return !0}if(h=[u?m.firstChild:m.lastChild],u&&v){w=(p=(c=(s=(f=(d=m)[b]||(d[b]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],d=p&&m.childNodes[p];while(d=++p&&d&&d[g]||(w=p=0)||h.pop())if(1===d.nodeType&&++w&&d===t){s[e]=[C,p,w];break}}else if(v&&(w=p=(c=(s=(f=(d=t)[b]||(d[b]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===w)while(d=++p&&d&&d[g]||(w=p=0)||h.pop())if((l?d.nodeName.toLowerCase()===y:1===d.nodeType)&&++w&&(v&&((s=(f=d[b]||(d[b]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[C,w]),d===t))break;return (w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,n){var r,o=i(e,t),u=o.length;while(u--)e[r=k(e,o[u])]=!(n[r]=o[u]);}):function(e){return i(e,0,n)}):i}},pseudos:{not:ce(function(e){var t=[],n=[],r=l(e.replace(j,"$1"));return r[b]?ce(function(e,t,n,i){var o,u=r(e,null,i,[]),l=e.length;while(l--)(o=u[l])&&(e[l]=!(t[l]=o));}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:ce(function(e){return function(t){return le(e,t).length>0}}),contains:ce(function(e){return e=e.replace(te,ne),function(t){return (t.textContent||i(t)).indexOf(e)>-1}}),lang:ce(function(e){return J.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return (n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return !1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return !1;return !0},parent:function(e){return !r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return W.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return "input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return [0]}),last:he(function(e,t){return [t-1]}),eq:he(function(e,t,n){return [n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in {radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=function(e){return function(t){return "input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in {submit:!0,reset:!0})r.pseudos[t]=function(e){return function(t){var n=t.nodeName.toLowerCase();return ("input"===n||"button"===n)&&t.type===e}}(t);function me(){}me.prototype=r.filters=r.pseudos,r.setFilters=new me,u=le.tokenize=function(e,t){var n,i,o,u,l,a,c,s=A[e+" "];if(s)return t?0:s.slice(0);l=e,a=[],c=r.preFilter;while(l){n&&!(i=G.exec(l))||(i&&(l=l.slice(i[0].length)||l),a.push(o=[])),n=!1,(i=U.exec(l))&&(n=i.shift(),o.push({value:n,type:i[0].replace(j," ")}),l=l.slice(n.length));for(u in r.filter)!(i=K[u].exec(l))||c[u]&&!(i=c[u](i))||(n=i.shift(),o.push({value:n,type:u,matches:i}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):A(e,a).slice(0)};function ye(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(e,t,n){var r=t.dir,i=t.next,o=i||r,u=n&&"parentNode"===o,l=x++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||u)return e(t,n,i);return !1}:function(t,n,a){var c,s,f,d=[C,l];if(a){while(t=t[r])if((1===t.nodeType||u)&&e(t,n,a))return !0}else while(t=t[r])if(1===t.nodeType||u)if(f=t[b]||(t[b]={}),s=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else {if((c=s[o])&&c[0]===C&&c[1]===l)return d[2]=c[2];if(s[o]=d,d[2]=e(t,n,a))return !0}return !1}}function we(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return !1;return !0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)le(e,t[r],n);return n}function Ne(e,t,n,r,i){for(var o,u=[],l=0,a=e.length,c=null!=t;l<a;l++)(o=e[l])&&(n&&!n(o,r,i)||(u.push(o),c&&t.push(l)));return u}function Ce(e,t,n,r,i,o){return r&&!r[b]&&(r=Ce(r)),i&&!i[b]&&(i=Ce(i,o)),ce(function(o,u,l,a){var c,s,f,d=[],p=[],h=u.length,g=o||be(t||"*",l.nodeType?[l]:l,[]),m=!e||!o&&t?g:Ne(g,d,e,l,a),y=n?i||(o?e:h||r)?[]:u:m;if(n&&n(m,y,l,a),r){c=Ne(y,p),r(c,[],l,a),s=c.length;while(s--)(f=c[s])&&(y[p[s]]=!(m[p[s]]=f));}if(o){if(i||e){if(i){c=[],s=y.length;while(s--)(f=y[s])&&c.push(m[s]=f);i(null,y=[],c,a);}s=y.length;while(s--)(f=y[s])&&(c=i?k(o,f):d[s])>-1&&(o[c]=!(u[c]=f));}}else y=Ne(y===u?y.splice(h,y.length):y),i?i(null,u,y,a):R.apply(u,y);})}function xe(e){for(var t,n,i,o=e.length,u=r.relative[e[0].type],l=u||r.relative[" "],a=u?1:0,s=ve(function(e){return e===t},l,!0),f=ve(function(e){return k(t,e)>-1},l,!0),d=[function(e,n,r){var i=!u&&(r||n!==c)||((t=n).nodeType?s(e,n,r):f(e,n,r));return t=null,i}];a<o;a++)if(n=r.relative[e[a].type])d=[ve(we(d),n)];else {if((n=r.filter[e[a].type].apply(null,e[a].matches))[b]){for(i=++a;i<o;i++)if(r.relative[e[i].type])break;return Ce(a>1&&we(d),a>1&&ye(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(j,"$1"),n,a<i&&xe(e.slice(a,i)),i<o&&xe(e=e.slice(i)),i<o&&ye(e))}d.push(n);}return we(d)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,u,l,a,s){var f,h,m,y=0,v="0",w=o&&[],b=[],N=c,x=o||i&&r.find.TAG("*",s),E=C+=null==N?1:Math.random()||.1,A=x.length;for(s&&(c=u==p||u||s);v!==A&&null!=(f=x[v]);v++){if(i&&f){h=0,u||f.ownerDocument==p||(d(f),l=!g);while(m=e[h++])if(m(f,u||p,l)){a.push(f);break}s&&(C=E);}n&&((f=!m&&f)&&y--,o&&w.push(f));}if(y+=v,n&&v!==y){h=0;while(m=t[h++])m(w,b,u,l);if(o){if(y>0)while(v--)w[v]||b[v]||(b[v]=I.call(a));b=Ne(b);}R.apply(a,b),s&&!o&&b.length>0&&y+t.length>1&&le.uniqueSort(a);}return s&&(C=E,c=N),w};return n?ce(o):o}l=le.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=u(e)),n=t.length;while(n--)(o=xe(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e;}return o},a=le.select=function(e,t,n,i){var o,a,c,s,f,d="function"==typeof e&&e,p=!i&&u(e=d.selector||e);if(n=n||[],1===p.length){if((a=p[0]=p[0].slice(0)).length>2&&"ID"===(c=a[0]).type&&9===t.nodeType&&g&&r.relative[a[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(a.shift().value.length);}o=K.needsContext.test(e)?0:a.length;while(o--){if(c=a[o],r.relative[s=c.type])break;if((f=r.find[s])&&(i=f(c.matches[0].replace(te,ne),ee.test(a[0].type)&&ge(t.parentNode)||t))){if(a.splice(o,1),!(e=i.length&&ye(a)))return R.apply(n,i),n;break}}}return (d||l(e,p))(i,t,!g,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(T).join("")===b,n.detectDuplicates=!!f,d(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||fe(H,function(e,t,n){var r;if(!n)return !0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null});var Ae=e.Sizzle;le.noConflict=function(){return e.Sizzle===le&&(e.Sizzle=Ae),le},"function"==typeof define&&define.amd?define(function(){return le}):"undefined"!=typeof module&&module.exports?module.exports=le:e.Sizzle=le;}(window);
//# sourceMappingURL=sizzle.min.map

return module.exports;
})();

function matches(selector, elm) {
  const r = Sizzle.matches(selector, [elm]);
  return r.length > 0;
}
function selectOne(selector, elm) {
  const r = Sizzle(selector, elm);
  return r[0] || null;
}
function selectAll(selector, elm) {
  return Sizzle(selector, elm);
}

function serializeNodeToHtml(elm, opts = {}) {
  const output = {
    currentLineWidth: 0,
    indent: 0,
    isWithinBody: false,
    text: [],
  };
  if (opts.prettyHtml) {
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 2;
    }
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = true;
    }
    opts.approximateLineWidth = -1;
  }
  else {
    opts.prettyHtml = false;
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = false;
    }
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 0;
    }
  }
  if (typeof opts.approximateLineWidth !== 'number') {
    opts.approximateLineWidth = -1;
  }
  if (typeof opts.removeEmptyAttributes !== 'boolean') {
    opts.removeEmptyAttributes = true;
  }
  if (typeof opts.removeAttributeQuotes !== 'boolean') {
    opts.removeAttributeQuotes = false;
  }
  if (typeof opts.removeBooleanAttributeQuotes !== 'boolean') {
    opts.removeBooleanAttributeQuotes = false;
  }
  if (typeof opts.removeHtmlComments !== 'boolean') {
    opts.removeHtmlComments = false;
  }
  if (typeof opts.serializeShadowRoot !== 'boolean') {
    opts.serializeShadowRoot = false;
  }
  if (opts.outerHtml) {
    serializeToHtml(elm, opts, output, false);
  }
  else {
    for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
      serializeToHtml(elm.childNodes[i], opts, output, false);
    }
  }
  if (output.text[0] === '\n') {
    output.text.shift();
  }
  if (output.text[output.text.length - 1] === '\n') {
    output.text.pop();
  }
  return output.text.join('');
}
function serializeToHtml(node, opts, output, isShadowRoot) {
  if (node.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */ || isShadowRoot) {
    const tagName = isShadowRoot ? 'mock:shadow-root' : getTagName(node);
    if (tagName === 'body') {
      output.isWithinBody = true;
    }
    const ignoreTag = opts.excludeTags != null && opts.excludeTags.includes(tagName);
    if (ignoreTag === false) {
      const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
      if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
        output.text.push('\n');
        output.currentLineWidth = 0;
      }
      if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
        for (let i = 0; i < output.indent; i++) {
          output.text.push(' ');
        }
        output.currentLineWidth += output.indent;
      }
      output.text.push('<' + tagName);
      output.currentLineWidth += tagName.length + 1;
      const attrsLength = node.attributes.length;
      const attributes = opts.prettyHtml && attrsLength > 1
        ? cloneAttributes(node.attributes, true)
        : node.attributes;
      for (let i = 0; i < attrsLength; i++) {
        const attr = attributes.item(i);
        const attrName = attr.name;
        if (attrName === 'style') {
          continue;
        }
        let attrValue = attr.value;
        if (opts.removeEmptyAttributes && attrValue === '' && REMOVE_EMPTY_ATTR.has(attrName)) {
          continue;
        }
        const attrNamespaceURI = attr.namespaceURI;
        if (attrNamespaceURI == null) {
          output.currentLineWidth += attrName.length + 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            output.text.push('\n' + attrName);
            output.currentLineWidth = 0;
          }
          else {
            output.text.push(' ' + attrName);
          }
        }
        else if (attrNamespaceURI === 'http://www.w3.org/XML/1998/namespace') {
          output.text.push(' xml:' + attrName);
          output.currentLineWidth += attrName.length + 5;
        }
        else if (attrNamespaceURI === 'http://www.w3.org/2000/xmlns/') {
          if (attrName !== 'xmlns') {
            output.text.push(' xmlns:' + attrName);
            output.currentLineWidth += attrName.length + 7;
          }
          else {
            output.text.push(' ' + attrName);
            output.currentLineWidth += attrName.length + 1;
          }
        }
        else if (attrNamespaceURI === XLINK_NS) {
          output.text.push(' xlink:' + attrName);
          output.currentLineWidth += attrName.length + 7;
        }
        else {
          output.text.push(' ' + attrNamespaceURI + ':' + attrName);
          output.currentLineWidth += attrNamespaceURI.length + attrName.length + 2;
        }
        if (opts.prettyHtml && attrName === 'class') {
          attrValue = attr.value = attrValue
            .split(' ')
            .filter((t) => t !== '')
            .sort()
            .join(' ')
            .trim();
        }
        if (attrValue === '') {
          if (opts.removeBooleanAttributeQuotes && BOOLEAN_ATTR.has(attrName)) {
            continue;
          }
          if (opts.removeEmptyAttributes && attrName.startsWith('data-')) {
            continue;
          }
        }
        if (opts.removeAttributeQuotes && CAN_REMOVE_ATTR_QUOTES.test(attrValue)) {
          output.text.push('=' + escapeString(attrValue, true));
          output.currentLineWidth += attrValue.length + 1;
        }
        else {
          output.text.push('="' + escapeString(attrValue, true) + '"');
          output.currentLineWidth += attrValue.length + 3;
        }
      }
      if (node.hasAttribute('style')) {
        const cssText = node.style.cssText;
        if (opts.approximateLineWidth > 0 &&
          output.currentLineWidth + cssText.length + 10 > opts.approximateLineWidth) {
          output.text.push(`\nstyle="${cssText}">`);
          output.currentLineWidth = 0;
        }
        else {
          output.text.push(` style="${cssText}">`);
          output.currentLineWidth += cssText.length + 10;
        }
      }
      else {
        output.text.push('>');
        output.currentLineWidth += 1;
      }
    }
    if (EMPTY_ELEMENTS.has(tagName) === false) {
      if (opts.serializeShadowRoot && node.shadowRoot != null) {
        output.indent = output.indent + opts.indentSpaces;
        serializeToHtml(node.shadowRoot, opts, output, true);
        output.indent = output.indent - opts.indentSpaces;
        if (opts.newLines &&
          (node.childNodes.length === 0 ||
            (node.childNodes.length === 1 &&
              node.childNodes[0].nodeType === 3 /* NODE_TYPES.TEXT_NODE */ &&
              node.childNodes[0].nodeValue.trim() === ''))) {
          output.text.push('\n');
          output.currentLineWidth = 0;
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
      }
      if (opts.excludeTagContent == null || opts.excludeTagContent.includes(tagName) === false) {
        const childNodes = tagName === 'template' ? node.content.childNodes : node.childNodes;
        const childNodeLength = childNodes.length;
        if (childNodeLength > 0) {
          if (childNodeLength === 1 &&
            childNodes[0].nodeType === 3 /* NODE_TYPES.TEXT_NODE */ &&
            (typeof childNodes[0].nodeValue !== 'string' || childNodes[0].nodeValue.trim() === '')) ;
          else {
            const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
            if (!isWithinWhitespaceSensitiveNode && opts.indentSpaces > 0 && ignoreTag === false) {
              output.indent = output.indent + opts.indentSpaces;
            }
            for (let i = 0; i < childNodeLength; i++) {
              serializeToHtml(childNodes[i], opts, output, false);
            }
            if (ignoreTag === false) {
              if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
                output.text.push('\n');
                output.currentLineWidth = 0;
              }
              if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
                output.indent = output.indent - opts.indentSpaces;
                for (let i = 0; i < output.indent; i++) {
                  output.text.push(' ');
                }
                output.currentLineWidth += output.indent;
              }
            }
          }
        }
        if (ignoreTag === false) {
          output.text.push('</' + tagName + '>');
          output.currentLineWidth += tagName.length + 3;
        }
      }
    }
    if (opts.approximateLineWidth > 0 && STRUCTURE_ELEMENTS.has(tagName)) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (tagName === 'body') {
      output.isWithinBody = false;
    }
  }
  else if (node.nodeType === 3 /* NODE_TYPES.TEXT_NODE */) {
    let textContent = node.nodeValue;
    if (typeof textContent === 'string') {
      const trimmedTextContent = textContent.trim();
      if (trimmedTextContent === '') {
        // this text node is whitespace only
        if (isWithinWhitespaceSensitive(node)) {
          // whitespace matters within this element
          // just add the exact text we were given
          output.text.push(textContent);
          output.currentLineWidth += textContent.length;
        }
        else if (opts.approximateLineWidth > 0 && !output.isWithinBody) ;
        else if (!opts.prettyHtml) {
          // this text node is only whitespace, and it's not
          // within a whitespace sensitive element like <pre> or <code>
          // so replace the entire white space with a single new line
          output.currentLineWidth += 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            // good enough for a new line
            // for perf these are all just estimates
            // we don't care to ensure exact line lengths
            output.text.push('\n');
            output.currentLineWidth = 0;
          }
          else {
            // let's keep it all on the same line yet
            output.text.push(' ');
          }
        }
      }
      else {
        // this text node has text content
        const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 || opts.prettyHtml ? isWithinWhitespaceSensitive(node) : false;
        if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
          output.text.push('\n');
          output.currentLineWidth = 0;
        }
        if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
        let textContentLength = textContent.length;
        if (textContentLength > 0) {
          // this text node has text content
          const parentTagName = node.parentNode != null && node.parentNode.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */
            ? node.parentNode.nodeName
            : null;
          if (NON_ESCAPABLE_CONTENT.has(parentTagName)) {
            // this text node cannot have its content escaped since it's going
            // into an element like <style> or <script>
            if (isWithinWhitespaceSensitive(node)) {
              output.text.push(textContent);
            }
            else {
              output.text.push(trimmedTextContent);
              textContentLength = trimmedTextContent.length;
            }
            output.currentLineWidth += textContentLength;
          }
          else {
            // this text node is going into a normal element and html can be escaped
            if (opts.prettyHtml && !isWithinWhitespaceSensitiveNode) {
              // pretty print the text node
              output.text.push(escapeString(textContent.replace(/\s\s+/g, ' ').trim(), false));
              output.currentLineWidth += textContentLength;
            }
            else {
              // not pretty printing the text node
              if (isWithinWhitespaceSensitive(node)) {
                output.currentLineWidth += textContentLength;
              }
              else {
                // this element is not a whitespace sensitive one, like <pre> or <code> so
                // any whitespace at the start and end can be cleaned up to just be one space
                if (/\s/.test(textContent.charAt(0))) {
                  textContent = ' ' + textContent.trimLeft();
                }
                textContentLength = textContent.length;
                if (textContentLength > 1) {
                  if (/\s/.test(textContent.charAt(textContentLength - 1))) {
                    if (opts.approximateLineWidth > 0 &&
                      output.currentLineWidth + textContentLength > opts.approximateLineWidth) {
                      textContent = textContent.trimRight() + '\n';
                      output.currentLineWidth = 0;
                    }
                    else {
                      textContent = textContent.trimRight() + ' ';
                    }
                  }
                }
                output.currentLineWidth += textContentLength;
              }
              output.text.push(escapeString(textContent, false));
            }
          }
        }
      }
    }
  }
  else if (node.nodeType === 8 /* NODE_TYPES.COMMENT_NODE */) {
    const nodeValue = node.nodeValue;
    if (opts.removeHtmlComments) {
      const isHydrateAnnotation = nodeValue.startsWith(CONTENT_REF_ID + '.') ||
        nodeValue.startsWith(ORG_LOCATION_ID + '.') ||
        nodeValue.startsWith(SLOT_NODE_ID + '.') ||
        nodeValue.startsWith(TEXT_NODE_ID + '.');
      if (!isHydrateAnnotation) {
        return;
      }
    }
    const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
    if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
      for (let i = 0; i < output.indent; i++) {
        output.text.push(' ');
      }
      output.currentLineWidth += output.indent;
    }
    output.text.push('<!--' + nodeValue + '-->');
    output.currentLineWidth += nodeValue.length + 7;
  }
  else if (node.nodeType === 10 /* NODE_TYPES.DOCUMENT_TYPE_NODE */) {
    output.text.push('<!doctype html>');
  }
}
const AMP_REGEX = /&/g;
const NBSP_REGEX = /\u00a0/g;
const DOUBLE_QUOTE_REGEX = /"/g;
const LT_REGEX = /</g;
const GT_REGEX = />/g;
const CAN_REMOVE_ATTR_QUOTES = /^[^ \t\n\f\r"'`=<>\/\\-]+$/;
function getTagName(element) {
  if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return element.nodeName.toLowerCase();
  }
  else {
    return element.nodeName;
  }
}
function escapeString(str, attrMode) {
  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');
  if (attrMode) {
    return str.replace(DOUBLE_QUOTE_REGEX, '&quot;');
  }
  return str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');
}
function isWithinWhitespaceSensitive(node) {
  while (node != null) {
    if (WHITESPACE_SENSITIVE.has(node.nodeName)) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
/*@__PURE__*/ const NON_ESCAPABLE_CONTENT = new Set([
  'STYLE',
  'SCRIPT',
  'IFRAME',
  'NOSCRIPT',
  'XMP',
  'NOEMBED',
  'NOFRAMES',
  'PLAINTEXT',
]);
/*@__PURE__*/ const WHITESPACE_SENSITIVE = new Set([
  'CODE',
  'OUTPUT',
  'PLAINTEXT',
  'PRE',
  'SCRIPT',
  'TEMPLATE',
  'TEXTAREA',
]);
/*@__PURE__*/ const EMPTY_ELEMENTS = new Set([
  'area',
  'base',
  'basefont',
  'bgsound',
  'br',
  'col',
  'embed',
  'frame',
  'hr',
  'img',
  'input',
  'keygen',
  'link',
  'meta',
  'param',
  'source',
  'trace',
  'wbr',
]);
/*@__PURE__*/ const REMOVE_EMPTY_ATTR = new Set(['class', 'dir', 'id', 'lang', 'name', 'title']);
/*@__PURE__*/ const BOOLEAN_ATTR = new Set([
  'allowfullscreen',
  'async',
  'autofocus',
  'autoplay',
  'checked',
  'compact',
  'controls',
  'declare',
  'default',
  'defaultchecked',
  'defaultmuted',
  'defaultselected',
  'defer',
  'disabled',
  'enabled',
  'formnovalidate',
  'hidden',
  'indeterminate',
  'inert',
  'ismap',
  'itemscope',
  'loop',
  'multiple',
  'muted',
  'nohref',
  'nomodule',
  'noresize',
  'noshade',
  'novalidate',
  'nowrap',
  'open',
  'pauseonexit',
  'readonly',
  'required',
  'reversed',
  'scoped',
  'seamless',
  'selected',
  'sortable',
  'truespeed',
  'typemustmatch',
  'visible',
]);
/*@__PURE__*/ const STRUCTURE_ELEMENTS = new Set([
  'html',
  'body',
  'head',
  'iframe',
  'meta',
  'link',
  'base',
  'title',
  'script',
  'style',
]);

class MockNode {
  constructor(ownerDocument, nodeType, nodeName, nodeValue) {
    this.ownerDocument = ownerDocument;
    this.nodeType = nodeType;
    this.nodeName = nodeName;
    this._nodeValue = nodeValue;
    this.parentNode = null;
    this.childNodes = [];
  }
  appendChild(newNode) {
    if (newNode.nodeType === 11 /* NODE_TYPES.DOCUMENT_FRAGMENT_NODE */) {
      const nodes = newNode.childNodes.slice();
      for (const child of nodes) {
        this.appendChild(child);
      }
    }
    else {
      newNode.remove();
      newNode.parentNode = this;
      this.childNodes.push(newNode);
      connectNode(this.ownerDocument, newNode);
    }
    return newNode;
  }
  append(...items) {
    items.forEach((item) => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      this.appendChild(isNode ? item : this.ownerDocument.createTextNode(String(item)));
    });
  }
  prepend(...items) {
    const firstChild = this.firstChild;
    items.forEach((item) => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      if (firstChild) {
        this.insertBefore(isNode ? item : this.ownerDocument.createTextNode(String(item)), firstChild);
      }
    });
  }
  cloneNode(deep) {
    throw new Error(`invalid node type to clone: ${this.nodeType}, deep: ${deep}`);
  }
  compareDocumentPosition(_other) {
    // unimplemented
    // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
    return -1;
  }
  get firstChild() {
    return this.childNodes[0] || null;
  }
  insertBefore(newNode, referenceNode) {
    if (newNode.nodeType === 11 /* NODE_TYPES.DOCUMENT_FRAGMENT_NODE */) {
      for (let i = 0, ii = newNode.childNodes.length; i < ii; i++) {
        insertBefore(this, newNode.childNodes[i], referenceNode);
      }
    }
    else {
      insertBefore(this, newNode, referenceNode);
    }
    return newNode;
  }
  get isConnected() {
    let node = this;
    while (node != null) {
      if (node.nodeType === 9 /* NODE_TYPES.DOCUMENT_NODE */) {
        return true;
      }
      node = node.parentNode;
      if (node != null && node.nodeType === 11 /* NODE_TYPES.DOCUMENT_FRAGMENT_NODE */) {
        node = node.host;
      }
    }
    return false;
  }
  isSameNode(node) {
    return this === node;
  }
  get lastChild() {
    return this.childNodes[this.childNodes.length - 1] || null;
  }
  get nextSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) + 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  get nodeValue() {
    var _a;
    return (_a = this._nodeValue) !== null && _a !== void 0 ? _a : '';
  }
  set nodeValue(value) {
    this._nodeValue = value;
  }
  get parentElement() {
    return this.parentNode || null;
  }
  set parentElement(value) {
    this.parentNode = value;
  }
  get previousSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) - 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  contains(otherNode) {
    if (otherNode === this) {
      return true;
    }
    const childNodes = Array.from(this.childNodes);
    if (childNodes.includes(otherNode)) {
      return true;
    }
    return childNodes.some((node) => this.contains.bind(node)(otherNode));
  }
  removeChild(childNode) {
    const index = this.childNodes.indexOf(childNode);
    if (index > -1) {
      this.childNodes.splice(index, 1);
      if (this.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */) {
        const wasConnected = this.isConnected;
        childNode.parentNode = null;
        if (wasConnected === true) {
          disconnectNode(childNode);
        }
      }
      else {
        childNode.parentNode = null;
      }
    }
    else {
      throw new Error(`node not found within childNodes during removeChild`);
    }
    return childNode;
  }
  remove() {
    if (this.parentNode != null) {
      this.parentNode.removeChild(this);
    }
  }
  replaceChild(newChild, oldChild) {
    if (oldChild.parentNode === this) {
      this.insertBefore(newChild, oldChild);
      oldChild.remove();
      return newChild;
    }
    return null;
  }
  get textContent() {
    var _a;
    return (_a = this._nodeValue) !== null && _a !== void 0 ? _a : '';
  }
  set textContent(value) {
    this._nodeValue = String(value);
  }
}
MockNode.ELEMENT_NODE = 1;
MockNode.TEXT_NODE = 3;
MockNode.PROCESSING_INSTRUCTION_NODE = 7;
MockNode.COMMENT_NODE = 8;
MockNode.DOCUMENT_NODE = 9;
MockNode.DOCUMENT_TYPE_NODE = 10;
MockNode.DOCUMENT_FRAGMENT_NODE = 11;
class MockNodeList {
  constructor(ownerDocument, childNodes, length) {
    this.ownerDocument = ownerDocument;
    this.childNodes = childNodes;
    this.length = length;
  }
}
class MockElement extends MockNode {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, 1 /* NODE_TYPES.ELEMENT_NODE */, typeof nodeName === 'string' ? nodeName : null, null);
    this.namespaceURI = null;
    this.__shadowRoot = null;
    this.__attributeMap = null;
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  attachShadow(_opts) {
    const shadowRoot = this.ownerDocument.createDocumentFragment();
    this.shadowRoot = shadowRoot;
    return shadowRoot;
  }
  blur() {
    dispatchEvent(this, new MockFocusEvent('blur', { relatedTarget: null, bubbles: true, cancelable: true, composed: true }));
  }
  get shadowRoot() {
    return this.__shadowRoot || null;
  }
  set shadowRoot(shadowRoot) {
    if (shadowRoot != null) {
      shadowRoot.host = this;
      this.__shadowRoot = shadowRoot;
    }
    else {
      delete this.__shadowRoot;
    }
  }
  get attributes() {
    if (this.__attributeMap == null) {
      const attrMap = createAttributeProxy(false);
      this.__attributeMap = attrMap;
      return attrMap;
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
  get children() {
    return this.childNodes.filter((n) => n.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */);
  }
  get childElementCount() {
    return this.childNodes.filter((n) => n.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */).length;
  }
  get className() {
    return this.getAttributeNS(null, 'class') || '';
  }
  set className(value) {
    this.setAttributeNS(null, 'class', value);
  }
  get classList() {
    return new MockClassList(this);
  }
  click() {
    dispatchEvent(this, new MockEvent('click', { bubbles: true, cancelable: true, composed: true }));
  }
  cloneNode(_deep) {
    // implemented on MockElement.prototype from within element.ts
    // @ts-ignore - implemented on MockElement.prototype from within element.ts
    return null;
  }
  closest(selector) {
    let elm = this;
    while (elm != null) {
      if (elm.matches(selector)) {
        return elm;
      }
      elm = elm.parentNode;
    }
    return null;
  }
  get dataset() {
    return dataset(this);
  }
  get dir() {
    return this.getAttributeNS(null, 'dir') || '';
  }
  set dir(value) {
    this.setAttributeNS(null, 'dir', value);
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get firstElementChild() {
    return this.children[0] || null;
  }
  focus(_options) {
    dispatchEvent(this, new MockFocusEvent('focus', { relatedTarget: null, bubbles: true, cancelable: true, composed: true }));
  }
  getAttribute(attrName) {
    if (attrName === 'style') {
      if (this.__style != null && this.__style.length > 0) {
        return this.style.cssText;
      }
      return null;
    }
    const attr = this.attributes.getNamedItem(attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getBoundingClientRect() {
    return { bottom: 0, height: 0, left: 0, right: 0, top: 0, width: 0, x: 0, y: 0 };
  }
  getRootNode(opts) {
    const isComposed = opts != null && opts.composed === true;
    let node = this;
    while (node.parentNode != null) {
      node = node.parentNode;
      if (isComposed === true && node.parentNode == null && node.host != null) {
        node = node.host;
      }
    }
    return node;
  }
  get draggable() {
    return this.getAttributeNS(null, 'draggable') === 'true';
  }
  set draggable(value) {
    this.setAttributeNS(null, 'draggable', value);
  }
  hasChildNodes() {
    return this.childNodes.length > 0;
  }
  get id() {
    return this.getAttributeNS(null, 'id') || '';
  }
  set id(value) {
    this.setAttributeNS(null, 'id', value);
  }
  get innerHTML() {
    if (this.childNodes.length === 0) {
      return '';
    }
    return serializeNodeToHtml(this, {
      newLines: false,
      indentSpaces: 0,
    });
  }
  set innerHTML(html) {
    var _a;
    if (NON_ESCAPABLE_CONTENT.has((_a = this.nodeName) !== null && _a !== void 0 ? _a : '') === true) {
      setTextContent(this, html);
    }
    else {
      for (let i = this.childNodes.length - 1; i >= 0; i--) {
        this.removeChild(this.childNodes[i]);
      }
      if (typeof html === 'string') {
        const frag = parseFragmentUtil(this.ownerDocument, html);
        while (frag.childNodes.length > 0) {
          this.appendChild(frag.childNodes[0]);
        }
      }
    }
  }
  get innerText() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set innerText(value) {
    setTextContent(this, value);
  }
  insertAdjacentElement(position, elm) {
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
    return elm;
  }
  insertAdjacentHTML(position, html) {
    const frag = parseFragmentUtil(this.ownerDocument, html);
    if (position === 'beforebegin') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[0], this);
      }
    }
    else if (position === 'afterbegin') {
      while (frag.childNodes.length > 0) {
        this.prepend(frag.childNodes[frag.childNodes.length - 1]);
      }
    }
    else if (position === 'beforeend') {
      while (frag.childNodes.length > 0) {
        this.appendChild(frag.childNodes[0]);
      }
    }
    else if (position === 'afterend') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[frag.childNodes.length - 1], this.nextSibling);
      }
    }
  }
  insertAdjacentText(position, text) {
    const elm = this.ownerDocument.createTextNode(text);
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
  }
  hasAttribute(attrName) {
    if (attrName === 'style') {
      return this.__style != null && this.__style.length > 0;
    }
    return this.getAttribute(attrName) !== null;
  }
  hasAttributeNS(namespaceURI, name) {
    return this.getAttributeNS(namespaceURI, name) !== null;
  }
  get hidden() {
    return this.hasAttributeNS(null, 'hidden');
  }
  set hidden(isHidden) {
    if (isHidden === true) {
      this.setAttributeNS(null, 'hidden', '');
    }
    else {
      this.removeAttributeNS(null, 'hidden');
    }
  }
  get lang() {
    return this.getAttributeNS(null, 'lang') || '';
  }
  set lang(value) {
    this.setAttributeNS(null, 'lang', value);
  }
  get lastElementChild() {
    const children = this.children;
    return children[children.length - 1] || null;
  }
  matches(selector) {
    return matches(selector, this);
  }
  get nextElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */ ||
        parentElement.nodeType === 11 /* NODE_TYPES.DOCUMENT_FRAGMENT_NODE */ ||
        parentElement.nodeType === 9 /* NODE_TYPES.DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) + 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  get outerHTML() {
    return serializeNodeToHtml(this, {
      newLines: false,
      outerHtml: true,
      indentSpaces: 0,
    });
  }
  get previousElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */ ||
        parentElement.nodeType === 11 /* NODE_TYPES.DOCUMENT_FRAGMENT_NODE */ ||
        parentElement.nodeType === 9 /* NODE_TYPES.DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) - 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  getElementsByClassName(classNames) {
    const classes = classNames
      .trim()
      .split(' ')
      .filter((c) => c.length > 0);
    const results = [];
    getElementsByClassName(this, classes, results);
    return results;
  }
  getElementsByTagName(tagName) {
    const results = [];
    getElementsByTagName(this, tagName.toLowerCase(), results);
    return results;
  }
  querySelector(selector) {
    return selectOne(selector, this);
  }
  querySelectorAll(selector) {
    return selectAll(selector, this);
  }
  removeAttribute(attrName) {
    if (attrName === 'style') {
      delete this.__style;
    }
    else {
      const attr = this.attributes.getNamedItem(attrName);
      if (attr != null) {
        this.attributes.removeNamedItemNS(attr);
        if (checkAttributeChanged(this) === true) {
          attributeChanged(this, attrName, attr.value, null);
        }
      }
    }
  }
  removeAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      this.attributes.removeNamedItemNS(attr);
      if (checkAttributeChanged(this) === true) {
        attributeChanged(this, attrName, attr.value, null);
      }
    }
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  setAttribute(attrName, value) {
    if (attrName === 'style') {
      this.style = value;
    }
    else {
      const attributes = this.attributes;
      let attr = attributes.getNamedItem(attrName);
      const checkAttrChanged = checkAttributeChanged(this);
      if (attr != null) {
        if (checkAttrChanged === true) {
          const oldValue = attr.value;
          attr.value = value;
          if (oldValue !== attr.value) {
            attributeChanged(this, attr.name, oldValue, attr.value);
          }
        }
        else {
          attr.value = value;
        }
      }
      else {
        if (attributes.caseInsensitive) {
          attrName = attrName.toLowerCase();
        }
        attr = new MockAttr(attrName, value);
        attributes.__items.push(attr);
        if (checkAttrChanged === true) {
          attributeChanged(this, attrName, null, attr.value);
        }
      }
    }
  }
  setAttributeNS(namespaceURI, attrName, value) {
    const attributes = this.attributes;
    let attr = attributes.getNamedItemNS(namespaceURI, attrName);
    const checkAttrChanged = checkAttributeChanged(this);
    if (attr != null) {
      if (checkAttrChanged === true) {
        const oldValue = attr.value;
        attr.value = value;
        if (oldValue !== attr.value) {
          attributeChanged(this, attr.name, oldValue, attr.value);
        }
      }
      else {
        attr.value = value;
      }
    }
    else {
      attr = new MockAttr(attrName, value, namespaceURI);
      attributes.__items.push(attr);
      if (checkAttrChanged === true) {
        attributeChanged(this, attrName, null, attr.value);
      }
    }
  }
  get style() {
    if (this.__style == null) {
      this.__style = createCSSStyleDeclaration();
    }
    return this.__style;
  }
  set style(val) {
    if (typeof val === 'string') {
      if (this.__style == null) {
        this.__style = createCSSStyleDeclaration();
      }
      this.__style.cssText = val;
    }
    else {
      this.__style = val;
    }
  }
  get tabIndex() {
    return parseInt(this.getAttributeNS(null, 'tabindex') || '-1', 10);
  }
  set tabIndex(value) {
    this.setAttributeNS(null, 'tabindex', value);
  }
  get tagName() {
    var _a;
    return (_a = this.nodeName) !== null && _a !== void 0 ? _a : '';
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get textContent() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set textContent(value) {
    setTextContent(this, value);
  }
  get title() {
    return this.getAttributeNS(null, 'title') || '';
  }
  set title(value) {
    this.setAttributeNS(null, 'title', value);
  }
  animate() {
    /**/
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onfocusin() {
    /**/
  }
  onfocusout() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
  requestFullscreen() {
    /**/
  }
  scrollBy() {
    /**/
  }
  scrollTo() {
    /**/
  }
  scrollIntoView() {
    /**/
  }
  toString(opts) {
    return serializeNodeToHtml(this, opts);
  }
}
function getElementsByClassName(elm, classNames, foundElms) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    for (let j = 0, jj = classNames.length; j < jj; j++) {
      if (childElm.classList.contains(classNames[j])) {
        foundElms.push(childElm);
      }
    }
    getElementsByClassName(childElm, classNames, foundElms);
  }
}
function getElementsByTagName(elm, tagName, foundElms) {
  var _a;
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (tagName === '*' || ((_a = childElm.nodeName) !== null && _a !== void 0 ? _a : '').toLowerCase() === tagName) {
      foundElms.push(childElm);
    }
    getElementsByTagName(childElm, tagName, foundElms);
  }
}
function resetElement(elm) {
  resetEventListeners(elm);
  delete elm.__attributeMap;
  delete elm.__shadowRoot;
  delete elm.__style;
}
function insertBefore(parentNode, newNode, referenceNode) {
  if (newNode !== referenceNode) {
    newNode.remove();
    newNode.parentNode = parentNode;
    newNode.ownerDocument = parentNode.ownerDocument;
    if (referenceNode != null) {
      const index = parentNode.childNodes.indexOf(referenceNode);
      if (index > -1) {
        parentNode.childNodes.splice(index, 0, newNode);
      }
      else {
        throw new Error(`referenceNode not found in parentNode.childNodes`);
      }
    }
    else {
      parentNode.childNodes.push(newNode);
    }
    connectNode(parentNode.ownerDocument, newNode);
  }
  return newNode;
}
class MockHTMLElement extends MockElement {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, typeof nodeName === 'string' ? nodeName.toUpperCase() : null);
    this.namespaceURI = 'http://www.w3.org/1999/xhtml';
  }
  get tagName() {
    var _a;
    return (_a = this.nodeName) !== null && _a !== void 0 ? _a : '';
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get attributes() {
    if (this.__attributeMap == null) {
      const attrMap = createAttributeProxy(true);
      this.__attributeMap = attrMap;
      return attrMap;
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
}
class MockTextNode extends MockNode {
  constructor(ownerDocument, text) {
    super(ownerDocument, 3 /* NODE_TYPES.TEXT_NODE */, "#text" /* NODE_NAMES.TEXT_NODE */, text);
  }
  cloneNode(_deep) {
    return new MockTextNode(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
  get data() {
    return this.nodeValue;
  }
  set data(text) {
    this.nodeValue = text;
  }
  get wholeText() {
    if (this.parentNode != null) {
      const text = [];
      for (let i = 0, ii = this.parentNode.childNodes.length; i < ii; i++) {
        const childNode = this.parentNode.childNodes[i];
        if (childNode.nodeType === 3 /* NODE_TYPES.TEXT_NODE */) {
          text.push(childNode.nodeValue);
        }
      }
      return text.join('');
    }
    return this.nodeValue;
  }
}
function getTextContent(childNodes, text) {
  for (let i = 0, ii = childNodes.length; i < ii; i++) {
    const childNode = childNodes[i];
    if (childNode.nodeType === 3 /* NODE_TYPES.TEXT_NODE */) {
      text.push(childNode.nodeValue);
    }
    else if (childNode.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */) {
      getTextContent(childNode.childNodes, text);
    }
  }
}
function setTextContent(elm, text) {
  for (let i = elm.childNodes.length - 1; i >= 0; i--) {
    elm.removeChild(elm.childNodes[i]);
  }
  const textNode = new MockTextNode(elm.ownerDocument, text);
  elm.appendChild(textNode);
}

class MockComment extends MockNode {
  constructor(ownerDocument, data) {
    super(ownerDocument, 8 /* NODE_TYPES.COMMENT_NODE */, "#comment" /* NODE_NAMES.COMMENT_NODE */, data);
  }
  cloneNode(_deep) {
    return new MockComment(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
}

class MockDocumentFragment extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, null);
    this.nodeName = "#document-fragment" /* NODE_NAMES.DOCUMENT_FRAGMENT_NODE */;
    this.nodeType = 11 /* NODE_TYPES.DOCUMENT_FRAGMENT_NODE */;
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  cloneNode(deep) {
    const cloned = new MockDocumentFragment(null);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const childNode = this.childNodes[i];
        if (childNode.nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */ ||
          childNode.nodeType === 3 /* NODE_TYPES.TEXT_NODE */ ||
          childNode.nodeType === 8 /* NODE_TYPES.COMMENT_NODE */) {
          const clonedChildNode = this.childNodes[i].cloneNode(true);
          cloned.appendChild(clonedChildNode);
        }
      }
    }
    return cloned;
  }
}

class MockDocumentTypeNode extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, '!DOCTYPE');
    this.nodeType = 10 /* NODE_TYPES.DOCUMENT_TYPE_NODE */;
    this.setAttribute('html', '');
  }
}

class MockCSSRule {
  constructor(parentStyleSheet) {
    this.parentStyleSheet = parentStyleSheet;
    this.cssText = '';
    this.type = 0;
  }
}
class MockCSSStyleSheet {
  constructor(ownerNode) {
    this.type = 'text/css';
    this.parentStyleSheet = null;
    this.cssRules = [];
    this.ownerNode = ownerNode;
  }
  get rules() {
    return this.cssRules;
  }
  set rules(rules) {
    this.cssRules = rules;
  }
  deleteRule(index) {
    if (index >= 0 && index < this.cssRules.length) {
      this.cssRules.splice(index, 1);
      updateStyleTextNode(this.ownerNode);
    }
  }
  insertRule(rule, index = 0) {
    if (typeof index !== 'number') {
      index = 0;
    }
    if (index < 0) {
      index = 0;
    }
    if (index > this.cssRules.length) {
      index = this.cssRules.length;
    }
    const cssRule = new MockCSSRule(this);
    cssRule.cssText = rule;
    this.cssRules.splice(index, 0, cssRule);
    updateStyleTextNode(this.ownerNode);
    return index;
  }
}
function getStyleElementText(styleElm) {
  const output = [];
  for (let i = 0; i < styleElm.childNodes.length; i++) {
    output.push(styleElm.childNodes[i].nodeValue);
  }
  return output.join('');
}
function setStyleElementText(styleElm, text) {
  // keeping the innerHTML and the sheet.cssRules connected
  // is not technically correct, but since we're doing
  // SSR we'll need to turn any assigned cssRules into
  // real text, not just properties that aren't rendered
  const sheet = styleElm.sheet;
  sheet.cssRules.length = 0;
  sheet.insertRule(text);
  updateStyleTextNode(styleElm);
}
function updateStyleTextNode(styleElm) {
  const childNodeLen = styleElm.childNodes.length;
  if (childNodeLen > 1) {
    for (let i = childNodeLen - 1; i >= 1; i--) {
      styleElm.removeChild(styleElm.childNodes[i]);
    }
  }
  else if (childNodeLen < 1) {
    styleElm.appendChild(styleElm.ownerDocument.createTextNode(''));
  }
  const textNode = styleElm.childNodes[0];
  textNode.nodeValue = styleElm.sheet.cssRules.map((r) => r.cssText).join('\n');
}

function createElement(ownerDocument, tagName) {
  if (typeof tagName !== 'string' || tagName === '' || !/^[a-z0-9-_:]+$/i.test(tagName)) {
    throw new Error(`The tag name provided (${tagName}) is not a valid name.`);
  }
  tagName = tagName.toLowerCase();
  switch (tagName) {
    case 'a':
      return new MockAnchorElement(ownerDocument);
    case 'base':
      return new MockBaseElement(ownerDocument);
    case 'button':
      return new MockButtonElement(ownerDocument);
    case 'canvas':
      return new MockCanvasElement(ownerDocument);
    case 'form':
      return new MockFormElement(ownerDocument);
    case 'img':
      return new MockImageElement(ownerDocument);
    case 'input':
      return new MockInputElement(ownerDocument);
    case 'link':
      return new MockLinkElement(ownerDocument);
    case 'meta':
      return new MockMetaElement(ownerDocument);
    case 'script':
      return new MockScriptElement(ownerDocument);
    case 'style':
      return new MockStyleElement(ownerDocument);
    case 'template':
      return new MockTemplateElement(ownerDocument);
    case 'title':
      return new MockTitleElement(ownerDocument);
  }
  if (ownerDocument != null && tagName.includes('-')) {
    const win = ownerDocument.defaultView;
    if (win != null && win.customElements != null) {
      return createCustomElement(win.customElements, ownerDocument, tagName);
    }
  }
  return new MockHTMLElement(ownerDocument, tagName);
}
function createElementNS(ownerDocument, namespaceURI, tagName) {
  if (namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return createElement(ownerDocument, tagName);
  }
  else if (namespaceURI === 'http://www.w3.org/2000/svg') {
    switch (tagName.toLowerCase()) {
      case 'text':
      case 'tspan':
      case 'tref':
      case 'altglyph':
      case 'textpath':
        return new MockSVGTextContentElement(ownerDocument, tagName);
      case 'circle':
      case 'ellipse':
      case 'image':
      case 'line':
      case 'path':
      case 'polygon':
      case 'polyline':
      case 'rect':
      case 'use':
        return new MockSVGGraphicsElement(ownerDocument, tagName);
      case 'svg':
        return new MockSVGSVGElement(ownerDocument, tagName);
      default:
        return new MockSVGElement(ownerDocument, tagName);
    }
  }
  else {
    return new MockElement(ownerDocument, tagName);
  }
}
class MockAnchorElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'a');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
  get pathname() {
    return new URL(this.href).pathname;
  }
}
class MockButtonElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'button');
  }
}
patchPropAttributes(MockButtonElement.prototype, {
  type: String,
}, {
  type: 'submit',
});
class MockImageElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'img');
  }
  get draggable() {
    return this.getAttributeNS(null, 'draggable') !== 'false';
  }
  set draggable(value) {
    this.setAttributeNS(null, 'draggable', value);
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockImageElement.prototype, {
  height: Number,
  width: Number,
});
class MockInputElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'input');
  }
  get list() {
    const listId = this.getAttribute('list');
    if (listId) {
      return this.ownerDocument.getElementById(listId);
    }
    return null;
  }
}
patchPropAttributes(MockInputElement.prototype, {
  accept: String,
  autocomplete: String,
  autofocus: Boolean,
  capture: String,
  checked: Boolean,
  disabled: Boolean,
  form: String,
  formaction: String,
  formenctype: String,
  formmethod: String,
  formnovalidate: String,
  formtarget: String,
  height: Number,
  inputmode: String,
  max: String,
  maxLength: Number,
  min: String,
  minLength: Number,
  multiple: Boolean,
  name: String,
  pattern: String,
  placeholder: String,
  required: Boolean,
  readOnly: Boolean,
  size: Number,
  spellCheck: Boolean,
  src: String,
  step: String,
  type: String,
  value: String,
  width: Number,
}, {
  type: 'text',
});
class MockFormElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'form');
  }
}
patchPropAttributes(MockFormElement.prototype, {
  name: String,
});
class MockLinkElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'link');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
patchPropAttributes(MockLinkElement.prototype, {
  crossorigin: String,
  media: String,
  rel: String,
  type: String,
});
class MockMetaElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'meta');
  }
}
patchPropAttributes(MockMetaElement.prototype, {
  charset: String,
  content: String,
  name: String,
});
class MockScriptElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'script');
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockScriptElement.prototype, {
  type: String,
});
class MockDOMMatrix {
  constructor() {
    this.a = 1;
    this.b = 0;
    this.c = 0;
    this.d = 1;
    this.e = 0;
    this.f = 0;
    this.m11 = 1;
    this.m12 = 0;
    this.m13 = 0;
    this.m14 = 0;
    this.m21 = 0;
    this.m22 = 1;
    this.m23 = 0;
    this.m24 = 0;
    this.m31 = 0;
    this.m32 = 0;
    this.m33 = 1;
    this.m34 = 0;
    this.m41 = 0;
    this.m42 = 0;
    this.m43 = 0;
    this.m44 = 1;
    this.is2D = true;
    this.isIdentity = true;
  }
  static fromMatrix() {
    return new MockDOMMatrix();
  }
  inverse() {
    return new MockDOMMatrix();
  }
  flipX() {
    return new MockDOMMatrix();
  }
  flipY() {
    return new MockDOMMatrix();
  }
  multiply() {
    return new MockDOMMatrix();
  }
  rotate() {
    return new MockDOMMatrix();
  }
  rotateAxisAngle() {
    return new MockDOMMatrix();
  }
  rotateFromVector() {
    return new MockDOMMatrix();
  }
  scale() {
    return new MockDOMMatrix();
  }
  scaleNonUniform() {
    return new MockDOMMatrix();
  }
  skewX() {
    return new MockDOMMatrix();
  }
  skewY() {
    return new MockDOMMatrix();
  }
  toJSON() { }
  toString() { }
  transformPoint() {
    return new MockDOMPoint();
  }
  translate() {
    return new MockDOMMatrix();
  }
}
class MockDOMPoint {
  constructor() {
    this.w = 1;
    this.x = 0;
    this.y = 0;
    this.z = 0;
  }
  toJSON() { }
  matrixTransform() {
    return new MockDOMMatrix();
  }
}
class MockSVGRect {
  constructor() {
    this.height = 10;
    this.width = 10;
    this.x = 0;
    this.y = 0;
  }
}
class MockStyleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'style');
    this.sheet = new MockCSSStyleSheet(this);
  }
  get innerHTML() {
    return getStyleElementText(this);
  }
  set innerHTML(value) {
    setStyleElementText(this, value);
  }
  get innerText() {
    return getStyleElementText(this);
  }
  set innerText(value) {
    setStyleElementText(this, value);
  }
  get textContent() {
    return getStyleElementText(this);
  }
  set textContent(value) {
    setStyleElementText(this, value);
  }
}
class MockSVGElement extends MockElement {
  // SVGElement properties and methods
  get ownerSVGElement() {
    return null;
  }
  get viewportElement() {
    return null;
  }
  onunload() {
    /**/
  }
  // SVGGeometryElement properties and methods
  get pathLength() {
    return 0;
  }
  isPointInFill(_pt) {
    return false;
  }
  isPointInStroke(_pt) {
    return false;
  }
  getTotalLength() {
    return 0;
  }
}
class MockSVGGraphicsElement extends MockSVGElement {
  getBBox(_options) {
    return new MockSVGRect();
  }
  getCTM() {
    return new MockDOMMatrix();
  }
  getScreenCTM() {
    return new MockDOMMatrix();
  }
}
class MockSVGSVGElement extends MockSVGGraphicsElement {
  createSVGPoint() {
    return new MockDOMPoint();
  }
}
class MockSVGTextContentElement extends MockSVGGraphicsElement {
  getComputedTextLength() {
    return 0;
  }
}
class MockBaseElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'base');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
class MockTemplateElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'template');
    this.content = new MockDocumentFragment(ownerDocument);
  }
  get innerHTML() {
    return this.content.innerHTML;
  }
  set innerHTML(html) {
    this.content.innerHTML = html;
  }
  cloneNode(deep) {
    const cloned = new MockTemplateElement(null);
    cloned.attributes = cloneAttributes(this.attributes);
    const styleCssText = this.getAttribute('style');
    if (styleCssText != null && styleCssText.length > 0) {
      cloned.setAttribute('style', styleCssText);
    }
    cloned.content = this.content.cloneNode(deep);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const clonedChildNode = this.childNodes[i].cloneNode(true);
        cloned.appendChild(clonedChildNode);
      }
    }
    return cloned;
  }
}
class MockTitleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'title');
  }
  get text() {
    return this.textContent;
  }
  set text(value) {
    this.textContent = value;
  }
}
class MockCanvasElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'canvas');
  }
  getContext() {
    return {
      fillRect() {
        return;
      },
      clearRect() { },
      getImageData: function (_, __, w, h) {
        return {
          data: new Array(w * h * 4),
        };
      },
      putImageData() { },
      createImageData: function () {
        return [];
      },
      setTransform() { },
      drawImage() { },
      save() { },
      fillText() { },
      restore() { },
      beginPath() { },
      moveTo() { },
      lineTo() { },
      closePath() { },
      stroke() { },
      translate() { },
      scale() { },
      rotate() { },
      arc() { },
      fill() { },
      measureText() {
        return { width: 0 };
      },
      transform() { },
      rect() { },
      clip() { },
    };
  }
}
function fullUrl(elm, attrName) {
  const val = elm.getAttribute(attrName) || '';
  if (elm.ownerDocument != null) {
    const win = elm.ownerDocument.defaultView;
    if (win != null) {
      const loc = win.location;
      if (loc != null) {
        try {
          const url = new URL(val, loc.href);
          return url.href;
        }
        catch (e) { }
      }
    }
  }
  return val.replace(/\'|\"/g, '').trim();
}
function patchPropAttributes(prototype, attrs, defaults = {}) {
  Object.keys(attrs).forEach((propName) => {
    const attr = attrs[propName];
    const defaultValue = defaults[propName];
    if (attr === Boolean) {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName);
        },
        set(value) {
          if (value) {
            this.setAttribute(propName, '');
          }
          else {
            this.removeAttribute(propName);
          }
        },
      });
    }
    else if (attr === Number) {
      Object.defineProperty(prototype, propName, {
        get() {
          const value = this.getAttribute(propName);
          return value ? parseInt(value, 10) : defaultValue === undefined ? 0 : defaultValue;
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
    else {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName) ? this.getAttribute(propName) : defaultValue || '';
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
  });
}
MockElement.prototype.cloneNode = function (deep) {
  // because we're creating elements, which extending specific HTML base classes there
  // is a MockElement circular reference that bundling has trouble dealing with so
  // the fix is to add cloneNode() to MockElement's prototype after the HTML classes
  const cloned = createElement(this.ownerDocument, this.nodeName);
  cloned.attributes = cloneAttributes(this.attributes);
  const styleCssText = this.getAttribute('style');
  if (styleCssText != null && styleCssText.length > 0) {
    cloned.setAttribute('style', styleCssText);
  }
  if (deep) {
    for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
      const clonedChildNode = this.childNodes[i].cloneNode(true);
      cloned.appendChild(clonedChildNode);
    }
  }
  return cloned;
};

let sharedDocument;
function parseHtmlToDocument(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseDocumentUtil(ownerDocument, html);
}
function parseHtmlToFragment(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseFragmentUtil(ownerDocument, html);
}

const consoleNoop = () => {
  /**/
};
function createConsole() {
  return {
    debug: consoleNoop,
    error: consoleNoop,
    info: consoleNoop,
    log: consoleNoop,
    warn: consoleNoop,
    dir: consoleNoop,
    dirxml: consoleNoop,
    table: consoleNoop,
    trace: consoleNoop,
    group: consoleNoop,
    groupCollapsed: consoleNoop,
    groupEnd: consoleNoop,
    clear: consoleNoop,
    count: consoleNoop,
    countReset: consoleNoop,
    assert: consoleNoop,
    profile: consoleNoop,
    profileEnd: consoleNoop,
    time: consoleNoop,
    timeLog: consoleNoop,
    timeEnd: consoleNoop,
    timeStamp: consoleNoop,
    context: consoleNoop,
    memory: consoleNoop,
  };
}

class MockHeaders {
  constructor(init) {
    this._values = [];
    if (typeof init === 'object') {
      if (typeof init[Symbol.iterator] === 'function') {
        const kvs = [];
        for (const kv of init) {
          if (typeof kv[Symbol.iterator] === 'function') {
            kvs.push([...kv]);
          }
        }
        for (const kv of kvs) {
          this.append(kv[0], kv[1]);
        }
      }
      else {
        for (const key in init) {
          this.append(key, init[key]);
        }
      }
    }
  }
  append(key, value) {
    this._values.push([key, value + '']);
  }
  delete(key) {
    key = key.toLowerCase();
    for (let i = this._values.length - 1; i >= 0; i--) {
      if (this._values[i][0].toLowerCase() === key) {
        this._values.splice(i, 1);
      }
    }
  }
  entries() {
    const entries = [];
    for (const kv of this.keys()) {
      entries.push([kv, this.get(kv)]);
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: entries[index],
          done: !entries[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  forEach(cb) {
    for (const kv of this.entries()) {
      cb(kv[1], kv[0]);
    }
  }
  get(key) {
    const rtn = [];
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        rtn.push(kv[1]);
      }
    }
    return rtn.length > 0 ? rtn.join(', ') : null;
  }
  has(key) {
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        return true;
      }
    }
    return false;
  }
  keys() {
    const keys = [];
    for (const kv of this._values) {
      const key = kv[0].toLowerCase();
      if (!keys.includes(key)) {
        keys.push(key);
      }
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: keys[index],
          done: !keys[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  set(key, value) {
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key.toLowerCase()) {
        kv[1] = value + '';
        return;
      }
    }
    this.append(key, value);
  }
  values() {
    const values = this._values;
    let index = -1;
    return {
      next() {
        index++;
        const done = !values[index];
        return {
          value: done ? undefined : values[index][1],
          done,
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  [Symbol.iterator]() {
    return this.entries();
  }
}

class MockDOMParser {
  parseFromString(htmlToParse, mimeType) {
    if (mimeType !== 'text/html') {
      console.error('XML parsing not implemented yet, continuing as html');
    }
    return parseHtmlToDocument(htmlToParse);
  }
}

class MockRequest {
  constructor(input, init = {}) {
    this._method = 'GET';
    this._url = '/';
    this.bodyUsed = false;
    this.cache = 'default';
    this.credentials = 'same-origin';
    this.integrity = '';
    this.keepalive = false;
    this.mode = 'cors';
    this.redirect = 'follow';
    this.referrer = 'about:client';
    this.referrerPolicy = '';
    if (typeof input === 'string') {
      this.url = input;
    }
    else if (input) {
      Object.assign(this, input);
      this.headers = new MockHeaders(input.headers);
    }
    Object.assign(this, init);
    if (init.headers) {
      this.headers = new MockHeaders(init.headers);
    }
    if (!this.headers) {
      this.headers = new MockHeaders();
    }
  }
  get url() {
    if (typeof this._url === 'string') {
      return new URL(this._url, location.href).href;
    }
    return new URL('/', location.href).href;
  }
  set url(value) {
    this._url = value;
  }
  get method() {
    if (typeof this._method === 'string') {
      return this._method.toUpperCase();
    }
    return 'GET';
  }
  set method(value) {
    this._method = value;
  }
  clone() {
    const clone = { ...this };
    clone.headers = new MockHeaders(this.headers);
    return new MockRequest(clone);
  }
}
class MockResponse {
  constructor(body, init = {}) {
    this.ok = true;
    this.status = 200;
    this.statusText = '';
    this.type = 'default';
    this.url = '';
    this._body = body;
    if (init) {
      Object.assign(this, init);
    }
    this.headers = new MockHeaders(init.headers);
  }
  async json() {
    return JSON.parse(this._body);
  }
  async text() {
    return this._body;
  }
  clone() {
    const initClone = { ...this };
    initClone.headers = new MockHeaders(this.headers);
    return new MockResponse(this._body, initClone);
  }
}

function setupGlobal(gbl) {
  if (gbl.window == null) {
    const win = (gbl.window = new MockWindow());
    WINDOW_FUNCTIONS.forEach((fnName) => {
      if (!(fnName in gbl)) {
        gbl[fnName] = win[fnName].bind(win);
      }
    });
    WINDOW_PROPS.forEach((propName) => {
      if (!(propName in gbl)) {
        Object.defineProperty(gbl, propName, {
          get() {
            return win[propName];
          },
          set(val) {
            win[propName] = val;
          },
          configurable: true,
          enumerable: true,
        });
      }
    });
    GLOBAL_CONSTRUCTORS.forEach(([cstrName]) => {
      gbl[cstrName] = win[cstrName];
    });
  }
  return gbl.window;
}
function teardownGlobal(gbl) {
  const win = gbl.window;
  if (win && typeof win.close === 'function') {
    win.close();
  }
}
function patchWindow(winToBePatched) {
  const mockWin = new MockWindow(false);
  WINDOW_FUNCTIONS.forEach((fnName) => {
    if (typeof winToBePatched[fnName] !== 'function') {
      winToBePatched[fnName] = mockWin[fnName].bind(mockWin);
    }
  });
  WINDOW_PROPS.forEach((propName) => {
    if (winToBePatched === undefined) {
      Object.defineProperty(winToBePatched, propName, {
        get() {
          return mockWin[propName];
        },
        set(val) {
          mockWin[propName] = val;
        },
        configurable: true,
        enumerable: true,
      });
    }
  });
}
function addGlobalsToWindowPrototype(mockWinPrototype) {
  GLOBAL_CONSTRUCTORS.forEach(([cstrName, Cstr]) => {
    Object.defineProperty(mockWinPrototype, cstrName, {
      get() {
        return this['__' + cstrName] || Cstr;
      },
      set(cstr) {
        this['__' + cstrName] = cstr;
      },
      configurable: true,
      enumerable: true,
    });
  });
}
const WINDOW_FUNCTIONS = [
  'addEventListener',
  'alert',
  'blur',
  'cancelAnimationFrame',
  'cancelIdleCallback',
  'clearInterval',
  'clearTimeout',
  'close',
  'confirm',
  'dispatchEvent',
  'focus',
  'getComputedStyle',
  'matchMedia',
  'open',
  'prompt',
  'removeEventListener',
  'requestAnimationFrame',
  'requestIdleCallback',
  'URL',
];
const WINDOW_PROPS = [
  'customElements',
  'devicePixelRatio',
  'document',
  'history',
  'innerHeight',
  'innerWidth',
  'localStorage',
  'location',
  'navigator',
  'pageXOffset',
  'pageYOffset',
  'performance',
  'screenLeft',
  'screenTop',
  'screenX',
  'screenY',
  'scrollX',
  'scrollY',
  'sessionStorage',
  'CSS',
  'CustomEvent',
  'Event',
  'Element',
  'HTMLElement',
  'Node',
  'NodeList',
  'FocusEvent',
  'KeyboardEvent',
  'MouseEvent',
];
const GLOBAL_CONSTRUCTORS = [
  ['CustomEvent', MockCustomEvent],
  ['Event', MockEvent],
  ['Headers', MockHeaders],
  ['FocusEvent', MockFocusEvent],
  ['KeyboardEvent', MockKeyboardEvent],
  ['MouseEvent', MockMouseEvent],
  ['Request', MockRequest],
  ['Response', MockResponse],
  ['DOMParser', MockDOMParser],
  ['HTMLAnchorElement', MockAnchorElement],
  ['HTMLBaseElement', MockBaseElement],
  ['HTMLButtonElement', MockButtonElement],
  ['HTMLCanvasElement', MockCanvasElement],
  ['HTMLFormElement', MockFormElement],
  ['HTMLImageElement', MockImageElement],
  ['HTMLInputElement', MockInputElement],
  ['HTMLLinkElement', MockLinkElement],
  ['HTMLMetaElement', MockMetaElement],
  ['HTMLScriptElement', MockScriptElement],
  ['HTMLStyleElement', MockStyleElement],
  ['HTMLTemplateElement', MockTemplateElement],
  ['HTMLTitleElement', MockTitleElement],
];

class MockHistory {
  constructor() {
    this.items = [];
  }
  get length() {
    return this.items.length;
  }
  back() {
    this.go(-1);
  }
  forward() {
    this.go(1);
  }
  go(_value) {
    //
  }
  pushState(_state, _title, _url) {
    //
  }
  replaceState(_state, _title, _url) {
    //
  }
}

class MockIntersectionObserver {
  constructor() {
    /**/
  }
  disconnect() {
    /**/
  }
  observe() {
    /**/
  }
  takeRecords() {
    return [];
  }
  unobserve() {
    /**/
  }
}

class MockLocation {
  constructor() {
    this.ancestorOrigins = null;
    this.protocol = '';
    this.host = '';
    this.hostname = '';
    this.port = '';
    this.pathname = '';
    this.search = '';
    this.hash = '';
    this.username = '';
    this.password = '';
    this.origin = '';
    this._href = '';
  }
  get href() {
    return this._href;
  }
  set href(value) {
    const url = new URL(value, 'http://mockdoc.stenciljs.com');
    this._href = url.href;
    this.protocol = url.protocol;
    this.host = url.host;
    this.hostname = url.hostname;
    this.port = url.port;
    this.pathname = url.pathname;
    this.search = url.search;
    this.hash = url.hash;
    this.username = url.username;
    this.password = url.password;
    this.origin = url.origin;
  }
  assign(_url) {
    //
  }
  reload(_forcedReload) {
    //
  }
  replace(_url) {
    //
  }
  toString() {
    return this.href;
  }
}

class MockNavigator {
  constructor() {
    this.appCodeName = 'MockNavigator';
    this.appName = 'MockNavigator';
    this.appVersion = 'MockNavigator';
    this.platform = 'MockNavigator';
    this.userAgent = 'MockNavigator';
  }
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/API/Performance
 */
class MockPerformance {
  constructor() {
    this.timeOrigin = Date.now();
    this.eventCounts = new Map();
  }
  addEventListener() {
    //
  }
  clearMarks() {
    //
  }
  clearMeasures() {
    //
  }
  clearResourceTimings() {
    //
  }
  dispatchEvent() {
    return true;
  }
  getEntries() {
    return [];
  }
  getEntriesByName() {
    return [];
  }
  getEntriesByType() {
    return [];
  }
  // Stencil's implementation of `mark` is non-compliant with the `Performance` interface. Because Stencil will
  // instantiate an instance of this class and may attempt to assign it to a variable of type `Performance`, the return
  // type must match the `Performance` interface (rather than typing this function as returning `void` and ignoring the
  // associated errors returned by the type checker)
  // @ts-ignore
  mark() {
    //
  }
  // Stencil's implementation of `measure` is non-compliant with the `Performance` interface. Because Stencil will
  // instantiate an instance of this class and may attempt to assign it to a variable of type `Performance`, the return
  // type must match the `Performance` interface (rather than typing this function as returning `void` and ignoring the
  // associated errors returned by the type checker)
  // @ts-ignore
  measure() {
    //
  }
  get navigation() {
    return {};
  }
  now() {
    return Date.now() - this.timeOrigin;
  }
  get onresourcetimingbufferfull() {
    return null;
  }
  removeEventListener() {
    //
  }
  setResourceTimingBufferSize() {
    //
  }
  get timing() {
    return {};
  }
  toJSON() {
    //
  }
}
function resetPerformance(perf) {
  if (perf != null) {
    try {
      perf.timeOrigin = Date.now();
    }
    catch (e) { }
  }
}

class MockStorage {
  constructor() {
    this.items = new Map();
  }
  key(_value) {
    //
  }
  getItem(key) {
    key = String(key);
    if (this.items.has(key)) {
      return this.items.get(key);
    }
    return null;
  }
  setItem(key, value) {
    if (value == null) {
      value = 'null';
    }
    this.items.set(String(key), String(value));
  }
  removeItem(key) {
    this.items.delete(String(key));
  }
  clear() {
    this.items.clear();
  }
}

const nativeClearInterval = clearInterval;
const nativeClearTimeout = clearTimeout;
const nativeSetInterval = setInterval;
const nativeSetTimeout = setTimeout;
const nativeURL = URL;
class MockWindow {
  constructor(html = null) {
    if (html !== false) {
      this.document = new MockDocument(html, this);
    }
    else {
      this.document = null;
    }
    this.performance = new MockPerformance();
    this.customElements = new MockCustomElementRegistry(this);
    this.console = createConsole();
    resetWindowDefaults(this);
    resetWindowDimensions(this);
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  alert(msg) {
    if (this.console) {
      this.console.debug(msg);
    }
    else {
      console.debug(msg);
    }
  }
  blur() {
    /**/
  }
  cancelAnimationFrame(id) {
    this.__clearTimeout(id);
  }
  cancelIdleCallback(id) {
    this.__clearTimeout(id);
  }
  get CharacterData() {
    if (this.__charDataCstr == null) {
      const ownerDocument = this.document;
      this.__charDataCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct CharacterData');
        }
      };
    }
    return this.__charDataCstr;
  }
  set CharacterData(charDataCstr) {
    this.__charDataCstr = charDataCstr;
  }
  clearInterval(id) {
    this.__clearInterval(id);
  }
  clearTimeout(id) {
    this.__clearTimeout(id);
  }
  close() {
    resetWindow(this);
  }
  confirm() {
    return false;
  }
  get CSS() {
    return {
      supports: () => true,
    };
  }
  get Document() {
    if (this.__docCstr == null) {
      const win = this;
      this.__docCstr = class extends MockDocument {
        constructor() {
          super(false, win);
          throw new Error('Illegal constructor: cannot construct Document');
        }
      };
    }
    return this.__docCstr;
  }
  set Document(docCstr) {
    this.__docCstr = docCstr;
  }
  get DocumentFragment() {
    if (this.__docFragCstr == null) {
      const ownerDocument = this.document;
      this.__docFragCstr = class extends MockDocumentFragment {
        constructor() {
          super(ownerDocument);
          throw new Error('Illegal constructor: cannot construct DocumentFragment');
        }
      };
    }
    return this.__docFragCstr;
  }
  set DocumentFragment(docFragCstr) {
    this.__docFragCstr = docFragCstr;
  }
  get DocumentType() {
    if (this.__docTypeCstr == null) {
      const ownerDocument = this.document;
      this.__docTypeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct DocumentType');
        }
      };
    }
    return this.__docTypeCstr;
  }
  set DocumentType(docTypeCstr) {
    this.__docTypeCstr = docTypeCstr;
  }
  get DOMTokenList() {
    if (this.__domTokenListCstr == null) {
      this.__domTokenListCstr = class MockDOMTokenList {
      };
    }
    return this.__domTokenListCstr;
  }
  set DOMTokenList(domTokenListCstr) {
    this.__domTokenListCstr = domTokenListCstr;
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get Element() {
    if (this.__elementCstr == null) {
      const ownerDocument = this.document;
      this.__elementCstr = class extends MockElement {
        constructor() {
          super(ownerDocument, '');
          throw new Error('Illegal constructor: cannot construct Element');
        }
      };
    }
    return this.__elementCstr;
  }
  fetch(input, init) {
    if (typeof fetch === 'function') {
      return fetch(input, init);
    }
    throw new Error(`fetch() not implemented`);
  }
  focus() {
    /**/
  }
  getComputedStyle(_) {
    return {
      cssText: '',
      length: 0,
      parentRule: null,
      getPropertyPriority() {
        return null;
      },
      getPropertyValue() {
        return '';
      },
      item() {
        return null;
      },
      removeProperty() {
        return null;
      },
      setProperty() {
        return null;
      },
    };
  }
  get globalThis() {
    return this;
  }
  get history() {
    if (this.__history == null) {
      this.__history = new MockHistory();
    }
    return this.__history;
  }
  set history(hsty) {
    this.__history = hsty;
  }
  get JSON() {
    return JSON;
  }
  get HTMLElement() {
    if (this.__htmlElementCstr == null) {
      const ownerDocument = this.document;
      this.__htmlElementCstr = class extends MockHTMLElement {
        constructor() {
          super(ownerDocument, '');
          const observedAttributes = this.constructor.observedAttributes;
          if (Array.isArray(observedAttributes) && typeof this.attributeChangedCallback === 'function') {
            observedAttributes.forEach((attrName) => {
              const attrValue = this.getAttribute(attrName);
              if (attrValue != null) {
                this.attributeChangedCallback(attrName, null, attrValue);
              }
            });
          }
        }
      };
    }
    return this.__htmlElementCstr;
  }
  set HTMLElement(htmlElementCstr) {
    this.__htmlElementCstr = htmlElementCstr;
  }
  get IntersectionObserver() {
    return MockIntersectionObserver;
  }
  get localStorage() {
    if (this.__localStorage == null) {
      this.__localStorage = new MockStorage();
    }
    return this.__localStorage;
  }
  set localStorage(locStorage) {
    this.__localStorage = locStorage;
  }
  get location() {
    if (this.__location == null) {
      this.__location = new MockLocation();
    }
    return this.__location;
  }
  set location(val) {
    if (typeof val === 'string') {
      if (this.__location == null) {
        this.__location = new MockLocation();
      }
      this.__location.href = val;
    }
    else {
      this.__location = val;
    }
  }
  matchMedia(media) {
    return {
      media,
      matches: false,
      addListener: (_handler) => { },
      removeListener: (_handler) => { },
      addEventListener: (_type, _handler) => { },
      removeEventListener: (_type, _handler) => { },
      dispatchEvent: (_ev) => { },
      onchange: null,
    };
  }
  get Node() {
    if (this.__nodeCstr == null) {
      const ownerDocument = this.document;
      this.__nodeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct Node');
        }
      };
    }
    return this.__nodeCstr;
  }
  get NodeList() {
    if (this.__nodeListCstr == null) {
      const ownerDocument = this.document;
      this.__nodeListCstr = class extends MockNodeList {
        constructor() {
          super(ownerDocument, [], 0);
          throw new Error('Illegal constructor: cannot construct NodeList');
        }
      };
    }
    return this.__nodeListCstr;
  }
  get navigator() {
    if (this.__navigator == null) {
      this.__navigator = new MockNavigator();
    }
    return this.__navigator;
  }
  set navigator(nav) {
    this.__navigator = nav;
  }
  get parent() {
    return null;
  }
  prompt() {
    return '';
  }
  open() {
    return null;
  }
  get origin() {
    return this.location.origin;
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  requestAnimationFrame(callback) {
    return this.setTimeout(() => {
      callback(Date.now());
    }, 0);
  }
  requestIdleCallback(callback) {
    return this.setTimeout(() => {
      callback({
        didTimeout: false,
        timeRemaining: () => 0,
      });
    }, 0);
  }
  scroll(_x, _y) {
    /**/
  }
  scrollBy(_x, _y) {
    /**/
  }
  scrollTo(_x, _y) {
    /**/
  }
  get self() {
    return this;
  }
  get sessionStorage() {
    if (this.__sessionStorage == null) {
      this.__sessionStorage = new MockStorage();
    }
    return this.__sessionStorage;
  }
  set sessionStorage(locStorage) {
    this.__sessionStorage = locStorage;
  }
  setInterval(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    if (this.__allowInterval) {
      const intervalId = this.__setInterval(() => {
        if (this.__timeouts) {
          this.__timeouts.delete(intervalId);
          try {
            callback(...args);
          }
          catch (e) {
            if (this.console) {
              this.console.error(e);
            }
            else {
              console.error(e);
            }
          }
        }
      }, ms);
      if (this.__timeouts) {
        this.__timeouts.add(intervalId);
      }
      return intervalId;
    }
    const timeoutId = this.__setTimeout(() => {
      if (this.__timeouts) {
        this.__timeouts.delete(timeoutId);
        try {
          callback(...args);
        }
        catch (e) {
          if (this.console) {
            this.console.error(e);
          }
          else {
            console.error(e);
          }
        }
      }
    }, ms);
    if (this.__timeouts) {
      this.__timeouts.add(timeoutId);
    }
    return timeoutId;
  }
  setTimeout(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    const timeoutId = this.__setTimeout(() => {
      if (this.__timeouts) {
        this.__timeouts.delete(timeoutId);
        try {
          callback(...args);
        }
        catch (e) {
          if (this.console) {
            this.console.error(e);
          }
          else {
            console.error(e);
          }
        }
      }
    }, ms);
    if (this.__timeouts) {
      this.__timeouts.add(timeoutId);
    }
    return timeoutId;
  }
  get top() {
    return this;
  }
  get window() {
    return this;
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onfocusin() {
    /**/
  }
  onfocusout() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
}
addGlobalsToWindowPrototype(MockWindow.prototype);
function resetWindowDefaults(win) {
  win.__clearInterval = nativeClearInterval;
  win.__clearTimeout = nativeClearTimeout;
  win.__setInterval = nativeSetInterval;
  win.__setTimeout = nativeSetTimeout;
  win.__maxTimeout = 30000;
  win.__allowInterval = true;
  win.URL = nativeURL;
}
function cloneWindow(srcWin, opts = {}) {
  if (srcWin == null) {
    return null;
  }
  const clonedWin = new MockWindow(false);
  if (!opts.customElementProxy) {
    // TODO(STENCIL-345) - Evaluate reconciling MockWindow, Window differences
    // @ts-ignore
    srcWin.customElements = null;
  }
  if (srcWin.document != null) {
    const clonedDoc = new MockDocument(false, clonedWin);
    clonedWin.document = clonedDoc;
    clonedDoc.documentElement = srcWin.document.documentElement.cloneNode(true);
  }
  else {
    clonedWin.document = new MockDocument(null, clonedWin);
  }
  return clonedWin;
}
function cloneDocument(srcDoc) {
  if (srcDoc == null) {
    return null;
  }
  const dstWin = cloneWindow(srcDoc.defaultView);
  return dstWin.document;
}
// TODO(STENCIL-345) - Evaluate reconciling MockWindow, Window differences
/**
 * Constrain setTimeout() to 1ms, but still async. Also
 * only allow setInterval() to fire once, also constrained to 1ms.
 * @param win the mock window instance to update
 */
function constrainTimeouts(win) {
  win.__allowInterval = false;
  win.__maxTimeout = 0;
}
function resetWindow(win) {
  if (win != null) {
    if (win.__timeouts) {
      win.__timeouts.forEach((timeoutId) => {
        nativeClearInterval(timeoutId);
        nativeClearTimeout(timeoutId);
      });
      win.__timeouts.clear();
    }
    if (win.customElements && win.customElements.clear) {
      win.customElements.clear();
    }
    resetDocument(win.document);
    resetPerformance(win.performance);
    for (const key in win) {
      if (win.hasOwnProperty(key) && key !== 'document' && key !== 'performance' && key !== 'customElements') {
        delete win[key];
      }
    }
    resetWindowDefaults(win);
    resetWindowDimensions(win);
    resetEventListeners(win);
    if (win.document != null) {
      try {
        win.document.defaultView = win;
      }
      catch (e) { }
    }
    // ensure we don't hold onto nodeFetch values
    win.fetch = null;
    win.Headers = null;
    win.Request = null;
    win.Response = null;
    win.FetchError = null;
  }
}
function resetWindowDimensions(win) {
  try {
    win.devicePixelRatio = 1;
    win.innerHeight = 768;
    win.innerWidth = 1366;
    win.pageXOffset = 0;
    win.pageYOffset = 0;
    win.screenLeft = 0;
    win.screenTop = 0;
    win.screenX = 0;
    win.screenY = 0;
    win.scrollX = 0;
    win.scrollY = 0;
    win.screen = {
      availHeight: win.innerHeight,
      availLeft: 0,
      availTop: 0,
      availWidth: win.innerWidth,
      colorDepth: 24,
      height: win.innerHeight,
      keepAwake: false,
      orientation: {
        angle: 0,
        type: 'portrait-primary',
      },
      pixelDepth: 24,
      width: win.innerWidth,
    };
  }
  catch (e) { }
}

class MockDocument extends MockHTMLElement {
  constructor(html = null, win = null) {
    super(null, null);
    this.nodeName = "#document" /* NODE_NAMES.DOCUMENT_NODE */;
    this.nodeType = 9 /* NODE_TYPES.DOCUMENT_NODE */;
    this.defaultView = win;
    this.cookie = '';
    this.referrer = '';
    this.appendChild(this.createDocumentTypeNode());
    if (typeof html === 'string') {
      const parsedDoc = parseDocumentUtil(this, html);
      const documentElement = parsedDoc.children.find((elm) => elm.nodeName === 'HTML');
      if (documentElement != null) {
        this.appendChild(documentElement);
        setOwnerDocument(documentElement, this);
      }
    }
    else if (html !== false) {
      const documentElement = new MockHTMLElement(this, 'html');
      this.appendChild(documentElement);
      documentElement.appendChild(new MockHTMLElement(this, 'head'));
      documentElement.appendChild(new MockHTMLElement(this, 'body'));
    }
  }
  get dir() {
    return this.documentElement.dir;
  }
  set dir(value) {
    this.documentElement.dir = value;
  }
  get location() {
    if (this.defaultView != null) {
      return this.defaultView.location;
    }
    return null;
  }
  set location(val) {
    if (this.defaultView != null) {
      this.defaultView.location = val;
    }
  }
  get baseURI() {
    const baseNode = this.head.childNodes.find((node) => node.nodeName === 'BASE');
    if (baseNode) {
      return baseNode.href;
    }
    return this.URL;
  }
  get URL() {
    return this.location.href;
  }
  get styleSheets() {
    return this.querySelectorAll('style');
  }
  get scripts() {
    return this.querySelectorAll('script');
  }
  get forms() {
    return this.querySelectorAll('form');
  }
  get images() {
    return this.querySelectorAll('img');
  }
  get scrollingElement() {
    return this.documentElement;
  }
  get documentElement() {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeName === 'HTML') {
        return this.childNodes[i];
      }
    }
    const documentElement = new MockHTMLElement(this, 'html');
    this.appendChild(documentElement);
    return documentElement;
  }
  set documentElement(documentElement) {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeType !== 10 /* NODE_TYPES.DOCUMENT_TYPE_NODE */) {
        this.childNodes[i].remove();
      }
    }
    if (documentElement != null) {
      this.appendChild(documentElement);
      setOwnerDocument(documentElement, this);
    }
  }
  get head() {
    const documentElement = this.documentElement;
    for (let i = 0; i < documentElement.childNodes.length; i++) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        return documentElement.childNodes[i];
      }
    }
    const head = new MockHTMLElement(this, 'head');
    documentElement.insertBefore(head, documentElement.firstChild);
    return head;
  }
  set head(head) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        documentElement.childNodes[i].remove();
      }
    }
    if (head != null) {
      documentElement.insertBefore(head, documentElement.firstChild);
      setOwnerDocument(head, this);
    }
  }
  get body() {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        return documentElement.childNodes[i];
      }
    }
    const body = new MockHTMLElement(this, 'body');
    documentElement.appendChild(body);
    return body;
  }
  set body(body) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        documentElement.childNodes[i].remove();
      }
    }
    if (body != null) {
      documentElement.appendChild(body);
      setOwnerDocument(body, this);
    }
  }
  appendChild(newNode) {
    newNode.remove();
    newNode.parentNode = this;
    this.childNodes.push(newNode);
    return newNode;
  }
  createComment(data) {
    return new MockComment(this, data);
  }
  createAttribute(attrName) {
    return new MockAttr(attrName.toLowerCase(), '');
  }
  createAttributeNS(namespaceURI, attrName) {
    return new MockAttr(attrName, '', namespaceURI);
  }
  createElement(tagName) {
    if (tagName === "#document" /* NODE_NAMES.DOCUMENT_NODE */) {
      const doc = new MockDocument(false);
      doc.nodeName = tagName;
      doc.parentNode = null;
      return doc;
    }
    return createElement(this, tagName);
  }
  createElementNS(namespaceURI, tagName) {
    const elmNs = createElementNS(this, namespaceURI, tagName);
    elmNs.namespaceURI = namespaceURI;
    return elmNs;
  }
  createTextNode(text) {
    return new MockTextNode(this, text);
  }
  createDocumentFragment() {
    return new MockDocumentFragment(this);
  }
  createDocumentTypeNode() {
    return new MockDocumentTypeNode(this);
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  getElementsByName(elmName) {
    return getElementsByName(this, elmName.toLowerCase());
  }
  get title() {
    const title = this.head.childNodes.find((elm) => elm.nodeName === 'TITLE');
    if (title != null && typeof title.textContent === 'string') {
      return title.textContent.trim();
    }
    return '';
  }
  set title(value) {
    const head = this.head;
    let title = head.childNodes.find((elm) => elm.nodeName === 'TITLE');
    if (title == null) {
      title = this.createElement('title');
      head.appendChild(title);
    }
    title.textContent = value;
  }
}
function createDocument(html = null) {
  return new MockWindow(html).document;
}
function createFragment(html) {
  return parseHtmlToFragment(html, null);
}
function resetDocument(doc) {
  if (doc != null) {
    resetEventListeners(doc);
    const documentElement = doc.documentElement;
    if (documentElement != null) {
      resetElement(documentElement);
      for (let i = 0, ii = documentElement.childNodes.length; i < ii; i++) {
        const childNode = documentElement.childNodes[i];
        resetElement(childNode);
        childNode.childNodes.length = 0;
      }
    }
    for (const key in doc) {
      if (doc.hasOwnProperty(key) && !DOC_KEY_KEEPERS.has(key)) {
        delete doc[key];
      }
    }
    try {
      doc.nodeName = "#document" /* NODE_NAMES.DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.nodeType = 9 /* NODE_TYPES.DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.cookie = '';
    }
    catch (e) { }
    try {
      doc.referrer = '';
    }
    catch (e) { }
  }
}
const DOC_KEY_KEEPERS = new Set([
  'nodeName',
  'nodeType',
  'nodeValue',
  'ownerDocument',
  'parentNode',
  'childNodes',
  '_shadowRoot',
]);
function getElementById(elm, id) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.id === id) {
      return childElm;
    }
    const childElmFound = getElementById(childElm, id);
    if (childElmFound != null) {
      return childElmFound;
    }
  }
  return null;
}
function getElementsByName(elm, elmName, foundElms = []) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.name && childElm.name.toLowerCase() === elmName) {
      foundElms.push(childElm);
    }
    getElementsByName(childElm, elmName, foundElms);
  }
  return foundElms;
}
function setOwnerDocument(elm, ownerDocument) {
  for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
    elm.childNodes[i].ownerDocument = ownerDocument;
    if (elm.childNodes[i].nodeType === 1 /* NODE_TYPES.ELEMENT_NODE */) {
      setOwnerDocument(elm.childNodes[i], ownerDocument);
    }
  }
}

function hydrateFactory($stencilWindow, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve) {
  var globalThis = $stencilWindow;
  var self = $stencilWindow;
  var top = $stencilWindow;
  var parent = $stencilWindow;

  var addEventListener = $stencilWindow.addEventListener.bind($stencilWindow);
  var alert = $stencilWindow.alert.bind($stencilWindow);
  var blur = $stencilWindow.blur.bind($stencilWindow);
  var cancelAnimationFrame = $stencilWindow.cancelAnimationFrame.bind($stencilWindow);
  var cancelIdleCallback = $stencilWindow.cancelIdleCallback.bind($stencilWindow);
  var clearInterval = $stencilWindow.clearInterval.bind($stencilWindow);
  var clearTimeout = $stencilWindow.clearTimeout.bind($stencilWindow);
  var close = () => {};
  var confirm = $stencilWindow.confirm.bind($stencilWindow);
  var dispatchEvent = $stencilWindow.dispatchEvent.bind($stencilWindow);
  var focus = $stencilWindow.focus.bind($stencilWindow);
  var getComputedStyle = $stencilWindow.getComputedStyle.bind($stencilWindow);
  var matchMedia = $stencilWindow.matchMedia.bind($stencilWindow);
  var open = $stencilWindow.open.bind($stencilWindow);
  var prompt = $stencilWindow.prompt.bind($stencilWindow);
  var removeEventListener = $stencilWindow.removeEventListener.bind($stencilWindow);
  var requestAnimationFrame = $stencilWindow.requestAnimationFrame.bind($stencilWindow);
  var requestIdleCallback = $stencilWindow.requestIdleCallback.bind($stencilWindow);
  var setInterval = $stencilWindow.setInterval.bind($stencilWindow);
  var setTimeout = $stencilWindow.setTimeout.bind($stencilWindow);

  var CharacterData = $stencilWindow.CharacterData;
  var CSS = $stencilWindow.CSS;
  var CustomEvent = $stencilWindow.CustomEvent;
  var Document = $stencilWindow.Document;
  var DocumentFragment = $stencilWindow.DocumentFragment;
  var DocumentType = $stencilWindow.DocumentType;
  var DOMTokenList = $stencilWindow.DOMTokenList;
  var Element = $stencilWindow.Element;
  var Event = $stencilWindow.Event;
  var HTMLAnchorElement = $stencilWindow.HTMLAnchorElement;
  var HTMLBaseElement = $stencilWindow.HTMLBaseElement;
  var HTMLButtonElement = $stencilWindow.HTMLButtonElement;
  var HTMLCanvasElement = $stencilWindow.HTMLCanvasElement;
  var HTMLElement = $stencilWindow.HTMLElement;
  var HTMLFormElement = $stencilWindow.HTMLFormElement;
  var HTMLImageElement = $stencilWindow.HTMLImageElement;
  var HTMLInputElement = $stencilWindow.HTMLInputElement;
  var HTMLLinkElement = $stencilWindow.HTMLLinkElement;
  var HTMLMetaElement = $stencilWindow.HTMLMetaElement;
  var HTMLScriptElement = $stencilWindow.HTMLScriptElement;
  var HTMLStyleElement = $stencilWindow.HTMLStyleElement;
  var HTMLTemplateElement = $stencilWindow.HTMLTemplateElement;
  var HTMLTitleElement = $stencilWindow.HTMLTitleElement;
  var IntersectionObserver = $stencilWindow.IntersectionObserver;
  var KeyboardEvent = $stencilWindow.KeyboardEvent;
  var MouseEvent = $stencilWindow.MouseEvent;
  var Node = $stencilWindow.Node;
  var NodeList = $stencilWindow.NodeList;
  var URL = $stencilWindow.URL;

  var console = $stencilWindow.console;
  var customElements = $stencilWindow.customElements;
  var history = $stencilWindow.history;
  var localStorage = $stencilWindow.localStorage;
  var location = $stencilWindow.location;
  var navigator = $stencilWindow.navigator;
  var performance = $stencilWindow.performance;
  var sessionStorage = $stencilWindow.sessionStorage;

  var devicePixelRatio = $stencilWindow.devicePixelRatio;
  var innerHeight = $stencilWindow.innerHeight;
  var innerWidth = $stencilWindow.innerWidth;
  var origin = $stencilWindow.origin;
  var pageXOffset = $stencilWindow.pageXOffset;
  var pageYOffset = $stencilWindow.pageYOffset;
  var screen = $stencilWindow.screen;
  var screenLeft = $stencilWindow.screenLeft;
  var screenTop = $stencilWindow.screenTop;
  var screenX = $stencilWindow.screenX;
  var screenY = $stencilWindow.screenY;
  var scrollX = $stencilWindow.scrollX;
  var scrollY = $stencilWindow.scrollY;
  var exports = {};

  var fetch, FetchError, Headers, Request, Response;

  if (typeof $stencilWindow.fetch === 'function') {
  fetch = $stencilWindow.fetch;
  } else {
  fetch = $stencilWindow.fetch = function() { throw new Error('fetch() is not implemented'); };
  }

  if (typeof $stencilWindow.FetchError === 'function') {
  FetchError = $stencilWindow.FetchError;
  } else {
  FetchError = $stencilWindow.FetchError = class FetchError { constructor() { throw new Error('FetchError is not implemented'); } };
  }

  if (typeof $stencilWindow.Headers === 'function') {
  Headers = $stencilWindow.Headers;
  } else {
  Headers = $stencilWindow.Headers = class Headers { constructor() { throw new Error('Headers is not implemented'); } };
  }

  if (typeof $stencilWindow.Request === 'function') {
  Request = $stencilWindow.Request;
  } else {
  Request = $stencilWindow.Request = class Request { constructor() { throw new Error('Request is not implemented'); } };
  }

  if (typeof $stencilWindow.Response === 'function') {
  Response = $stencilWindow.Response;
  } else {
  Response = $stencilWindow.Response = class Response { constructor() { throw new Error('Response is not implemented'); } };
  }

  function hydrateAppClosure($stencilWindow) {
  const window = $stencilWindow;
  const document = $stencilWindow.document;
  /*hydrateAppClosure start*/


const NAMESPACE = 'porsche-navigation';
const BUILD = /* porsche-navigation */ { allRenderFn: true, appendChildSlotFix: false, asyncLoading: true, attachStyles: true, cloneNodeFix: false, cmpDidLoad: true, cmpDidRender: true, cmpDidUnload: false, cmpDidUpdate: false, cmpShouldUpdate: false, cmpWillLoad: true, cmpWillRender: false, cmpWillUpdate: false, connectedCallback: false, constructableCSS: false, cssAnnotations: true, devTools: false, disconnectedCallback: true, element: false, event: true, hasRenderFn: true, hostListener: true, hostListenerTarget: true, hostListenerTargetBody: false, hostListenerTargetDocument: false, hostListenerTargetParent: false, hostListenerTargetWindow: true, hotModuleReplacement: false, hydrateClientSide: true, hydrateServerSide: true, hydratedAttribute: false, hydratedClass: true, isDebug: false, isDev: false, isTesting: false, lazyLoad: true, lifecycle: true, lifecycleDOMEvents: false, member: true, method: false, mode: false, observeAttribute: true, patchPseudoShadowDom: false, profile: false, prop: true, propBoolean: true, propMutable: false, propNumber: true, propString: true, reflect: false, scoped: true, scriptDataOpts: false, shadowDelegatesFocus: false, shadowDom: true, shadowDomShim: true, slot: true, slotChildNodesFix: false, slotRelocation: true, state: true, style: true, svg: false, taskQueue: true, updatable: true, vdomAttribute: true, vdomClass: true, vdomFunctional: true, vdomKey: true, vdomListener: true, vdomPropOrAttr: true, vdomRef: true, vdomRender: true, vdomStyle: true, vdomText: true, vdomXlink: true, watchCallback: true };

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire();
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var componentsJs = createCommonjsModule(function (module, exports) {
!function(e,t){module.exports=t();}("undefined"!=typeof self?self:commonjsGlobal,(()=>(()=>{var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]});},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});}},t={};e.r(t),e.d(t,{componentsReady:()=>c,load:()=>r});const n="porscheDesignSystem";function o(){return document[n]||(document[n]={}),document[n]}function s({script:e,version:t,prefix:s}){const r=function(e){const t=o(),{[e]:n}=t;if(!n){let n=()=>{};const o=new Promise((e=>n=e));t[e]={isInjected:!1,isReady:()=>o,readyResolve:n,prefixes:[],registerCustomElements:null};}return t[e]}(t),{isInjected:c,prefixes:i=[],registerCustomElements:d}=r,[m]=Object.entries(o()).filter((([e,n])=>e!==t&&"object"==typeof n&&n.prefixes.includes(s)));if(m)throw new Error(`[Porsche Design System v${t}] prefix '${s}' is already registered with version '${m[0]}' of the Porsche Design System. Please use a different one.\nTake a look at document.${n} for more details.`);c||(function(e){const t=document.createElement("script");t.src=e,t.setAttribute("crossorigin",""),document.body.appendChild(t);}(e),r.isInjected=!0),i.includes(s)||(i.push(s),d&&d(s));}const r=(e={})=>{const t="PORSCHE_DESIGN_SYSTEM_CDN";window[t]=e.cdn||window[t]||(window.location.origin.match(/\.cn$/)?"cn":"auto");const n="porscheDesignSystem";document[n]||(document[n]={}),document[n].cdn={url:"https://cdn.ui.porsche."+("cn"===window[t]?"cn":"com"),prefixes:[]},s({version:"3.6.1",script:document[n].cdn.url+"/porsche-design-system/components/porsche-design-system.v3.6.1.7aaf2271e6e7dea8aea2.js",prefix:e.prefix||""});},c=(e=document.body)=>{let t;const n=new Promise((e=>t=e)),o=()=>{d().then((()=>m(e,t)));};if(i())o();else {const e="readystatechange",t=()=>{i()&&(document.removeEventListener(e,t),o());};document.addEventListener(e,t);}return n},i=()=>"complete"===document.readyState,d=()=>{if(document.porscheDesignSystem?.["3.6.1"]?.isReady)return document.porscheDesignSystem["3.6.1"].isReady();{let e;const t=new Promise((t=>e=t)),n={set(t,n,o){return "3.6.1"===n&&o.isReady().then(e),Reflect.set(...arguments)}};return document.porscheDesignSystem=new Proxy(document.porscheDesignSystem||{},n),t}},m=(e,t)=>{const n=u(e);Promise.all(n).then((e=>t(e.length))).catch((e=>console.error("[Porsche Design System]",e)));},u=e=>{let t=[];return 1===e?.nodeType&&Array.from(e.children).forEach((e=>{a(e)&&t.push(e.componentOnReady()),t=t.concat(u(e));})),t},p=/^(.*-)?P-(.*)$/,a=e=>p.exec(e.tagName)&&"function"==typeof e.componentOnReady;return t})()));
});

function appGlobalScript () {
  componentsJs.load({ prefix: 'phn' });
}

const globalScripts = appGlobalScript;

function queryNonceMetaTagContent(e) {
 var t, o, n;
 return null !== (n = null === (o = null === (t = e.head) || void 0 === t ? void 0 : t.querySelector('meta[name="csp-nonce"]')) || void 0 === o ? void 0 : o.getAttribute("content")) && void 0 !== n ? n : void 0;
}

function componentOnReady() {
 return getHostRef(this).$onReadyPromise$;
}

function forceUpdate() {}

function hydrateApp(e, t, o, n, s) {
 function l() {
  if (global.clearTimeout(p), i.clear(), r.clear(), !h) {
   h = !0;
   try {
    t.clientHydrateAnnotations && insertVdomAnnotations(e.document, t.staticComponents), 
    e.dispatchEvent(new e.Event("DOMContentLoaded")), e.document.createElement = c, 
    e.document.createElementNS = $;
   } catch (e) {
    renderCatchError(t, o, e);
   }
  }
  n(e, t, o, s);
 }
 function a(e) {
  renderCatchError(t, o, e), l();
 }
 const r = new Set, i = new Set, d = new Set, c = e.document.createElement, $ = e.document.createElementNS, m = Promise.resolve();
 let p, h = !1;
 try {
  function u() {
   return g(this);
  }
  function f(e) {
   if (isValidComponent(e, t) && !getHostRef(e)) {
    const t = loadModule({
     $tagName$: e.nodeName.toLowerCase(),
     $flags$: null
    });
    null != t && null != t.cmpMeta && (i.add(e), e.connectedCallback = u, registerHost(e, t.cmpMeta), 
    function o(e, t) {
     if ("function" != typeof e.componentOnReady && (e.componentOnReady = componentOnReady), 
     "function" != typeof e.forceUpdate && (e.forceUpdate = forceUpdate), 1 & t.$flags$ && (e.shadowRoot = e), 
     null != t.$members$) {
      const o = getHostRef(e);
      Object.entries(t.$members$).forEach((([n, s]) => {
       const l = s[0];
       if (31 & l) {
        const a = s[1] || n, r = e.getAttribute(a);
        if (null != r) {
         const e = parsePropertyValue(r, l);
         o.$instanceValues$.set(n, e);
        }
        const i = e[n];
        void 0 !== i && (o.$instanceValues$.set(n, i), delete e[n]), Object.defineProperty(e, n, {
         get() {
          return getValue(this, n);
         },
         set(e) {
          setValue(this, n, e, t);
         },
         configurable: !0,
         enumerable: !0
        });
       } else 64 & l && Object.defineProperty(e, n, {
        value(...e) {
         const t = getHostRef(this);
         return t.$onInstancePromise$.then((() => t.$lazyInstance$[n](...e))).catch(consoleError);
        }
       });
      }));
     }
    }(e, t.cmpMeta));
   }
  }
  function g(n) {
   return i.delete(n), isValidComponent(n, t) && o.hydratedCount < t.maxHydrateCount && !r.has(n) && shouldHydrate(n) ? (r.add(n), 
   async function s(e, t, o, n, l) {
    o = o.toLowerCase();
    const a = loadModule({
     $tagName$: o,
     $flags$: null
    });
    if (null != a && null != a.cmpMeta) {
     l.add(n);
     try {
      connectedCallback(n), await n.componentOnReady(), t.hydratedCount++;
      const e = getHostRef(n), s = e.$modeName$ ? e.$modeName$ : "$";
      t.components.some((e => e.tag === o && e.mode === s)) || t.components.push({
       tag: o,
       mode: s,
       count: 0,
       depth: -1
      });
     } catch (t) {
      e.console.error(t);
     }
     l.delete(n);
    }
   }(e, o, n.nodeName, n, d)) : m;
  }
  e.document.createElement = function t(o) {
   const n = c.call(e.document, o);
   return f(n), n;
  }, e.document.createElementNS = function t(o, n) {
   const s = $.call(e.document, o, n);
   return f(s), s;
  }, p = global.setTimeout((function L() {
   a(`Hydrate exceeded timeout${function e(t) {
    return Array.from(t).map(waitingOnElementMsg);
   }(d)}`);
  }), t.timeout), plt.$resourcesUrl$ = new URL(t.resourcesUrl || "./", doc.baseURI).href, 
  globalScripts(), function e(t) {
   if (null != t && 1 === t.nodeType) {
    f(t);
    const o = t.children;
    for (let t = 0, n = o.length; t < n; t++) e(o[t]);
   }
  }(e.document.body), function e() {
   const t = Array.from(i).filter((e => e.parentElement));
   return t.length > 0 ? Promise.all(t.map(g)).then(e) : m;
  }().then(l).catch(a);
 } catch (y) {
  a(y);
 }
}

function isValidComponent(e, t) {
 if (null != e && 1 === e.nodeType) {
  const o = e.nodeName;
  if ("string" == typeof o && o.includes("-")) return !t.excludeComponents.includes(o.toLowerCase());
 }
 return !1;
}

function shouldHydrate(e) {
 if (9 === e.nodeType) return !0;
 if (NO_HYDRATE_TAGS.has(e.nodeName)) return !1;
 if (e.hasAttribute("no-prerender")) return !1;
 const t = e.parentNode;
 return null == t || shouldHydrate(t);
}

function renderCatchError(e, t, o) {
 const n = {
  level: "error",
  type: "build",
  header: "Hydrate Error",
  messageText: "",
  relFilePath: void 0,
  absFilePath: void 0,
  lines: []
 };
 if (e.url) try {
  const t = new URL(e.url);
  "/" !== t.pathname && (n.header += ": " + t.pathname);
 } catch (e) {}
 null != o && (null != o.stack ? n.messageText = o.stack.toString() : null != o.message ? n.messageText = o.message.toString() : n.messageText = o.toString()), 
 t.diagnostics.push(n);
}

function printTag(e) {
 let t = `<${e.nodeName.toLowerCase()}`;
 if (Array.isArray(e.attributes)) for (let o = 0; o < e.attributes.length; o++) {
  const n = e.attributes[o];
  t += ` ${n.name}`, "" !== n.value && (t += `="${n.value}"`);
 }
 return t += ">", t;
}

function waitingOnElementMsg(e) {
 let t = "";
 if (e) {
  const o = [];
  t = " - waiting on:";
  let n = e;
  for (;n && 9 !== n.nodeType && "BODY" !== n.nodeName; ) o.unshift(printTag(n)), 
  n = n.parentElement;
  let s = "";
  for (const e of o) s += "  ", t += `\n${s}${e}`;
 }
 return t;
}

const getAssetPath = e => {
 const t = new URL(e, plt.$resourcesUrl$);
 return t.origin !== win.location.origin ? t.href : t.pathname;
};

const createTime = (e, t = "") => {
 return () => {};
}, XLINK_NS = "http://www.w3.org/1999/xlink", EMPTY_OBJ = {}, isComplexType = e => "object" == (e = typeof e) || "function" === e, isPromise$1 = e => !!e && ("object" == typeof e || "function" == typeof e) && "function" == typeof e.then, h = (e, t, ...o) => {
 let n = null, s = null, l = null, a = !1, r = !1;
 const i = [], d = t => {
  for (let o = 0; o < t.length; o++) n = t[o], Array.isArray(n) ? d(n) : null != n && "boolean" != typeof n && ((a = "function" != typeof e && !isComplexType(n)) ? n = String(n) : BUILD.isDev  , 
  a && r ? i[i.length - 1].$text$ += n : i.push(a ? newVNode(null, n) : n), r = a);
 };
 if (d(o), t && (t.key && (s = t.key), 
 t.name && (l = t.name), BUILD.vdomClass)) {
  const e = t.className || t.class;
  e && (t.class = "object" != typeof e ? e : Object.keys(e).filter((t => e[t])).join(" "));
 }
 if ("function" == typeof e) return e(null === t ? {} : t, i, vdomFnUtils);
 const c = newVNode(e, null);
 return c.$attrs$ = t, i.length > 0 && (c.$children$ = i), (c.$key$ = s), 
 (c.$name$ = l), c;
}, newVNode = (e, t) => {
 const o = {
  $flags$: 0,
  $tag$: e,
  $text$: t,
  $elm$: null,
  $children$: null
 };
 return (o.$attrs$ = null), (o.$key$ = null), 
 (o.$name$ = null), o;
}, Host = {}, isHost = e => e && e.$tag$ === Host, vdomFnUtils = {
 forEach: (e, t) => e.map(convertToPublic).forEach(t),
 map: (e, t) => e.map(convertToPublic).map(t).map(convertToPrivate)
}, convertToPublic = e => ({
 vattrs: e.$attrs$,
 vchildren: e.$children$,
 vkey: e.$key$,
 vname: e.$name$,
 vtag: e.$tag$,
 vtext: e.$text$
}), convertToPrivate = e => {
 if ("function" == typeof e.vtag) {
  const t = {
   ...e.vattrs
  };
  return e.vkey && (t.key = e.vkey), e.vname && (t.name = e.vname), h(e.vtag, t, ...e.vchildren || []);
 }
 const t = newVNode(e.vtag, e.vtext);
 return t.$attrs$ = e.vattrs, t.$children$ = e.vchildren, t.$key$ = e.vkey, t.$name$ = e.vname, 
 t;
}, clientHydrate = (e, t, o, n, s, l, a) => {
 let r, i, d, c;
 if (1 === l.nodeType) {
  for (r = l.getAttribute("c-id"), r && (i = r.split("."), i[0] !== a && "0" !== i[0] || (d = {
   $flags$: 0,
   $hostId$: i[0],
   $nodeId$: i[1],
   $depth$: i[2],
   $index$: i[3],
   $tag$: l.tagName.toLowerCase(),
   $elm$: l,
   $attrs$: null,
   $children$: null,
   $key$: null,
   $name$: null,
   $text$: null
  }, t.push(d), l.removeAttribute("c-id"), e.$children$ || (e.$children$ = []), e.$children$[d.$index$] = d, 
  e = d, n && "0" === d.$depth$ && (n[d.$index$] = d.$elm$))), c = l.childNodes.length - 1; c >= 0; c--) clientHydrate(e, t, o, n, s, l.childNodes[c], a);
  if (l.shadowRoot) for (c = l.shadowRoot.childNodes.length - 1; c >= 0; c--) clientHydrate(e, t, o, n, s, l.shadowRoot.childNodes[c], a);
 } else if (8 === l.nodeType) i = l.nodeValue.split("."), i[1] !== a && "0" !== i[1] || (r = i[0], 
 d = {
  $flags$: 0,
  $hostId$: i[1],
  $nodeId$: i[2],
  $depth$: i[3],
  $index$: i[4],
  $elm$: l,
  $attrs$: null,
  $children$: null,
  $key$: null,
  $name$: null,
  $tag$: null,
  $text$: null
 }, "t" === r ? (d.$elm$ = l.nextSibling, d.$elm$ && 3 === d.$elm$.nodeType && (d.$text$ = d.$elm$.textContent, 
 t.push(d), l.remove(), e.$children$ || (e.$children$ = []), e.$children$[d.$index$] = d, 
 n && "0" === d.$depth$ && (n[d.$index$] = d.$elm$))) : d.$hostId$ === a && ("s" === r ? (d.$tag$ = "slot", 
 i[5] ? l["s-sn"] = d.$name$ = i[5] : l["s-sn"] = "", l["s-sr"] = !0, n && (d.$elm$ = doc.createElement(d.$tag$), 
 d.$name$ && d.$elm$.setAttribute("name", d.$name$), l.parentNode.insertBefore(d.$elm$, l), 
 l.remove(), "0" === d.$depth$ && (n[d.$index$] = d.$elm$)), o.push(d), e.$children$ || (e.$children$ = []), 
 e.$children$[d.$index$] = d) : "r" === r && (n ? l.remove() : (s["s-cr"] = l, 
 l["s-cn"] = !0)))); else if (e && "style" === e.$tag$) {
  const t = newVNode(null, l.textContent);
  t.$elm$ = l, t.$index$ = "0", e.$children$ = [ t ];
 }
}, initializeDocumentHydrate = (e, t) => {
 if (1 === e.nodeType) {
  let o = 0;
  for (;o < e.childNodes.length; o++) initializeDocumentHydrate(e.childNodes[o], t);
  if (e.shadowRoot) for (o = 0; o < e.shadowRoot.childNodes.length; o++) initializeDocumentHydrate(e.shadowRoot.childNodes[o], t);
 } else if (8 === e.nodeType) {
  const o = e.nodeValue.split(".");
  "o" === o[0] && (t.set(o[1] + "." + o[2], e), e.nodeValue = "", e["s-en"] = o[3]);
 }
}, parsePropertyValue = (e, t) => null == e || isComplexType(e) ? e : 4 & t ? "false" !== e && ("" === e || !!e) : 2 & t ? parseFloat(e) : 1 & t ? String(e) : e, getElement = e => getHostRef(e).$hostElement$ , createEvent = (e, t, o) => {
 const n = getElement(e);
 return {
  emit: e => (emitEvent(n, t, {
   bubbles: !!(4 & o),
   composed: !!(2 & o),
   cancelable: !!(1 & o),
   detail: e
  }))
 };
}, emitEvent = (e, t, o) => {
 const n = plt.ce(t, o);
 return e.dispatchEvent(n), n;
}, rootAppliedStyles = new WeakMap, registerStyle = (e, t, o) => {
 let n = styles.get(e);
 n = t, styles.set(e, n);
}, addStyle = (e, t, o) => {
 var n;
 const s = getScopeId(t), l = styles.get(s);
 if (e = 11 === e.nodeType ? e : doc, l) if ("string" == typeof l) {
  e = e.head || e;
  let t, o = rootAppliedStyles.get(e);
  if (o || rootAppliedStyles.set(e, o = new Set), !o.has(s)) {
   if (e.host && (t = e.querySelector(`[sty-id="${s}"]`))) t.innerHTML = l; else {
    t = doc.createElement("style"), t.innerHTML = l;
    const o = null !== (n = plt.$nonce$) && void 0 !== n ? n : queryNonceMetaTagContent(doc);
    null != o && t.setAttribute("nonce", o), t.setAttribute("sty-id", s), 
    e.insertBefore(t, e.querySelector("link"));
   }
   o && o.add(s);
  }
 }
 return s;
}, attachStyles = e => {
 const t = e.$cmpMeta$, o = e.$hostElement$, n = t.$flags$, s = createTime("attachStyles", t.$tagName$), l = addStyle(o.getRootNode(), t);
 10 & n && (o["s-sc"] = l, 
 o.classList.add(l + "-h"), 2 & n && o.classList.add(l + "-s")), 
 s();
}, getScopeId = (e, t) => "sc-" + (e.$tagName$), setAccessor = (e, t, o, n, s, l) => {
 if (o !== n) {
  let a = isMemberInElement(e, t), r = t.toLowerCase();
  if ("class" === t) {
   const t = e.classList, s = parseClassList(o), l = parseClassList(n);
   t.remove(...s.filter((e => e && !l.includes(e)))), t.add(...l.filter((e => e && !s.includes(e))));
  } else if ("style" === t) {
   for (const t in o) n && null != n[t] || (e.style[t] = "");
   for (const t in n) o && n[t] === o[t] || (e.style[t] = n[t]);
  } else if ("key" === t) ; else if ("ref" === t) n && n(e); else if ((a ) || "o" !== t[0] || "n" !== t[1]) {
   {
    const i = isComplexType(n);
    if ((a || i && null !== n) && !s) try {
     if (e.tagName.includes("-")) e[t] = n; else {
      const s = null == n ? "" : n;
      "list" === t ? a = !1 : null != o && e[t] == s || (e[t] = s);
     }
    } catch (e) {}
    let d = !1;
    r !== (r = r.replace(/^xlink\:?/, "")) && (t = r, d = !0), null == n || !1 === n ? !1 === n && "" !== e.getAttribute(t) || (d ? e.removeAttributeNS(XLINK_NS, t) : e.removeAttribute(t)) : (!a || 4 & l || s) && !i && (n = !0 === n ? "" : n, 
    d ? e.setAttributeNS(XLINK_NS, t, n) : e.setAttribute(t, n));
   }
  } else t = "-" === t[2] ? t.slice(3) : isMemberInElement(win, r) ? r.slice(2) : r[2] + t.slice(3), 
  o && plt.rel(e, t, o, !1), n && plt.ael(e, t, n, !1);
 }
}, parseClassListRegex = /\s/, parseClassList = e => e ? e.split(parseClassListRegex) : [], updateElement = (e, t, o, n) => {
 const s = 11 === t.$elm$.nodeType && t.$elm$.host ? t.$elm$.host : t.$elm$, l = e && e.$attrs$ || EMPTY_OBJ, a = t.$attrs$ || EMPTY_OBJ;
 for (n in l) n in a || setAccessor(s, n, l[n], void 0, o, t.$flags$);
 for (n in a) setAccessor(s, n, l[n], a[n], o, t.$flags$);
};

let scopeId, contentRef, hostTagName, useNativeShadowDom = !1, checkSlotFallbackVisibility = !1, checkSlotRelocate = !1, isSvgMode = !1;

const createElm = (e, t, o, n) => {
 const s = t.$children$[o];
 let l, a, r, i = 0;
 if (!useNativeShadowDom && (checkSlotRelocate = !0, "slot" === s.$tag$ && (scopeId && n.classList.add(scopeId + "-s"), 
 s.$flags$ |= s.$children$ ? 2 : 1)), null !== s.$text$) l = s.$elm$ = doc.createTextNode(s.$text$); else if (1 & s.$flags$) l = s.$elm$ = slotReferenceDebugNode(s) ; else {
  if (l = s.$elm$ = doc.createElement(2 & s.$flags$ ? "slot-fb" : s.$tag$), 
  updateElement(null, s, isSvgMode), 
  null != scopeId && l["s-si"] !== scopeId && l.classList.add(l["s-si"] = scopeId), 
  s.$children$) for (i = 0; i < s.$children$.length; ++i) a = createElm(e, s, i, l), 
  a && l.appendChild(a);
 }
 return (l["s-hn"] = hostTagName, 3 & s.$flags$ && (l["s-sr"] = !0, 
 l["s-cr"] = contentRef, l["s-sn"] = s.$name$ || "", r = e && e.$children$ && e.$children$[o], 
 r && r.$tag$ === s.$tag$ && e.$elm$ && putBackInOriginalLocation(e.$elm$, !1))), 
 l;
}, putBackInOriginalLocation = (e, t) => {
 plt.$flags$ |= 1;
 const o = e.childNodes;
 for (let e = o.length - 1; e >= 0; e--) {
  const n = o[e];
  n["s-hn"] !== hostTagName && n["s-ol"] && (parentReferenceNode(n).insertBefore(n, referenceNode(n)), 
  n["s-ol"].remove(), n["s-ol"] = void 0, checkSlotRelocate = !0), t && putBackInOriginalLocation(n, t);
 }
 plt.$flags$ &= -2;
}, addVnodes = (e, t, o, n, s, l) => {
 let a, r = e["s-cr"] && e["s-cr"].parentNode || e;
 for (r.shadowRoot && r.tagName === hostTagName && (r = r.shadowRoot); s <= l; ++s) n[s] && (a = createElm(null, o, s, e), 
 a && (n[s].$elm$ = a, r.insertBefore(a, referenceNode(t) )));
}, removeVnodes = (e, t, o) => {
 for (let n = t; n <= o; ++n) {
  const t = e[n];
  if (t) {
   const e = t.$elm$;
   nullifyVNodeRefs(t), e && ((checkSlotFallbackVisibility = !0, 
   e["s-ol"] ? e["s-ol"].remove() : putBackInOriginalLocation(e, !0)), e.remove());
  }
 }
}, isSameVnode = (e, t) => e.$tag$ === t.$tag$ && ("slot" === e.$tag$ ? e.$name$ === t.$name$ : e.$key$ === t.$key$), referenceNode = e => e && e["s-ol"] || e, parentReferenceNode = e => (e["s-ol"] ? e["s-ol"] : e).parentNode, patch = (e, t) => {
 const o = t.$elm$ = e.$elm$, n = e.$children$, s = t.$children$, l = t.$tag$, a = t.$text$;
 let r;
 null !== a ? (r = o["s-cr"]) ? r.parentNode.textContent = a : e.$text$ !== a && (o.data = a) : (("slot" === l || updateElement(e, t, isSvgMode)), 
 null !== n && null !== s ? ((e, t, o, n) => {
  let s, l, a = 0, r = 0, i = 0, d = 0, c = t.length - 1, $ = t[0], m = t[c], p = n.length - 1, h = n[0], u = n[p];
  for (;a <= c && r <= p; ) if (null == $) $ = t[++a]; else if (null == m) m = t[--c]; else if (null == h) h = n[++r]; else if (null == u) u = n[--p]; else if (isSameVnode($, h)) patch($, h), 
  $ = t[++a], h = n[++r]; else if (isSameVnode(m, u)) patch(m, u), m = t[--c], u = n[--p]; else if (isSameVnode($, u)) "slot" !== $.$tag$ && "slot" !== u.$tag$ || putBackInOriginalLocation($.$elm$.parentNode, !1), 
  patch($, u), e.insertBefore($.$elm$, m.$elm$.nextSibling), $ = t[++a], u = n[--p]; else if (isSameVnode(m, h)) "slot" !== $.$tag$ && "slot" !== u.$tag$ || putBackInOriginalLocation(m.$elm$.parentNode, !1), 
  patch(m, h), e.insertBefore(m.$elm$, $.$elm$), m = t[--c], h = n[++r]; else {
   if (i = -1, BUILD.vdomKey) for (d = a; d <= c; ++d) if (t[d] && null !== t[d].$key$ && t[d].$key$ === h.$key$) {
    i = d;
    break;
   }
   i >= 0 ? (l = t[i], l.$tag$ !== h.$tag$ ? s = createElm(t && t[r], o, i, e) : (patch(l, h), 
   t[i] = void 0, s = l.$elm$), h = n[++r]) : (s = createElm(t && t[r], o, r, e), h = n[++r]), 
   s && (parentReferenceNode($.$elm$).insertBefore(s, referenceNode($.$elm$)) );
  }
  a > c ? addVnodes(e, null == n[p + 1] ? null : n[p + 1].$elm$, o, n, r, p) : r > p && removeVnodes(t, a, c);
 })(o, n, t, s) : null !== s ? (null !== e.$text$ && (o.textContent = ""), 
 addVnodes(o, null, t, s, 0, s.length - 1)) : null !== n && removeVnodes(n, 0, n.length - 1), 
 BUILD.svg   );
}, updateFallbackSlotVisibility = e => {
 const t = e.childNodes;
 let o, n, s, l, a, r;
 for (n = 0, s = t.length; n < s; n++) if (o = t[n], 1 === o.nodeType) {
  if (o["s-sr"]) for (a = o["s-sn"], o.hidden = !1, l = 0; l < s; l++) if (r = t[l].nodeType, 
  t[l]["s-hn"] !== o["s-hn"] || "" !== a) {
   if (1 === r && a === t[l].getAttribute("slot")) {
    o.hidden = !0;
    break;
   }
  } else if (1 === r || 3 === r && "" !== t[l].textContent.trim()) {
   o.hidden = !0;
   break;
  }
  updateFallbackSlotVisibility(o);
 }
}, relocateNodes = [], relocateSlotContent = e => {
 let t, o, n, s, l, a, r = 0;
 const i = e.childNodes, d = i.length;
 for (;r < d; r++) {
  if (t = i[r], t["s-sr"] && (o = t["s-cr"]) && o.parentNode) for (n = o.parentNode.childNodes, 
  s = t["s-sn"], a = n.length - 1; a >= 0; a--) o = n[a], o["s-cn"] || o["s-nr"] || o["s-hn"] === t["s-hn"] || (isNodeLocatedInSlot(o, s) ? (l = relocateNodes.find((e => e.$nodeToRelocate$ === o)), 
  checkSlotFallbackVisibility = !0, o["s-sn"] = o["s-sn"] || s, l ? l.$slotRefNode$ = t : relocateNodes.push({
   $slotRefNode$: t,
   $nodeToRelocate$: o
  }), o["s-sr"] && relocateNodes.map((e => {
   isNodeLocatedInSlot(e.$nodeToRelocate$, o["s-sn"]) && (l = relocateNodes.find((e => e.$nodeToRelocate$ === o)), 
   l && !e.$slotRefNode$ && (e.$slotRefNode$ = l.$slotRefNode$));
  }))) : relocateNodes.some((e => e.$nodeToRelocate$ === o)) || relocateNodes.push({
   $nodeToRelocate$: o
  }));
  1 === t.nodeType && relocateSlotContent(t);
 }
}, isNodeLocatedInSlot = (e, t) => 1 === e.nodeType ? null === e.getAttribute("slot") && "" === t || e.getAttribute("slot") === t : e["s-sn"] === t || "" === t, nullifyVNodeRefs = e => {
 (e.$attrs$ && e.$attrs$.ref && e.$attrs$.ref(null), e.$children$ && e.$children$.map(nullifyVNodeRefs));
}, renderVdom = (e, t, o = !1) => {
 const n = e.$hostElement$, l = e.$vnode$ || newVNode(null, null), a = isHost(t) ? t : h(null, null, t);
 if (hostTagName = n.tagName, BUILD.isDev  ) ;
 if (o && a.$attrs$) for (const e of Object.keys(a.$attrs$)) n.hasAttribute(e) && ![ "key", "ref", "style", "class" ].includes(e) && (a.$attrs$[e] = n[e]);
 if (a.$tag$ = null, a.$flags$ |= 4, e.$vnode$ = a, a.$elm$ = l.$elm$ = n.shadowRoot || n, 
 (scopeId = n["s-sc"]), (contentRef = n["s-cr"], 
 useNativeShadowDom = supportsShadow, checkSlotFallbackVisibility = !1), patch(l, a), 
 BUILD.slotRelocation) {
  if (plt.$flags$ |= 1, checkSlotRelocate) {
   let e, t, o, n, s, l;
   relocateSlotContent(a.$elm$);
   let r = 0;
   for (;r < relocateNodes.length; r++) e = relocateNodes[r], t = e.$nodeToRelocate$, 
   t["s-ol"] || (o = originalLocationDebugNode(t) , 
   o["s-nr"] = t, t.parentNode.insertBefore(t["s-ol"] = o, t));
   for (r = 0; r < relocateNodes.length; r++) if (e = relocateNodes[r], t = e.$nodeToRelocate$, 
   e.$slotRefNode$) {
    for (n = e.$slotRefNode$.parentNode, s = e.$slotRefNode$.nextSibling, o = t["s-ol"]; o = o.previousSibling; ) if (l = o["s-nr"], 
    l && l["s-sn"] === t["s-sn"] && n === l.parentNode && (l = l.nextSibling, !l || !l["s-nr"])) {
     s = l;
     break;
    }
    (!s && n !== t.parentNode || t.nextSibling !== s) && t !== s && (!t["s-hn"] && t["s-ol"] && (t["s-hn"] = t["s-ol"].parentNode.nodeName), 
    n.insertBefore(t, s));
   } else 1 === t.nodeType && (t.hidden = !0);
  }
  checkSlotFallbackVisibility && updateFallbackSlotVisibility(a.$elm$), plt.$flags$ &= -2, 
  relocateNodes.length = 0;
 }
}, slotReferenceDebugNode = e => doc.createComment(`<slot${e.$name$ ? ' name="' + e.$name$ + '"' : ""}> (host=${hostTagName.toLowerCase()})`), originalLocationDebugNode = e => doc.createComment("org-location for " + (e.localName ? `<${e.localName}> (host=${e["s-hn"]})` : `[${e.textContent}]`)), attachToAncestor = (e, t) => {
 t && !e.$onRenderResolve$ && t["s-p"] && t["s-p"].push(new Promise((t => e.$onRenderResolve$ = t)));
}, scheduleUpdate = (e, t) => {
 if ((e.$flags$ |= 16), 4 & e.$flags$) return void (e.$flags$ |= 512);
 attachToAncestor(e, e.$ancestorComponent$);
 const o = () => dispatchHooks(e, t);
 return writeTask(o) ;
}, dispatchHooks = (e, t) => {
 const n = createTime("scheduleUpdate", e.$cmpMeta$.$tagName$), s = e.$lazyInstance$ ;
 let l;
 return t ? ((e.$flags$ |= 256, e.$queuedListeners$ && (e.$queuedListeners$.map((([e, t]) => safeCall(s, e, t))), 
 e.$queuedListeners$ = void 0)), (l = safeCall(s, "componentWillLoad"))) : (BUILD.cmpWillUpdate ), n(), enqueue(l, (() => updateComponent(e, s, t)));
}, enqueue = (e, t) => isPromisey(e) ? e.then(t) : t(), isPromisey = e => e instanceof Promise || e && e.then && "function" == typeof e.then, updateComponent = async (e, t, o) => {
 var n;
 const s = e.$hostElement$, l = createTime("update", e.$cmpMeta$.$tagName$), a = s["s-rc"];
 o && attachStyles(e);
 const r = createTime("render", e.$cmpMeta$.$tagName$);
 if (await callRender(e, t, s, o) , 
 BUILD.hydrateServerSide) try {
  serverSideConnected(s), o && (1 & e.$cmpMeta$.$flags$ ? s["s-en"] = "" : 2 & e.$cmpMeta$.$flags$ && (s["s-en"] = "c"));
 } catch (e) {
  consoleError(e, s);
 }
 if (a && (a.map((e => e())), s["s-rc"] = void 0), r(), l(), 
 BUILD.asyncLoading) {
  const t = null !== (n = s["s-p"]) && void 0 !== n ? n : [], o = () => postUpdateComponent(e);
  0 === t.length ? o() : (Promise.all(t).then(o), e.$flags$ |= 4, t.length = 0);
 }
};

let renderingRef = null;

const callRender = (e, t, o, n) => {
 try {
  if (renderingRef = t, t = t.render(), (e.$flags$ &= -17), 
  (e.$flags$ |= 2), BUILD.hasRenderFn ) {
   return Promise.resolve(t).then((t => renderVdom(e, t, n)));
  }
 } catch (t) {
  consoleError(t, e.$hostElement$);
 }
 return renderingRef = null, null;
}, getRenderingRef = () => renderingRef, postUpdateComponent = e => {
 const t = e.$cmpMeta$.$tagName$, o = e.$hostElement$, n = createTime("postUpdate", t), s = e.$lazyInstance$ , l = e.$ancestorComponent$;
 (safeCall(s, "componentDidRender"), 
 BUILD.isDev ), 64 & e.$flags$ ? (n()) : (e.$flags$ |= 64, addHydratedFlag(o), 
 (safeCall(s, "componentDidLoad"), 
 BUILD.isDev ), n(), (e.$onReadyResolve$(o), l || appDidLoad())), (e.$onRenderResolve$ && (e.$onRenderResolve$(), 
 e.$onRenderResolve$ = void 0), 512 & e.$flags$ && nextTick((() => scheduleUpdate(e, !1))), 
 e.$flags$ &= -517);
}, forceUpdate$1 = e => {
 return !1;
}, appDidLoad = e => {
 addHydratedFlag(doc.documentElement), nextTick((() => emitEvent(win, "appload", {
  detail: {
   namespace: NAMESPACE
  }
 }))), BUILD.profile  ;
}, safeCall = (e, t, o) => {
 if (e && e[t]) try {
  return e[t](o);
 } catch (e) {
  consoleError(e);
 }
}, addHydratedFlag = e => e.classList.add("hydrated") , serverSideConnected = e => {
 const t = e.children;
 if (null != t) for (let e = 0, o = t.length; e < o; e++) {
  const o = t[e];
  "function" == typeof o.connectedCallback && o.connectedCallback(), serverSideConnected(o);
 }
}, getValue = (e, t) => getHostRef(e).$instanceValues$.get(t), setValue = (e, t, o, n) => {
 const s = getHostRef(e), l = s.$hostElement$ , a = s.$instanceValues$.get(t), r = s.$flags$, i = s.$lazyInstance$ ;
 o = parsePropertyValue(o, n.$members$[t][0]);
 const d = Number.isNaN(a) && Number.isNaN(o), c = o !== a && !d;
 if ((!(8 & r) || void 0 === a) && c && (s.$instanceValues$.set(t, o), 
 i)) {
  if (n.$watchers$ && 128 & r) {
   const e = n.$watchers$[t];
   e && e.map((e => {
    try {
     i[e](o, a, t);
    } catch (e) {
     consoleError(e, l);
    }
   }));
  }
  if (2 == (18 & r)) {
   scheduleUpdate(s, !1);
  }
 }
}, proxyComponent = (e, t, o) => {
 var n;
 if (t.$members$) {
  e.watchers && (t.$watchers$ = e.watchers);
  const s = Object.entries(t.$members$), l = e.prototype;
  if (s.map((([e, [n]]) => {
   (31 & n || (2 & o) && 32 & n) ? Object.defineProperty(l, e, {
    get() {
     return getValue(this, e);
    },
    set(s) {
     setValue(this, e, s, t);
    },
    configurable: !0,
    enumerable: !0
   }) : BUILD.method   ;
  })), (1 & o)) {
   const o = new Map;
   l.attributeChangedCallback = function(e, n, s) {
    plt.jmp((() => {
     const a = o.get(e);
     if (this.hasOwnProperty(a)) s = this[a], delete this[a]; else {
      if (l.hasOwnProperty(a) && "number" == typeof this[a] && this[a] == s) return;
      if (null == a) {
       const o = getHostRef(this), l = null == o ? void 0 : o.$flags$;
       if (!(8 & l) && 128 & l && s !== n) {
        const a = o.$lazyInstance$ , r = t.$watchers$[e];
        null == r || r.forEach((t => {
         null != a[t] && a[t].call(a, s, n, e);
        }));
       }
       return;
      }
     }
     this[a] = (null !== s || "boolean" != typeof this[a]) && s;
    }));
   }, e.observedAttributes = Array.from(new Set([ ...Object.keys(null !== (n = t.$watchers$) && void 0 !== n ? n : {}), ...s.filter((([e, t]) => 15 & t[0])).map((([e, n]) => {
    const s = n[1] || e;
    return o.set(s, e), s;
   })) ]));
  }
 }
 return e;
}, initializeComponent = async (e, t, o, n, s) => {
 if (0 == (32 & t.$flags$)) {
  if (t.$flags$ |= 32, BUILD.lazyLoad ) {
   if ((s = loadModule(o)).then) {
    const e = (() => {});
    s = await s, e();
   }
   !s.isProxied && ((o.$watchers$ = s.watchers), 
   proxyComponent(s, o, 2), s.isProxied = !0);
   const e = createTime("createInstance", o.$tagName$);
   (t.$flags$ |= 8);
   try {
    new s(t);
   } catch (e) {
    consoleError(e);
   }
   (t.$flags$ &= -9), (t.$flags$ |= 128), e(), 
   fireConnectedCallback();
  }
  if (s.style) {
   let n = s.style;
   const l = getScopeId(o);
   if (!styles.has(l)) {
    const e = createTime("registerStyles", o.$tagName$);
    registerStyle(l, n), e();
   }
  }
 }
 const r = t.$ancestorComponent$, i = () => scheduleUpdate(t, !0);
 r && r["s-rc"] ? r["s-rc"].push(i) : i();
}, fireConnectedCallback = e => {
}, connectedCallback = e => {
 if (0 == (1 & plt.$flags$)) {
  const t = getHostRef(e), o = t.$cmpMeta$, n = createTime("connectedCallback", o.$tagName$);
  if (1 & t.$flags$) addHostEventListeners(e, t, o.$listeners$), (null == t ? void 0 : t.$lazyInstance$) ? fireConnectedCallback() : (null == t ? void 0 : t.$onReadyPromise$) && t.$onReadyPromise$.then((() => fireConnectedCallback())); else {
   let n;
   if (t.$flags$ |= 1, (n = e.getAttribute("s-id"), n)) {
    ((e, t, o, n) => {
     const s = createTime("hydrateClient", t), l = e.shadowRoot, a = [], r = l ? [] : null, i = n.$vnode$ = newVNode(t, null);
     plt.$orgLocNodes$ || initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map), 
     e["s-id"] = o, e.removeAttribute("s-id"), clientHydrate(i, a, [], r, e, e, o), a.map((e => {
      const o = e.$hostId$ + "." + e.$nodeId$, n = plt.$orgLocNodes$.get(o), s = e.$elm$;
      n && supportsShadow && "" === n["s-en"] && n.parentNode.insertBefore(s, n.nextSibling), 
      l || (s["s-hn"] = t, n && (s["s-ol"] = n, s["s-ol"]["s-nr"] = s)), plt.$orgLocNodes$.delete(o);
     })), l && r.map((e => {
      e && l.appendChild(e);
     })), s();
    })(e, o.$tagName$, n, t);
   }
   if (!n && (BUILD.hydrateServerSide ) && setContentReference(e), 
   BUILD.asyncLoading) {
    let o = e;
    for (;o = o.parentNode || o.host; ) if (1 === o.nodeType && o.hasAttribute("s-id") && o["s-p"] || o["s-p"]) {
     attachToAncestor(t, t.$ancestorComponent$ = o);
     break;
    }
   }
   initializeComponent(e, t, o);
  }
  n();
 }
}, setContentReference = e => {
 const t = e["s-cr"] = doc.createComment("");
 t["s-cn"] = !0, e.insertBefore(t, e.firstChild);
}, Fragment = (e, t) => t, addHostEventListeners = (e, t, o, n) => {
 o && (o.map((([o, n, s]) => {
  const l = getHostListenerTarget(e, o) , a = hostListenerProxy(t, s), r = hostListenerOpts(o);
  plt.ael(l, n, a, r), (t.$rmListeners$ = t.$rmListeners$ || []).push((() => plt.rel(l, n, a, r)));
 })));
}, hostListenerProxy = (e, t) => o => {
 try {
  256 & e.$flags$ ? e.$lazyInstance$[t](o) : (e.$queuedListeners$ = e.$queuedListeners$ || []).push([ t, o ]) ;
 } catch (e) {
  consoleError(e);
 }
}, getHostListenerTarget = (e, t) => 8 & t ? win : e, hostListenerOpts = e => 0 != (2 & e), insertVdomAnnotations = (e, t) => {
 if (null != e) {
  const o = {
   hostIds: 0,
   rootLevelIds: 0,
   staticComponents: new Set(t)
  }, n = [];
  parseVNodeAnnotations(e, e.body, o, n), n.forEach((t => {
   if (null != t) {
    const n = t["s-nr"];
    let s = n["s-host-id"], l = n["s-node-id"], a = `${s}.${l}`;
    if (null == s) if (s = 0, o.rootLevelIds++, l = o.rootLevelIds, a = `${s}.${l}`, 
    1 === n.nodeType) n.setAttribute("c-id", a); else if (3 === n.nodeType) {
     if (0 === s && "" === n.nodeValue.trim()) return void t.remove();
     const o = e.createComment(a);
     o.nodeValue = `t.${a}`, n.parentNode.insertBefore(o, n);
    }
    let r = `o.${a}`;
    const i = t.parentElement;
    i && ("" === i["s-en"] ? r += "." : "c" === i["s-en"] && (r += ".c")), t.nodeValue = r;
   }
  }));
 }
}, parseVNodeAnnotations = (e, t, o, n) => {
 null != t && (null != t["s-nr"] && n.push(t), 1 === t.nodeType && t.childNodes.forEach((t => {
  const s = getHostRef(t);
  if (null != s && !o.staticComponents.has(t.nodeName.toLowerCase())) {
   const n = {
    nodeIds: 0
   };
   insertVNodeAnnotations(e, t, s.$vnode$, o, n);
  }
  parseVNodeAnnotations(e, t, o, n);
 })));
}, insertVNodeAnnotations = (e, t, o, n, s) => {
 if (null != o) {
  const l = ++n.hostIds;
  if (t.setAttribute("s-id", l), null != t["s-cr"] && (t["s-cr"].nodeValue = `r.${l}`), 
  null != o.$children$) {
   const t = 0;
   o.$children$.forEach(((o, n) => {
    insertChildVNodeAnnotations(e, o, s, l, t, n);
   }));
  }
  if (t && o && o.$elm$ && !t.hasAttribute("c-id")) {
   const e = t.parentElement;
   if (e && e.childNodes) {
    const n = Array.from(e.childNodes), s = n.find((e => 8 === e.nodeType && e["s-sr"]));
    if (s) {
     const e = n.indexOf(t) - 1;
     o.$elm$.setAttribute("c-id", `${s["s-host-id"]}.${s["s-node-id"]}.0.${e}`);
    }
   }
  }
 }
}, insertChildVNodeAnnotations = (e, t, o, n, s, l) => {
 const a = t.$elm$;
 if (null == a) return;
 const r = o.nodeIds++, i = `${n}.${r}.${s}.${l}`;
 if (a["s-host-id"] = n, a["s-node-id"] = r, 1 === a.nodeType) a.setAttribute("c-id", i); else if (3 === a.nodeType) {
  const t = a.parentNode, o = t.nodeName;
  if ("STYLE" !== o && "SCRIPT" !== o) {
   const o = `t.${i}`, n = e.createComment(o);
   t.insertBefore(n, a);
  }
 } else if (8 === a.nodeType && a["s-sr"]) {
  const e = `s.${i}.${a["s-sn"] || ""}`;
  a.nodeValue = e;
 }
 if (null != t.$children$) {
  const l = s + 1;
  t.$children$.forEach(((t, s) => {
   insertChildVNodeAnnotations(e, t, o, n, l, s);
  }));
 }
}, hAsync = (e, t, ...o) => {
 if (Array.isArray(o) && o.length > 0) {
  const n = o.flat(1 / 0);
  return n.some(isPromise$1) ? Promise.all(n).then((o => h(e, t, ...o))).catch((o => h(e, t))) : h(e, t, ...o);
 }
 return h(e, t);
}, NO_HYDRATE_TAGS = new Set([ "CODE", "HEAD", "IFRAME", "INPUT", "OBJECT", "OUTPUT", "NOSCRIPT", "PRE", "SCRIPT", "SELECT", "STYLE", "TEMPLATE", "TEXTAREA" ]);

const cmpModules = new Map, getModule = e => {
 if ("string" == typeof e) {
  e = e.toLowerCase();
  const t = cmpModules.get(e);
  if (null != t) return t[e];
 }
 return null;
}, loadModule = (e, t, o) => getModule(e.$tagName$), isMemberInElement = (e, t) => {
 if (null != e) {
  if (t in e) return !0;
  const o = getModule(e.nodeName);
  if (null != o) {
   const e = o;
   if (null != e && null != e.cmpMeta && null != e.cmpMeta.$members$) return t in e.cmpMeta.$members$;
  }
 }
 return !1;
}, registerComponents = e => {
 for (const t of e) {
  const e = t.cmpMeta.$tagName$;
  cmpModules.set(e, {
   [e]: t
  });
 }
}, win = window, doc = win.document, writeTask = e => {
 process.nextTick((() => {
  try {
   e();
  } catch (e) {
   consoleError(e);
  }
 }));
}, resolved = Promise.resolve(), nextTick = e => resolved.then(e), defaultConsoleError = e => {
 null != e && console.error(e.stack || e.message || e);
}, consoleError = (e, t) => (defaultConsoleError)(e, t), plt = {
 $flags$: 0,
 $resourcesUrl$: "",
 jmp: e => e(),
 raf: e => requestAnimationFrame(e),
 ael: (e, t, o, n) => e.addEventListener(t, o, n),
 rel: (e, t, o, n) => e.removeEventListener(t, o, n),
 ce: (e, t) => new win.CustomEvent(e, t)
}, supportsShadow = !1, hostRefs = new WeakMap, getHostRef = e => hostRefs.get(e), registerInstance = (e, t) => hostRefs.set(t.$lazyInstance$ = e, t), registerHost = (e, t) => {
 const o = {
  $flags$: 0,
  $cmpMeta$: t,
  $hostElement$: e,
  $instanceValues$: new Map,
  $renderCount$: 0
 };
 return o.$onInstancePromise$ = new Promise((e => o.$onInstanceResolve$ = e)), o.$onReadyPromise$ = new Promise((e => o.$onReadyResolve$ = e)), 
 e["s-p"] = [], e["s-rc"] = [], addHostEventListeners(e, o, t.$listeners$), hostRefs.set(e, o);
}, styles = new Map;

const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof getRenderingRef !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = getRenderingRef();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(forceUpdate$1));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(forceUpdate$1));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};

const Environments = {
  PRODUCTION: 'production',
  PREVIEW: 'preview',
  TEST: 'test',
  LOCAL: 'local'
};
function getEnvironment(test) {
  switch (test) {
    case Environments.PREVIEW.toString():
      return Environments.PREVIEW;
    case Environments.TEST.toString():
      return Environments.TEST;
    case Environments.LOCAL.toString():
      return Environments.LOCAL;
    case Environments.PRODUCTION.toString():
    default:
      return Environments.PRODUCTION;
  }
}

const EventActions = {
  GENERAL_LOAD: 'PAGHomeNav_General_Load',
  COUNTRY_RECOMMENDER_LOAD: 'PAGHomeNav_CountryRecommender_Load',
  COUNTRY_RECOMMENDER_CHANGE: 'PAGHomeNav_CountryRecommenderChange_Click',
  COUNTRY_RECOMMENDER_CLOSE: 'PAGHomeNav_CountryRecommenderClose_Click',
  CREST_CLICK: 'PAGHomeNav_Crest_Click',
  NAVIGATION_LOAD: 'PAGHomeNav_Navigation_Load',
  MODEL_OVERLAY_LOAD: 'PAGHomeNav_ModelRangeOverlay_Load',
  MENU_BACK_CLICK: 'PAGHomeNav_MenuBack_Click',
  MENU_CLOSE_CLICK: 'PAGHomeNav_MenuClose_Click',
  META_FUNCTION_CLICK: 'PAGHomeNav_MetaFunction_Click',
  MODEL_CLICK: 'PAGHomeNav_Model_Click',
  MODEL_META_FUNCTION_CLICK: 'PAGHomeNav_ModelMetaFunction_Click',
  MODEL_CTA_CLICK: 'PAGHomeNav_ModelCTA_Click',
  MODEL_RANGE_CLICK: 'PAGHomeNav_ModelRange_Click',
  MORE_CLICK: 'PAGHomeNav_More_Click',
  NAVIGATION_CLICK: 'PAGHomeNav_Navigation_Click',
  NAVIGATION_LINK_CLICK: 'PAGHomeNav_NavigationLink_Click',
  DEALER_SEARCH_SCREEN_LOAD: 'PAGHomeNav_FindADealerSearchScreen_Load',
  DEALER_RESULTS_SCREEN_LOAD: 'PAGHomeNav_FindADealerResultsScreen_Load',
  DEALER_SEARCH_CLICK: 'PAGHomeNav_FindADealerSearch_Click',
  DEALER_GEOLOCATION_CLICK: 'PAGHomeNav_FindADealerLocateMe_Click',
  DEALER_RESULT_CLICK: 'PAGHomeNav_FindADealerDealer_Click',
  DEALER_DETAILS_SCREEN_LOAD: 'PAGHomeNav_FindADealerDealerScreen_Load',
  DEALER_CONTACT_CLICK: 'PAGHomeNav_FindADealerDealerContact_Click',
  DEALER_MAP_CLICK: 'PAGHomeNav_FindADealerMap_Click',
  CONTEXTUAL_BUTTON_CLICK: 'PAGHomeNav_IconContextLink_Click',
  DRAWER_LOAD: 'PAGHomeNav_Drawer_Load',
  PCOM_SEARCH_CLICK: 'PAGHomeNav_IconGlobalLink_Click'
};
const DATA_LAYER_APP_ID = 'nav';
const DATA_LAYER_APPLICATION_NAME = 'edgecast_CDN';
const ElementTypes = {
  closeButton: 'close-button',
  backdrop: 'backdrop',
  backButton: 'back-button',
  menuItem: 'menu-item',
  sideDrawerItem: 'side-drawer-item',
  doubleDrawer: 'double-drawer',
  singleDrawer: 'single-drawer',
  bodyTypeButton: 'body-type-button',
  myPorscheDrawer: 'my-porsche-drawer',
  dealerSearchForm: 'dealer-search-form'
};
const ClickElementTypes = {
  Link: 'link',
  Button: 'button',
  Image: 'image'
};
const DisplayElementTypes = {
  SingleDrawer: 'singleDrawer',
  DoubleDrawer: 'doubleDrawer'
};
const DEALER_SEARCH_DISPLAY_ELEMENT_ID = 'level1-mainmenu_level2-find_a_dealer';
const DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER = 'level1-mainmenu_level3-dealer-details';
const DEALER_SEARCH_TARGET_ELEMENT = 'level2_dealer-search-form';
const DEALER_SEARCH_ELEMENT_TYPE = 'level3_dealer-details';

const AnimationSequences = {
  OPEN_DOUBLE_DRAWER: 'openDoubleDrawer',
  CLOSE_DOUBLE_DRAWER: 'closeDoubleDrawer',
  TRANSITION_SAME_LEVEL_DOUBLE_DRAWER: 'transitionSameLevelDoubleDrawer',
  TRANSITION_SAME_LEVEL_DOUBLE_DRAWER_REVERSE: 'transitionSameLevelDoubleDrawerReverse',
  TRANSITION_NEXT_LEVEL_DOUBLE_DRAWER: 'transitionNextLevelDoubleDrawer',
  TRANSITION_PREVIOUS_LEVEL_DOUBLE_DRAWER: 'transitionPreviousLevelDoubleDrawer',
  OPEN_SINGLE_DRAWER: 'openSingleDrawer',
  CLOSE_SINGLE_DRAWER: 'closeSingleDrawer',
  TRANSITION_NEXT_LEVEL_SINGLE_DRAWER: 'transitionNextLevelSingleDrawer',
  TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER: 'transitionPreviousLevelSingleDrawer'
};
const AnimationDurations = {
  highlight: 200,
  drawerContent: 250,
  drawer: 400,
  backdrop: 400,
  drawerOpen: 600
};

const NavigationMode = {
  hero: 'hero',
  navbar: 'navbar',
  transparent: 'transparent'
};
const NavigationTheme = {
  light: 'light',
  dark: 'dark'
};

const FEATURE_OVERRIDE_ENABLED = 'featureOverrideEnabled';
const FEATURE_PORSCHE_75_YEARS_LOGO = 'porsche_75_years_logo';
const FEATURE_SHOP = 'shop';
const FEATURE_PCOM_SEARCH = 'pcom_search';
const FEATURE_SAVED_ITEMS = 'saved_items';
const FEATURE_AB_TESTING = 'ab';
const FEATURE_DEALER_SEARCH_CHINA = 'dealer_search_china';
const FEATURE_DEALER_SEARCH_OPENING_HOURS = 'opening_hours';

const DEFAULT_ENVIRONMENT = 'production';
const LOGGED_IN_USER_NO_NAME_STATUS = 'loggedIn';
const LOGGED_OUT_USER_STATUS = 'loginOrRegister';
const LOADING_STATUS = 'loading';
const VERSION = '3.2.5';
const DEFAULT_UNREAD_MESSAGES_COUNT = 0;
const FOCUSABLE_ELEMENTS_SELECTOR = 'a, button, [tabindex]:not([tabindex="-1"]), phn-p-link-pure, phn-p-button-pure, phn-p-link, phn-p-button, input.autofocus, phn-p-inline-notification';
const SAVED_DEALER_COOKIE = 'nav_saved_dealer';
const GEOLOCATION_BUTTON_SEARCH_TERM = 'by geolocation';
const DEALER_MARKET_SEARCH_TERM = 'by market';
const MS_IN_MONTH = 1000 * 60 * 60 * 24 * 90;
const COOKIE_DOMAIN = 'porsche.com';
const IFRAME_ID = 'auth-iframe-header-navigation';
const MenuItemVariant = {
  Model: 'model-variant',
  Level1: 'level1-variant',
  DealerDetails: 'dealer-details-variant'
};

const Application = {
  shop: 'shop',
  pcom: 'pcom',
  default: 'default'
};
var DrawerStatusValues;
(function (DrawerStatusValues) {
  DrawerStatusValues["startOpening"] = "startOpening";
  DrawerStatusValues["startClosing"] = "startClosing";
  DrawerStatusValues["finishOpening"] = "finishOpening";
  DrawerStatusValues["finishClosing"] = "finishClosing";
})(DrawerStatusValues || (DrawerStatusValues = {}));

const navStateStore = createStore({
  loggedInState: LOGGED_OUT_USER_STATUS,
  unreadMessagesCount: DEFAULT_UNREAD_MESSAGES_COUNT,
  userConsent: false,
  env: getEnvironment(DEFAULT_ENVIRONMENT),
  app: Application.default
});

const breakpointBase = 0;

const breakpointXS = 480;

const breakpointS = 760;

const breakpointM = 1000;

const breakpointL = 1300;

const breakpointXL = 1760;

const breakpointXXL = 1920;

const breakpoint = {
    base: breakpointBase,
    xs: breakpointXS,
    s: breakpointS,
    m: breakpointM,
    l: breakpointL,
    xl: breakpointXL,
    xxl: breakpointXXL,
};

const test$1 = {
	CONTENT_URL: "http://content/url",
	SHOP_CONTENT_URL: "http://shop-content/url",
	ASSETS_URL: "http://assets/url",
	PROFILE_API_URL: "http://profile-api/url",
	FINDER_URL: "http://finder/url",
	FOOTER_ASSETS_URL: "http://footer/assets",
	COUNTRY_SELECTOR_URL: "http://select/countries",
	UNREAD_MESSAGES_COUNT_API_URL: "http://unread-messages-count-api/url",
	LOGIN_BASE_URL: "http://login-base/url",
	LOGIN_REDIRECT_URL: "http://login-redirect/url",
	CLIENT_ID: "client-id",
	IDENTITY_PROVIDER_URL: "http://identity-redirect/url",
	IDENTITY_CLIENT_ID: "identity-client-id",
	IDENTITY_AUDIENCE: "https://identity-audience/url",
	IDP_MIGRATION_ENDPOINT: "http://idp-migration-endpoint",
	PORSCHE_COM_URL: [
		"http://porsche-com/url"
	],
	DEALER_API_URL: "https://eu-0.test.api.porsche.io/porsche-group/test/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-preview-nav.porsche.services"
};
const local$1 = {
	CONTENT_URL: "https://preview-nav.porsche.com/v3/content",
	SHOP_CONTENT_URL: "https://shop.porsche-preview.com/api/content",
	ASSETS_URL: ".",
	FOOTER_ASSETS_URL: "https://footer.pchomenav.aws.porsche.cloud/assets",
	COUNTRY_SELECTOR_URL: "https://preview.ppn.porsche.com/countries",
	PROFILE_API_URL: "https://api.porsche-preview.com/profiles/mydata",
	FINDER_URL: "https://finder.porsche.com",
	UNREAD_MESSAGES_COUNT_API_URL: "https://api.porsche-preview.com/inbox/pp/rest/messages/unreadCount",
	LOGIN_BASE_URL: "https://preview-login.porsche.com",
	LOGIN_REDIRECT_URL: "https://preview-nav.porsche.com/auth/authIframe.html",
	CLIENT_ID: "V5yfGusXVALiypCMRFBfM4IAHaZ0IA4A",
	IDENTITY_PROVIDER_URL: "https://identity.porsche-preview.com",
	IDENTITY_CLIENT_ID: "6nPQZTTgpN6HEgvb9gswJyduzgVfy7Cr",
	IDENTITY_AUDIENCE: "https://api.porsche-preview.com",
	IDP_MIGRATION_ENDPOINT: "https://assets.identity.porsche-preview.com/migration/configuration",
	PORSCHE_COM_URL: [
		"http://localhost:3333",
		"http://localhost:3334",
		"http://localhost:3335",
		"https://local.porsche.com:3333",
		"https://local.porsche.com:3334",
		"https://local.porsche.com:3335"
	],
	DEALER_API_URL: "https://configurator-dev.porsche.com/api/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-preview-nav.porsche.services"
};
const preview$1 = {
	CONTENT_URL: "https://preview-nav.porsche.com/v3/content",
	SHOP_CONTENT_URL: "https://shop.porsche-preview.com/api/content",
	ASSETS_URL: "https://preview-nav.porsche.com",
	FOOTER_ASSETS_URL: "https://footer.pchomenav.aws.porsche.cloud/assets",
	COUNTRY_SELECTOR_URL: "https://preview.ppn.porsche.com/countries",
	PROFILE_API_URL: "https://api.porsche-preview.com/profiles/mydata",
	FINDER_URL: "https://finder.porsche.com",
	UNREAD_MESSAGES_COUNT_API_URL: "https://api.porsche-preview.com/inbox/pp/rest/messages/unreadCount",
	LOGIN_BASE_URL: "https://preview-login.porsche.com",
	LOGIN_REDIRECT_URL: "https://preview-nav.porsche.com/auth/authIframe.html",
	CLIENT_ID: "V5yfGusXVALiypCMRFBfM4IAHaZ0IA4A",
	IDENTITY_PROVIDER_URL: "https://identity.porsche-preview.com",
	IDENTITY_CLIENT_ID: "6nPQZTTgpN6HEgvb9gswJyduzgVfy7Cr",
	IDENTITY_AUDIENCE: "https://api.porsche-preview.com",
	IDP_MIGRATION_ENDPOINT: "https://assets.identity.porsche-preview.com/migration/configuration",
	PORSCHE_COM_URL: [
		"https://vanillajs.preview-nav.porsche.com",
		"https://angular.preview-nav.porsche.com",
		"https://react.preview-nav.porsche.com",
		"https://vanillajs.pchomenav.aws.porsche.cloud",
		"https://react.pchomenav.aws.porsche.cloud",
		"https://angular.pchomenav.aws.porsche.cloud",
		"https://preview.ppn.porsche.com",
		"https://configurator-staging.porsche.com",
		"https://cd.int.pcom.weu.porsche.com/",
		"https://cm.int.pcom.weu.porsche.com/",
		"https://cd.staging.pcom.weu.porsche.com/",
		"https://cm.staging.pcom.weu.porsche.com/",
		"https://ohdev.westeurope.cloudapp.azure.com/",
		"https://ohtest.westeurope.cloudapp.azure.com/"
	],
	DEALER_API_URL: "https://configurator.porsche.com/api/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-preview-nav.porsche.services"
};
const production$1 = {
	CONTENT_URL: "https://nav.porsche.com/00BC524/v3/content",
	SHOP_CONTENT_URL: "https://shop.porsche.com/api/content",
	ASSETS_URL: "https://nav.porsche.com/00BC524",
	FOOTER_ASSETS_URL: "https://nav.porsche.com/00BC524/footer/assets",
	PROFILE_API_URL: "https://api.porsche.com/profiles/mydata",
	FINDER_URL: "https://finder.porsche.com",
	COUNTRY_SELECTOR_URL: "https://www.porsche.com/countries",
	UNREAD_MESSAGES_COUNT_API_URL: "https://api.porsche.com/inbox/p/rest/messages/unreadCount",
	LOGIN_BASE_URL: "https://login.porsche.com",
	LOGIN_REDIRECT_URL: "https://nav.porsche.com/00BC524/auth/authIframe.html",
	CLIENT_ID: "QPw3VOLAMfI7r0nmRY8ELq4RzZpZeXEE",
	IDENTITY_PROVIDER_URL: "https://identity.porsche.com",
	IDENTITY_CLIENT_ID: "fFp1mRfLwaUkbrAFv7QYeubkPofNYvWY",
	IDENTITY_AUDIENCE: "https://api.porsche.com",
	IDP_MIGRATION_ENDPOINT: "https://assets.identity.porsche.com/migration/configuration",
	PORSCHE_COM_URL: [
		"https://www.porsche.com",
		"https://configurator.porsche.com"
	],
	DEALER_API_URL: "https://configurator.porsche.com/api/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-nav.porsche.services"
};
var configJSON = {
	test: test$1,
	local: local$1,
	preview: preview$1,
	production: production$1
};

function getConfig(env) {
  return configJSON[env];
}
function hasKey(obj, key) {
  return obj && typeof obj === 'object' && key in obj;
}
function isString(test) {
  return typeof test === 'string' && test.length > 0;
}
function getString(test) {
  return typeof test === 'string' ? test : '';
}
/* istanbul ignore next */
function getHTMLElement(el) {
  return el instanceof HTMLElement ? el : null;
}
/* istanbul ignore next */
function focusOnElement(el) {
  var _a;
  (_a = getHTMLElement(el)) === null || _a === void 0 ? void 0 : _a.focus();
}
/* istanbul ignore next */
function getHTMLInputElement(el) {
  return el instanceof HTMLInputElement ? el : null;
}
function IsKeyboardClick(e) {
  return e.x === 0 && e.y === 0;
}
function IsLoading(loggedInState) {
  return loggedInState === LOADING_STATUS;
}
function IsLoggedOut(loggedInState) {
  return loggedInState === LOGGED_OUT_USER_STATUS;
}
function IsLoggedIn(loggedInState) {
  return !IsLoading(loggedInState) && !IsLoggedOut(loggedInState);
}
function getUsername(loggedInState, loggedInText) {
  return loggedInState === LOGGED_IN_USER_NO_NAME_STATUS ? loggedInText : loggedInState;
}
function getQueryString(params) {
  return Object.entries(params)
    .filter((entry) => entry[1] !== undefined)
    .map(([name, value]) => [name, isString(value) ? value : value.toString()])
    .map(([name, value]) => `${encodeURIComponent(name)}=${encodeURIComponent(value)}`)
    .join('&');
}
function constructCacheKey(...args) {
  return args.join('---');
}
function isDesktop(currentBreakpoint) {
  return currentBreakpoint >= breakpoint.s;
}
function getImageSize(currentBreakpoint) {
  switch (currentBreakpoint) {
    case breakpoint.xxl:
    case breakpoint.xl:
      return 1920;
    case breakpoint.l:
      return 1360;
    case breakpoint.m:
      return 1024;
    case breakpoint.s:
      return 760;
    case breakpoint.xs:
      return 390;
    default:
      return 320;
  }
}
function sanitizeMode(mode) {
  if (!Object.keys(NavigationMode).includes(mode)) {
    return NavigationMode.navbar;
  }
  return mode;
}
function sanitizeTheme(theme) {
  if (!Object.keys(NavigationTheme).includes(theme)) {
    return NavigationTheme.light;
  }
  return theme;
}
function sanitizeApp(app) {
  if (!Object.keys(Application).includes(app)) {
    return Application.default;
  }
  return app;
}
function constructThemeClass(mode, theme) {
  const sanitizedMode = sanitizeMode(mode);
  if (sanitizedMode === NavigationMode.navbar) {
    return NavigationMode.navbar;
  }
  const sanitizedTheme = sanitizeTheme(theme);
  return `${mode}_${sanitizedTheme}`;
}
function isPromise(value) {
  return (Boolean(value) &&
    typeof value.then === 'function' &&
    value[Symbol.toStringTag] === 'Promise');
}
function addQueryParamsToUrl(url, params) {
  return `${url}${url.includes('?') ? '&' : '?'}${getQueryString(params)}`;
}
function getValidContentPathSegments(rootContentItem, segments) {
  let currentContentItem = rootContentItem;
  const validSegments = [];
  for (const segment of segments) {
    currentContentItem = currentContentItem.children.find((child) => child.id === segment);
    if (currentContentItem === undefined || currentContentItem === null) {
      break;
    }
    validSegments.push(segment);
  }
  return validSegments;
}
function getRootMenuItem(content, key) {
  if (!['vehiclePurchase', 'shop', 'experience', 'services'].includes(key) || content[key] === undefined) {
    return null;
  }
  return content[key];
}
function buildRoutingKeyHistoryFromContentPath(segments) {
  const routingKeyHistory = [segments[0]];
  for (let i = 1; i < segments.length; i++) {
    routingKeyHistory.push(`${routingKeyHistory[i - 1]}/${segments[i]}`);
  }
  return routingKeyHistory;
}
function isModelName(text) {
  return ['718', '911', 'Taycan', 'Macan', 'Panamera', 'Cayenne'].includes(text);
}
function isModelFuelTypeGasoline(model) {
  const lowerCase = model.toLowerCase();
  return ['718', '911', 'macan'].includes(lowerCase);
}
const getRightTheme = (theme, mode) => {
  if (mode === NavigationMode.transparent || mode === NavigationMode.hero) {
    return theme;
  }
  return 'light';
};
function camelToKebapCase(camelString) {
  return camelString.replace(/([A-Z])/g, (g) => `-${g[0].toLowerCase()}`);
}
function shallowCopySpecifiedAttributesWithDefault(sourceObject, copyObject, accessor = (object, key) => object[key]) {
  return Object.entries(copyObject).reduce((values, [key, value]) => {
    const valueFromSource = accessor(sourceObject, key);
    if (typeof valueFromSource === 'string') {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      values[key] = valueFromSource;
    }
    else {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      values[key] = value;
    }
    return values;
  }, {});
}

class NaviError extends Error {
  constructor(message, type) {
    super(message);
    this.type = type;
    // This line fixes a bug/feature in typescript to do with extending built-in classes.
    // Do not touch.
    // Link: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
    Object.setPrototypeOf(this, NaviError.prototype);
  }
}
const NaviErrorTypes = {
  NO_INPUT: 'NO_INPUT',
  INVALID_INPUT: 'INVALID_INPUT',
  NO_RESULTS: 'NO_RESULTS',
  GENERAL: 'GENERAL',
  RETRY: 'RETRY',
  GEOLOCATION_DENIED: 'GEOLOCATION_DENIED',
  UNAUTHORIZED: 'UNAUTHORIZED'
};
function getErrorMessage(errorContent, err) {
  if (!(err instanceof NaviError)) {
    return errorContent.wrong;
  }
  switch (err.type) {
    case NaviErrorTypes.NO_INPUT:
      return errorContent.noInput;
    case NaviErrorTypes.INVALID_INPUT:
      return errorContent.invalidInput;
    case NaviErrorTypes.NO_RESULTS:
      return errorContent.noResults;
    case NaviErrorTypes.GENERAL:
      return errorContent.wrong;
    case NaviErrorTypes.RETRY:
      return errorContent.retry;
    case NaviErrorTypes.GEOLOCATION_DENIED:
      return errorContent.geolocationDenied;
    default:
      return errorContent.wrong;
  }
}

/* istanbul ignore file */
class WindowService {
  constructor() {
    this.initialBodyStyleValues = {
      top: '',
      position: '',
      inlineSize: '',
      overflowY: ''
    };
    this.initialDocumentScrollTop = 0;
  }
  get location() {
    return window.location;
  }
  set location(newLocation) {
    window.location = newLocation;
  }
  get sessionStorage() {
    return window.sessionStorage;
  }
  get localStorage() {
    return window.localStorage;
  }
  set version(version) {
    Object.assign(window, { PHN_HEADER_VERSION: version });
  }
  set navigationLoaded(loaded) {
    Object.assign(window, { PHN_NAVIGATION_LOADED: loaded });
  }
  get bodyOverflow() {
    return document.body.style.overflow;
  }
  get bodyHeight() {
    return document.body.style.height;
  }
  requestAnimationFrame(callback) {
    return window.requestAnimationFrame(callback);
  }
  createDiv() {
    return window.document.createElement('div');
  }
  getBreakpoint() {
    const clientWidth = Math.max(window.document.documentElement.clientWidth, window.innerWidth || 0);
    const matchingBreakpoint = Object.keys(breakpoint)
      .reverse()
      .find((foundBreakpoint) => hasKey(breakpoint, foundBreakpoint) && clientWidth >= breakpoint[foundBreakpoint]);
    return typeof matchingBreakpoint === 'string' && hasKey(breakpoint, matchingBreakpoint)
      ? breakpoint[matchingBreakpoint]
      : 0;
  }
  get redirected() {
    return (window.REDIRECTED === true ||
      window.location.search.includes('cs_redirect='));
  }
  createIframe(id, src) {
    const iframe = window.document.createElement('iframe');
    iframe.id = id;
    iframe.style.display = 'none';
    iframe.src = src;
    window.document.body.appendChild(iframe);
  }
  removeElement(id) {
    var _a;
    (_a = window.document.getElementById(id)) === null || _a === void 0 ? void 0 : _a.remove();
  }
  redirectToUrl(url) {
    window.location.assign(url);
  }
  generateRandom(size) {
    const CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const buffer = new Uint8Array(size);
    window.crypto.getRandomValues(buffer);
    const state = [];
    for (let i = 0; i < buffer.byteLength; i += 1) {
      const index = buffer[i] % CHARSET.length;
      state.push(CHARSET[index]);
    }
    return state.join('');
  }
  /**
   * site does NOT have consent mechanism -> consent NOT needed
   * site does have consent mechanism + isConsentActive NOT exists -> consent NOT needed
   * site does have consent mechanism + isConsentActive exists + isConsentActive -> consent needed
   * site does have consent mechanism + NOT isConsentActive -> consent NOT needed
   */
  /**
   * consent needed + consent given -> userConsent = true
   * consent needed + consent NOT given -> userConsent = false
   * consent NOT needed -> userConsent = true
   */
  maybeCheckMarketingConsent(handleSuccess) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const args = {
      processorId: (_c = (_b = (_a = window.GlobalConsent) === null || _a === void 0 ? void 0 : _a.Processor) === null || _b === void 0 ? void 0 : _b.googleMaps) !== null && _c !== void 0 ? _c : 'Google Maps',
      timeoutVar: {},
      mapContainer: '',
      callbacks: {
        success: handleSuccess
      }
    };
    if (typeof ((_e = (_d = window.PCOM) === null || _d === void 0 ? void 0 : _d.globalConsent) === null || _e === void 0 ? void 0 : _e.checkConsent) === 'function') {
      (_h = (_g = (_f = window.PCOM) === null || _f === void 0 ? void 0 : _f.globalConsent) === null || _g === void 0 ? void 0 : _g.checkConsent) === null || _h === void 0 ? void 0 : _h.call(_g, args);
      return true;
    }
    if (typeof ((_j = window.ucPrivacyShield) === null || _j === void 0 ? void 0 : _j.checkConsent) === 'function') {
      (_l = (_k = window.ucPrivacyShield) === null || _k === void 0 ? void 0 : _k.checkConsent) === null || _l === void 0 ? void 0 : _l.call(_k, args);
      return true;
    }
    handleSuccess();
    return false;
  }
  async deriveChallenge(code) {
    if (code.length < 43 || code.length > 128) {
      throw new NaviError('invalid code length', NaviErrorTypes.INVALID_INPUT);
    }
    const buf = new ArrayBuffer(code.length);
    const bufView = new Uint8Array(buf);
    for (let i = 0; i < code.length; i++) {
      bufView[i] = code.charCodeAt(i);
    }
    const buffer = await window.crypto.subtle.digest('SHA-256', bufView);
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
  }
  async hashString(text) {
    const msgUint8 = new TextEncoder().encode(text);
    const hashBuffer = await window.crypto.subtle.digest('SHA-256', msgUint8);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');
  }
  getScrollbarWidth() {
    const scrollDiv = window.document.createElement('div');
    scrollDiv.style.overflow = 'scroll';
    window.document.body.appendChild(scrollDiv);
    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    window.document.body.removeChild(scrollDiv);
    return Number.isNaN(scrollbarWidth) ? '0px' : `${scrollbarWidth}px`;
  }
  async fetchGoogleMapsApi(apiKey, url = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`) {
    if (window.google !== undefined && window.google.maps !== undefined && window.google.maps.version !== undefined) {
      return window.google;
    }
    const existingScript = document.getElementById('googleMaps'); // -> Current name?!
    if (existingScript) {
      return window.google;
    }
    const script = document.createElement('script');
    script.src = url;
    script.id = 'googleMaps';
    document.head.appendChild(script);
    return new Promise((resolve, reject) => {
      script.onerror = () => {
        reject(new NaviError('Failed to load google maps script.', NaviErrorTypes.GENERAL));
      };
      script.onload = () => {
        resolve(window.google);
      };
    });
  }
  async getNavigatorLatLong() {
    return new Promise((resolve, reject) => {
      window.navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {
        resolve({ latitude, longitude });
      }, (error) => reject(new NaviError(`geolocation.getCurrentPosition failed with ${error.code}: ${error.message}`, getErrorType$1(error))));
    });
  }
  getCookie(cookieName) {
    var _a;
    return getString((_a = document.cookie
      .split('; ')
      .find((row) => row.startsWith(`${cookieName}=`))) === null || _a === void 0 ? void 0 : _a.split('=')[1]);
  }
  setCookie(cookieName, newValue) {
    document.cookie = `${cookieName}=${newValue};domain=${COOKIE_DOMAIN};expires=${new Date(Date.now() + MS_IN_MONTH * 10).toUTCString()};`;
  }
  btoa(data) {
    return window.btoa(data);
  }
  lockScroll() {
    this.initialBodyStyleValues = shallowCopySpecifiedAttributesWithDefault(document.body.style, this.initialBodyStyleValues);
    this.initialDocumentScrollTop = document.documentElement.scrollTop;
    document.body.style.top = `-${document.documentElement.scrollTop}px`;
    document.body.style.position = 'fixed';
    document.body.style.inlineSize = '100%';
    document.body.style.overflowY = 'scroll';
  }
  unlockScroll() {
    Object.entries(this.initialBodyStyleValues).forEach(([key, value]) => document.body.style.setProperty(camelToKebapCase(key), value));
    document.documentElement.scrollTop = this.initialDocumentScrollTop;
  }
  hasScrollbar() {
    return window.document.body.offsetHeight > window.innerHeight;
  }
  async waitForElement(parent, selector) {
    if (!isString(selector)) {
      return parent;
    }
    const el = getHTMLElement(parent.querySelector(selector));
    if (el !== null) {
      return el;
    }
    return new Promise((resolve) => {
      const observer = new MutationObserver(() => {
        const newEl = getHTMLElement(parent.querySelector(selector));
        if (newEl !== null) {
          resolve(newEl);
          observer.disconnect();
        }
      });
      observer.observe(parent, { childList: true, subtree: true });
    });
  }
}
function getErrorType$1(error) {
  switch (error.code) {
    case error.PERMISSION_DENIED: {
      return NaviErrorTypes.GEOLOCATION_DENIED;
    }
    case error.POSITION_UNAVAILABLE:
    case error.TIMEOUT: {
      return NaviErrorTypes.RETRY;
    }
    default: {
      return NaviErrorTypes.GENERAL;
    }
  }
}
var windowService = new WindowService();

const dealerSearchResultsStore = createStore({
  searchTerm: '',
  results: null,
  savedDealerCookie: readDealerCookie(),
  ppnDealers: {},
  dealersOfRegion: { regions: [] }
});
dealerSearchResultsStore.onChange('savedDealerCookie', (newValue) => {
  windowService.setCookie(SAVED_DEALER_COOKIE, JSON.stringify(newValue));
});
function readDealerCookie() {
  try {
    return JSON.parse(windowService.getCookie(SAVED_DEALER_COOKIE));
  }
  catch (err) {
    return null;
  }
}

const autocompleteSearchFieldCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-autocomplete-search-field{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-autocomplete-search-field{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-autocomplete-search-field{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-autocomplete-search-field{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-autocomplete-search-field{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-autocomplete-search-field{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-autocomplete-search-field-h{display:block}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field{display:block;position:relative;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field{width:100%}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-ms-clear{display:none;width:0;height:0}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-ms-reveal{display:none;width:0;height:0}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-decoration,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-cancel-button,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-results-button,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-results-decoration{display:none}.sc-phn-autocomplete-search-field-h .form-container.inline-search-form.sc-phn-autocomplete-search-field{margin-right:1rem}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;z-index:10;width:100%;background-color:white;border:1px solid #d8d8db}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field{margin-block:0;margin-inline:0;padding-inline:0;list-style-type:none}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.sc-phn-autocomplete-search-field{padding-left:0.75rem;padding:0.5rem 0 0.5rem 0.75rem;color:#010205}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.sc-phn-autocomplete-search-field:hover{color:#2762ec;background-color:#eeeff2}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.highlighted-prediction.sc-phn-autocomplete-search-field{color:#2762ec}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field .powered-by-google.sc-phn-autocomplete-search-field{margin:0.75rem 0 0.75rem 0.75rem}";

class AutocompleteSearchField {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.searchInput = createEvent(this, "searchInput", 7);
    this.clearSearch = createEvent(this, "clearSearch", 7);
    this.submitSearch = createEvent(this, "submitSearch", 7);
    this.predictionsToggle = createEvent(this, "predictionsToggle", 7);
    this.autoCompleteLoaded = createEvent(this, "autoCompleteLoaded", 7);
    this.placeholder = undefined;
    this.predictions = undefined;
    this.initialValue = '';
    this.errorState = '';
    this.errorMessage = '';
    this.showPredictions = false;
    this.highlightedPredictionIndex = -1;
    this.searchterm = this.initialValue;
  }
  clickListener(e) {
    this.showPredictions =
      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;
  }
  keydownListener(e) {
    if (e.key === 'Escape' && this.showPredictions) {
      e.preventDefault();
      e.stopPropagation();
      this.showPredictions = false;
    }
  }
  watchShowPredictions(newValue) {
    this.predictionsToggle.emit(newValue);
  }
  watchInitialValue() {
    this.searchterm = this.initialValue;
  }
  componentDidRender() {
    this.autoCompleteLoaded.emit(true);
  }
  onKeyDown(pressedKey) {
    if (this.predictions.length === 0)
      return;
    switch (pressedKey) {
      case 'ArrowDown':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex === this.predictions.length - 1) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        this.highlightedPredictionIndex++;
        break;
      case 'ArrowUp':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex < 0) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        else if (this.highlightedPredictionIndex === 0) {
          this.highlightedPredictionIndex = this.predictions.length - 1;
          break;
        }
        this.highlightedPredictionIndex--;
        break;
    }
    if (this.highlightedPredictionIndex > -1) {
      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;
    }
  }
  onSubmit() {
    const prediction = this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];
    this.submitSearch.emit(prediction !== null && prediction !== void 0 ? prediction : null);
    this.showPredictions = false;
    if (prediction !== undefined)
      this.searchterm = prediction.text;
  }
  render() {
    return (hAsync("form", { class: "form-container", onSubmit: (event) => {
        event.preventDefault();
        this.onSubmit();
      } }, hAsync("phn-p-text-field-wrapper", { "data-test-id": "dealer-search-form-input", state: isString(this.errorMessage) ? 'error' : 'none', message: this.errorMessage }, hAsync("input", { class: "autofocus", "aria-label": "Find a dealer by typing a city name or zip code", type: "search", placeholder: this.placeholder, autocomplete: "off", role: "combobox", "data-validate": "required", "aria-expanded": (this.predictions.length > 0 && this.showPredictions).toString(), "aria-controls": "predictions", "aria-autocomplete": "list", "aria-activedescendant": this.showPredictions ? String(this.highlightedPredictionIndex) : undefined, value: this.searchterm, onInput: (event) => {
        var _a;
        event.preventDefault();
        this.showPredictions = true;
        this.highlightedPredictionIndex = -1;
        const value = (_a = getHTMLInputElement(event.target)) === null || _a === void 0 ? void 0 : _a.value;
        if (!isString(value)) {
          this.searchterm = '';
          this.showPredictions = false;
          dealerSearchResultsStore.state.savedDealerCookie = null;
          this.clearSearch.emit();
          return;
        }
        this.searchInput.emit(value);
      }, onKeyDown: (event) => {
        this.onKeyDown(event.key);
      } })), this.predictions.length > 0 && this.showPredictions ? (hAsync("div", { class: "prediction-container" }, hAsync("ul", { id: "predictions", "data-test-id": "dealer-search-autocomplete-predictions", role: "listbox", "aria-label": "List of location predictions" }, this.predictions.map((prediction, index) => (hAsync("li", { key: prediction.id, class: index === this.highlightedPredictionIndex ? 'highlighted-prediction' : '', role: "option", "aria-selected": String(index === this.highlightedPredictionIndex), id: String(index), onClick: () => {
        this.highlightedPredictionIndex = index;
        this.onSubmit();
      }, onKeyDown: (event) => {
        // TODO: does this code ever get executed?
        if (event.key === 'Enter') {
          this.onSubmit();
        }
      } }, hAsync("phn-p-text", { color: "inherit" }, prediction.text))))), hAsync("img", { class: "powered-by-google", src: getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`), alt: "powered by Google" }))) : null));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "showPredictions": ["watchShowPredictions"],
    "initialValue": ["watchInitialValue"]
  }; }
  static get style() { return autocompleteSearchFieldCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-autocomplete-search-field",
    "$members$": {
      "placeholder": [1],
      "predictions": [16],
      "initialValue": [1, "initial-value"],
      "errorState": [1, "error-state"],
      "errorMessage": [1, "error-message"],
      "showPredictions": [32],
      "highlightedPredictionIndex": [32],
      "searchterm": [32]
    },
    "$listeners$": [[9, "click", "clickListener"], [0, "keydown", "keydownListener"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

var M = Object.defineProperty;
var W = (r, t, e) => t in r ? M(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e;
var o = (r, t, e) => (W(r, typeof t != "symbol" ? t + "" : t, e), e);
const y = {
  BEFORE_MERGE: "BEFORE_MERGE",
  AFTER_MERGE: "AFTER_MERGE"
}, w = {
  clean: {
    enabled: !1,
    executionPlace: y.AFTER_MERGE,
    values: ["", void 0, null]
  },
  logging: {
    enabled: !0,
    level: "warn"
  },
  validation: {
    enabled: !1,
    allowUnknown: !1,
    verbose: !0
  },
  webProperties: {
    enabled: !0,
    eventNamePattern: /.*/,
    reactiveUrl: !0,
    reactiveDimensions: !0
  }
};
class U {
  /**
   * Creates a PCOM (default) data layer schema specific object, that contains the given event name.
   *
   * @param data - Contains the event name in a standardized {@link IFactoryData} like way.
   *
   * @returns The event name in the PCOM (default) data layer schema specific object.
   *
   * @example
   * myEventNameFactory.create({ event: 'MY_EVENT_NAME' });
   * // returns:
   * // {
   * //   context: {
   * //     eventAction: 'MY_EVENT_NAME'
   * //   }
   * // }
   */
  create(t) {
    return typeof t.event != "string" || t.event.length === 0 ? {} : {
      context: {
        eventAction: t.event
      }
    };
  }
}
const S = (r, t) => {
  let e;
  for (e in r)
    if (!(!r || !r[e]) && t(r[e], e) === !1)
      return !1;
  return !0;
}, _ = (r, t) => S(r, (e, s) => {
  for (const i in r[s])
    if (t(e[i], i, e, s) === !1)
      return !1;
  return !0;
}), m = (r) => {
  for (const t in r)
    return !1;
  return !0;
}, P = (r, t = ((e) => (e = w.clean) == null ? void 0 : e.values)() || []) => (_(
  r,
  (s, i, n, l) => {
    t.includes(s) && (delete n[i], m(n) && delete r[l]);
  }
), r), G = (r, t) => r && (_(
  r,
  (e, s, i, n) => {
    t.includes(`${n.toString()}.${s.toString()}`) && (delete i[s], m(i) && delete r[n]);
  }
), r), k = (r) => (_(
  r,
  (t, e, s) => (typeof t != "function" || (s[e] = t()), !0)
), r);
const B = (r, t) => {
  const e = t.split(".");
  if (e.length !== 2)
    return;
  const s = r[e[0]];
  if (s)
    return s[e[1]];
}, C = (r) => {
  if (!r)
    return [];
  const t = [];
  return _(
    r,
    (e, s, i, n) => {
      t.push(`${n.toString()}.${s.toString()}`);
    }
  ), t;
}, j = w.logging;
var x = /* @__PURE__ */ ((r) => (r[r.error = 0] = "error", r[r.warn = 1] = "warn", r[r.log = 2] = "log", r))(x || {});
const v = class v {
  /**
   * Creates an instance of the {@link Logger} class.
   *
   * @param prefix A prefix that is used in all logs
   *   (`[PREFIX] MESSAGE`, i.e. `[GlobalDataLayer] This is a serious message`).
   * @param options Options to be merged as settings with the {@link DEFAULT_SETTINGS.logging}.
   */
  constructor(t, e) {
    /**
     * The prefix that is used in all logs.
     * @private
     */
    o(this, "prefix");
    /**
     * The merged settings. Also see the options of the {@link constructor} and the {@link DEFAULT_SETTINGS.logging}.
     *
     * @see {@link TLoggerSettings}
     *
     * @private
     */
    o(this, "settings");
    this.prefix = t, this.settings = {
      ...j,
      ...e
    };
  }
  /**
   * Helper function to merge the options of a log method call with the current {@link settings}.
   *
   * @param options  Options to be merged with the available {@link settings}
   *
   * @returns The merged temporary settings.
   *
   * @private
   */
  _getMergedSettings(t) {
    return t ? {
      ...this.settings,
      ...t
    } : this.settings;
  }
  /**
   * Check, if this log message is allowed.
   *
   * @see {@link TLoggerSettings.enabled} and {@link TLoggerSettings.level} and {@link isAvailable}
   *
   * @param type Type of the current log message.
   * @param settings The current (temporary) settings.
   *
   * @returns `true`if the log message is allowed.
   *
   * @private
   */
  _isAllowed(t, e) {
    if (!v.isAvailable || !e.enabled)
      return !1;
    const s = x[e.level];
    switch (t) {
      case "error":
      case "warn":
        return s >= x[t];
      case "info":
      case "log":
      case "debug":
      case "dir":
        return s >= 2;
      default:
        return !1;
    }
  }
  /**
   * A helper method to execute the log messages of all different types.
   *
   * @param msg The message text.
   * @param type The type of the message.
   * @param options Temporary options, that will be merged with the current {@link settings}.
   *
   * @private
   */
  _log(t, e = "log", s) {
    const i = this._getMergedSettings(s);
    if (this._isAllowed(e, i))
      switch (e) {
        case "dir":
          console.log(`[${this.prefix}] ${e}:`), console[e](t);
          break;
        default:
          console[e](`[${this.prefix}] ${t}`);
      }
  }
  /**
   * Write a normal log message.
   *
   * @param msg The message text.
   * @param options Temporary options, that will be merged with the current {@link settings}.
   */
  log(t, e) {
    this._log(t, "log", e);
  }
  /**
   * Write a log message of type `dir`.
   *
   * This message will be split in two messages, the prefix with " dir:" and the
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/console/dir dir} output as interactive list.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/dir console.dir()}
   *
   * @param msg The message text.
   * @param options Temporary options, that will be merged with the current {@link settings}.
   */
  dir(t, e) {
    this._log(t, "dir", e);
  }
  /**
   * Write a log message of type `debug`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/debug console.debug()}
   *
   * @param msg The message text.
   * @param options Temporary options, that will be merged with the current {@link settings}.
   */
  debug(t, e) {
    this._log(t, "debug", e);
  }
  /**
   * Write a log message of type `error`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/error console.error()}
   *
   * @param msg The message text.
   * @param options Temporary options, that will be merged with the current {@link settings}.
   */
  error(t, e) {
    this._log(t, "error", e);
  }
  /**
   * Write a log message of type `info`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/info console.info()}
   *
   * @param msg The message text.
   * @param options Temporary options, that will be merged with the current {@link settings}.
   */
  info(t, e) {
    this._log(t, "info", e);
  }
  /**
   * Write a log message of type `warn`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/warn console.warn()}
   *
   * @param msg The message text.
   * @param options Temporary options, that will be merged with the current {@link settings}.
   */
  warn(t, e) {
    this._log(t, "warn", e);
  }
};
/**
 * Check if there is a console available that makes logging possible.
 */
o(v, "isAvailable", (() => typeof console < "u")());
let b = v;
const u = (...r) => {
  const t = {};
  return r.forEach((e) => {
    if (m(e))
      return;
    const s = {
      ...t,
      ...e
    };
    let i;
    for (i in s)
      typeof s[i] == "object" && !Array.isArray(s[i]) ? t[i] = {
        ...t[i],
        ...e[i]
      } : t[i] = s[i];
  }), t;
};
class q {
  /**
   * Creates a PCOM (default) data layer schema specific object, that contains the given web properties.
   *
   * @param data - Contains the web properties in a standardized {@link IFactoryData} like way.
   *
   * @returns The given web properties in the PCOM (default) data layer schema specific object.
   *
   * @example
   * myWebPropertiesFactory.create({ userAgent: 'MY_USE_AGENT' });
   * // returns:
   * // {
   * //   visitor: {
   * //     userAgent: 'MY_USE_AGENT'
   * //   }
   * // }
   */
  create(t) {
    return P(
      {
        context: {
          timestamp: t.timestamp,
          server: t.hostname
        },
        pageExperience: {
          pageId: t.url
        },
        visitor: {
          deviceBrowserBreakpoint: t.breakpoint,
          deviceBrowserHeight: t.height,
          deviceBrowserOrientation: t.orientation,
          deviceBrowserWidth: t.width,
          deviceType: t.deviceType,
          useragent: t.userAgent
        }
      },
      [void 0]
    );
  }
}
const K = w.webProperties, V = () => window.location.href.replace(/[?#].*/, ""), Y = () => (/* @__PURE__ */ new Date()).toISOString(), Q = () => window.location.hostname, R = () => window.innerHeight.toString(), D = () => window.innerHeight > window.innerWidth ? "p" : "l", T = () => window.innerWidth.toString(), X = () => window.matchMedia("(hover: none), (pointer: coarse)").matches ? "mobile" : "desktop", z = () => window.navigator.userAgent, J = (r) => {
  if (!r.breakpoints || r.breakpoints.length < 1)
    return;
  const { breakpoints: t } = r, e = () => {
    const s = window.innerWidth;
    let i = 0, n = 0;
    for (; n < t.length && s >= t[n]; )
      i = t[n], n++;
    return i.toString();
  };
  return r.reactiveDimensions ? e : e();
}, Z = (r, t) => {
  const e = {
    ...K,
    ...r
  }, i = {
    breakpoint: J(e),
    timestamp: Y(),
    hostname: Q(),
    url: e.reactiveUrl ? V : V(),
    height: e.reactiveDimensions ? R : R(),
    orientation: e.reactiveDimensions ? D : D(),
    width: e.reactiveDimensions ? T : T(),
    deviceType: X(),
    userAgent: z()
  };
  return t ? t.create(i) : i;
}, ee = (r, t) => {
  switch (t) {
    case "string":
    case "number":
    case "boolean":
      return typeof r === t;
    case "any[]":
      return Array.isArray(r) && r.length > 0;
    case "Record<string, any>":
      return typeof r == "object" && !Array.isArray(r) && Object.keys(r).length > 0;
    case "any":
      return !0;
    default:
      if ((typeof r == "boolean" || typeof r == "number" || typeof r == "string") && t.indexOf("|") > 0)
        return t.split("|").map((s) => {
          const i = s.trim();
          return /^'.*'$/.test(i) ? i.replace(/(^ ?'?|'? ?$)/g, "") : /^(true|false)$/.test(i) ? i === "true" : /^-?(\d*\.)?\d+$/.test(i) ? Number.parseFloat(i) : i.replace(/(^ ?'?|'? ?$)/g, "");
        }).includes(r);
  }
  return !0;
}, te = (r, t, e) => {
  const s = {
    level: null,
    issues: []
  };
  if (!e.enabled || !e.eventMatrix)
    return s;
  const { events: i, ...n } = e.eventMatrix, l = i.indexOf(r);
  if (l === -1)
    return s.level = "error", s.issues.push({
      level: "error",
      type: "EVENT_NOT_FOUND",
      name: r,
      message: `'${r}': Event does not exist.`
    }), s;
  const a = C(t), d = Object.keys(n), c = a.filter(
    (g) => !d.includes(g)
  );
  c.length > 0 && (e.allowUnknown || G(t, c), c.forEach((g) => {
    s.level = s.level ?? "warn", s.issues.push({
      level: "warn",
      type: "PROPERTY_DOES_NOT_EXIST",
      name: g,
      message: `'${g}': Property does not exist in the given Event Matrix.${e.allowUnknown ? "" : " It was omitted from the DataLayer payload."}`
    });
  }));
  let h;
  for (h in n) {
    const g = n[h], f = typeof g.e[l] < "u", p = g.r === 1, E = t ? B(t, h) : void 0, N = typeof E < "u";
    if (f && // Does the event want this property?
    p && // Is the property mandatory in general?
    !N && (s.level = "error", s.issues.push({
      level: "error",
      type: "REQUIRED_PROPERTY_MISSING",
      name: h,
      message: `'${h}': The required property is missing.`
    }), !e.verbose) || N && !ee(E, g.t) && (s.level = "error", s.issues.push({
      level: "error",
      type: "WRONG_PROPERTY_TYPE",
      name: h,
      message: `'${h}': Wrong type detected. Expected '${g.t}', got '${typeof E}'.`
    }), !e.verbose))
      return s;
  }
  return s;
};
class ie {
  /**
   * Create an instance of the GlobalDataLayer library. This constructor has to be overwritten to initialize the needed
   * factories ({@link _eventNamePayloadFactory} and {@link _webPayloadFactory}).
   *
   * @param options All options are merged with the {@link DEFAULT_SETTINGS} of type {@link TSettings}.
   * @param [dataStore] The array where all the pushes are added to. The default tries to get or generate the
   *   `window.pagData` array. If this is not possible, it creates an empty array, that is exposed via
   *   {@link DataLayerStore}.
   * @param [className] The class name of the library is here, because code can be uglified and/or minified later.
   *
   * @protected
   */
  constructor(t, e, s = "GlobalDataLayer") {
    /**
     * The class name of the library. This is needed, because code can be uglified and/or minified later.
     * @protected
     */
    o(this, "_className");
    /**
     * The merged settings. Also see the options of the {@link constructor} and the {@link DEFAULT_SETTINGS}.
     * @protected
     */
    o(this, "_settings");
    /**
     * An internal store where all default properties are added to.
     * @protected
     */
    o(this, "_defaultProperties");
    /**
     * An internal logger, which has to be used for all console logs.
     * @protected
     */
    o(this, "_logger");
    /**
     * A flag that indicates if the _Web Properties_ feature was already handled.
     *
     * @see {@link getWebProperties}
     *
     * @protected
     */
    o(this, "_webPropertiesHandled", !1);
    /**
     * the _DataLayer_ store array, that is used to push all the data.
     *
     * This can be transferred to the library with the second parameter `dataStore` of the {@link constructor}.
     *
     * @protected
     */
    o(this, "_dataLayerStore");
    /**
     * An internal store where all registered extensions are added to.
     * @protected
     */
    o(this, "_extensions", /* @__PURE__ */ new Map());
    const i = u(
      w,
      t || {}
    );
    this._className = s, this._logger = new b(this._className, i.logging), this._settings = i, e ? this._dataLayerStore = e : typeof window < "u" ? (this._dataLayerStore = window.pagData = window.pagData || [], this._logger.info("`dataLayerStore` was set to default `window.pagData`")) : (this._dataLayerStore = [], this._logger.info("`dataLayerStore` was set to default `[]`")), this._defaultProperties = [];
  }
  /**
   * An internal function to set everything up after initialization is done. This has to be called at the end of the
   * overwritten constructors.
   * @protected
   */
  setup() {
    this._handleDefaultWebProperties();
  }
  /**
   * The current settings object.
   * @readonly
   */
  get Settings() {
    return this._settings;
  }
  /**
   * Get the _DataLayer_ store, that is used to push all the data.
   * @readonly
   */
  get DataLayerStore() {
    return this._dataLayerStore;
  }
  /**
   * Get a registered {@link DataLayerExtension} class instance based of the input type.
   *
   * @param TConstructor The class to search for.
   *
   * @returns The registered instance of the extension class, `undefined` if not found.
   */
  getRegisteredExtension(t) {
    const e = new t();
    return this.getRegisteredExtensionByClassName(e.className);
  }
  /**
   * Get a registered {@link DataLayerExtension} class instance based of a classname.
   *
   * @param className The name of class instance to compare.
   *
   * @returns The registered instance of the extension class, undefined if not found.
   */
  getRegisteredExtensionByClassName(t) {
    return this._extensions.has(t) ? this._extensions.get(t) : void 0;
  }
  /**
   * Get all registered {@link DataLayerExtension}.
   *
   * @returns All registered DataLayerExtensions as array.
   */
  getRegisteredExtensions() {
    const t = [];
    for (const e of this._extensions.values())
      t.push(e);
    return t;
  }
  /**
   * Register a new {@link DataLayerExtension} class for this instance.
   *
   * @param extension The extension class instance to register.
   * @param override If there is an existing instance already registered, we override it, otherwise we do nothing.
   */
  registerExtension(t, e = !1) {
    if (!e && this._extensions.has(t.className)) {
      this._logger.warn(`Tried to register extension class <${t.className}> which already exists.`);
      return;
    }
    t.dataLayerInstance = this, this._extensions.set(t.className, t), e ? this._logger.info(`Overriden registration for extension class <${t.className}>.`) : this._logger.info(`Registered extension class <${t.className}>.`);
  }
  /**
   * Remove a registered {@link DataLayerExtension} instance.
   *
   * @param TConstructor The class to search for.
   */
  removeExtension(t) {
    const e = new t();
    if (this._extensions.has(e.className)) {
      this._extensions.delete(e.className);
      return;
    }
    this._logger.warn(`Tried to remove not existing extension class <${e.className}>.`);
  }
  /**
   * Remove a registered {@link DataLayerExtension} instance by class name.
   *
   * @param className the name of the class
   */
  removeExtensionByClassName(t) {
    if (this._extensions.has(t)) {
      this._extensions.delete(t);
      return;
    }
    this._logger.warn(`Tried to remove not existing extension class <${t}>.`);
  }
  /**
   * Push a GlobalDataLayer Event with payload to the given data layer store. The method can fail and return `false`
   *   because ...
   *
   *   - the given `eventName` was invalid
   *   - the validation failed
   *
   * A settings object can be added as the third parameter to every call. This will then temporary override the provided
   * settings for the time of the push action.
   *
   * @param eventName The name of the event that should be pushed.
   * @param [payload] The _DataLayer_ properties to be merged and added to the data layer.
   * @param [options] Temporary override the settings.
   *
   * @returns A boolean to indicate, if the push was successful.
   */
  push(t, e = [{}], s) {
    var d, c;
    if (t.length === 0)
      return !1;
    const i = s && !m(s) ? u(this._settings, s) : this._settings;
    Array.isArray(e) || (e = [e]), e.forEach(k);
    const n = this._eventNamePayloadFactory.create({ event: t }), l = k(this.getDefaultProperties(t));
    i.clean.enabled && i.clean.executionPlace === y.BEFORE_MERGE && [l || {}, ...e].forEach(
      (h) => P(h, i.clean.values)
    );
    const a = u(
      n,
      l || {},
      ...e
    );
    if (i.clean.enabled && i.clean.executionPlace === y.AFTER_MERGE && P(a, i.clean.values), (d = i == null ? void 0 : i.validation) != null && d.enabled && ((c = i == null ? void 0 : i.validation) != null && c.eventMatrix)) {
      const h = te(t, a, i.validation), g = h.issues.sort((f, p) => f.level !== p.level && p.level === "warn" ? -1 : 0).map((f) => `- [${f.level}]: ${f.message}`).join(`
`);
      switch (h.level) {
        case "error":
          return this._logger.error(
            `Validation failed for event '${t}' with errors/warnings: 
${g}`,
            i.logging
          ), !1;
        case "warn":
          this._logger.warn(
            `Validation success for event '${t}' with warnings: 
${g}`,
            i.logging
          );
          break;
        default:
          this._logger.info(`Validation success for event '${t}'.`, i.logging);
          break;
      }
    }
    return this._dataLayerStore.push(a), !0;
  }
  /**
   * Return the default properties for the given identifier.
   *
   * @param identifier The identifier to get the default properties for.
   *
   * @returns The found default properties for the identifier, otherwise `undefined`.
   */
  getDefaultProperties(t) {
    const e = {
      byName: [],
      byArray: [],
      byRegex: []
    };
    this._defaultProperties.forEach((i) => {
      if (i.identifier === t)
        return e.byName.push(i.data);
      if (Array.isArray(i.identifier) && i.identifier.includes(t))
        return e.byArray.push(i.data);
      if (i.identifier instanceof RegExp && i.identifier.test(t))
        return e.byRegex.push(i.data);
    });
    const s = [...e.byRegex, ...e.byArray, ...e.byName];
    if (s.length)
      return u(...s);
  }
  /**
   * Set default properties, which will later be merged with the payload of a {@link push}, when the provided identifier
   * matches the `eventName`.
   *
   * @param identifier The identifier to use the default properties for.
   * @param data The default properties which will be used with the provided identifier to merge those properties with the payload.
   */
  setDefaultProperties(t, e) {
    const s = this._defaultProperties.find((i) => i.identifier === t);
    if (s) {
      s.data = u(s.data, e);
      return;
    }
    this._defaultProperties.push({
      identifier: t,
      data: e
    });
  }
  /**
   * Checks if the web properties feature ({@link getWebProperties}) is already handled or does the setup with the
   * current settings.
   *
   * @private
   */
  _handleDefaultWebProperties() {
    if (this._webPropertiesHandled || !this._settings.webProperties.enabled)
      return;
    const t = Z(
      this._settings.webProperties,
      this._webPayloadFactory
    );
    this.setDefaultProperties(this._settings.webProperties.eventNamePattern, t), this._webPropertiesHandled = !0;
  }
}
class oe extends ie {
  /**
   * Create an instance of the GlobalDataLayer library.
   *
   * @param options All options are merged with the {@link DEFAULT_SETTINGS} of type {@link TSettings}.
   * @param [dataStore] The array where all the pushes are added to. The default tries to get or generate the
   *   `window.pagData` array. If this is not possible, it creates an empty array, that is exposed via
   *   {@link DataLayerStore}.
   * @param [className] The class name of the library is here, because code can be uglified and/or minified later.
   *
   * @protected
   */
  constructor(e, s, i = "GlobalDataLayer") {
    super(e, s, i);
    o(this, "_eventNamePayloadFactory");
    o(this, "_webPayloadFactory");
    this._eventNamePayloadFactory = new U(), this._webPayloadFactory = new q(), this.setup();
  }
  setup() {
    super.setup();
  }
}

const RegionLocales = {
  ASIA_PACIFIC: 'asia-pacific',
  EASTERN_EUROPE: 'eastern-europe',
  MIDDLE_EAST: 'middle-east',
  LATIN_AMERICA: 'latin-america',
  INTERNATIONAL: 'international' // https://www.porsche.com/international/ -> has myporsche
};
const RegionLocaleMap = {
  AP: RegionLocales.ASIA_PACIFIC,
  CE: RegionLocales.EASTERN_EUROPE,
  LL: RegionLocales.LATIN_AMERICA,
  WW: RegionLocales.INTERNATIONAL
};
function isCountryInOneOfRegions(country) {
  return Object.values(RegionLocales).includes(country);
}
function splitLocale(localeStr) {
  if (!isString(localeStr)) {
    throw new NaviError('empty locale passed', NaviErrorTypes.NO_INPUT);
  }
  const language = localeStr.substring(0, localeStr.indexOf('-')).toLowerCase();
  let country = localeStr.substring(localeStr.indexOf('-') + 1).toLowerCase();
  if (!isCountryInOneOfRegions(country)) {
    country = country.toUpperCase();
  }
  if (!isString(language) || !isString(country)) {
    throw new NaviError(`invalid locale ${localeStr} passed`, NaviErrorTypes.INVALID_INPUT);
  }
  return {
    language,
    country: hasKey(RegionLocaleMap, country) ? RegionLocaleMap[country] : country
  };
}

function getEnvironmentAbbreviation(env) {
  switch (env) {
    case Environments.PRODUCTION:
      return 'P';
    case Environments.PREVIEW:
      return 'PP';
    default:
      return 'K';
  }
}
class GlobalDataLayerService {
  constructor() {
    this.homeNavEventId = /^PAGHomeNav_/;
    this.initialise();
  }
  initialise() {
    this.gdl = new oe();
  }
  pushDataLayerEvent(eventAction, eventData) {
    if (eventData) {
      this.gdl.push(eventAction, eventData);
    }
    else {
      this.gdl.push(eventAction);
    }
  }
  setEnvironment(env) {
    this.gdl.setDefaultProperties(this.homeNavEventId, {
      context: { environment: getEnvironmentAbbreviation(env) }
    });
  }
  setPageName(pageName) {
    this.gdl.setDefaultProperties(this.homeNavEventId, {
      pageExperience: {
        pageName: pageName
      }
    });
  }
  setUser(userId, loginStatus) {
    this.gdl.setDefaultProperties(this.homeNavEventId, {
      ids: { userId },
      visitor: { loginStatus }
    });
  }
  setLocale(locale) {
    try {
      const { country, language } = splitLocale(locale);
      this.gdl.setDefaultProperties(this.homeNavEventId, {
        context: { country: country, language: language }
      });
    }
    catch (err) {
      // throw the error away
    }
  }
  setDefaultProperties(locale, pageName) {
    let defaultGDLProperties = {
      context: { applicationId: DATA_LAYER_APP_ID },
      visitor: { loginStatus: false }
    };
    try {
      const { country, language } = splitLocale(locale);
      defaultGDLProperties = Object.assign(Object.assign({}, defaultGDLProperties), { context: Object.assign(Object.assign({}, defaultGDLProperties.context), { country, language, applicationName: DATA_LAYER_APPLICATION_NAME }) });
    }
    catch (err) {
      // throw the error away
    }
    if (isString(pageName)) {
      defaultGDLProperties = Object.assign(Object.assign({}, defaultGDLProperties), { pageExperience: { pageName: pageName } });
    }
    this.gdl.setDefaultProperties(this.homeNavEventId, defaultGDLProperties);
  }
}
var globalDataLayerService = new GlobalDataLayerService();

const RoutingKeys = {
  MAIN_MENU: 'mainmenu',
  DEALER_SEARCH: 'find_a_dealer',
  MORE: 'more',
  SHOP: 'shop',
  SERIES: 'series',
  MY_PORSCHE: 'my_porsche',
  VEHICLE_PURCHASE: 'vehicle_purchase',
  EXPERIENCE: 'experience',
  SERVICES: 'services',
  MODELS: 'models'
};
var RoutingKeyPointers;
(function (RoutingKeyPointers) {
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_ZERO"] = -1] = "LEVEL_ZERO";
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_ONE"] = 0] = "LEVEL_ONE";
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_TWO"] = 1] = "LEVEL_TWO";
})(RoutingKeyPointers || (RoutingKeyPointers = {}));
function constructRoutingKey(...args) {
  return args
    .reduce((segments, arg) => [...segments, ...getString(arg).split('/')], [])
    .filter(Boolean)
    .join('/');
}
function findTopLevelRoutingKey(activeRoutingKey) {
  if (isString(activeRoutingKey)) {
    return Object.values(RoutingKeys).find((routingKey) => activeRoutingKey.startsWith(routingKey));
  }
}
function getModelsRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.MODELS, ...args);
}
function getDealerDetailsRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.DEALER_SEARCH, ...args);
}
function getMyPorscheRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.MY_PORSCHE, ...args);
}
function getVehiclePurchaseRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.VEHICLE_PURCHASE, ...args);
}
function getLastRoutingSegment(routingKey) {
  return routingKey.split('/').slice(-1)[0];
}
function removeLastRoutingSegment(routingKey) {
  return routingKey.split('/').slice(0, -1).join('/');
}
function determineMainDrawerLevel(activeRoutingKey) {
  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case RoutingKeys.MAIN_MENU: {
      return 1;
    }
    case activeRoutingKey: {
      return 2;
    }
    default: {
      return activeRoutingKey.split('/').length + 1;
    }
  }
}
function getPreviousRoutingKey(routingKey) {
  const previousRoutingKey = removeLastRoutingSegment(routingKey);
  if (!isString(previousRoutingKey)) {
    return RoutingKeys.MAIN_MENU;
  }
  return previousRoutingKey;
}

const routerStore = createStore({
  routingKeyHistory: [],
  routingKeyPointer: -1,
  initialRoutingKeyHistory: null,
  initialRoutingKeyPointer: null
});

const EMPTY_LINK = { id: '', text: '', link: '', icon: '', description: '' };
const EMPTY_BUTTON = { id: '', text: '', description: '' };
const EMPTY_COUNTRY_RECOMMENDER = {
  statement: '',
  region: '',
  language: '',
  change: EMPTY_BUTTON
};
const EMPTY_MODELS = {
  text: '',
  id: '',
  all: {
    id: '',
    text: '',
    link: '',
    icon: '',
    description: ''
  },
  series: []
};
const EMPTY_MENU = {
  id: '',
  text: '',
  link: '',
  children: []
};
const EMPTY_SHOP_MENU = {
  cart: '',
  additionalContent: [],
  id: '',
  text: '',
  link: '',
  children: [],
  availableLocales: [],
  availableLocalesOnlyForShop: [],
  logoLinksToShopLocales: []
};
const EMPTY_MYPORSCHE = {
  id: '',
  text: '',
  link: '',
  loggedInFallback: '',
  login: EMPTY_LINK,
  loginText: '',
  logout: EMPTY_LINK,
  messages: EMPTY_LINK,
  more: null,
  signup: EMPTY_LINK,
  signupText: '',
  links: [],
  savedSearches: null,
  savedVehicles: null
};
const EMPTY_DEALER = {
  id: '',
  text: '',
  numberOfDealers: 42,
  search: {
    id: '',
    text: '',
    form: {
      inputPlaceholder: '',
      inputDescription: ''
    },
    clear: EMPTY_BUTTON,
    or: '',
    geolocation: EMPTY_BUTTON,
    dropdown: {
      province: '',
      city: '',
      selectAProvince: '',
      selectACity: ''
    },
    load: '',
    map: EMPTY_LINK,
    outboundLink: EMPTY_LINK
  },
  details: {
    id: '',
    finder: EMPTY_LINK,
    bookService: EMPTY_LINK,
    testDrive: EMPTY_LINK,
    backToSearch: ''
  },
  openingHours: null
};
const EMPTY_ERRORS = {
  wrong: '',
  retry: '',
  noResults: '',
  noInput: '',
  invalidInput: '',
  geolocationDenied: ''
};
const EMPTY_CONTENT = {
  menu: EMPTY_BUTTON,
  crest: EMPTY_LINK,
  back: EMPTY_BUTTON,
  close: EMPTY_BUTTON,
  accessibilityStatement: EMPTY_LINK,
  countryRecommender: EMPTY_COUNTRY_RECOMMENDER,
  contextualButtons: {},
  contextualLinks: {},
  models: EMPTY_MODELS,
  dealer: EMPTY_DEALER,
  myPorsche: EMPTY_MYPORSCHE,
  vehiclePurchase: EMPTY_MENU,
  shop: EMPTY_SHOP_MENU,
  externalShop: EMPTY_LINK,
  experience: EMPTY_MENU,
  services: EMPTY_MENU,
  error: EMPTY_ERRORS,
  loadingDescription: '',
  legacyMore: EMPTY_MENU,
  legacyShop: EMPTY_MENU
};
function findMenuItemById(menu, id) {
  if (!isString(id)) {
    return null;
  }
  if (menu !== null) {
    if (menu.id === id) {
      return menu;
    }
    if (!Array.isArray(menu.children)) {
      return null;
    }
    for (const child of menu.children) {
      const foundChild = findMenuItemById(child, id);
      if (foundChild !== null) {
        return foundChild;
      }
    }
  }
  return null;
}

const navContentStore = createStore(EMPTY_CONTENT);

const local = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
const preview = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
const test = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
const production = {
	featureOverrideEnabled: {
		enabled: false
	},
	homenav_1723: {
		enabled: false
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
var featureJson = {
	local: local,
	preview: preview,
	test: test,
	production: production
};

const LOGGING_ENDPOINT = 'https://logs.nav.porsche.com';
class Logger {
  constructor() {
    this.env = null;
    this.version = VERSION;
    this.breakpoint = 0;
    this.locale = null;
  }
  init(env, breakpoint, locale) {
    this.env = env;
    this.breakpoint = breakpoint;
    this.locale = locale;
  }
  log(logName, level, id, message, errorType) {
    if (this.env === Environments.TEST) {
      return;
    }
    try {
      const log = JSON.stringify({
        name: logName,
        level: level,
        env: this.env,
        breakpoint: this.breakpoint,
        locale: this.locale,
        version: this.version,
        hostname: windowService.location.hostname,
        pathname: windowService.location.pathname,
        id,
        errorType: errorType || '',
        message
      });
      if (this.env === Environments.PRODUCTION) {
        if (level !== "debug" /* LogLevel.DEBUG */) {
          fetch(LOGGING_ENDPOINT, {
            method: 'POST',
            body: log,
            mode: 'no-cors'
          });
        }
      }
      else {
        // eslint-disable-next-line no-console
        console[level](log);
      }
    }
    catch (err) {
      // throw the error away
    }
  }
  info(id, message = '') {
    this.log('PHN_HEADER_LOG_ENTRY', "info" /* LogLevel.INFO */, id, message);
  }
  error(id, err) {
    const errorType = err instanceof NaviError ? err.type : NaviErrorTypes.GENERAL;
    this.log('PHN_HEADER_LOG_ENTRY', "error" /* LogLevel.ERROR */, id, err.message, errorType);
  }
}
var logger = new Logger();

class FeatureToggles {
  constructor(env = getEnvironment(DEFAULT_ENVIRONMENT), featureEnvMap = featureJson) {
    this.featureEnvMap = featureEnvMap;
    this.features = {};
    this.env = 'local';
    this.isShopToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP, windowService.location.search);
    this.isPcomSearchToggleActive = () => this.isFeatureEnabled(FEATURE_PCOM_SEARCH, windowService.location.search);
    this.isSavedItemsToggleActive = () => this.isFeatureEnabled(FEATURE_SAVED_ITEMS, windowService.location.search);
    this.isABTestingToggleActive = () => this.isFeatureEnabled(FEATURE_AB_TESTING, windowService.location.search);
    this.isDealerSearchChinaEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_CHINA, windowService.location.search);
    this.isDealerSearchOpeningHoursEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_OPENING_HOURS, windowService.location.search);
    this.env = env;
    this.features = this.featureEnvMap[env];
  }
  async loadRemoteToggles() {
    try {
      const BFFEndpoint = getConfig(this.env).BFF_ENDPOINT;
      const response = await fetch(`${BFFEndpoint}/toggles?env=${this.env}`);
      if (!response.ok) {
        const text = await response.text();
        throw new Error(text);
      }
      const result = await response.json();
      this.features = result;
    }
    catch (err) {
      throw new NaviError(`Load Feature Toggles failed with error: ${err}`, NaviErrorTypes.GENERAL);
    }
  }
  stringToBooleanStrict(value) {
    if (value === 'true') {
      return true;
    }
    if (value === 'false') {
      return false;
    }
    return null;
  }
  getUrlFeatureToggleOverride(feature, searchString) {
    var _a, _b;
    const queryValue = (_b = (_a = searchString
      .split('?')[1]) === null || _a === void 0 ? void 0 : _a.split('&').find((query) => query.includes(feature))) === null || _b === void 0 ? void 0 : _b.split('=')[1];
    return isString(queryValue) ? this.stringToBooleanStrict(queryValue || '') : null;
  }
  getLocalStorageFeatureToggleOverride(feature) {
    const localStorageValue = localStorage.getItem(`phn.${feature}`);
    return isString(localStorageValue) ? this.stringToBooleanStrict(localStorageValue) : null;
  }
  isFeatureEnabled(feature, searchString) {
    var _a;
    if (this.features === undefined) {
      return false;
    }
    if (this.env === Environments.PRODUCTION && this.isOnSecurityLayer(feature)) {
      return false;
    }
    if ((_a = this.features[FEATURE_OVERRIDE_ENABLED]) === null || _a === void 0 ? void 0 : _a.enabled) {
      const featureToggleOverrides = [
        this.getUrlFeatureToggleOverride(feature, searchString),
        this.getLocalStorageFeatureToggleOverride(feature)
      ];
      for (const featureToggleOverride of featureToggleOverrides) {
        if (featureToggleOverride !== null) {
          return featureToggleOverride;
        }
      }
    }
    if (this.features[feature] !== undefined) {
      return this.features[feature].enabled;
    }
    else {
      return false;
    }
  }
  async setFeatures(env) {
    this.env = env;
    try {
      if (env === 'test') {
        this.features = this.featureEnvMap[env];
        return;
      }
      await this.loadRemoteToggles();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (error) {
      logger.error('INIT_APP_CONFIG', error);
      this.features = this.featureEnvMap[env];
    }
  }
  isOnSecurityLayer(feature) {
    const prodDisabledToggles = ['opening_hours'];
    return prodDisabledToggles.includes(feature);
  }
}
var featureToggles = new FeatureToggles();

const experimentsDefinitions = {};

class MatomoAbTestingService {
  constructor() {
    this.client = null;
    this.experiments = [];
  }
  async init() {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        await this.setClient();
        await this.loadExperiments();
      }
      catch (e) {
        logger.error('Could not initialize AbTesting', e);
      }
    }
  }
  execute(experimentName) {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        const experiment = this.getExperiment(experimentName);
        const variation = this.getVariation(experiment);
        variation.activate();
      }
      catch (e) {
        logger.error(`Could not execute experiment ${experimentName}`, e);
      }
    }
  }
  executeContentChange(menu) {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        const experiment = this.getExperiment(menu.experienceName);
        const variation = this.getVariation(experiment);
        if (variation.name === 'original') {
          return menu.children;
        }
        return variation.activate();
      }
      catch (e) {
        logger.error(`Could not execute experiment ${menu.experienceName}`, e);
      }
    }
    return menu.children;
  }
  async setClient() {
    if (this.client)
      return Promise.resolve(this.client);
    await this.injectScript();
    const w = window;
    this.client = w.Matomo;
    return this.client;
  }
  async loadExperiments() {
    const client = this.getClient();
    const ExperimentCreator = client.AbTesting.Experiment;
    const experimentsDefinitions = this.getAbTestingDefinitions();
    for (const experimentKey in experimentsDefinitions) {
      const experimentDefinition = experimentsDefinitions[experimentKey];
      const experiment = new ExperimentCreator(experimentDefinition);
      this.experiments.push(experiment);
    }
  }
  async loadContentGeneratorExperiments() {
    if (featureToggles.isABTestingToggleActive()) {
      const client = this.getClient();
      const ExperimentCreator = client.AbTesting.Experiment;
      const contentDefinitions = navContentStore.state.abExperiences;
      if (contentDefinitions) {
        for (const experimentDefinition of contentDefinitions) {
          const variationDefinition = experimentDefinition.variations.map((variation) => ({
            name: variation.name,
            activate: () => variation.children
          }));
          variationDefinition.push({
            name: 'original',
            activate: () => null
          });
          const experiment = new ExperimentCreator(Object.assign(Object.assign({}, experimentDefinition), { variations: variationDefinition }));
          this.experiments.push(experiment);
        }
      }
    }
  }
  getExperiment(name) {
    const experiment = this.experiments.find((experiment) => experiment.name === name);
    if (!experiment)
      throw new NaviError(`No experiment with name: ${name} found`, NaviErrorTypes.GENERAL);
    return experiment;
  }
  getVariation(experiment) {
    const variationName = experiment.getActivatedVariationName();
    const variation = experiment.variations.find((variation) => variation.name === variationName);
    if (!variation)
      throw new NaviError(`No variation in experiment: ${experiment.name} with name: ${variationName} found`, NaviErrorTypes.GENERAL);
    return variation;
  }
  getClient() {
    if (!this.client)
      throw new NaviError('No client is set, you must call init first', NaviErrorTypes.GENERAL);
    return this.client;
  }
  injectScript() {
    return new Promise((resolve, reject) => {
      const s = document.createElement('script');
      s.text = this.getMatomoScript();
      document.head.appendChild(s);
      const matomoScript = getHTMLElement(document.querySelector('script[src="//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js"]'));
      if (matomoScript) {
        matomoScript.onload = () => {
          resolve(true);
        };
        matomoScript.onerror = () => reject(new NaviError('Could not inject Matomo script', NaviErrorTypes.GENERAL));
      }
      else {
        reject(new NaviError('There is no HTML Script element available', NaviErrorTypes.GENERAL));
      }
    });
  }
  getAbTestingDefinitions() {
    return experimentsDefinitions;
  }
  getMatomoScript() {
    const currentEnvironment = navStateStore.state.env;
    return `var _paq = window._paq = window._paq || [];
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://porsche.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', ${currentEnvironment === 'production' ? '7' : '8'}]);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })
   ();`;
  }
}
const MatomoAbTesting = new MatomoAbTestingService();

function abTestingService() {
  return MatomoAbTesting;
}

function getLevel1Items(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, userConsentGiven) {
  var _a, _b;
  const { dealer, models, myPorsche, vehiclePurchase, shop, experience, services } = content;
  const { savedDealerCookie, ppnDealers } = dealerSearchResults;
  const { app } = navStateStore.state;
  const savedDealer = savedDealerCookie !== null ? ppnDealers[savedDealerCookie.id] : undefined;
  // outbound link needed for Singapore market
  let outboundLink;
  if (locale === 'en-SG' && dealer.search.outboundLink) {
    outboundLink = (_a = dealer.search.outboundLink) === null || _a === void 0 ? void 0 : _a.link;
  }
  const dealerRoutingKeys = [RoutingKeys.DEALER_SEARCH];
  if (savedDealer !== undefined && ((_b = dealerSearchResultsStore.state.results) === null || _b === void 0 ? void 0 : _b.length) != 1) {
    dealerRoutingKeys.push(getDealerDetailsRoutingKey(savedDealer.ppnDealer.id));
  }
  const menu = [
    {
      elementId: RoutingKeys.MODELS,
      routingKeys: [RoutingKeys.MODELS],
      analyticsId: models.id,
      text: models.text
    },
    {
      elementId: RoutingKeys.VEHICLE_PURCHASE,
      routingKeys: [RoutingKeys.VEHICLE_PURCHASE],
      analyticsId: vehiclePurchase.id,
      text: vehiclePurchase.text
    },
    {
      elementId: RoutingKeys.SERVICES,
      routingKeys: [RoutingKeys.SERVICES],
      analyticsId: services.id,
      text: services.text
    },
    {
      elementId: RoutingKeys.EXPERIENCE,
      routingKeys: [RoutingKeys.EXPERIENCE],
      analyticsId: experience.id,
      text: experience.text
    }
  ];
  const dealerSearch = {
    elementId: RoutingKeys.DEALER_SEARCH,
    routingKeys: dealerRoutingKeys,
    analyticsId: dealer.id,
    text: dealer.text,
    link: outboundLink,
    iconRight: locale === 'en-SG' && dealer.search.outboundLink ? 'external' : 'arrow-head-right'
  };
  if (shop !== null && shop.text !== '') {
    const shopItem = {
      elementId: RoutingKeys.SHOP,
      routingKeys: [RoutingKeys.SHOP],
      analyticsId: shop.id,
      text: shop.text,
      link: app !== Application.shop ? shop.link : undefined,
      datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK,
      iconRight: 'external'
    };
    menu.splice(2, 0, shopItem);
  }
  if (isDealerSearchEnabled(locale, userConsentGiven)) {
    const savedDealerName = splitLocale(locale).language === 'en'
      ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name
      : isString(savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized)
        ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized
        : savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name;
    if (isString(savedDealerName)) {
      dealerSearch.subtext = savedDealerName;
    }
  }
  else {
    dealerSearch.link = dealer.search.map.link;
    dealerSearch.onClick = undefined;
  }
  menu.push(dealerSearch);
  if (myPorsche !== null) {
    const isLoggedIn = IsLoggedIn(loggedInState);
    const username = isLoggedIn ? getUsername(loggedInState, myPorsche.loggedInFallback) : undefined;
    menu.push({
      elementId: RoutingKeys.MY_PORSCHE,
      routingKeys: [RoutingKeys.MY_PORSCHE],
      analyticsId: myPorsche.id,
      text: myPorsche.text,
      subtext: username,
      showIconModifier: isLoggedIn && unreadMessagesCount > 0
    });
  }
  return menu;
}
function getSideDrawerItems(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, activeRoutingKey, userConsentGiven) {
  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case activeRoutingKey:
      break;
    case RoutingKeys.MODELS:
      return content.models.series.map((modelsSeries) => ({
        elementId: getModelsRoutingKey(modelsSeries.id),
        routingKeys: [getModelsRoutingKey(modelsSeries.id)],
        analyticsId: modelsSeries.id,
        text: modelsSeries.name,
        subtext: modelsSeries.tags.map((tag) => tag.text).join(' | '),
        renderSignatures: true,
        datalayerEventAction: EventActions.MODEL_RANGE_CLICK
      }));
    case RoutingKeys.SHOP:
    case RoutingKeys.VEHICLE_PURCHASE:
    case RoutingKeys.SERVICES:
    case RoutingKeys.EXPERIENCE: {
      const parentRoutingKey = removeLastRoutingSegment(activeRoutingKey);
      const menuDrawerParent = getMenuContent(content, parentRoutingKey, topLevelRoutingKey);
      if (menuDrawerParent !== null) {
        return menuDrawerParent.children.map((childItem) => ({
          elementId: constructRoutingKey(parentRoutingKey, childItem.id),
          routingKeys: [constructRoutingKey(parentRoutingKey, childItem.id)],
          analyticsId: childItem.id,
          text: childItem.text,
          link: childItem.link
        }));
      }
      break;
    }
  }
  return getLevel1Items(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, userConsentGiven);
}
function getSideDrawerRoutingKey(activeRoutingKey) {
  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case activeRoutingKey: {
      break;
    }
    case RoutingKeys.DEALER_SEARCH: {
      return RoutingKeys.DEALER_SEARCH;
    }
    case RoutingKeys.MODELS: {
      return RoutingKeys.MODELS;
    }
    case RoutingKeys.SHOP:
    case RoutingKeys.VEHICLE_PURCHASE:
    case RoutingKeys.SERVICES:
    case RoutingKeys.EXPERIENCE: {
      const parentRoutingKey = removeLastRoutingSegment(activeRoutingKey);
      return getLastRoutingSegment(parentRoutingKey);
    }
  }
  return RoutingKeys.MAIN_MENU;
}
function getMenuContent(content, routingKey, topLevelRoutingKey) {
  const { vehiclePurchase, experience, shop, legacyMore, services } = content;
  const menuContent = {
    [RoutingKeys.VEHICLE_PURCHASE]: vehiclePurchase,
    [RoutingKeys.EXPERIENCE]: experience,
    [RoutingKeys.SHOP]: shop,
    [RoutingKeys.MORE]: legacyMore,
    [RoutingKeys.SERVICES]: services
  }[topLevelRoutingKey];
  if (menuContent === undefined || menuContent === null) {
    return null;
  }
  if (isString(menuContent.experienceName)) {
    menuContent.children = abTestingService().executeContentChange(menuContent);
  }
  const idOfLastRoutingSegment = getLastRoutingSegment(routingKey);
  return idOfLastRoutingSegment === topLevelRoutingKey
    ? menuContent
    : findMenuItemById(menuContent, idOfLastRoutingSegment);
}
function isDealerSearchEnabled(locale, userConsentGiven) {
  try {
    const { country } = splitLocale(locale);
    const returnDealerSearch = !isCountryInOneOfRegions(country) && userConsentGiven;
    return (featureToggles.isDealerSearchChinaEnabled() || country !== 'CN') && returnDealerSearch;
  }
  catch (_a) {
    // ignore error
  }
  return true;
}
function getBackButtonText(content, previousRoutingKey) {
  if (!isString(previousRoutingKey)) {
    return '';
  }
  const topLevelRoutingKey = findTopLevelRoutingKey(previousRoutingKey);
  switch (topLevelRoutingKey) {
    case RoutingKeys.MODELS: {
      return content.models.text;
    }
    case RoutingKeys.DEALER_SEARCH:
      if (content.dealer.numberOfDealers === 1) {
        return '';
      }
      return content.dealer.details.backToSearch;
    case RoutingKeys.SHOP:
    case RoutingKeys.VEHICLE_PURCHASE:
    case RoutingKeys.MORE:
    case RoutingKeys.EXPERIENCE: {
      const menuContent = getMenuContent(navContentStore.state, previousRoutingKey, topLevelRoutingKey);
      if (menuContent !== null) {
        return menuContent.text;
      }
      break;
    }
  }
  return '';
}
function getHeadlineText(content, routingKey, topLevelRoutingKey) {
  var _a;
  const { dealer, myPorsche, models, vehiclePurchase, experience, shop, legacyMore, services } = content;
  let menuContent;
  switch (topLevelRoutingKey) {
    case RoutingKeys.MORE:
    case RoutingKeys.SHOP:
    case RoutingKeys.EXPERIENCE:
    case RoutingKeys.SERVICES:
    case RoutingKeys.VEHICLE_PURCHASE: {
      menuContent = {
        [RoutingKeys.VEHICLE_PURCHASE]: vehiclePurchase,
        [RoutingKeys.EXPERIENCE]: experience,
        [RoutingKeys.SHOP]: shop,
        [RoutingKeys.MORE]: legacyMore,
        [RoutingKeys.SERVICES]: services
      }[topLevelRoutingKey];
      if (menuContent === undefined) {
        return '';
      }
      const idOfLastRoutingSegment = getLastRoutingSegment(routingKey);
      return idOfLastRoutingSegment === topLevelRoutingKey
        ? menuContent === null || menuContent === void 0 ? void 0 : menuContent.text
        : (_a = findMenuItemById(menuContent, idOfLastRoutingSegment)) === null || _a === void 0 ? void 0 : _a.text;
    }
    case RoutingKeys.SERIES:
    case RoutingKeys.MODELS: {
      const routingId = getLastRoutingSegment(routingKey);
      menuContent = models.series.find((modelsSeries) => routingId === modelsSeries.id);
      return menuContent === undefined ? models.text : menuContent === null || menuContent === void 0 ? void 0 : menuContent.id;
    }
    case RoutingKeys.DEALER_SEARCH: {
      return dealer.search.text;
    }
    case RoutingKeys.MY_PORSCHE: {
      return myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.text;
    }
  }
  return '';
}
function getSubtext(topLevelRoutingKey, activeRoutingKey, locale) {
  const { myPorsche, models } = navContentStore.state;
  const { loggedInState } = navStateStore.state;
  if (topLevelRoutingKey === RoutingKeys.MY_PORSCHE) {
    const isLoggedIn = IsLoggedIn(loggedInState);
    return isLoggedIn ? getUsername(loggedInState, (myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.loggedInFallback) || '') : '';
  }
  if (topLevelRoutingKey === RoutingKeys.DEALER_SEARCH) {
    const { savedDealerCookie, ppnDealers } = dealerSearchResultsStore.state;
    const savedDealer = savedDealerCookie !== null ? ppnDealers[savedDealerCookie.id] : undefined;
    const savedDealerName = locale && splitLocale(locale).language === 'en'
      ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name
      : isString(savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized)
        ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized
        : savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name;
    return savedDealerCookie ? savedDealerName : '';
  }
  if (topLevelRoutingKey === RoutingKeys.MODELS) {
    if (isString(activeRoutingKey)) {
      const routingId = getLastRoutingSegment(activeRoutingKey);
      const menuContent = models.series.find((modelsSeries) => routingId === modelsSeries.id);
      if (menuContent) {
        return menuContent.tags.map((tag) => tag.text).join(' | ');
      }
    }
  }
  return '';
}

const state = {};
function setDrawerType(drawerType) {
  state.drawerType = drawerType;
}
function calculateDisplayElementId(routingKeyForNavigatingForward) {
  const { drawerType } = state;
  const mainDrawerRoutingKey = (isString(routingKeyForNavigatingForward)
    ? getPreviousRoutingKey(routingKeyForNavigatingForward)
    : routerStore.state.routingKeyHistory[routerStore.state.routingKeyPointer]) || '';
  const lastMainDrawerRoutingKey = getLastRoutingSegment(mainDrawerRoutingKey);
  const mainDrawerLevel = determineMainDrawerLevel(mainDrawerRoutingKey);
  const sideDrawerLevel = mainDrawerLevel - 1;
  if (!isString(mainDrawerRoutingKey)) {
    return 'level0';
  }
  const mainDrawerDisplayElementId = isString(mainDrawerRoutingKey)
    ? `level${mainDrawerLevel}-${lastMainDrawerRoutingKey}`
    : `level${mainDrawerLevel - 1}-unknown`;
  if (drawerType === 'doubleDrawer') {
    if (mainDrawerRoutingKey === '') {
      return `level${sideDrawerLevel}-unknown_level${mainDrawerLevel}-unknown`;
    }
    const sideDrawerRoutingKey = getSideDrawerRoutingKey(mainDrawerRoutingKey);
    return `level${sideDrawerLevel}-${sideDrawerRoutingKey}_${mainDrawerDisplayElementId}`;
  }
  return mainDrawerDisplayElementId;
}
function calculateDisplayElementType(activeRoutingKey, elementType, isSideDrawer) {
  const { drawerType } = state;
  const mainDrawerLevel = determineMainDrawerLevel(activeRoutingKey);
  if (drawerType === 'doubleDrawer') {
    let sideDrawerLevel = mainDrawerLevel;
    if (isSideDrawer) {
      sideDrawerLevel = sideDrawerLevel - 1;
    }
    return `level${sideDrawerLevel}_${elementType}`;
  }
  else {
    return isString(activeRoutingKey)
      ? `level${mainDrawerLevel}_${elementType}`
      : `level${mainDrawerLevel - 1}_${elementType}`;
  }
}
function getModelName(bodyType) {
  const urlSplitIntoPieces = bodyType.link.split('/');
  const lastElementInUrlSplit = urlSplitIntoPieces[urlSplitIntoPieces.length - 1];
  let modelName;
  if (lastElementInUrlSplit === '') {
    if (urlSplitIntoPieces[urlSplitIntoPieces.length - 2] === undefined) {
      modelName = '';
    }
    else {
      modelName = urlSplitIntoPieces[urlSplitIntoPieces.length - 2].split('-').join(' ');
    }
  }
  else {
    modelName = lastElementInUrlSplit.split('-').join(' ');
  }
  return modelName;
}
function getModelTargetElement(elementId, text) {
  if (elementId.includes('models')) {
    const mainDrawerLevel = determineMainDrawerLevel(elementId);
    return `level${mainDrawerLevel}_${text.toLowerCase()}`;
  }
  return;
}
function getDrawerType() {
  return state.drawerType;
}
function getDealerResultsLoadDisplayElementId(elementId) {
  if (getDrawerType() === 'doubleDrawer') {
    return elementId;
  }
  else {
    return calculateDisplayElementId();
  }
}
function getDealerResultsLoadDisplayElementType() {
  if (getDrawerType() === 'doubleDrawer') {
    return DEALER_SEARCH_ELEMENT_TYPE;
  }
  else {
    return calculateDisplayElementType('', ElementTypes.dealerSearchForm);
  }
}
var analyticsManager = {
  setDrawerType,
  getDealerResultsLoadDisplayElementId,
  calculateDisplayElementId,
  getDealerResultsLoadDisplayElementType,
  calculateDisplayElementType,
  getModelName,
  getModelTargetElement
};

const backButtonCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-back-button{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-back-button{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-back-button{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-back-button{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-back-button{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-back-button{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-back-button-h{font-size:1rem;display:-ms-flexbox;display:flex}@media (min-width: 480px){.sc-phn-back-button-h{font-size:1.25rem}}@media (min-width: 760px){.sc-phn-back-button-h{font-size:1.25rem}}";

class BackButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.text = '';
    this.analyticsId = '';
    this.activeRoutingKey = undefined;
  }
  sendDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_BACK_CLICK, {
      componentClick: {
        clickElementId: this.analyticsId,
        clickElementName: this.text,
        clickElementType: ClickElementTypes.Button
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.backButton, true),
        displayElementName: this.text
      }
    });
  }
  render() {
    return (hAsync(Host, null, hAsync("phn-p-button-pure", { size: "inherit", icon: "arrow-head-left", class: "back-button-text-link", aria: { 'aria-label': 'Back to Menu' }, onClick: () => this.sendDataLayerEvent() }, this.text)));
  }
  static get style() { return backButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-back-button",
    "$members$": {
      "text": [1],
      "analyticsId": [1, "analytics-id"],
      "activeRoutingKey": [1, "active-routing-key"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const backdropCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-backdrop{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-backdrop{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-backdrop{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-backdrop{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-backdrop{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-backdrop{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-backdrop-h{position:fixed;z-index:300;top:0;left:0;right:0;bottom:0;background-color:rgba(0, 0, 0, 0.6);cursor:pointer;backdrop-filter:blur(32px);-webkit-backdrop-filter:blur(32px)}";

class Backdrop {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.clickDrawerHeaderClose = createEvent(this, "clickDrawerHeaderClose", 7);
    this.backdropClosed = createEvent(this, "backdropClosed", 7);
    this.activeRoutingKey = undefined;
  }
  handleClick() {
    this.sendDataAnalyticsEvent();
    this.clickDrawerHeaderClose.emit();
  }
  sendDataAnalyticsEvent() {
    analyticsManager.setDrawerType(DisplayElementTypes.DoubleDrawer);
    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'backdrop',
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level-0'
      },
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.backdrop),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  componentWillLoad() {
    if (windowService.hasScrollbar()) {
      windowService.lockScroll();
    }
  }
  disconnectedCallback() {
    if (windowService.hasScrollbar()) {
      windowService.unlockScroll();
    }
  }
  render() {
    return hAsync(Host, null);
  }
  get el() { return getElement(this); }
  static get style() { return backdropCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-backdrop",
    "$members$": {
      "activeRoutingKey": [1, "active-routing-key"]
    },
    "$listeners$": [[1, "click", "handleClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const burgerButtonCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-burger-button{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-burger-button{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-burger-button{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-burger-button{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-burger-button{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-burger-button{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-burger-button-h{display:block;position:relative}.hero_light-theme.themed-background.sc-phn-burger-button-h{background:-webkit-gradient(linear, left top, left bottom, from(rgba(224, 224, 224, 0.9)), color-stop(20%, rgba(224, 224, 224, 0.9)), color-stop(26.67%, rgba(224, 224, 224, 0.852589)), color-stop(33.33%, rgba(225, 225, 225, 0.768225)), color-stop(40%, rgba(226, 226, 226, 0.668116)), color-stop(46.67%, rgba(227, 227, 227, 0.557309)), color-stop(53.33%, rgba(228, 228, 228, 0.442691)), color-stop(60%, rgba(229, 229, 229, 0.331884)), color-stop(66.67%, rgba(230, 230, 230, 0.231775)), color-stop(73.33%, rgba(231, 231, 231, 0.147411)), color-stop(80%, rgba(232, 232, 232, 0.0816599)), color-stop(86.67%, rgba(232, 232, 232, 0.03551)), color-stop(93.33%, rgba(232, 232, 232, 0.0086472)), to(rgba(232, 232, 232, 0)));background:linear-gradient(to bottom, rgba(224, 224, 224, 0.9) 0%, rgba(224, 224, 224, 0.9) 20%, rgba(224, 224, 224, 0.852589) 26.67%, rgba(225, 225, 225, 0.768225) 33.33%, rgba(226, 226, 226, 0.668116) 40%, rgba(227, 227, 227, 0.557309) 46.67%, rgba(228, 228, 228, 0.442691) 53.33%, rgba(229, 229, 229, 0.331884) 60%, rgba(230, 230, 230, 0.231775) 66.67%, rgba(231, 231, 231, 0.147411) 73.33%, rgba(232, 232, 232, 0.0816599) 80%, rgba(232, 232, 232, 0.03551) 86.67%, rgba(232, 232, 232, 0.0086472) 93.33%, rgba(232, 232, 232, 0) 100%)}@media (min-width: 0px){.hero_light-theme.themed-background.sc-phn-burger-button-h{height:72px}}@media (min-width: 760px){.hero_light-theme.themed-background.sc-phn-burger-button-h{height:148px}}.hero_light-theme.sc-phn-burger-button-h phn-p-icon.sc-phn-burger-button{color:black}.hero_dark-theme.themed-background.sc-phn-burger-button-h{background:-webkit-gradient(linear, left top, left bottom, from(rgba(31, 31, 31, 0.9)), color-stop(20%, rgba(31, 31, 31, 0.9)), color-stop(26.67%, rgba(31, 31, 31, 0.852589)), color-stop(33.33%, rgba(32, 32, 32, 0.768225)), color-stop(40%, rgba(33, 33, 33, 0.668116)), color-stop(46.67%, rgba(34, 34, 34, 0.557309)), color-stop(53.33%, rgba(35, 35, 35, 0.442691)), color-stop(60%, rgba(36, 36, 36, 0.331884)), color-stop(66.67%, rgba(37, 37, 37, 0.231775)), color-stop(73.33%, rgba(38, 38, 38, 0.147411)), color-stop(80%, rgba(39, 39, 39, 0.0816599)), color-stop(86.67%, rgba(39, 39, 39, 0.03551)), color-stop(93.33%, rgba(39, 39, 39, 0.0086472)), to(rgba(39, 39, 39, 0)));background:linear-gradient(to bottom, rgba(31, 31, 31, 0.9) 0%, rgba(31, 31, 31, 0.9) 20%, rgba(31, 31, 31, 0.852589) 26.67%, rgba(32, 32, 32, 0.768225) 33.33%, rgba(33, 33, 33, 0.668116) 40%, rgba(34, 34, 34, 0.557309) 46.67%, rgba(35, 35, 35, 0.442691) 53.33%, rgba(36, 36, 36, 0.331884) 60%, rgba(37, 37, 37, 0.231775) 66.67%, rgba(38, 38, 38, 0.147411) 73.33%, rgba(39, 39, 39, 0.0816599) 80%, rgba(39, 39, 39, 0.03551) 86.67%, rgba(39, 39, 39, 0.0086472) 93.33%, rgba(39, 39, 39, 0) 100%)}@media (min-width: 0px){.hero_dark-theme.themed-background.sc-phn-burger-button-h{height:72px}}@media (min-width: 760px){.hero_dark-theme.themed-background.sc-phn-burger-button-h{height:148px}}.hero_dark-theme.sc-phn-burger-button-h phn-p-icon.sc-phn-burger-button{color:white}.navbar-theme.themed-background.sc-phn-burger-button-h{background:white;border-bottom:1px solid #e3e4e5}.navbar-theme.sc-phn-burger-button-h phn-p-icon.sc-phn-burger-button{color:black}.transparent_dark-theme.themed-background.sc-phn-burger-button-h{background:transparent}.transparent_dark-theme.sc-phn-burger-button-h phn-p-icon.sc-phn-burger-button{color:white}.transparent_light-theme.themed-background.sc-phn-burger-button-h{background:transparent}.transparent_light-theme.sc-phn-burger-button-h phn-p-icon.sc-phn-burger-button{color:white}.sc-phn-burger-button-h phn-p-button-pure.sc-phn-burger-button{font-size:1rem;margin:0.375rem}@media (min-width: 760px){.sc-phn-burger-button-h phn-p-button-pure.sc-phn-burger-button{font-size:1rem;margin:0.5rem}}@media (min-width: 1000px){.sc-phn-burger-button-h phn-p-button-pure.sc-phn-burger-button{font-size:1rem}}";

class BurgerButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.hideLabel = undefined;
    this.alignLabel = undefined;
    this.isLoading = false;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
  }
  sendDataLayerEvent(menu) {
    globalDataLayerService.pushDataLayerEvent(EventActions.MORE_CLICK, {
      componentClick: {
        clickElementId: menu.id,
        clickElementName: menu.text,
        targetElement: 'level1_drawer',
        clickElementType: ClickElementTypes.Button
      }
    });
  }
  render() {
    const { menu } = navContentStore.state;
    return (hAsync(Host, { class: `${constructThemeClass(this.mode, this.theme)}-theme` }, hAsync("phn-p-button-pure", { theme: getRightTheme(this.theme, this.mode), onClick: () => this.sendDataLayerEvent(menu), aria: { 'aria-haspopup': 'dialog', 'aria-label': 'open the menu' }, "align-label": this.alignLabel, icon: "menu-lines", loading: this.isLoading, size: "inherit", hideLabel: this.hideLabel }, menu.text)));
  }
  static get style() { return burgerButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-burger-button",
    "$members$": {
      "hideLabel": [4, "hide-label"],
      "alignLabel": [1, "align-label"],
      "isLoading": [4, "is-loading"],
      "theme": [1],
      "mode": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

async function componentsOnReady(parent, timeout, ...selectors) {
  if (parent === null) {
    return null;
  }
  const waitForElement = async (selector) => {
    const el = await windowService.waitForElement(parent, selector);
    if (typeof (el === null || el === void 0 ? void 0 : el.componentOnReady) === 'function') {
      await el.componentOnReady();
    }
    return el;
  };
  const waitForElements = selectors.length > 0 ? selectors.map(waitForElement) : [waitForElement()];
  const timer = new Promise((resolve) => timeout.set(async () => resolve(null)));
  return Promise.race([Promise.all(waitForElements), timer]);
}

class Timeout {
  constructor(delay) {
    this.delay = delay;
    this.timer = null;
  }
  set(cb) {
    this.cancel();
    this.timer = setTimeout(async () => {
      await cb();
      this.cancel();
    }, this.delay);
  }
  cancel() {
    if (this.timer !== null) {
      clearTimeout(this.timer);
      if (typeof this.timer.unref === 'function') {
        this.timer.unref();
      }
      this.timer = null;
    }
  }
}

const carBodyTypesDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-car-body-types-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-car-body-types-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-car-body-types-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-car-body-types-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-car-body-types-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-car-body-types-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-car-body-types-drawer-h{display:block}.sc-phn-car-body-types-drawer-h ul.sc-phn-car-body-types-drawer{margin:0;padding:0}.sc-phn-car-body-types-drawer-h phn-p-headline.sc-phn-car-body-types-drawer{font-size:1.75rem}.sc-phn-car-body-types-drawer-h .model-link-content.sc-phn-car-body-types-drawer{position:relative;-webkit-transition:-webkit-transform 0.24s ease;transition:-webkit-transform 0.24s ease;transition:transform 0.24s ease;transition:transform 0.24s ease, -webkit-transform 0.24s ease;inset:0px;backface-visibility:hidden;-webkit-backface-visibility:hidden;-webkit-transform:translateZ(0);transform:translateZ(0);padding-bottom:5px}.sc-phn-car-body-types-drawer-h .model-link-content.sc-phn-car-body-types-drawer:hover{image-rendering:high-quality;-webkit-transform:scale3d(1.08, 1.08, 1.08);transform:scale3d(1.08, 1.08, 1.08)}.sc-phn-car-body-types-drawer-h .skeleton-bodytype.sc-phn-car-body-types-drawer{height:8.4375rem;width:16.25rem;margin:1.5rem 0 0 0;background:#d8d8db;border-radius:4px}@media (min-width: 480px){.sc-phn-car-body-types-drawer-h .skeleton-bodytype.sc-phn-car-body-types-drawer{height:6.875rem}}@media (min-width: 760px){.sc-phn-car-body-types-drawer-h .skeleton-bodytype.sc-phn-car-body-types-drawer{height:7.5rem;width:16.25rem}}.skeleton.sc-phn-car-body-types-drawer-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;opacity:60%}.skeleton.sc-phn-car-body-types-drawer-h .skeleton-headline.sc-phn-car-body-types-drawer{width:auto;height:2.375rem;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-car-body-types-drawer-h .skeleton-link.sc-phn-car-body-types-drawer{width:auto;height:3rem;margin:1rem 0;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{width:auto;height:8.4375rem;margin:1.5rem 0;background:#d8d8db;border-radius:4px}@media (min-width: 480px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:9.0625rem}}@media (min-width: 760px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:7.5rem}}@media (min-width: 1000px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:8.5625rem}}@media (min-width: 1300px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:8.3125rem}}@media (min-width: 1920px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:9.0625rem}}.sc-phn-car-body-types-drawer-h .links.sc-phn-car-body-types-drawer .link.sc-phn-car-body-types-drawer{width:100%;padding-top:1rem}.sc-phn-car-body-types-drawer-h .series-body-type.sc-phn-car-body-types-drawer{text-align:center;padding:0.125rem;margin-top:0.125rem}.sc-phn-car-body-types-drawer-h .further.sc-phn-car-body-types-drawer{width:100%;padding-top:4rem}.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1rem}@media (min-width: 480px){.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1.125rem}}@media (min-width: 760px){.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1rem}}@media (min-width: 1920px){.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1.125rem}}";

class CarBodyTypeDrawer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.bodyTypesImagesLoaded = new Set();
    this.bodyTypesImagesNotLoaded = new Set();
    this.series = undefined;
    this.breakpoint = undefined;
    this.activeRoutingKey = undefined;
    this.seriesLoaded = false;
    this.showSkeleton = true;
  }
  seriesWatcher() {
    this.seriesLoaded = false;
    this.showSkeleton = true;
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = !this.seriesLoaded;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  componentDidRender() {
    this.showSkeleton = !this.seriesLoaded;
  }
  handleImageLoad(seriesId) {
    this.bodyTypesImagesLoaded.add(seriesId);
    if (this.series.bodyTypes.every(({ id }) => this.bodyTypesImagesLoaded.has(id))) {
      this.seriesLoaded = true;
    }
  }
  handleImageLoadError(seriesId) {
    this.handleImageLoad(seriesId);
    this.bodyTypesImagesNotLoaded.add(seriesId);
  }
  sendMetaFunctionDataLayerEvent(link) {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CTA_CLICK, {
      componentClick: {
        clickElementId: link.id,
        clickElementName: link.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: link.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: link.text
      },
      car: {
        modelRangeName: link.id.split('.')[1]
      }
    });
  }
  sendBodyTypeClickDataLayerEvent(bodyType, tagName) {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {
      componentClick: {
        clickElementId: bodyType.id,
        clickElementName: bodyType.name,
        clickElementType: tagName === 'IMG' ? ClickElementTypes.Image : ClickElementTypes.Link,
        targetUrl: bodyType.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: bodyType.name
      },
      car: {
        modelRangeName: bodyType.id.split('.')[1],
        modelName: analyticsManager.getModelName(bodyType)
      }
    });
  }
  sendNavigationDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {
      componentClick: {
        clickElementId: this.series.all.id,
        clickElementName: this.series.all.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: this.series.all.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: this.series.all.text
      }
    });
  }
  getImageSize(currentBreakpoint) {
    switch (currentBreakpoint) {
      case breakpoint.xxl:
        return 1920;
      case breakpoint.xl:
      case breakpoint.l:
        return 1360;
      case breakpoint.m:
        return 1024;
      case breakpoint.s:
        return 760;
      case breakpoint.xs:
      case breakpoint.base:
      default:
        return 320;
    }
  }
  getImageSource(image) {
    const assetPath = getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/model-assets`);
    const imageSize = this.getImageSize(this.breakpoint);
    const imagePath = `${assetPath}/${imageSize}`;
    return `${imagePath}/${image}.webp, ${imagePath}/${image}@2x.webp 2x`;
  }
  render() {
    return (hAsync(Host, { class: `${this.showSkeleton ? 'skeleton' : ''}` }, hAsync(Fragment, null, hAsync("ul", { class: "links" }, this.series.links.map((link) => (hAsync(Fragment, null, this.showSkeleton ? hAsync("div", { class: "skeleton-link" }) : null, hAsync("phn-p-link", { key: link.id, variant: "tertiary", href: link.link, icon: link.icon, size: "inherit", class: "link", style: { display: this.showSkeleton ? 'none' : '' }, onClick: () => {
        this.sendMetaFunctionDataLayerEvent(link);
      }, role: "listitem" }, link.text))))), hAsync("ul", null, this.series.bodyTypes.map((bodyType) => {
      return (hAsync(Fragment, null, this.showSkeleton ? (hAsync(Fragment, null, hAsync("div", { class: "skeleton-image" }))) : null, hAsync("div", { class: "series-body-type", key: bodyType.id, style: { display: this.showSkeleton ? 'none' : '' }, role: "listitem" }, hAsync("phn-p-link-pure", { icon: "none", onClick: (e) => {
          const clickedElement = getHTMLElement(e.target);
          if (clickedElement !== null) {
            this.sendBodyTypeClickDataLayerEvent(bodyType, clickedElement.tagName);
          }
        } }, hAsync("a", { href: bodyType.link }, this.bodyTypesImagesNotLoaded.has(bodyType.id) ? (hAsync(Fragment, null, hAsync("div", { class: "skeleton-bodytype" }))) : (hAsync("div", { class: "model-link-content" }, hAsync("img", { srcSet: this.getImageSource(bodyType.image), alt: `${bodyType.name} Sideshot`, onLoad: () => this.handleImageLoad(bodyType.id), onError: () => this.handleImageLoadError(bodyType.id) }), hAsync("phn-p-text", { size: "inherit", color: "inherit", align: "center" }, bodyType.name), isString(bodyType.description) ? (hAsync("phn-p-text", { className: "model-description", size: "x-small", align: "center" }, bodyType.description)) : null)))))));
    })), this.showSkeleton ? null : (hAsync("phn-p-link", { variant: "tertiary", href: this.series.all.link, size: "inherit", class: "further", "data-test-id": "car-body-types-drawer-further-links-button", onClick: () => {
        this.sendNavigationDataLayerEvent();
      } }, this.series.all.text)))));
  }
  static get assetsDirs() { return ["model-assets"]; }
  get el() { return getElement(this); }
  static get watchers() { return {
    "series": ["seriesWatcher"]
  }; }
  static get style() { return carBodyTypesDrawerCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-car-body-types-drawer",
    "$members$": {
      "series": [16],
      "breakpoint": [2],
      "activeRoutingKey": [1, "active-routing-key"],
      "seriesLoaded": [32],
      "showSkeleton": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

/* istanbul ignore file */
const shrinkElement = (el, progress, { to = 100 }) => {
  el.style.width = `${(1 - progress) * to}%`;
};
const growElement = (el, progress, { to = 100 }) => {
  el.style.width = `${progress * to}%`;
};
const slideOutToRightRelative = (el, progress, { from = 0, to = -100 }) => {
  el.style.right = `calc(${progress * to + from}%)`;
  el.style.position = 'relative';
};
const slideOutToLeftRelative = (el, progress, { from = 0, to = -100 }) => {
  el.style.left = `calc(${progress * to + from}%)`;
  el.style.position = 'relative';
};
const slideInFromLeftRelative = (el, progress, { from = -100, to = 0 }) => {
  el.style.left = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'relative';
};
const slideInFromRightRelative = (el, progress, { from = -100, to = 0 }) => {
  el.style.right = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'relative';
};
const slideInFromRight = (el, progress, { from = -100, to = 0 }) => {
  el.style.right = `${(1 - progress) * from + to}px`;
};
const slideInFromLeft = (el, progress, { from = -100, to = 0 }) => {
  el.style.left = `${(1 - progress) * from + to}px`;
};
const slideOutToRight = (el, progress, { from = 0, to = -100 }) => {
  el.style.right = `${progress * to + from}px`;
};
const slideOutToLeft = (el, progress, { from = 0, to = -100 }) => {
  el.style.left = `${progress * to + from}px`;
};
const slideInFromRightFixed = (el, progress, { from = -100, to = 0 }) => {
  el.style.right = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'fixed';
};
const slideOutToRightFixed = (el, progress, { from = 0, to = -100 }) => {
  el.style.right = `calc(${progress * to + from}%)`;
  el.style.position = 'fixed';
};
const slideInFromLeftFixed = (el, progress, { from = -100, to = 0 }) => {
  el.style.left = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'fixed';
};
const slideOutToLeftFixed = (el, progress, { from = 0, to = -100 }) => {
  el.style.left = `calc(${progress * to + from}%)`;
  el.style.position = 'fixed';
};
const fadeOut = (el, progress, { from = 1, to = 0 }) => {
  el.style.opacity = `${(1 - progress) * from + progress * to}`;
};
const fadeIn = (el, progress, { from = 0, to = 1 }) => {
  el.style.opacity = `${progress * to + (progress - 1) * from}`;
};
const fadeOutBackdrop = (el, progress, { from = 1, to = 0 }) => {
  el.style.backgroundColor = `rgba(0, 0, 0, ${(1 - progress) * from + progress * to})`;
  el.style.opacity = `${1 - progress + progress * to}`;
};
const fadeInBackdrop = (el, progress, { from = 0, to = 1 }) => {
  el.style.backgroundColor = `rgba(0, 0, 0, ${progress * to + (progress - 1) * from})`;
  el.style.opacity = `${progress + (progress - 1) * from}`;
};
const AnimationsAction = {
  slideOutToLeftRelative,
  slideInFromRightRelative,
  slideInFromLeftRelative,
  slideOutToRightRelative,
  shrinkElement,
  growElement,
  slideInFromRight,
  slideInFromLeft,
  slideOutToRight,
  slideOutToLeft,
  fadeOut,
  fadeIn,
  fadeInBackdrop,
  fadeOutBackdrop,
  slideInFromRightFixed,
  slideOutToRightFixed,
  slideInFromLeftFixed,
  slideOutToLeftFixed
};

var __rest$3 = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const resetStyle = (el) => {
  el.removeAttribute('style');
};
const getAnimationEffect = (effectName) => {
  return AnimationsAction[effectName];
};
/* istanbul ignore next */
const timingFunctions = {
  easeInOutSin: (timeFraction) => {
    return -(Math.cos(Math.PI * timeFraction) - 1) / 2;
  },
  easeInOutQuad: (timeFraction) => {
    if (timeFraction < 0.5) {
      return (2 * timeFraction) / 2;
    }
    else {
      return (2 - 2 * (1 - timeFraction)) / 2;
    }
  },
  linear: (timeFraction) => {
    return timeFraction < 0 || timeFraction > 1 ? Math.round(timeFraction) : timeFraction;
  },
  cubicBezierStart: (timeFraction) => {
    return cubicBezier(timeFraction, 0.1, 0.0, 0.0, 100);
  },
  cubicBezierEnd: (timeFraction) => {
    return cubicBezier(timeFraction, 0.3, 0.0, 1.0, 0.8);
  }
};
function animationPromiseGenerator(el, animation) {
  const { duration = 300, cleanUpAfterAnimation = false } = animation, effect = __rest$3(animation, ["duration", "cleanUpAfterAnimation"]);
  return new Promise((resolve) => {
    let animationFrame;
    const timeout = setTimeout(() => {
      cancelAnimationFrame(animationFrame);
      finishAnimation();
    }, duration + 50);
    function finishAnimation() {
      playEffect(el, 1, effect);
      clearTimeout(timeout);
      if (typeof cleanUpAfterAnimation === 'function') {
        const maybePromise = cleanUpAfterAnimation(el);
        if (isPromise(maybePromise)) {
          maybePromise.then(() => resolve());
          return;
        }
      }
      else if (cleanUpAfterAnimation === true) {
        resetStyle(el);
      }
      resolve();
    }
    const start = performance.now();
    const playEffect = getAnimationEffect(effect.name);
    function animate(time) {
      const timingFunction = timingFunctions[effect.timingFunction || 'linear'];
      let progress = timingFunction((time - start) / duration);
      progress = Math.round((progress + Number.EPSILON) * 1000) / 1000;
      const ANIMATION_HAS_FINISHED = progress >= 1;
      const ANIMATION_ON_PROGRESS = progress < 1;
      if (ANIMATION_HAS_FINISHED) {
        return finishAnimation();
      }
      playEffect(el, progress, effect);
      if (ANIMATION_ON_PROGRESS) {
        animationFrame = windowService.requestAnimationFrame(animate);
      }
    }
    animationFrame = windowService.requestAnimationFrame(animate);
  });
}
function cubicBezier(t, initial, p1, p2, final) {
  return ((1 - t) * (1 - t) * (1 - t) * initial +
    3 * (1 - t) * (1 - t) * t * p1 +
    3 * (1 - t) * t * t * p2 +
    t * t * t * final);
}

const sequences = {};
let rootElement = null;
function initialize(element) {
  rootElement = element;
}
function register(sequenceIdentifier, animationSequence) {
  sequences[sequenceIdentifier] = animationSequence;
}
function reset() {
  Object.keys(sequences).forEach((key) => delete sequences[key]);
}
async function play(sequenceIdentifier) {
  const sequence = sequences[sequenceIdentifier];
  if (sequence === undefined) {
    return new Promise((_, reject) => reject(new Error(`Sequence ${sequenceIdentifier} has not been registered`)));
  }
  if (!sequence.running) {
    sequence.promise = new Promise((resolve, reject) => {
      sequence.resolve = () => {
        sequence.running = false;
        resolve();
      };
      sequence.reject = (value) => {
        sequence.running = false;
        reject(value);
      };
      sequence.running = true;
      applyCurrentAnimationSequenceStep(sequence);
    });
  }
  return sequence.promise;
}
function finishAnimationSequence(sequence) {
  var _a;
  sequence.currentStepIndex = 0;
  (_a = sequence.resolve) === null || _a === void 0 ? void 0 : _a.call(sequence, null);
  sequence.promise = undefined;
}
async function applyCurrentAnimationSequenceStep(sequence) {
  var _a;
  if (sequence.currentStepIndex >= sequence.steps.length) {
    finishAnimationSequence(sequence);
    return;
  }
  const sequenceStep = sequence.steps[sequence.currentStepIndex];
  const promises = [];
  for (const animation of sequenceStep) {
    promises.push(executeAnimation(animation));
  }
  try {
    await Promise.all(promises);
  }
  catch (error) {
    (_a = sequence.reject) === null || _a === void 0 ? void 0 : _a.call(sequence, error);
    return;
  }
  sequence.currentStepIndex += 1;
  setTimeout(() => applyCurrentAnimationSequenceStep(sequence), 0);
}
async function executeAnimation({ onStart, onEnd, animation, elementSelector }) {
  if (rootElement === null) {
    throw new Error('No root element present');
  }
  if (onStart) {
    const maybePromise = onStart();
    if (isPromise(maybePromise)) {
      await maybePromise;
    }
  }
  const animatedElements = Array.from(rootElement.querySelectorAll(elementSelector));
  const animationExecutors = [];
  for (const element of animatedElements) {
    const animationPromiseEffect = animationPromiseGenerator(element, animation);
    animationExecutors.push(animationPromiseEffect);
  }
  await Promise.all(animationExecutors);
  if (onEnd) {
    const maybePromise = onEnd();
    if (isPromise(maybePromise)) {
      await maybePromise;
    }
  }
}
function isPlaying(sequenceIdentifier) {
  const sequence = sequences[sequenceIdentifier];
  if (sequence === undefined) {
    throw new Error(`Sequence ${sequenceIdentifier} has not been registered`);
  }
  return sequence.promise !== undefined;
}
function makeSequence(sequenceSteps, animationDefaults) {
  return {
    steps: sequenceSteps.map((step) => step.map((animation) => (Object.assign(Object.assign({}, animationDefaults), animation)))),
    currentStepIndex: 0,
    running: false
  };
}
var animationManager = {
  initialize,
  play,
  isPlaying,
  register,
  reset
};

const registerContextualDrawerOpening = ({ onStartOpening, onFinishOpening }) => {
  animationManager.register('openContextualDrawer', makeSequence([
    [
      {
        onStart: onStartOpening,
        elementSelector: 'contextual-drawer',
        animation: {
          name: 'slideInFromLeft',
          to: 0,
          duration: AnimationDurations.drawerOpen,
          from: -1000
        }
      },
      {
        onEnd: onFinishOpening,
        elementSelector: '.contextual-drawer-backdrop',
        animation: {
          name: 'fadeInBackdrop',
          duration: AnimationDurations.backdrop,
          to: 0.6
        }
      }
    ]
  ], { timingFunction: 'cubicBezierStart' }));
};
const registerContextualDrawerClosing = ({ onStartClosing, onEndClosing }) => {
  animationManager.register('closeContextualDrawer', makeSequence([
    [
      {
        onStart: onStartClosing,
        elementSelector: 'contextual-drawer',
        animation: {
          name: 'slideOutToLeft',
          to: -1000,
          duration: AnimationDurations.drawer
        }
      },
      {
        elementSelector: '.contextual-drawer-backdrop',
        animation: {
          name: 'fadeOutBackdrop',
          to: 0.6,
          duration: AnimationDurations.backdrop
        },
        onEnd: onEndClosing
      }
    ]
  ], { timingFunction: 'cubicBezierEnd' }));
};

const contextualDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-contextual-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-contextual-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-contextual-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-contextual-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-contextual-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-contextual-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-contextual-drawer-h{float:right;right:-150%;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;-webkit-box-sizing:border-box;box-sizing:border-box;position:fixed;top:0;height:100vh;z-index:301}@media (min-width: 0px) and (max-width: 759px){.sc-contextual-drawer-h{width:100%}}.sc-contextual-drawer-h .contextual-drawer-backdrop.sc-contextual-drawer{position:fixed;z-index:300;top:0;left:0;right:0;bottom:0;background-color:rgba(0, 0, 0, 0.8);cursor:pointer;backdrop-filter:blur(32px);-webkit-backdrop-filter:blur(32px)}.sc-contextual-drawer-h .close-button.sc-contextual-drawer{position:absolute;right:-4.75rem;z-index:301;width:3rem;height:3rem;margin-top:1.75rem;cursor:pointer}@media (min-width: 0px) and (max-width: 759px){.sc-contextual-drawer-h .close-button.sc-contextual-drawer{display:none}}.sc-contextual-drawer-h .contextual-drawer.sc-contextual-drawer{background-color:#EEEFF2;position:relative;overflow-y:auto;overflow-x:hidden;width:20.625rem;border-radius:0 4px 4px 0;height:100vh;z-index:301}@media (min-width: 0px) and (max-width: 759px){.sc-contextual-drawer-h .contextual-drawer.sc-contextual-drawer{width:100%;border-radius:0;background-color:#FFFFFF}}@media (min-width: 1000px){.sc-contextual-drawer-h .contextual-drawer.sc-contextual-drawer{width:21rem}}@media (min-width: 1300px){.sc-contextual-drawer-h .contextual-drawer.sc-contextual-drawer{width:25.3125rem}}@media (min-width: 1920px){.sc-contextual-drawer-h .contextual-drawer.sc-contextual-drawer{width:37.875rem}}";

class ContextualDrawer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.openBackdrop = createEvent(this, "openBackdrop", 7);
    this.phnContextualDrawerStatus = createEvent(this, "phnContextualDrawerStatus", 7);
    this.isDrawerOpened = false;
  }
  closeContextualDrawer() {
    this.closeDrawer();
  }
  openContextualDrawer() {
    animationManager.play('openContextualDrawer');
  }
  closeDrawer() {
    animationManager.play('closeContextualDrawer');
  }
  componentDidLoad() {
    registerContextualDrawerOpening({
      onStartOpening: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.startOpening });
        this.isDrawerOpened = true;
        const contextualDrawerHeader = document.getElementById('contextual-drawer-header');
        if (contextualDrawerHeader) {
          contextualDrawerHeader.style.display = '';
        }
      },
      onFinishOpening: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.finishOpening });
      }
    });
    registerContextualDrawerClosing({
      onStartClosing: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.startClosing });
      },
      onEndClosing: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.finishClosing });
        this.isDrawerOpened = false;
      }
    });
  }
  render() {
    return (hAsync(Host, { style: { display: this.isDrawerOpened ? '' : 'none' } }, hAsync("phn-p-button", { variant: "secondary", className: "close-button", theme: "dark", "hide-label": "true", icon: 'close', "aria-label": "close modal dialog", onClick: () => {
        this.closeDrawer();
      } }), hAsync("div", { class: "contextual-drawer", id: "contextual-drawer" }, hAsync("div", { slot: "contextual_drawer_header" }, hAsync("slot", { name: "contextual_drawer_header" }))), hAsync("div", { "aria-hidden": "true", class: "contextual-drawer-backdrop", onClick: () => {
        this.closeDrawer();
      } })));
  }
  static get style() { return contextualDrawerCss; }
  static get cmpMeta() { return {
    "$flags$": 6,
    "$tagName$": "contextual-drawer",
    "$members$": {
      "isDrawerOpened": [32]
    },
    "$listeners$": [[8, "phnCloseContextualDrawer", "closeContextualDrawer"], [8, "phnOpenContextualDrawer", "openContextualDrawer"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const shopStateStore = createStore({
  wishlistItemsNumber: 0,
  numberOfShoppingItems: 0,
  shopInformation: { numberOfShoppingItems: 0, wishlistItemsNumber: 0, subTotal: '0' }
});

function isShopAvailable(locale, app) {
  var _a;
  const shopList = (_a = navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.availableLocales;
  return shopList !== undefined && shopList.includes(locale) && app === Application.shop;
}
function logoLinksToShop(locale) {
  var _a, _b;
  return ((_b = (_a = navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.logoLinksToShopLocales) === null || _b === void 0 ? void 0 : _b.includes(locale)) || false;
}
function isShopAvailableAndLogoLinksToShop(locale, app, shop) {
  return isShopAvailable(locale, app) && logoLinksToShop(locale) && shop !== null;
}
function modifyShopItemDependingOnMarket(locale, app, content) {
  const { shop, externalShop } = content;
  if (shop === null)
    return content;
  if (externalShop && app !== Application.shop) {
    return replaceShopWithExternalShop(content, shop, externalShop);
  }
  if (shopNotAvailableOnGlobalPages(shop, locale, app)) {
    return removeShopItemFromContent(content, shop);
  }
  return content;
}
function replaceShopWithExternalShop(content, shop, externalShop) {
  return Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, shop), externalShop) });
}
function shopNotAvailableOnGlobalPages(shop, locale, app) {
  return (!(shop === null || shop === void 0 ? void 0 : shop.availableLocales.includes(locale)) ||
    ((shop === null || shop === void 0 ? void 0 : shop.availableLocalesOnlyForShop.includes(locale)) && app !== Application.shop));
}
function removeShopItemFromContent(content, shop) {
  return Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, shop), { text: '' }) });
}
function filterWishlistItemsByAuthStatus(menuItems, authStatusList) {
  return menuItems === null || menuItems === void 0 ? void 0 : menuItems.filter((item) => {
    if (item.authStatus === null || item.authStatus === undefined) {
      return authStatusList.includes(null);
    }
    return authStatusList.includes(item.authStatus);
  });
}
function getAvailableShopVariables() {
  const { myPorsche } = navContentStore.state;
  const { loggedInState } = navStateStore.state;
  let { wishlistItemsNumber } = shopStateStore.state.shopInformation;
  if (wishlistItemsNumber === 0) {
    wishlistItemsNumber = shopStateStore.state.wishlistItemsNumber;
  }
  const username = getUsername(loggedInState, (myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.loggedInFallback) || '');
  return { wishlistItemsNumber, username };
}
function loadsShopPropsOnStore(props) {
  shopStateStore.set('wishlistItemsNumber', props.wishlistItemsNumber);
  shopStateStore.set('numberOfShoppingItems', props.numberOfShoppingItems);
  shopStateStore.set('shopInformation', props.shopInformation);
}
function getWishlistIconName() {
  const { shopInformation } = shopStateStore.state;
  const { wishlistItemsNumber } = shopStateStore.state;
  const wishlistNumber = shopInformation.wishlistItemsNumber > 0 ? shopInformation.wishlistItemsNumber : wishlistItemsNumber;
  return wishlistNumber > 0 ? 'heart-filled' : 'heart';
}
function getIconNameByMenuItemId(id) {
  const iconsGetterFunctions = {
    wishlist: getWishlistIconName
  };
  const getIconName = iconsGetterFunctions[id];
  if (typeof getIconName !== 'function')
    return null;
  return getIconName();
}

const contentCache = new Map();
async function fetchContent(locale, app) {
  var _a;
  const config = getConfig(featureToggles.env);
  const isShopEnabled = featureToggles.isShopToggleActive() && app === Application.shop;
  const naviContentPromise = fetchNaviContent(config.CONTENT_URL, locale);
  const shopContentPromise = isShopEnabled ? fetchShopContent(config.SHOP_CONTENT_URL, locale) : Promise.resolve(null);
  const [naviContentResult, shopContentResult] = await Promise.allSettled([naviContentPromise, shopContentPromise]);
  if (naviContentResult.status === 'rejected') {
    throw naviContentResult.reason;
  }
  const naviContent = modifyShopItemDependingOnMarket(locale, app, naviContentResult.value);
  const shopContent = shopContentResult.status === 'fulfilled' ? shopContentResult.value : null;
  if (shopContent === null || naviContent.shop === null) {
    return naviContent;
  }
  return Object.assign(Object.assign({}, naviContent), { shop: Object.assign(Object.assign({}, naviContent.shop), { children: shopContent.menuItems || ((_a = naviContent.shop) === null || _a === void 0 ? void 0 : _a.children) || [], additionalContent: shopContent.additionalContent, availableLocales: naviContent.shop.availableLocales, availableLocalesOnlyForShop: naviContent.shop.availableLocalesOnlyForShop }) });
}
async function fetchNaviContent(contentUrl, locale) {
  const { country, language } = splitLocale(locale);
  const cacheKey = constructCacheKey(contentUrl, locale);
  const cachedContent = contentCache.get(cacheKey);
  if (cachedContent !== undefined) {
    return cachedContent;
  }
  const data = await fetch(`${contentUrl}/${`${language}-${country}`}.json`, {
    headers: {
      'Cache-Control': 'no-cache',
      'Content-Type': 'application/json'
    }
  });
  if (data.status === 404) {
    throw new NaviError(`No content for locale ${locale} found`, NaviErrorTypes.NO_RESULTS);
  }
  if (!data.ok) {
    throw new NaviError(`Could not get content for locale ${locale}`, NaviErrorTypes.GENERAL);
  }
  const content = await data.json();
  contentCache.set(cacheKey, content);
  return content;
}
async function fetchShopContent(contentUrl, locale) {
  const { country, language } = splitLocale(locale);
  const data = await fetch(`${contentUrl}/${country.toLowerCase()}/${`${language}-${country}`}/navigation`, {
    headers: {
      'Content-Type': 'application/json',
      'x-vercel-protection-bypass': 'hXMkVgu6erfnX2ydOdeSCixWDWbPjBUk'
    }
  });
  if (data.status === 404) {
    throw new NaviError(`No shop content for locale ${locale} found`, NaviErrorTypes.NO_RESULTS);
  }
  if (!data.ok) {
    throw new NaviError(`Could not get shop content for locale ${locale}`, NaviErrorTypes.GENERAL);
  }
  return data.json();
}
function constructFlagURL(footerAssetsUrl, locale) {
  const { country } = splitLocale(locale);
  let flag = country;
  if (flag.includes('-') && !isCountryInOneOfRegions(flag)) {
    flag = country.split('-')[0];
  }
  return `${footerAssetsUrl}/flags/${flag}.svg`;
}
async function getFlagURL(footerAssetsUrl, locale) {
  try {
    const flagURL = constructFlagURL(footerAssetsUrl, locale);
    const res = await fetch(flagURL);
    // Only set flagURL if flag actually exists
    if (res.ok) {
      return flagURL;
    }
  }
  catch (err) {
    // ignore error
  }
  return '';
}

const countryRecommenderCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-country-recommender{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-country-recommender{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-country-recommender{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-country-recommender{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-country-recommender{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-country-recommender{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-country-recommender-h{display:block;background-color:#010205;width:100%;overflow:hidden;color:white;line-height:1.25rem;border-bottom:1PX solid #E3E4E5;font-size:0.75rem}.hero_light-theme.themed-background.sc-phn-country-recommender-h{background:-webkit-gradient(linear, left top, left bottom, from(rgba(224, 224, 224, 0.9)), color-stop(20%, rgba(224, 224, 224, 0.9)), color-stop(26.67%, rgba(224, 224, 224, 0.852589)), color-stop(33.33%, rgba(225, 225, 225, 0.768225)), color-stop(40%, rgba(226, 226, 226, 0.668116)), color-stop(46.67%, rgba(227, 227, 227, 0.557309)), color-stop(53.33%, rgba(228, 228, 228, 0.442691)), color-stop(60%, rgba(229, 229, 229, 0.331884)), color-stop(66.67%, rgba(230, 230, 230, 0.231775)), color-stop(73.33%, rgba(231, 231, 231, 0.147411)), color-stop(80%, rgba(232, 232, 232, 0.0816599)), color-stop(86.67%, rgba(232, 232, 232, 0.03551)), color-stop(93.33%, rgba(232, 232, 232, 0.0086472)), to(rgba(232, 232, 232, 0)));background:linear-gradient(to bottom, rgba(224, 224, 224, 0.9) 0%, rgba(224, 224, 224, 0.9) 20%, rgba(224, 224, 224, 0.852589) 26.67%, rgba(225, 225, 225, 0.768225) 33.33%, rgba(226, 226, 226, 0.668116) 40%, rgba(227, 227, 227, 0.557309) 46.67%, rgba(228, 228, 228, 0.442691) 53.33%, rgba(229, 229, 229, 0.331884) 60%, rgba(230, 230, 230, 0.231775) 66.67%, rgba(231, 231, 231, 0.147411) 73.33%, rgba(232, 232, 232, 0.0816599) 80%, rgba(232, 232, 232, 0.03551) 86.67%, rgba(232, 232, 232, 0.0086472) 93.33%, rgba(232, 232, 232, 0) 100%)}@media (min-width: 0px){.hero_light-theme.themed-background.sc-phn-country-recommender-h{height:72px}}@media (min-width: 760px){.hero_light-theme.themed-background.sc-phn-country-recommender-h{height:148px}}.hero_light-theme.sc-phn-country-recommender-h phn-p-icon.sc-phn-country-recommender{color:black}.hero_dark-theme.themed-background.sc-phn-country-recommender-h{background:-webkit-gradient(linear, left top, left bottom, from(rgba(31, 31, 31, 0.9)), color-stop(20%, rgba(31, 31, 31, 0.9)), color-stop(26.67%, rgba(31, 31, 31, 0.852589)), color-stop(33.33%, rgba(32, 32, 32, 0.768225)), color-stop(40%, rgba(33, 33, 33, 0.668116)), color-stop(46.67%, rgba(34, 34, 34, 0.557309)), color-stop(53.33%, rgba(35, 35, 35, 0.442691)), color-stop(60%, rgba(36, 36, 36, 0.331884)), color-stop(66.67%, rgba(37, 37, 37, 0.231775)), color-stop(73.33%, rgba(38, 38, 38, 0.147411)), color-stop(80%, rgba(39, 39, 39, 0.0816599)), color-stop(86.67%, rgba(39, 39, 39, 0.03551)), color-stop(93.33%, rgba(39, 39, 39, 0.0086472)), to(rgba(39, 39, 39, 0)));background:linear-gradient(to bottom, rgba(31, 31, 31, 0.9) 0%, rgba(31, 31, 31, 0.9) 20%, rgba(31, 31, 31, 0.852589) 26.67%, rgba(32, 32, 32, 0.768225) 33.33%, rgba(33, 33, 33, 0.668116) 40%, rgba(34, 34, 34, 0.557309) 46.67%, rgba(35, 35, 35, 0.442691) 53.33%, rgba(36, 36, 36, 0.331884) 60%, rgba(37, 37, 37, 0.231775) 66.67%, rgba(38, 38, 38, 0.147411) 73.33%, rgba(39, 39, 39, 0.0816599) 80%, rgba(39, 39, 39, 0.03551) 86.67%, rgba(39, 39, 39, 0.0086472) 93.33%, rgba(39, 39, 39, 0) 100%)}@media (min-width: 0px){.hero_dark-theme.themed-background.sc-phn-country-recommender-h{height:72px}}@media (min-width: 760px){.hero_dark-theme.themed-background.sc-phn-country-recommender-h{height:148px}}.hero_dark-theme.sc-phn-country-recommender-h phn-p-icon.sc-phn-country-recommender{color:white}.navbar-theme.themed-background.sc-phn-country-recommender-h{background:white;border-bottom:1px solid #e3e4e5}.navbar-theme.sc-phn-country-recommender-h phn-p-icon.sc-phn-country-recommender{color:black}.transparent_dark-theme.themed-background.sc-phn-country-recommender-h{background:transparent}.transparent_dark-theme.sc-phn-country-recommender-h phn-p-icon.sc-phn-country-recommender{color:white}.transparent_light-theme.themed-background.sc-phn-country-recommender-h{background:transparent}.transparent_light-theme.sc-phn-country-recommender-h phn-p-icon.sc-phn-country-recommender{color:white}.showing.sc-phn-country-recommender-h{-webkit-animation:slideDown 1s ease-in-out 0s;animation:slideDown 1s ease-in-out 0s}.hiding.sc-phn-country-recommender-h{-webkit-animation:slideUp 1s ease-in-out 0s;animation:slideUp 1s ease-in-out 0s}@media (min-width: 760px){.sc-phn-country-recommender-h{font-size:0.875rem}}@media (min-width: 1760px){.sc-phn-country-recommender-h{font-size:1rem}}.sc-phn-country-recommender-h phn-p-button-pure.sc-phn-country-recommender,.sc-phn-country-recommender-h phn-p-link-pure.sc-phn-country-recommender{height:-webkit-fit-content;height:-moz-fit-content;height:fit-content}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender{margin:0;display:grid;padding:0 calc(50vw - 1280px);grid-gap:clamp(16px, 1.25vw + 12px, 36px);max-width:2560px;min-width:320px;-webkit-box-sizing:content-box;box-sizing:content-box;grid-template-columns:[full-start] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [wide-start extended-start basic-start narrow-start] repeat(6, minmax(0, 1fr)) [narrow-end basic-end extended-end wide-end] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [full-end];--pds-internal-grid-safe-zone:max(22px, 10.625vw - 12px);--pds-grid-basic-span-one-half:span 3;--pds-grid-basic-span-one-third:span 2;--pds-grid-narrow-span-one-half:span 3;--pds-grid-basic-span-two-thirds:span 4;--pds-grid-extended-span-one-half:span 3;font-family:\"Porsche Next\", \"Arial Narrow\", Arial, \"Heiti SC\", SimHei, sans-serif;font-weight:400;color:#fff}@media (min-width: 760px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender{grid-template-columns:[full-start] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [wide-start] minmax(0, 1fr) [extended-start] minmax(0, 1fr) [basic-start] repeat(2, minmax(0, 1fr)) [narrow-start] repeat(8, minmax(0, 1fr)) [narrow-end] repeat(2, minmax(0, 1fr)) [basic-end] minmax(0, 1fr) [extended-end] minmax(0, 1fr) [wide-end] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [full-end];--pds-internal-grid-safe-zone:calc(5vw - 16px);--pds-grid-basic-span-one-half:span 6;--pds-grid-basic-span-one-third:span 4;--pds-grid-narrow-span-one-half:span 4;--pds-grid-basic-span-two-thirds:span 8;--pds-grid-extended-span-one-half:span 7}}@media (min-width: 1920px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender{--pds-internal-grid-safe-zone:min(50vw - 880px, 400px)}}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender{font-family:\"Porsche Next\", \"Arial Narrow\", Arial, \"Heiti SC\", SimHei, sans-serif;font-weight:400;color:#fff;overflow:hidden;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;position:relative;grid-column:wide-start/wide-end;-webkit-box-sizing:content-box;box-sizing:content-box;margin:0 0.5vw;padding-top:1.625rem;padding-bottom:0.625rem}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender{display:grid;grid-template-columns:4fr 1fr;grid-template-rows:1fr;gap:0px 0px;grid-template-areas:\"left  right\";width:100%}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender div.left-icons.sc-phn-country-recommender,.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender div.right-icons.sc-phn-country-recommender{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender div.left-icons.sc-phn-country-recommender{grid-area:left;-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender div.right-icons.sc-phn-country-recommender{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;justify-self:end;grid-area:right}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .statement.sc-phn-country-recommender{-ms-flex-order:0;order:0;padding-top:0.125rem;padding-right:0.5rem}@media (max-width: 759px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .statement.sc-phn-country-recommender{padding-bottom:1.0625rem}}@media (max-width: 479px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .statement.sc-phn-country-recommender{padding-bottom:1.0625rem}}@media (min-width: 0px) and (max-width: 479px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .statement.sc-phn-country-recommender{padding-bottom:0.625rem}}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .flag.sc-phn-country-recommender{margin-right:0.5rem;max-height:1.5rem;width:1.25rem;height:1.25rem;border-radius:100%;border:1px solid #6b6d70;background-color:#6b6d70}@media (min-width: 1000px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .flag.sc-phn-country-recommender{width:1.375rem;height:1.375rem}}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .flag-region.sc-phn-country-recommender{display:-ms-flexbox;display:flex}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .language.sc-phn-country-recommender{padding-right:1.5rem;padding-top:0.125rem;padding-bottom:1rem}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .selector.sc-phn-country-recommender{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-order:2;order:2;width:100%}@media (min-width: 760px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .selector.sc-phn-country-recommender{-ms-flex-order:1;order:1;width:auto}}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .change.sc-phn-country-recommender{padding-top:0.125rem;margin-bottom:1rem}.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .close-button.sc-phn-country-recommender{grid-area:right;margin-left:auto;-ms-flex-order:1;order:1;font-size:0.375rem}@media (min-width: 760px){.sc-phn-country-recommender-h .country-recommender-container.sc-phn-country-recommender .country-recommender.sc-phn-country-recommender .country-recommender-icons-tray.sc-phn-country-recommender .close-button.sc-phn-country-recommender{-ms-flex-order:2;order:2}}";

class CountryRecommender {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.bannerClosed = createEvent(this, "bannerClosed", 7);
    this.locale = undefined;
    this.content = undefined;
    this.flagURL = '';
  }
  async localeWatcher() {
    await this.setFlagURL();
  }
  async setFlagURL() {
    const footerAssetsUrl = getConfig(navStateStore.state.env).FOOTER_ASSETS_URL;
    this.flagURL = await getFlagURL(footerAssetsUrl, this.locale);
  }
  closeCountryRecommender() {
    globalDataLayerService.pushDataLayerEvent(EventActions.COUNTRY_RECOMMENDER_CLOSE, {
      componentClick: {
        clickElementId: 'mainmenu.banner.close',
        clickElementName: 'close',
        clickElementType: ClickElementTypes.Button
      }
    });
    this.el.classList.remove('showing');
    this.el.classList.add('hiding');
  }
  componentWillLoad() {
    this.setFlagURL();
  }
  componentDidLoad() {
    globalDataLayerService.pushDataLayerEvent(EventActions.COUNTRY_RECOMMENDER_LOAD, {
      componentClick: {
        clickElementId: 'mainmenu.banner',
        clickElementName: 'Country Recommender',
        clickElementType: ClickElementTypes.Link
      }
    });
  }
  handleAnimationEnd(e) {
    var _a, _b;
    if (e.animationName === 'slideUp') {
      (_a = getHTMLElement(e.target)) === null || _a === void 0 ? void 0 : _a.classList.remove('hiding');
      this.bannerClosed.emit();
    }
    else if (e.animationName === 'slideDown') {
      (_b = getHTMLElement(e.target)) === null || _b === void 0 ? void 0 : _b.classList.remove('showing');
    }
  }
  sendDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.COUNTRY_RECOMMENDER_CHANGE, {
      componentClick: {
        clickElementId: this.content.change.id,
        clickElementName: this.content.change.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: getConfig(navStateStore.state.env).COUNTRY_SELECTOR_URL
      }
    });
  }
  render() {
    const { statement, region, language, change } = this.content;
    return (hAsync(Host, { class: "showing" }, hAsync("div", { class: "country-recommender-container" }, hAsync("div", { class: "country-recommender" }, hAsync("div", { class: "country-recommender-icons-tray" }, hAsync("div", { class: "left-icons" }, isString(statement) ? (hAsync("phn-p-text", { theme: "dark", size: "inherit", class: "statement" }, statement)) : /* istanbul ignore next */
      null, hAsync("div", { class: "selector" }, hAsync("div", { class: "phn-flex-row phn-flex-wrap" }, hAsync("div", { class: "flag-region" }, isString(this.flagURL) ? (hAsync("phn-p-icon", { source: this.flagURL, class: "flag", "aria-hidden": "true", size: "inherit", color: "inherit" })) : /* istanbul ignore next */
      null, isString(region) && isString(language) ? (hAsync("phn-p-text", { theme: "dark", class: "language", size: "inherit" }, region, " / ", language)) : /* istanbul ignore next */
      null), hAsync("phn-p-link-pure", { theme: "dark", size: "inherit", class: "change", onClick: () => this.sendDataLayerEvent(), aria: { 'aria-label': 'Change Region or Language' } }, hAsync("a", { href: getConfig(navStateStore.state.env).COUNTRY_SELECTOR_URL }, change.text))))), hAsync("div", { class: "right-icons" }, hAsync("phn-p-button-pure", { theme: "dark", icon: "close", onClick: () => this.closeCountryRecommender(), class: "close-button", "hide-label": "true" }, "Close dialog")))))));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "locale": ["localeWatcher"]
  }; }
  static get style() { return countryRecommenderCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-country-recommender",
    "$members$": {
      "locale": [1],
      "content": [16],
      "flagURL": [32]
    },
    "$listeners$": [[1, "animationend", "handleAnimationEnd"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function showDealerSearchDropdown(country) {
  const countriesWithDropdown = ['CN'];
  return countriesWithDropdown.includes(country);
}
function getRegionSpecificCountry(country) {
  return country.includes('-') ? country.split('-')[0] : country;
}
function sanitizeDealerHomepage(originalUrl) {
  if (!originalUrl.startsWith('https://')) {
    return `http://${originalUrl}`;
  }
  return originalUrl;
}
function getOpeningHours(openingHoursData) {
  const { openingHours } = navContentStore.state.dealer;
  if (!openingHours) {
    return '';
  }
  const WEEK_DAYS = [
    openingHours.monday,
    openingHours.tuesday,
    openingHours.wednesday,
    openingHours.thursday,
    openingHours.friday,
    openingHours.saturday,
    openingHours.sunday
  ];
  const openingHoursMap = getOpeningHoursMap(openingHours, openingHoursData);
  const result = [];
  let previousOpeningHours = '';
  let previousDayIndex = -1;
  let consecutiveDays = [];
  for (const day of WEEK_DAYS) {
    const currentDayIndex = WEEK_DAYS.indexOf(day);
    const openHours = openingHoursMap.get(day);
    const openingHoursString = getOpeningHoursString(openHours);
    if (openingHoursString !== '') {
      if (previousOpeningHours === '') {
        previousOpeningHours = openingHoursString;
        consecutiveDays.push(day);
      }
      else if (previousOpeningHours !== openingHoursString || previousDayIndex !== currentDayIndex - 1) {
        result.push(getDayRange(consecutiveDays, previousOpeningHours));
        consecutiveDays = [day];
        previousOpeningHours = openingHoursString;
      }
      else {
        consecutiveDays.push(day);
      }
      previousDayIndex = currentDayIndex;
    }
  }
  if (previousOpeningHours !== '') {
    result.push(getDayRange(consecutiveDays, previousOpeningHours));
  }
  const dailyLunchOpenHours = openingHoursMap.get(openingHours.daily_lunch);
  const dailyLunchTime = getOpeningHoursString(dailyLunchOpenHours);
  if (dailyLunchTime !== '') {
    result.push(getDayRange([openingHours.daily_lunch], dailyLunchTime));
  }
  return result.join('\n');
}
function getDayRange(days, openingHoursString) {
  if (days.length === 1) {
    return `${days[0]}: ${openingHoursString}`;
  }
  return `${days[0]} - ${days[days.length - 1]}: ${openingHoursString}`;
}
function getOpeningHoursMap(openingHours, openingHoursData) {
  const openingHoursMap = new Map();
  for (const item of openingHoursData) {
    const day = openingHours[item.day.toLowerCase()];
    if (isString(day)) {
      openingHoursMap.set(day, { open: item.open, close: item.close });
    }
  }
  return openingHoursMap;
}
function getOpeningHoursString(openHours) {
  return openHours && openHours.open !== '' && openHours.close !== '' ? getTimeFormat(openHours) : '';
}
function getTimeFormat(openHours) {
  const { openingHours } = navContentStore.state.dealer;
  const timeFormat = (openingHours === null || openingHours === void 0 ? void 0 : openingHours.timeFormat) === 12;
  return `${convertToLocalTime(openHours.open, timeFormat)} - ${convertToLocalTime(openHours.close, timeFormat)}`;
}
function convertToLocalTime(time, timeFormat = false) {
  const [hour, minute] = time.split(':').map(Number);
  const date = new Date(0, 0, 0, hour, minute);
  return date
    .toLocaleString(undefined, {
    hour: 'numeric',
    minute: 'numeric',
    hour12: timeFormat
  })
    .toUpperCase();
}

const dealerDetailsDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-dealer-details-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-details-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-details-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-details-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-details-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-details-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-details-drawer-h{display:block;margin-top:1.625rem}@media (min-width: 760px){.sc-phn-dealer-details-drawer-h{margin-top:-0.125rem}}@media (min-width: 1300px){.sc-phn-dealer-details-drawer-h{margin-top:-0.1875rem}}@media (min-width: 1920px){.sc-phn-dealer-details-drawer-h{margin-top:-0.4375rem}}.sc-phn-dealer-details-drawer-h .skeleton-headline.sc-phn-dealer-details-drawer{width:auto;height:3.125rem;background:#d8d8db;margin-bottom:1.75rem;border-radius:4px}.sc-phn-dealer-details-drawer-h phn-p-heading.sc-phn-dealer-details-drawer{margin-bottom:1.5rem}.sc-phn-dealer-details-drawer-h phn-menu-item.sc-phn-dealer-details-drawer{margin-top:1.5rem}.sc-phn-dealer-details-drawer-h phn-menu-item.sc-phn-dealer-details-drawer:first-of-type{margin-top:0.875rem}.skeleton.sc-phn-dealer-details-drawer-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.skeleton-menu-item.sc-phn-dealer-details-drawer-h{width:auto;height:1.25rem;background:#d8d8db;border-radius:4px}";

class DealerDetailsDrawer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.clickDrawerHeaderBack = createEvent(this, "clickDrawerHeaderBack", 7);
    this.dealerId = undefined;
    this.locale = undefined;
    this.breakpoint = undefined;
    this.errorMessage = '';
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  componentDidLoad() {
    const dealer = this.getDealer();
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_DETAILS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_DISPLAY_ELEMENT_ID),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer === null || dealer === void 0 ? void 0 : dealer.name
      },
      componentSearch: {
        searchTerm: dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: dealer === null || dealer === void 0 ? void 0 : dealer.name,
        companyId: dealer === null || dealer === void 0 ? void 0 : dealer.porschePartnerNo
      }
    });
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = false;
  }
  getDealer() {
    const { ppnDealer: dealer } = dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};
    return dealer;
  }
  renderHeading(name) {
    return (hAsync(Fragment, null, this.showSkeleton ? hAsync("div", { class: "skeleton-headline" }) : null, hAsync("phn-p-heading", { style: { display: this.showSkeleton ? 'none' : '' }, tag: "h3", size: "large", "data-test-id": "dealer-headline" }, name)));
  }
  render() {
    const ppnDealer = this.getDealer();
    if (ppnDealer === undefined) {
      return hAsync("div", null, this.errorMessage);
    }
    const language = splitLocale(this.locale).language;
    const { testDrive, finder, bookService } = navContentStore.state.dealer.details;
    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
    const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
    const name = language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
    // postalCode is currently not available in addressLocalized
    const hasAddress = isString(address.street) || isString(ppnDealer.address.postalCode) || isString(address.city);
    const hasPhoneNumber = isString(ppnDealer.contactDetails.phoneNumber);
    const hasEmail = isString(ppnDealer.contactDetails.emailAddress);
    const hasHomepage = isString(ppnDealer.contactDetails.homepage);
    const hasTestdrive = testDrive && isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.text) && isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.link);
    const hasName = isString(ppnDealer.nameLocalized) || isString(ppnDealer.name);
    const openingHours = getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);
    const hasOpeningHours = openingHours !== '';
    let country = '';
    try {
      country = splitLocale(this.locale).country;
    }
    catch (err) {
      // throw the error away
    }
    const dealerAddress = country === 'JP'
      ? `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`
      : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;
    const customDatalayerProperties = {
      componentSearch: {
        searchTerm: dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: name,
        companyId: ppnDealer.porschePartnerNo
      }
    };
    return (hAsync(Host, null, hasName && isDesktop(this.breakpoint) ? this.renderHeading(name) : null, hasAddress ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'address'), analyticsId: "mainmenu.finddealer.map", text: dealerAddress, iconLeft: "pin", "data-test-id": "dealer-address", link: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${address.street},${ppnDealer.address.postalCode},${address.city}`)}`, target: "_blank", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'openingHours'), analyticsId: "mainmenu.finddealer.openinghours", text: openingHours, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-opening-hours", iconLeft: "clock" })) : null, hasPhoneNumber ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'number'), analyticsId: "mainmenu.finddealer.phone", text: ppnDealer.contactDetails.phoneNumber, iconLeft: "phone", "data-test-id": "dealer-phonenumber", link: `tel:${ppnDealer.contactDetails.phoneNumber}`, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, hasEmail ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'email'), analyticsId: "mainmenu.finddealer.email", text: ppnDealer.contactDetails.emailAddress, iconLeft: "email", "data-test-id": "dealer-email", link: `mailto:${ppnDealer.contactDetails.emailAddress}`, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, hasHomepage ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'homepage'), analyticsId: "mainmenu.finddealer.website", text: ppnDealer.contactDetails.homepage.replace('https://', ''), iconLeft: "globe", "data-test-id": "dealer-homepage", link: sanitizeDealerHomepage(ppnDealer.contactDetails.homepage), target: "_blank", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, finder && isString(country) ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, finder.id), analyticsId: finder.id, text: finder.text, "data-test-id": "dealer-finder-cars", link: addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId }), iconLeft: "car", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, bookService ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, bookService.text), analyticsId: bookService.id, text: bookService.text, link: addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo }), datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-service", iconLeft: 'wrench' })) : null, hasTestdrive ? (hAsync(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, testDrive.text), analyticsId: testDrive.id, text: testDrive.text, link: testDrive.link, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-testdrive", iconLeft: 'steering-wheel' })) : null));
  }
  get el() { return getElement(this); }
  static get style() { return dealerDetailsDrawerCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-dealer-details-drawer",
    "$members$": {
      "dealerId": [1, "dealer-id"],
      "locale": [1],
      "breakpoint": [2],
      "errorMessage": [32],
      "showSkeleton": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}
function DealerDetailCard(props) {
  return hAsync("phn-menu-item-card", Object.assign({ tabIndex: 0, class: `${props.showSkeleton ? 'skeleton' : ''}` }, props));
}

var __rest$2 = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
async function getAllPPNDealersForMarket(env, dealerApiUrl, country) {
  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });
}
async function getPPNDealers(env, dealerApiUrl, coordinates, country, options = {}) {
  const { radius } = options;
  let response;
  let ppnDealerSearchResults;
  try {
    const headers = new Headers();
    headers.set('Accept', '*/*');
    /* istanbul ignore next */
    if (env === Environments.LOCAL) {
      headers.set('Authorization', 'Basic ' + windowService.btoa(`${'undefined'}:${'undefined'}`));
    }
    const requestParams = {
      coordinates: `${coordinates.latitude},${coordinates.longitude}`,
      radius
    };
    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {
      method: 'GET',
      headers
    });
  }
  catch (err) {
    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);
  }
  if (response.status === 400) {
    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);
  }
  if (response.status === 404) {
    throw new NaviError('dealerService.getPPNDealers failed with invalid country code and therefore responded with no results', NaviErrorTypes.NO_RESULTS);
  }
  if (response.status !== 200) {
    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);
  }
  try {
    ppnDealerSearchResults = await response.json();
  }
  catch (err) {
    throw new NaviError('dealerService.getPPNDealers could not parse response into json format', NaviErrorTypes.GENERAL);
  }
  return ppnDealerSearchResults.map((_a) => {
    var { dealer } = _a, rest = __rest$2(_a, ["dealer"]);
    return (Object.assign({ ppnDealer: dealer }, rest));
  });
}
async function getPPNDealer(env, dealerApiUrl, id, coordinates, country) {
  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer
  let ppnDealer;
  try {
    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);
    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);
  }
  catch (err) {
    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);
  }
  if (ppnDealer === undefined) {
    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);
  }
  return ppnDealer;
}
const dealersByRegionMap = new Map();
async function getPPNDealerByRegion(id, region) {
  const dealersOfRegion = await getPPNDealersByRegion(region);
  const dealerResult = dealersOfRegion.regions
    .flatMap(({ cities }) => cities.flatMap(({ dealers }) => Object.values(dealers).reduce((dealerList, dealer) => [...dealerList, dealer], [])))
    .find(({ ppnDealer }) => ppnDealer.id === id);
  if (dealerResult === undefined) {
    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);
  }
  return dealerResult;
}
async function getPPNDealersByRegion(region) {
  const { env } = navStateStore.state;
  const headers = new Headers();
  let dealersByRegion;
  if (dealersByRegionMap.has(region)) {
    dealersByRegion = dealersByRegionMap.get(region);
  }
  else {
    const { BFF_ENDPOINT } = getConfig(env);
    headers.set('Accept', '*/*');
    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {
      method: 'GET',
      headers
    });
    dealersByRegion = await response.json();
    dealersByRegionMap.set(region, dealersByRegion);
  }
  if (dealersByRegion === undefined) {
    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);
  }
  return dealersByRegion;
}

function ErrorMessage({ errorMessage, onDismiss }) {
  return (hAsync("div", { class: "error-message animated" },
    hAsync("phn-p-inline-notification", { state: "error", description: errorMessage, onDismiss: onDismiss })));
}

const dealerSearchByNumberOfDealersCss = ".sc-phn-dealer-search-by-number-of-dealers-h{display:block}.sc-phn-dealer-search-by-number-of-dealers-h .spinner.sc-phn-dealer-search-by-number-of-dealers{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}";

class DealerSearchByNumberOfDealers {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.removeSkeletonOnDealerSearchForm = createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.isLoading = false;
    this.formErrorMessage = null;
    this.locale = undefined;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { dealer } = navContentStore.state;
      if (dealer.numberOfDealers <= 5) {
        this.fetchAllDealersForMarket();
      }
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  async fetchAllDealersForMarket() {
    const { error: errorContent } = navContentStore.state;
    try {
      this.isLoading = true;
      const { country } = splitLocale(this.locale);
      const { env } = navStateStore.state;
      const ppnDealerSearchResults = await getAllPPNDealersForMarket(env, getConfig(env).DEALER_API_URL_ALL_DEALERS, country);
      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), dealerSearchResultsStore.state.ppnDealers);
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = getErrorMessage(errorContent, err);
    }
    finally {
      this.isLoading = false;
      this.emitResultsLoadEvent();
    }
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  emitResultsLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  reset() {
    this.formErrorMessage = null;
    this.isLoading = false;
    dealerSearchResultsStore.state.results = null;
  }
  render() {
    if (this.isLoading) {
      return (hAsync("div", { class: "spinner" }, hAsync("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } })));
    }
    if (isString(this.formErrorMessage))
      return hAsync(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() });
  }
  get el() { return getElement(this); }
  static get style() { return dealerSearchByNumberOfDealersCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-dealer-search-by-number-of-dealers",
    "$members$": {
      "locale": [1],
      "isLoading": [32],
      "formErrorMessage": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const dealerSearchFormCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-dealer-search-form{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-search-form{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-search-form{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-search-form{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-search-form{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-search-form{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-search-form-h{display:block}.skeleton.sc-phn-dealer-search-form-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.sc-phn-dealer-search-form-h .skeleton-headline.sc-phn-dealer-search-form{width:auto;height:3.125rem;background:#d8d8db;margin-bottom:1.75rem;border-radius:4px}.sc-phn-dealer-search-form-h phn-headline.sc-phn-dealer-search-form{margin-bottom:2.25rem}";

class DealerSearchForm {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dealer = undefined;
    this.locale = undefined;
    this.showHeadline = true;
    this.breakpoint = undefined;
    this.showOverlay = false;
    this.formErrorMessage = null;
    this.showSkeleton = true;
    this.animateResults = false;
  }
  toggleOverlay(e) {
    this.showOverlay = e.detail;
  }
  loadedAutoCompleteListener(_event) {
    this.showSkeleton = false;
  }
  getDealerFormStrategy() {
    const { dealer } = navContentStore.state;
    if (dealer.numberOfDealers <= 5) {
      return 'byNumberOfDealers';
    }
    if (showDealerSearchDropdown(splitLocale(this.locale).country))
      return 'dropdown';
    return 'geolocation';
  }
  formComponent() {
    const dealerSearchFormStrategies = {
      geolocation: () => hAsync("phn-dealer-search-form-geolocation", { locale: this.locale }),
      dropdown: () => hAsync("phn-dealer-search-form-dropdown", { locale: this.locale, breakpoint: this.breakpoint }),
      byNumberOfDealers: () => hAsync("phn-dealer-search-by-number-of-dealers", { locale: this.locale })
    };
    const formStrategy = this.getDealerFormStrategy();
    return dealerSearchFormStrategies[formStrategy]();
  }
  render() {
    return (hAsync(Host, { class: this.showSkeleton ? 'skeleton' : '' }, this.formComponent(), hAsync("phn-dealer-search-results", { locale: this.locale, breakpoint: this.breakpoint, showOverlay: this.showOverlay })));
  }
  static get assetsDirs() { return ["./assets"]; }
  get el() { return getElement(this); }
  static get style() { return dealerSearchFormCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-dealer-search-form",
    "$members$": {
      "dealer": [16],
      "locale": [1],
      "showHeadline": [4, "show-headline"],
      "breakpoint": [2],
      "showOverlay": [32],
      "formErrorMessage": [32],
      "showSkeleton": [32],
      "animateResults": [32]
    },
    "$listeners$": [[0, "predictionsToggle", "toggleOverlay"], [0, "removeSkeletonOnDealerSearchForm", "loadedAutoCompleteListener"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const dealerSearchFormDropdownCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-search-form-dropdown{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-search-form-dropdown{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-search-form-dropdown{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-search-form-dropdown{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-search-form-dropdown-h{display:block}.sc-phn-dealer-search-form-dropdown-h .spinner.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}.sc-phn-dealer-search-form-dropdown-h .city-select-form-field.sc-phn-dealer-search-form-dropdown{padding-top:1.5rem}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;border:2px solid rgb(107, 109, 112);border-radius:5px;-webkit-transition:background-color 0.24s ease;transition:background-color 0.24s ease;margin:0;min-height:3.375rem}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown phn-p-text.sc-phn-dealer-search-form-dropdown{padding-left:19px}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown phn-p-icon.sc-phn-dealer-search-form-dropdown{margin-right:1rem;padding-top:-8px;outline:0}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown div.text-limit.sc-phn-dealer-search-form-dropdown{width:80%}";

class DealerSearchFormDropdown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dealerSearchFormEvent = createEvent(this, "dealerSearchFormEvent", 7);
    this.clearSearchEvent = createEvent(this, "clearSearchEvent", 7);
    this.removeSkeletonOnDealerSearchForm = createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.locale = '';
    this.breakpoint = undefined;
    this.isLoading = false;
    this.errorMessage = null;
    this.dealersOfRegion = { regions: [] };
    this.cities = [];
    this.selectedProvince = '';
    this.selectedCity = '';
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
    this.getDealersByRegion();
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  loadedAutoCompleteListener(_event) {
    this.showSkeleton = false;
  }
  async getDealersByRegion() {
    const { error: errorContent } = navContentStore.state;
    const { country } = splitLocale(this.locale);
    try {
      this.isLoading = true;
      this.dealersOfRegion = await getPPNDealersByRegion(country);
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.errorMessage = getErrorMessage(errorContent, err);
    }
    finally {
      this.isLoading = false;
      this.dealerSearchFormEvent.emit();
      this.emitResultsLoadEvent();
    }
  }
  onCitySelect(event) {
    var _a;
    /* istanbul ignore if */
    if (event.target === null) {
      return;
    }
    const selectedCity = event.target.value;
    this.selectedCity = selectedCity;
    dealerSearchResultsStore.state.ppnDealers =
      ((_a = this.cities.find((city) => {
        return [city.cityName, city.cityNameLocalized].includes(selectedCity);
      })) === null || _a === void 0 ? void 0 : _a.dealers) || {};
    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);
    dealerSearchResultsStore.state.searchTerm = `${this.selectedProvince}, ${this.selectedCity}`;
  }
  onProvinceSelect(event) {
    /* istanbul ignore if */
    if (event.target === null) {
      return;
    }
    const selectedProvince = event.target.value;
    this.cities = this.getCitiesByGivenRegionName(selectedProvince);
    this.selectedProvince = selectedProvince;
  }
  getCitiesByGivenRegionName(province) {
    const regions = this.dealersOfRegion.regions;
    const selectedRegion = regions.find(({ regionName, regionNameLocalized }) => [regionName, regionNameLocalized].includes(province));
    return (selectedRegion === null || selectedRegion === void 0 ? void 0 : selectedRegion.cities) || [];
  }
  emitPageLoadEvent() {
    const { results, searchTerm } = dealerSearchResultsStore.state;
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,
        numberOfResults: (results === null || results === void 0 ? void 0 : results.length) || 0
      }
    });
  }
  emitResultsLoadEvent() {
    const { results, searchTerm } = dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.state;
    const numberOfResults = (results === null || results === void 0 ? void 0 : results.length) || 0;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: searchTerm,
        numberOfResults: numberOfResults
      }
    });
  }
  reset() {
    this.errorMessage = null;
    this.isLoading = false;
    this.selectedProvince = '';
    this.selectedCity = '';
    dealerSearchResultsStore.state.results = null;
    dealerSearchResultsStore.state.savedDealerCookie = null;
    this.clearSearchEvent.emit();
  }
  render() {
    const { results } = dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.state;
    const searchText = dealerSearchResultsStore.state.searchTerm;
    if (this.isLoading) {
      return (hAsync("div", { class: "spinner" }, hAsync("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } })));
    }
    return (hAsync(Host, null, results && results.length > 0 ? (hAsync("form", { class: "form-container", onSubmit: (event) => {
        event.preventDefault();
      } }, hAsync("div", null, hAsync("div", { class: "phn-flex-row phn-align-center phn-justify-between title-container" }, hAsync("div", { class: "text-limit" }, hAsync("phn-p-text", { weight: "regular", size: "small", tag: "div", ellipsis: "true", color: "contrast-medium", "data-test-id": "dealer-search-form-input" }, searchText)), hAsync("phn-p-icon", { name: "close", class: "close-icon", style: { display: this.showSkeleton ? 'none' : '', cursor: 'pointer' }, onClick: (event) => {
        event.preventDefault();
        this.reset();
      } }))))) : (hAsync(Fragment, null, hAsync("phn-p-select-wrapper", { filter: true, label: dealerContent.search.dropdown.province, required: true, style: { display: this.showSkeleton ? 'none' : '' } }, hAsync("select", { name: "dealers-province", onChange: (event) => this.onProvinceSelect(event), style: { display: this.showSkeleton ? 'none' : '' } }, hAsync("option", { hidden: true, selected: true }, dealerContent.search.dropdown.selectAProvince), this.dealersOfRegion.regions.map((region) => {
      const province = splitLocale(this.locale).language === 'en' || region.regionNameLocalized === null
        ? region.regionName
        : region.regionNameLocalized;
      return hAsync("option", { value: province }, province);
    }))), hAsync("phn-p-select-wrapper", { style: { display: this.showSkeleton ? 'none' : '' }, class: "city-select-form-field", filter: "true", label: dealerContent.search.dropdown.city, required: true }, hAsync("select", { disabled: !isString(this.selectedProvince), style: { display: this.showSkeleton ? 'none' : '' }, name: "dealers-cities", onChange: (event) => {
        this.onCitySelect(event);
      } }, hAsync("option", { hidden: true }, dealerContent.search.dropdown.selectACity), this.cities.map((city) => (hAsync("option", null, splitLocale(this.locale).language === 'en' || city.cityNameLocalized === null
      ? city.cityName
      : city.cityNameLocalized))))), isString(this.errorMessage) ? (hAsync(ErrorMessage, { errorMessage: this.errorMessage, onDismiss: () => this.reset() })) : null))));
  }
  get el() { return getElement(this); }
  static get style() { return dealerSearchFormDropdownCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-dealer-search-form-dropdown",
    "$members$": {
      "locale": [1],
      "breakpoint": [2],
      "isLoading": [32],
      "errorMessage": [32],
      "dealersOfRegion": [32],
      "cities": [32],
      "selectedProvince": [32],
      "selectedCity": [32],
      "showSkeleton": [32]
    },
    "$listeners$": [[0, "removeSkeletonOnDealerSearchForm", "loadedAutoCompleteListener"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

/* istanbul ignore file */
class MapsService {
  constructor() {
    this.autocompleteService = null;
    this.placesService = null;
    this.geocoderService = null;
    this.getLocation = null;
  }
  async init(apiKey) {
    try {
      const google = await windowService.fetchGoogleMapsApi(apiKey);
      this.autocompleteService = new google.maps.places.AutocompleteService();
      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(windowService.createDiv()));
      this.geocoderService = new google.maps.Geocoder();
      this.getLocation = (latLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);
    }
    catch (err) {
      throw new NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, NaviErrorTypes.GENERAL);
    }
  }
  async getPredictions(input, locale) {
    var _a;
    if (input.length === 0) {
      return [];
    }
    //ToDo: Check what todo if country is no valid iso-code
    const predictions = await new Promise((resolve, reject) => {
      if (this.autocompleteService === null) {
        reject(new NaviError('autocompleteService is not initialised', NaviErrorTypes.GENERAL));
        return;
      }
      this.autocompleteService.getPlacePredictions({
        input,
        componentRestrictions: { country: getRegionSpecificCountry(splitLocale(locale).country) }
      }, (predictions, status) => status === 'OK'
        ? resolve(predictions)
        : reject(new NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))));
    });
    return ((_a = predictions === null || predictions === void 0 ? void 0 : predictions.filter(({ place_id, description }) => isString(place_id) && isString(description)).map(({ place_id: id, description: text }) => ({ id, text }))) !== null && _a !== void 0 ? _a : []);
  }
  async getPlaceCoordinates(placeId) {
    var _a, _b, _c, _d;
    const response = await new Promise((resolve, reject) => {
      if (this.placesService === null) {
        reject(new NaviError('placesService is not initialised', NaviErrorTypes.GENERAL));
        return;
      }
      this.placesService.getDetails({
        placeId
      }, (response, status) => status === 'OK'
        ? resolve(response)
        : reject(new NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status))));
    });
    const latitude = (_b = (_a = response === null || response === void 0 ? void 0 : response.geometry) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.lat();
    const longitude = (_d = (_c = response === null || response === void 0 ? void 0 : response.geometry) === null || _c === void 0 ? void 0 : _c.location) === null || _d === void 0 ? void 0 : _d.lng();
    if (typeof latitude !== 'number' || typeof longitude !== 'number') {
      throw new NaviError(`placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`, NaviErrorTypes.NO_RESULTS);
    }
    return { latitude, longitude };
  }
  async getFormattedAddressFromCoordinates(latLong) {
    if (this.getLocation === null) {
      throw new NaviError('getLocation is not initialised', NaviErrorTypes.GENERAL);
    }
    const location = this.getLocation(latLong);
    const response = await new Promise((resolve, reject) => {
      if (this.geocoderService === null) {
        reject(new NaviError('geocoderService is not initialised', NaviErrorTypes.GENERAL));
        return;
      }
      this.geocoderService.geocode({ location }, (response, status) => {
        status === 'OK'
          ? resolve(response)
          : reject(new NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));
      });
    });
    if (response === null || response.length === 0) {
      throw new NaviError('geocoderService.geocode did not find the location based on coordinates.', NaviErrorTypes.NO_RESULTS);
    }
    return response[0].formatted_address;
  }
}
function getErrorType(status) {
  switch (status) {
    case 'INVALID_REQUEST': {
      return NaviErrorTypes.INVALID_INPUT;
    }
    case 'NOT_FOUND':
    case 'ZERO_RESULTS': {
      return NaviErrorTypes.NO_RESULTS;
    }
    case 'OVER_QUERY_LIMIT':
    case 'UNKNOWN_ERROR': {
      return NaviErrorTypes.RETRY;
    }
    case 'ERROR':
    case 'REQUEST_DENIED':
    default: {
      return NaviErrorTypes.GENERAL;
    }
  }
}
var mapsService = new MapsService();

const dealerSearchFormGeolocationCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-search-form-geolocation{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-search-form-geolocation{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-search-form-geolocation{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-search-form-geolocation{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-search-form-geolocation-h{display:block}.skeleton.sc-phn-dealer-search-form-geolocation-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-autocomplete-search-field.sc-phn-dealer-search-form-geolocation{width:auto;height:3.125rem;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-or-text.sc-phn-dealer-search-form-geolocation{width:auto;height:1.25rem;background:#d8d8db;border-radius:4px 4px 0 0}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-geolocation-button.sc-phn-dealer-search-form-geolocation{width:auto;height:3.125rem;background:#d8d8db;border-radius:0 0 4px 4px}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation{position:relative;width:100%;margin-top:1.25rem}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation .geolocation.sc-phn-dealer-search-form-geolocation{width:100%;padding-bottom:24px}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation phn-p-text.sc-phn-dealer-search-form-geolocation{margin-bottom:0.25rem;color:#010205}.sc-phn-dealer-search-form-geolocation-h .animate-out.sc-phn-dealer-search-form-geolocation{-webkit-animation:fadeOutToTop 0.75s ease-in-out 0s;animation:fadeOutToTop 0.75s ease-in-out 0s}.sc-phn-dealer-search-form-geolocation-h .input-container.sc-phn-dealer-search-form-geolocation{width:100%}.sc-phn-dealer-search-form-geolocation-h .spinner.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}";

class DealerSearchFormGeolocation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dealerSearchFormEvent = createEvent(this, "dealerSearchFormEvent", 7);
    this.clearSearchEvent = createEvent(this, "clearSearchEvent", 7);
    this.removeSkeletonOnDealerSearchForm = createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.debounceTimeout = new Timeout(100);
    this.locale = undefined;
    this.predictions = [];
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.isLoading = false;
    this.showGeolocationButton = dealerSearchResultsStore.state.results === null;
    this.animateResults = false;
    this.searchTerm = dealerSearchResultsStore.state.searchTerm;
    this.showSkeleton = true;
  }
  loadedAutoCompleteListener() {
    this.showSkeleton = false;
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  disconnectedCallback() {
    dealerSearchResultsStore.state.searchTerm = this.searchTerm;
    this.debounceTimeout.cancel();
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { error: errorContent } = navContentStore.state;
      mapsService.init('AIzaSyDCVTh9wCeBxQEIxiN28Zb2ZWCf8wbiw0E').catch((err) => {
        logger.error('INIT_MAPS_SERVICE', err);
        this.formErrorMessage = getErrorMessage(errorContent, err);
        this.errorMessage = null;
      });
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm, true),
        displayElementName: dealer.text
      }
    });
  }
  emitResultsLoadEvent(searchTerm) {
    const { results } = dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.state;
    const componentSearchSearchTerm = isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM;
    const numberOfResults = (results === null || results === void 0 ? void 0 : results.length) || 0;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: componentSearchSearchTerm,
        numberOfResults: numberOfResults
      }
    });
  }
  async fetchDealers(getSearchTerms) {
    const { error: errorContent } = navContentStore.state;
    try {
      this.reset();
      this.isLoading = true;
      const [searchTerm, placeCoordinates] = await getSearchTerms();
      const { env } = navStateStore.state;
      const ppnDealerSearchResults = await getPPNDealers(env, getConfig(env).DEALER_API_URL, placeCoordinates, getRegionSpecificCountry(splitLocale(this.locale).country));
      dealerSearchResultsStore.state.searchTerm = searchTerm;
      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), dealerSearchResultsStore.state.ppnDealers);
      this.showGeolocationButton = false;
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = getErrorMessage(errorContent, err);
      this.errorMessage = null;
    }
    finally {
      this.isLoading = false;
      this.animateResults = true;
    }
  }
  async onSubmit(prediction) {
    const { dealer: dealerContent, error: errorContent } = navContentStore.state;
    if (!isString(this.searchTerm)) {
      this.errorMessage = errorContent.noInput;
      this.formErrorMessage = '';
      return;
    }
    await this.fetchDealers(async () => {
      if (prediction === null) {
        throw new NaviError('Dealer search form submitted without prediction', NaviErrorTypes.INVALID_INPUT);
      }
      this.searchTerm = prediction.text;
      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_CLICK, {
        componentClick: {
          clickElementId: prediction.id,
          clickElementName: prediction.text,
          clickElementType: ClickElementTypes.Button,
          targetElement: DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: prediction.text
        }
      });
      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);
      return [prediction.text, placeCoordinates];
    });
    this.emitResultsLoadEvent(this.searchTerm);
  }
  async getCurrentLocation() {
    const { dealer: dealerContent } = navContentStore.state;
    await this.fetchDealers(async () => {
      const placeCoordinates = await windowService.getNavigatorLatLong();
      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);
      this.searchTerm = '';
      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_GEOLOCATION_CLICK, {
        componentClick: {
          clickElementId: dealerContent.search.geolocation.id,
          clickElementName: dealerContent.search.geolocation.text,
          clickElementType: ClickElementTypes.Button,
          targetElement: DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM
        }
      });
      return [formattedAddress, placeCoordinates];
    });
    this.emitResultsLoadEvent(GEOLOCATION_BUTTON_SEARCH_TERM);
  }
  async onDealerSearchEntry(searchTerm) {
    const { error } = navContentStore.state;
    try {
      this.searchTerm = searchTerm;
      this.errorMessage = null;
      this.formErrorMessage = null;
      this.showGeolocationButton = dealerSearchResultsStore.state.results === null;
      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);
    }
    catch (err) {
      logger.error('GET_PREDICTIONS', err);
      this.errorMessage = getErrorMessage(error, err);
      this.predictions = [];
    }
  }
  reset() {
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.animateResults = false;
    this.showGeolocationButton = true;
    this.isLoading = false;
    dealerSearchResultsStore.state.results = null;
  }
  render() {
    const { dealer: dealerContent } = navContentStore.state;
    const { results } = dealerSearchResultsStore.state;
    return (hAsync(Host, { class: this.showSkeleton ? 'skeleton' : '' }, hAsync("div", { class: "input-container" }, this.showSkeleton ? hAsync("div", { class: "skeleton-autocomplete-search-field" }) : null, hAsync("phn-autocomplete-search-field", { placeholder: dealerContent.search.form.inputPlaceholder, initialValue: dealerSearchResultsStore.state.searchTerm, predictions: this.predictions, onSearchInput: (e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail)), onClearSearch: () => {
        this.predictions = [];
        dealerSearchResultsStore.state.searchTerm = '';
        this.searchTerm = '';
        this.reset();
        this.clearSearchEvent.emit();
        this.showGeolocationButton = true;
      }, onSubmitSearch: (e) => this.onSubmit(e.detail), errorMessage: getString(this.errorMessage), style: { display: this.showSkeleton ? 'none' : '' } })), this.isLoading && (hAsync("div", { class: "spinner" }, hAsync("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } }))), this.showGeolocationButton && results === null ? (hAsync(Fragment, null, hAsync("div", { class: `or-container ${this.isLoading ? 'animate-out' : ''}`, onAnimationEnd: () => {
        this.showGeolocationButton = false;
      } }, this.showSkeleton ? hAsync("div", { class: "skeleton-or-text" }) : null, hAsync("phn-p-text", { color: "inherit", size: "inherit", tag: "div", "data-test-id": "dealer-search-or-label", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.or), this.showSkeleton ? hAsync("div", { class: "skeleton-geolocation-button" }) : null, hAsync("phn-p-button", { class: 'geolocation', onClick: () => this.getCurrentLocation(), variant: "tertiary", icon: "locate", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.geolocation.text)))) : null, isString(this.formErrorMessage) ? (hAsync(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() })) : null));
  }
  get el() { return getElement(this); }
  static get style() { return dealerSearchFormGeolocationCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-dealer-search-form-geolocation",
    "$members$": {
      "locale": [1],
      "predictions": [32],
      "errorMessage": [32],
      "formErrorMessage": [32],
      "isLoading": [32],
      "showGeolocationButton": [32],
      "animateResults": [32],
      "searchTerm": [32],
      "showSkeleton": [32]
    },
    "$listeners$": [[0, "autoCompleteLoaded", "loadedAutoCompleteListener"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function DealerSearchFormItemCard({ dealer, showOverlay, eventEmitter, locale }) {
  const { ppnDealer, distance } = dealer;
  const language = splitLocale(locale).language;
  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
  // postalCode is currently not available in addressLocalized
  const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
  const name = language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
  const numberOfDealers = navContentStore.state.dealer.numberOfDealers;
  let country = '';
  try {
    country = splitLocale(locale).country;
  }
  catch (err) {
    // throw the error away
  }
  const onDealerCardClick = (ppnDealer) => {
    const dealerDetailsRoutingKey = getDealerDetailsRoutingKey(ppnDealer.id);
    eventEmitter.emit([dealerDetailsRoutingKey]);
    const { dealer: dealerContent } = navContentStore.state;
    const { results, searchTerm } = dealerSearchResultsStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULT_CLICK, {
      componentClick: {
        clickElementId: ppnDealer.id,
        clickElementName: ppnDealer.name,
        clickElementType: ClickElementTypes.Button,
        targetElement: `level2_${dealerDetailsRoutingKey}`
      },
      componentDisplay: {
        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
        displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: searchTerm,
        numberOfResults: results === null || results === void 0 ? void 0 : results.length
      },
      partner: {
        companyName: ppnDealer.name,
        companyId: ppnDealer.porschePartnerNo
      }
    });
  };
  return (hAsync("phn-menu-item-card", { tabIndex: 0, text: name, class: `animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`, onClick: () => onDealerCardClick(ppnDealer), analyticsId: ppnDealer.id },
    hAsync("div", { class: "phn-flex-row phn-justify-between phn-align-center" },
      country === 'JP' ? (hAsync("phn-p-text", { color: "primary", size: "small" }, `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`)) : (hAsync("phn-p-text", { color: "primary", size: "small" },
        `${address.street}, `,
        hAsync("span", { class: "city" },
          ppnDealer.address.postalCode,
          " ",
          address.city))),
      distance && distance.value >= 1 && numberOfDealers > 5 ? (hAsync("phn-p-tag", { color: "notification-info-soft" }, `${Math.round(distance.value)}${distance.unit.toLowerCase()}`)) : null)));
}

function DealerSearchMapLink() {
  const { dealer: dealerContent } = navContentStore.state;
  function emitDealersMapEvent() {
    const map = dealerContent.search.map;
    const { results, searchTerm } = dealerSearchResultsStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_MAP_CLICK, {
      componentClick: {
        clickElementId: map.id,
        clickElementName: map.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: map.link
      },
      componentDisplay: {
        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
        displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,
        numberOfResults: results === null || results === void 0 ? void 0 : results.length
      }
    });
  }
  return (hAsync("a", { class: 'animated', href: dealerContent.search.map.link, "aria-label": dealerContent.search.map.description },
    hAsync("phn-p-button", { onClick: emitDealersMapEvent, variant: "tertiary" },
      dealerContent.search.map.text,
      ' ')));
}

const dealerSearchResultsCss = ".sc-phn-dealer-search-results-h{display:block}.sc-phn-dealer-search-results-h phn-dealer-details-drawer.sc-phn-dealer-search-results{margin-top:1.25rem}.sc-phn-dealer-search-results-h phn-menu-item-card.sc-phn-dealer-search-results>div.sc-phn-dealer-search-results{margin-top:14px}.sc-phn-dealer-search-results-h .dealer-card-overlay.sc-phn-dealer-search-results{opacity:0.3}.sc-phn-dealer-search-results-h .dealer-card.sc-phn-dealer-search-results phn-p-tag.sc-phn-dealer-search-results{margin-left:1rem}.sc-phn-dealer-search-results-h .error-message.sc-phn-dealer-search-results{position:relative;margin-top:2rem}.sc-phn-dealer-search-results-h .animated.sc-phn-dealer-search-results{-webkit-animation:fadeInFromBottom 0.75s ease-in-out 0s;animation:fadeInFromBottom 0.75s ease-in-out 0s}.sc-phn-dealer-search-results-h a.sc-phn-dealer-search-results{display:inline-block;position:relative;width:100%;-webkit-text-decoration-line:none;text-decoration-line:none;margin-top:2.25rem}.sc-phn-dealer-search-results-h a.sc-phn-dealer-search-results phn-p-button.sc-phn-dealer-search-results{width:100%}";

class DealerSearchResults {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.mobileMenuItemClick = createEvent(this, "mobileMenuItemClick", 6);
    this.showOverlay = false;
    this.locale = undefined;
    this.breakpoint = undefined;
  }
  render() {
    const { results, ppnDealers } = dealerSearchResultsStore.state;
    const { error: errorContent } = navContentStore.state;
    if (results === null)
      return null;
    if ((results === null || results === void 0 ? void 0 : results.length) === 0)
      return (hAsync(Fragment, null, hAsync(ErrorMessage, { errorMessage: errorContent.noResults, onDismiss: () => null })));
    const dealerId = results[0];
    if (results.length === 1 && ppnDealers[dealerId]) {
      dealerSearchResultsStore.state.savedDealerCookie = {
        id: dealerId,
        latitude: ppnDealers[dealerId].ppnDealer.coordinates.latitude,
        longitude: ppnDealers[dealerId].ppnDealer.coordinates.longitude
      };
      return hAsync("phn-dealer-details-drawer", { breakpoint: this.breakpoint, dealerId: dealerId, locale: this.locale });
    }
    return (hAsync(Host, null, hAsync(Fragment, null, results.map((dealerId) => {
      const dealer = ppnDealers[dealerId];
      if (dealer === undefined || dealer.ppnDealer === undefined) {
        return null;
      }
      return (hAsync(DealerSearchFormItemCard, { dealer: dealer, eventEmitter: this.mobileMenuItemClick, showOverlay: this.showOverlay, locale: this.locale }));
    }), hAsync(DealerSearchMapLink, null))));
  }
  static get style() { return dealerSearchResultsCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-dealer-search-results",
    "$members$": {
      "showOverlay": [4, "show-overlay"],
      "locale": [1],
      "breakpoint": [2]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const resetToFarRight = (el) => {
  el.style.left = '';
  el.style.right = '150%';
};
const mainDrawerHTMLSelector = '#main-drawer > div:first-child';
const registerOpenDoubleDrawerSequence = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-double-drawer',
        animation: {
          name: 'slideInFromLeft',
          duration: AnimationDurations.drawerOpen,
          from: -1000
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeInBackdrop',
          duration: AnimationDurations.backdrop,
          to: 0.6
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_DOUBLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierStart' }));
};
const registerCloseDoubleDrawerSequence = ({ onBackdropFadeOutEnd, onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        elementSelector: 'phn-double-drawer',
        onStart: onAnimationStarts,
        animation: {
          name: 'slideOutToLeft',
          duration: AnimationDurations.drawer,
          to: -1000
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeOutBackdrop',
          duration: AnimationDurations.backdrop,
          from: 0.6
        },
        onEnd: () => {
          onBackdropFadeOutEnd();
          onAnimationEnds();
        }
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_DOUBLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierEnd' }));
};
const registerTransitionSequence = ({ onGrowHighlightEnd, onSlideMainDrawerOutEnd }, direction = 'normal') => {
  animationManager.register(`transitionSameLevelDoubleDrawer${direction === 'reverse' ? 'Reverse' : ''}`, makeSequence([
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'shrinkElement', duration: AnimationDurations.highlight }
      }
    ],
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: direction === 'reverse' ? 'slideOutToRightRelative' : 'slideOutToLeftRelative',
          to: -150,
          cleanUpAfterAnimation: resetToFarRight,
          duration: AnimationDurations.drawerContent
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: direction === 'reverse' ? 'slideInFromLeftRelative' : 'slideInFromRightRelative',
          from: -150,
          duration: AnimationDurations.drawerContent
        }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'growElement', duration: AnimationDurations.highlight },
        onEnd: onGrowHighlightEnd
      }
    ]
  ], { timingFunction: 'easeInOutQuad' }));
};
const registerForwardToNextMenuSequence = ({ onSlideMainDrawerOutEnd, onGrowHighlightEnd }) => {
  animationManager.register('transitionNextLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'shrinkElement', duration: AnimationDurations.highlight }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          name: 'slideOutToLeftRelative',
          to: -150,
          cleanUpAfterAnimation: resetToFarRight,
          duration: AnimationDurations.drawerContent
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: 'slideOutToLeftRelative',
          to: -150,
          cleanUpAfterAnimation: resetToFarRight,
          duration: AnimationDurations.drawerContent
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          name: 'slideInFromRightRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: 'slideInFromRightRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'growElement', duration: AnimationDurations.highlight },
        onEnd: onGrowHighlightEnd
      }
    ]
  ], { timingFunction: 'easeInOutQuad' }));
};
const registerBackToPreviousMenuSequence = ({ onGrowHighlightEnd, onSlideMainDrawerOutEnd }) => {
  animationManager.register('transitionPreviousLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'shrinkElement', duration: AnimationDurations.highlight }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: { name: 'slideOutToRightRelative', to: -150, duration: AnimationDurations.drawerContent }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: { name: 'slideOutToRightRelative', to: -150, duration: AnimationDurations.drawerContent },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          name: 'slideInFromLeftRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: 'slideInFromLeftRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'growElement', duration: AnimationDurations.highlight },
        onEnd: onGrowHighlightEnd
      }
    ]
  ], { timingFunction: 'easeInOutQuad' }));
};
const isPlayingDoubleDrawerAnimation = () => {
  const doubleDrawerAnimationSequences = [
    AnimationSequences.OPEN_DOUBLE_DRAWER,
    AnimationSequences.CLOSE_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_NEXT_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_PREVIOUS_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER_REVERSE
  ];
  return doubleDrawerAnimationSequences.some((sequence) => {
    try {
      return animationManager.isPlaying(sequence);
    }
    catch (_a) {
      return false;
    }
  });
};

function getAllFocusableElements(element) {
  const htmlElements = [];
  element === null || element === void 0 ? void 0 : element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR).forEach((element) => {
    const htmlElement = getHTMLElement(element);
    if (htmlElement !== null) {
      htmlElements.push(htmlElement);
    }
  });
  return htmlElements;
}

const MainDrawerContent = ({ activeRoutingKey, locale, breakpoint, backButtonText, onClickBack, receivedContent }) => (hAsync("div", { class: "drawer-content" },
  hAsync("div", { class: "main-drawer-header" }, isString(backButtonText) ? (hAsync("phn-back-button", { class: "back-button", onClick: onClickBack, text: backButtonText, analyticsId: navContentStore.state.menu.id, activeRoutingKey: activeRoutingKey })) : null),
  hAsync("phn-router", { activeRoutingKey: activeRoutingKey, breakpoint: breakpoint, locale: locale, receivedContent: receivedContent })));

const SideDrawerContent = ({ activeRoutingKey, locale, backButtonText, onClickBack }) => {
  return (hAsync("div", { class: "drawer-content" },
    hAsync("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }),
    hAsync("div", { class: "side-drawer-header" }, isString(backButtonText) ? (hAsync("phn-back-button", { class: "back-button", onClick: onClickBack, text: backButtonText, analyticsId: navContentStore.state.menu.id, activeRoutingKey: activeRoutingKey })) : null),
    hAsync("phn-side-drawer", { activeRoutingKey: activeRoutingKey, locale: locale })));
};

const doubleDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-double-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-double-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-double-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-double-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-double-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-double-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-double-drawer-h{position:fixed;top:0;left:0;height:100vh;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;z-index:301}.sc-phn-double-drawer-h .close-button.sc-phn-double-drawer{position:absolute;right:-4.75rem;z-index:301;width:3rem;height:3rem;margin-top:1.75rem;cursor:pointer}.sc-phn-double-drawer-h .drawer.sc-phn-double-drawer{overflow-y:auto;overflow-x:hidden;position:relative;background-color:#fff;height:100vh}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{z-index:302;float:left;width:17.125rem;padding-left:1.75rem;padding-right:1.75rem}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:16.5rem;padding-left:2.25rem;padding-right:2.25rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:19.3125rem;padding-left:3rem;padding-right:3rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:27.375rem;padding-left:5.25rem;padding-right:5.25rem}}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer phn-side-drawer.sc-phn-double-drawer{padding-bottom:6rem}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;height:5.75rem;padding-top:2.625rem}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{height:6rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{height:8rem;padding-top:3.75rem}}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer phn-back-button.sc-phn-double-drawer{margin-left:-0.5rem;height:1.5rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{z-index:301;float:right;border-radius:0 4px 4px 0;background-color:#EEEFF2;-webkit-box-sizing:border-box;box-sizing:border-box;position:static;width:20.625rem;padding-left:1.75rem;padding-right:1.75rem}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:21rem;padding-left:2.25rem;padding-right:2.25rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:25.3125rem;padding-left:3rem;padding-right:3rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:37.875rem;padding-left:5.25rem;padding-right:5.25rem}}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer phn-router.sc-phn-double-drawer{padding-bottom:6rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;height:4.125rem;padding-top:2.5rem;margin-bottom:1.625rem}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{margin-bottom:1.875rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{height:5.25rem;margin-bottom:2.75rem;padding-top:2.5rem}}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer phn-back-button.sc-phn-double-drawer{margin-left:-0.5rem;height:1.5rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{height:10rem;background:-webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(#EEEFF2));background:linear-gradient(to bottom, rgba(255, 255, 255, 0), #EEEFF2);opacity:1;position:absolute;width:100%;bottom:0;margin-left:-1.5rem;pointer-events:none;width:20.625rem;margin-left:-1.75rem;border-radius:0 0 4px 0}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:21rem;margin-left:-2.25rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:25.3125rem;margin-left:-3rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:37.875rem;margin-left:-5.25rem}}";

class DoubleDrawer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.clickDrawerHeaderClose = createEvent(this, "clickDrawerHeaderClose", 7);
    this.clickDrawerHeaderBack = createEvent(this, "clickDrawerHeaderBack", 7);
    this.drawerClosed = createEvent(this, "drawerClosed", 7);
    this.drawerChanged = createEvent(this, "drawerChanged", 7);
    this.backdropClosed = createEvent(this, "backdropClosed", 7);
    this.phnDrawerStatus = createEvent(this, "phnDrawerStatus", 7);
    this.breakpoint = undefined;
    this.locale = undefined;
    this.initialUsingKeyboard = false;
    this.routingKeyHistory = [];
    this.routingKeyPointer = RoutingKeyPointers.LEVEL_ZERO;
    this.receivedContent = undefined;
    this.usingKeyboard = false;
    this.animatingRoutingKeyPointer = RoutingKeyPointers.LEVEL_ZERO;
    this.isAnimating = true;
    this.animatingRoutingKey = '';
  }
  watchRoutingKeyPointer(newPointer, oldPointer) {
    if (oldPointer < newPointer) {
      const topLevelRoutingKey = findTopLevelRoutingKey(this.routingKeyHistory[this.routingKeyPointer]);
      if (topLevelRoutingKey === RoutingKeys.DEALER_SEARCH) {
        animationManager.play('transitionSameLevelDoubleDrawer');
      }
      else {
        animationManager.play('transitionNextLevelDoubleDrawer');
      }
    }
  }
  watchRoutingKeyHistory(newHistory, oldHistory) {
    if (newHistory.length < oldHistory.length || this.animateIfSameLength(newHistory, oldHistory)) {
      animationManager.play('transitionSameLevelDoubleDrawer');
    }
  }
  onResizeWindow() {
    if (this.animatingRoutingKeyPointer !== this.routingKeyPointer) {
      this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
      this.animatingRoutingKeyPointer = this.routingKeyPointer;
    }
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    let activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    if (activeRoutingKey.startsWith(RoutingKeys.DEALER_SEARCH)) {
      activeRoutingKey = activeRoutingKey.split('/')[0];
    }
    const eventSourceElement = getHTMLElement(e.target);
    if (eventSourceElement === null) {
      return;
    }
    const focusableSideDrawerElements = getAllFocusableElements(this.el.querySelector('#side-drawer'));
    let focusableMainDrawerElements = getAllFocusableElements(this.el.querySelector('#main-drawer'));
    if (focusableSideDrawerElements.length === 0 || focusableMainDrawerElements.length === 0) {
      return;
    }
    const highlightedSideDrawerElementIndex = focusableSideDrawerElements.findIndex((el) => el.getAttribute('data-id') === activeRoutingKey);
    const highlightedSideDrawerElement = focusableSideDrawerElements[highlightedSideDrawerElementIndex];
    if (activeRoutingKey === RoutingKeys.DEALER_SEARCH) {
      focusableMainDrawerElements = focusableMainDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const lastSideDrawerElement = focusableSideDrawerElements[focusableSideDrawerElements.length - 1];
    const lastMainDrawerElement = focusableMainDrawerElements[focusableMainDrawerElements.length - 1];
    const closeButton = this.el.querySelector('.close-button');
    if (!e.shiftKey) {
      if (eventSourceElement === highlightedSideDrawerElement) {
        e.preventDefault();
        focusOnElement(focusableMainDrawerElements[0]);
        return;
      }
      if (eventSourceElement === lastSideDrawerElement) {
        e.preventDefault();
        if (closeButton !== null) {
          focusOnElement(closeButton);
        }
      }
      if (eventSourceElement === lastMainDrawerElement) {
        e.preventDefault();
        const nextSideDrawerElementIndex = highlightedSideDrawerElementIndex + 1 >= focusableSideDrawerElements.length
          ? 0
          : highlightedSideDrawerElementIndex + 1;
        const nextSideDrawerElement = getHTMLElement(focusableSideDrawerElements[nextSideDrawerElementIndex]);
        focusOnElement(nextSideDrawerElement);
      }
      if (eventSourceElement === closeButton) {
        e.preventDefault();
        focusOnElement(focusableSideDrawerElements[0]);
      }
    }
    else if (e.shiftKey) {
      if (eventSourceElement === focusableMainDrawerElements[0]) {
        e.preventDefault();
        if (highlightedSideDrawerElement !== null) {
          focusOnElement(highlightedSideDrawerElement);
        }
      }
      if (eventSourceElement === closeButton) {
        e.preventDefault();
        focusOnElement(lastSideDrawerElement);
      }
    }
  }
  handleMobileMenuItemClick(event) {
    if (animationManager.isPlaying('transitionNextLevelDoubleDrawer')) {
      event.stopPropagation();
    }
  }
  handleSideDrawerItemClick(event) {
    if (animationManager.isPlaying('transitionSameLevelDoubleDrawer')) {
      event.stopPropagation();
    }
  }
  focusOnInitialElement() {
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    let focusedRoutingKey = isNavigatingBackwards
      ? this.routingKeyHistory[this.routingKeyPointer + 1]
      : this.routingKeyHistory[this.routingKeyPointer];
    if (focusedRoutingKey.startsWith(RoutingKeys.DEALER_SEARCH)) {
      focusedRoutingKey = focusedRoutingKey.split('/')[0];
    }
    const autoFocusElement = getHTMLElement(this.el.querySelector('.autofocus'));
    if (autoFocusElement !== null) {
      focusOnElement(autoFocusElement);
      return;
    }
    if (this.usingKeyboard) {
      let focusableElement = null;
      if (isString(focusedRoutingKey)) {
        focusableElement = getHTMLElement(this.el.querySelector(`[data-id="${focusedRoutingKey}"]`));
      }
      if (focusableElement === null) {
        focusableElement = getHTMLElement(this.el.querySelector(`${FOCUSABLE_ELEMENTS_SELECTOR}`));
      }
      if (focusableElement !== null) {
        focusOnElement(focusableElement);
      }
      return;
    }
    const firstFocus = getHTMLElement(this.el.querySelector('.first-focus'));
    if (firstFocus !== null) {
      focusOnElement(firstFocus);
    }
  }
  async goBackToPreviousMenu() {
    if (this.routingKeyPointer === this.animatingRoutingKeyPointer) {
      this.clickDrawerHeaderBack.emit();
      const topLevelRoutingKey = findTopLevelRoutingKey(this.routingKeyHistory[this.routingKeyPointer]);
      if (topLevelRoutingKey === RoutingKeys.DEALER_SEARCH) {
        animationManager.play('transitionSameLevelDoubleDrawerReverse');
      }
      else {
        animationManager.play('transitionPreviousLevelDoubleDrawer');
      }
    }
  }
  async updateRouting() {
    this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    this.animatingRoutingKeyPointer = this.routingKeyPointer;
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    this.drawerChanged.emit(isNavigatingBackwards);
    this.sendDoubleDrawerLoadDataEvent();
  }
  sendDoubleDrawerLoadDataEvent() {
    analyticsManager.setDrawerType(DisplayElementTypes.DoubleDrawer);
    const activeRoutingKey = this.animatingRoutingKey || '';
    globalDataLayerService.pushDataLayerEvent(EventActions.DRAWER_LOAD, {
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(activeRoutingKey, ElementTypes.doubleDrawer),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  sendDataEventOfCloseButtonClick() {
    const activeRoutingKey = this.animatingRoutingKey || '';
    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'X',
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level-0'
      },
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(activeRoutingKey, ElementTypes.closeButton),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  animateIfSameLength(newHistory, oldHistory) {
    return (newHistory.length === oldHistory.length &&
      this.routingKeyPointer === newHistory.length - 1 &&
      newHistory[newHistory.length - 1] !== oldHistory[oldHistory.length - 1]);
  }
  componentWillLoad() {
    this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    this.animatingRoutingKeyPointer = this.routingKeyPointer;
    this.usingKeyboard = this.initialUsingKeyboard;
  }
  componentDidLoad() {
    const routeChangeCallbacks = {
      onSlideMainDrawerOutEnd: async () => this.updateRouting(),
      onGrowHighlightEnd: async () => this.focusOnInitialElement()
    };
    registerOpenDoubleDrawerSequence({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startOpening });
      },
      onAnimationEnds: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishOpening });
        this.focusOnInitialElement();
      }
    });
    registerCloseDoubleDrawerSequence({
      onBackdropFadeOutEnd: async () => {
        this.backdropClosed.emit();
      },
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startClosing });
      },
      onAnimationEnds: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishClosing });
      }
    });
    registerBackToPreviousMenuSequence(routeChangeCallbacks);
    registerForwardToNextMenuSequence(routeChangeCallbacks);
    registerTransitionSequence(routeChangeCallbacks);
    registerTransitionSequence(routeChangeCallbacks, 'reverse');
    this.sendDoubleDrawerLoadDataEvent();
  }
  render() {
    const previousRoutingKey = this.routingKeyHistory[this.animatingRoutingKeyPointer - 1];
    const backButtonText = getBackButtonText(navContentStore.state, previousRoutingKey);
    const topLevelRoutingKey = findTopLevelRoutingKey(this.animatingRoutingKey);
    const wasPreviouslyOnDealerSearch = findTopLevelRoutingKey(previousRoutingKey) === RoutingKeys.DEALER_SEARCH;
    const isOnDealerDetails = topLevelRoutingKey === RoutingKeys.DEALER_SEARCH && this.animatingRoutingKey !== topLevelRoutingKey;
    return (hAsync(Host, { role: "dialog", "aria-modal": "true", "aria-label": "navigation modal dialog", style: { left: '-1000px' } }, hAsync("phn-p-button", { variant: "secondary", class: "close-button", theme: "dark", "hide-label": "true", icon: 'close', aria: "{ 'aria-label': 'close modal dialog' }", "data-test-id": "close-button", onClick: () => {
        this.sendDataEventOfCloseButtonClick();
        this.clickDrawerHeaderClose.emit();
      } }), isString(this.animatingRoutingKey) ? (hAsync(Fragment, null, hAsync("div", { class: "drawer", id: "side-drawer" }, hAsync(SideDrawerContent, { activeRoutingKey: this.animatingRoutingKey, locale: this.locale, backButtonText: wasPreviouslyOnDealerSearch ? '' : backButtonText, onClickBack: () => this.goBackToPreviousMenu() })), hAsync("div", { class: "drawer", id: "main-drawer" }, hAsync(MainDrawerContent, { activeRoutingKey: this.animatingRoutingKey, breakpoint: this.breakpoint, locale: this.locale, backButtonText: isOnDealerDetails ? backButtonText : '', receivedContent: this.receivedContent, onClickBack: () => this.goBackToPreviousMenu() }), hAsync("div", { class: "bottom-gradient" })))) : null));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "routingKeyPointer": ["watchRoutingKeyPointer"],
    "routingKeyHistory": ["watchRoutingKeyHistory"]
  }; }
  static get style() { return doubleDrawerCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-double-drawer",
    "$members$": {
      "breakpoint": [2],
      "locale": [1],
      "initialUsingKeyboard": [4, "initial-using-keyboard"],
      "routingKeyHistory": [16],
      "routingKeyPointer": [2, "routing-key-pointer"],
      "receivedContent": [4, "received-content"],
      "usingKeyboard": [32],
      "animatingRoutingKeyPointer": [32],
      "isAnimating": [32],
      "animatingRoutingKey": [32]
    },
    "$listeners$": [[9, "resize", "onResizeWindow"], [0, "keydown", "handleKeyDown"], [0, "mobileMenuItemClick", "handleMobileMenuItemClick"], [0, "sideDrawerItemClick", "handleSideDrawerItemClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const drawerHeaderCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-drawer-header{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-drawer-header{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-drawer-header{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-drawer-header{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-drawer-header{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-drawer-header{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-drawer-header-h{display:block}.drawer-header.sc-phn-drawer-header{height:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.heading-items.sc-phn-drawer-header{margin-bottom:0.25rem;-ms-flex-align:center;align-items:center}.skeleton-headline.sc-phn-drawer-header{width:9.375rem;height:1.5rem;background:#d8d8db;border-radius:4px}.button-skeleton.sc-phn-drawer-header{margin-left:0.5rem;border-radius:0.25rem;height:1.5rem;width:1.5rem;background:#d8d8db}";

class DrawerHeader {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.clickDrawerHeaderBack = createEvent(this, "clickDrawerHeaderBack", 7);
    this.clickDrawerHeaderClose = createEvent(this, "clickDrawerHeaderClose", 7);
    this.backButtonText = '';
    this.backButtonAnalyticsId = undefined;
    this.showBackButton = false;
    this.activeRoutingKey = undefined;
    this.breakpoint = undefined;
    this.receivedContent = false;
    this.locale = undefined;
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = !this.receivedContent;
  }
  sendDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'X',
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level-0'
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.closeButton),
        displayElementName: 'X'
      }
    });
  }
  render() {
    const topLevelRoutingKey = findTopLevelRoutingKey(this.activeRoutingKey);
    const isMobile = !isDesktop(this.breakpoint);
    const displayHeadlineContent = topLevelRoutingKey !== undefined
      ? getHeadlineText(navContentStore.state, this.activeRoutingKey, topLevelRoutingKey)
      : '';
    const modelType = displayHeadlineContent.includes('mainmenu.') ? displayHeadlineContent.split('mainmenu.')[1] : '';
    const subtext = getSubtext(topLevelRoutingKey, this.activeRoutingKey, this.locale);
    return (hAsync("div", { class: "drawer-header" }, this.showBackButton ? (hAsync(Fragment, null, hAsync("phn-back-button", { class: "back-button", onClick: () => {
        this.clickDrawerHeaderBack.emit();
      }, analyticsId: this.backButtonAnalyticsId, text: isMobile ? '' : this.backButtonText, activeRoutingKey: this.activeRoutingKey, style: !this.showSkeleton ? {} : { display: 'none' } }), this.showSkeleton ? hAsync("div", { class: "button-skeleton" }) : null)) : (hAsync("div", { class: "spacer" })), isMobile ? (modelType === '' ? (hAsync(Fragment, null, this.showSkeleton && this.showBackButton ? hAsync("div", { class: "skeleton-headline" }) : null, hAsync("phn-heading", { text: displayHeadlineContent, style: this.showSkeleton || !isString(displayHeadlineContent) ? { display: 'none' } : {}, class: "heading-items", subtext: subtext }))) : (hAsync(Fragment, null, this.showSkeleton ? hAsync("div", { class: "skeleton-headline" }) : null, hAsync("phn-signature-heading", { text: modelType, subtext: subtext })))) : null, hAsync(Fragment, null, hAsync("phn-p-button-pure", { class: "close-button", icon: "close", hideLabel: "true", aria: { 'aria-label': 'close dialog' }, size: "small", style: !this.showSkeleton ? {} : { display: 'none' }, "data-test-id": "close-button", onClick: () => {
        this.sendDataLayerEvent();
        this.clickDrawerHeaderClose.emit();
      } }, "Close Dialog"), this.showSkeleton ? hAsync("div", { class: "button-skeleton" }) : null)));
  }
  get el() { return getElement(this); }
  static get style() { return drawerHeaderCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-drawer-header",
    "$members$": {
      "backButtonText": [1, "back-button-text"],
      "backButtonAnalyticsId": [1, "back-button-analytics-id"],
      "showBackButton": [4, "show-back-button"],
      "activeRoutingKey": [1, "active-routing-key"],
      "breakpoint": [2],
      "receivedContent": [4, "received-content"],
      "locale": [1],
      "showSkeleton": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};

function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

async function getUserInformation(accessToken, locale) {
  const config = getConfig(navStateStore.state.env);
  const init = {
    method: 'GET',
    headers: {
      'X-Trace-Id': v4(),
      Authorization: `${accessToken}`,
      Accept: 'application/json',
      Env: navStateStore.state.env
    }
  };
  try {
    const response = await fetch(getString(`${config === null || config === void 0 ? void 0 : config.BFF_ENDPOINT}/user-information?locale=${locale}`), init);
    if (!response.ok) {
      const text = await response.text();
      throw new Error(text);
    }
    return await response.json();
  }
  catch (error) {
    throw new NaviError(`Get User information request failed in Frontend with error: ${error}`, NaviErrorTypes.GENERAL);
  }
}

const finderStateStore = createStore({
  savedSearchesCount: 0,
  savedVehiclesCount: 0
});

function getUserNameFromUserData(userData) {
  let status = '';
  const firstName = getString(userData.firstName);
  const lastName = getString(userData.lastName);
  if (isString(firstName)) {
    status = firstName;
    if (isString(lastName)) {
      status += ` ${lastName}`;
    }
  }
  else {
    if (isString(lastName)) {
      status = lastName;
    }
  }
  return status;
}
async function getUserIdFromUserData(userData) {
  return await windowService.hashString(getString(userData.porscheId));
}
const userDataCache = new Map();
async function getUserData(accessToken, locale, config) {
  const cacheKey = constructCacheKey(accessToken, locale, config.PROFILE_API_URL);
  const cachedUserData = userDataCache.get(cacheKey);
  if (cachedUserData !== undefined) {
    return cachedUserData;
  }
  let userProfileResponse;
  const { language, country } = splitLocale(locale);
  const init = {
    method: 'GET',
    headers: {
      'Accept-Language': `${language}_${country}`,
      'x-trace-id': v4(),
      apikey: getString(config.CLIENT_ID),
      Authorization: `Bearer ${accessToken}`,
      Accept: 'application/json'
    }
  };
  const query = country !== RegionLocales.INTERNATIONAL ? `?country=${country}` : '';
  try {
    userProfileResponse = await fetch(`${getString(config.PROFILE_API_URL)}${query}`, init);
  }
  catch (err) {
    const errorMessage = `Exception occurred while fetching user info: ${JSON.stringify(err.message)}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  if (userProfileResponse.status === 401) {
    throw new NaviError('AccessToken has expired', NaviErrorTypes.UNAUTHORIZED);
  }
  if (!userProfileResponse.ok) {
    const errorMessage = `Error occurred: ${userProfileResponse.status} ${userProfileResponse.statusText}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  let userData;
  try {
    userData = await userProfileResponse.json();
  }
  catch (err) {
    throw new NaviError(`Could not extract json from user profile response: ${err}`, NaviErrorTypes.GENERAL);
  }
  if (typeof userData !== 'object' || userData === null) {
    throw new NaviError('Invalid user data object extracted from user profile response', NaviErrorTypes.NO_RESULTS);
  }
  userDataCache.set(cacheKey, userData);
  return userData;
}
async function initializeUserData(accessToken, locale, config) {
  let loggedInState = LOGGED_OUT_USER_STATUS;
  let userId;
  try {
    const userData = await getUserData(accessToken, locale, config);
    loggedInState = getUserNameFromUserData(userData) || LOGGED_IN_USER_NO_NAME_STATUS;
    userId = await getUserIdFromUserData(userData);
  }
  catch (err) {
    if (!(err instanceof NaviError) || err.type !== NaviErrorTypes.UNAUTHORIZED) {
      loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
    }
    navStateStore.state.unreadMessagesCount = DEFAULT_UNREAD_MESSAGES_COUNT;
    navStateStore.state.loggedInState = loggedInState;
    throw err;
  }
  navStateStore.state.loggedInState = loggedInState;
  globalDataLayerService.setUser(userId, IsLoggedIn(loggedInState));
  const { savedSearches, savedVehicles, unreadMessages } = await getUserInformation(accessToken, locale);
  finderStateStore.state.savedSearchesCount = savedSearches;
  finderStateStore.state.savedVehiclesCount = savedVehicles;
  navStateStore.state.unreadMessagesCount = unreadMessages;
}
function initAuthIframe(config) {
  const queryString = getQueryString({
    domain: config.IDENTITY_PROVIDER_URL,
    clientId: config.IDENTITY_CLIENT_ID,
    redirect_uri: config.LOGIN_REDIRECT_URL,
    audience: config.IDENTITY_AUDIENCE
  });
  windowService.removeElement(IFRAME_ID);
  windowService.createIframe(IFRAME_ID, `${config.LOGIN_REDIRECT_URL}?${queryString}`);
}

const headerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}/*!@.phn-flex-col*/.phn-flex-col.sc-phn-header{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}/*!@.phn-flex-row*/.phn-flex-row.sc-phn-header{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}/*!@.phn-align-center*/.phn-align-center.sc-phn-header{-ms-flex-align:center;align-items:center}/*!@.phn-justify-around*/.phn-justify-around.sc-phn-header{-ms-flex-pack:distribute;justify-content:space-around}/*!@.phn-justify-between*/.phn-justify-between.sc-phn-header{-ms-flex-pack:justify;justify-content:space-between}/*!@.phn-flex-wrap*/.phn-flex-wrap.sc-phn-header{-ms-flex-wrap:wrap;flex-wrap:wrap}/*!@:host*/.sc-phn-header-h{display:block;position:relative;visibility:visible;height:auto !important;z-index:500}/*!@:host .header*/.sc-phn-header-h .header.sc-phn-header{min-height:4.125rem}@media (min-width: 480px){/*!@:host .header*/.sc-phn-header-h .header.sc-phn-header{min-height:5rem}}@media (min-width: 760px){/*!@:host .header*/.sc-phn-header-h .header.sc-phn-header{min-height:4.5625rem}}@media (min-width: 1000px){/*!@:host .header*/.sc-phn-header-h .header.sc-phn-header{min-height:4.75rem}}@media (min-width: 1300px){/*!@:host .header*/.sc-phn-header-h .header.sc-phn-header{min-height:5.125rem}}@media (min-width: 1920px){/*!@:host .limited-width*/.sc-phn-header-h .limited-width.sc-phn-header{max-width:160rem;margin:0 auto}}";

class Header {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.navigationDidLoad = createEvent(this, "navigationDidLoad", 7);
    this.phnLogout = createEvent(this, "phnLogout", 7);
    this.phnLogin = createEvent(this, "phnLogin", 7);
    this.eventPreventedTimeout = new Timeout(0);
    this.checkedMarketingConsent = false;
    this.loadedToggles = false;
    this.locale = '';
    this.env = '';
    this.clientId = '';
    this.pageName = '';
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.limitedWidth = 'true';
    this.app = Application.default;
    this.initialRoutingPath = '';
    this.displayLogoOnly = false;
    this.numberOfShoppingItems = 0;
    this.wishlistItemsNumber = 0;
    this.shopInformation = '{ "wishlistItemsNumber": 0, "numberOfShoppingItems": 0, "subTotal": "0" }';
    this.loadingContent = false;
    this.receivedContent = false;
    this.breakpoint = windowService.getBreakpoint();
  }
  async localeWatchHandler() {
    await this.initNavContentStore();
    globalDataLayerService.setLocale(this.locale);
    logger.init(navStateStore.state.env, this.breakpoint, this.locale);
  }
  pageNameWatchHandler() {
    globalDataLayerService.setPageName(this.pageName);
  }
  async newEnvReceived() {
    await this.initEnvironment();
    await this.initNavContentStore();
    initAuthIframe(getConfig(navStateStore.state.env));
  }
  async appWatcher(newValue) {
    navStateStore.state.app = sanitizeApp(newValue);
  }
  breakpointWatcher() {
    logger.init(navStateStore.state.env, this.breakpoint, this.locale);
  }
  watchShopVariables(newValue, _, propName) {
    shopStateStore.set(propName, newValue);
  }
  watchShopVariable(information, _, propName) {
    const shopInformation = JSON.parse(information);
    shopStateStore.set(propName, shopInformation);
  }
  initialRoutingPathWatcher() {
    this.handleInitialRoutingKeyPath();
  }
  resizeHandler() {
    this.breakpoint = windowService.getBreakpoint();
  }
  async newAuthMessageReceived(event) {
    const config = getConfig(navStateStore.state.env);
    if (new URL(config.LOGIN_REDIRECT_URL).origin !== new URL(event.origin).origin) {
      return;
    }
    if (isString(event.data.token)) {
      try {
        windowService.removeElement(IFRAME_ID);
        await initializeUserData(event.data.token, this.locale, config);
      }
      catch (err) {
        logger.error('INIT_USER_DATA', err);
      }
    }
  }
  async handleLogin() {
    const phnLogin = this.phnLogin.emit();
    this.eventPreventedTimeout.set(async () => {
      var _a;
      if (phnLogin.defaultPrevented) {
        return;
      }
      const loginLink = (_a = navContentStore.state.myPorsche) === null || _a === void 0 ? void 0 : _a.link;
      if (isString(loginLink)) {
        windowService.redirectToUrl(loginLink);
        return;
      }
    });
  }
  async handleLogout() {
    const config = getConfig(navStateStore.state.env);
    const phnLogout = this.phnLogout.emit();
    this.eventPreventedTimeout.set(async () => {
      if (phnLogout.defaultPrevented) {
        return;
      }
      // TODO which logout url to use? myporsche? auth0?
      windowService.redirectToUrl(`${config.IDENTITY_PROVIDER_URL}/v2/logout`);
      return;
    });
  }
  handleUserCentricsReady() {
    this.checkMarketingConsent();
  }
  handleUserCentricsInitalization() {
    this.checkMarketingConsent();
  }
  navigationLoadedHandler({ detail: navigationLoaded }) {
    windowService.navigationLoaded = navigationLoaded;
    if (navigationLoaded) {
      this.navigationDidLoad.emit();
    }
  }
  checkMarketingConsent() {
    if (!this.checkedMarketingConsent) {
      navStateStore.state.userConsent = false;
      this.checkedMarketingConsent = windowService.maybeCheckMarketingConsent(() => {
        navStateStore.state.userConsent = true;
      });
    }
  }
  async initEnvironment() {
    navStateStore.state.env = getEnvironment(this.env);
    navStateStore.state.app = sanitizeApp(this.app);
    globalDataLayerService.setEnvironment(navStateStore.state.env);
    const config = getConfig(navStateStore.state.env);
    initAuthIframe(config);
    this.loadedToggles = false;
    await featureToggles.setFeatures(navStateStore.state.env);
    this.loadedToggles = true;
    logger.init(navStateStore.state.env, this.breakpoint, this.locale);
    const shopInformation = JSON.parse(this.shopInformation);
    loadsShopPropsOnStore({
      wishlistItemsNumber: this.wishlistItemsNumber,
      numberOfShoppingItems: this.numberOfShoppingItems,
      shopInformation: shopInformation
    });
    await abTestingService().init();
  }
  async initNavContentStore() {
    const previouslyReceivedContent = this.receivedContent;
    this.receivedContent = false;
    this.loadingContent = true;
    try {
      const fetchedLocale = this.locale;
      const fetchedEnv = navStateStore.state.env;
      const contentForLocale = await fetchContent(fetchedLocale, this.app);
      // This is to make sure that the response is valid for the current locale and environment
      // and wasn't made with another locale or enironment
      if (this.locale === fetchedLocale && navStateStore.state.env === fetchedEnv) {
        Object.assign(navContentStore.state, contentForLocale);
        this.receivedContent = true;
      }
    }
    catch (err) {
      logger.error('FETCH_CONTENT', err);
      if (previouslyReceivedContent) {
        this.receivedContent = true;
      }
    }
    this.loadingContent = false;
  }
  async setDealerSearchResultsStore() {
    const { savedDealerCookie, ppnDealers } = dealerSearchResultsStore.state;
    if (savedDealerCookie === null || ppnDealers[savedDealerCookie.id] !== undefined) {
      return;
    }
    const coordinates = { latitude: savedDealerCookie.latitude, longitude: savedDealerCookie.longitude };
    const { env } = navStateStore.state;
    try {
      const { country } = splitLocale(this.locale);
      const { id: dealerId } = savedDealerCookie;
      const ppnDealer = showDealerSearchDropdown(country)
        ? await getPPNDealerByRegion(dealerId, country)
        : await getPPNDealer(env, getConfig(env).DEALER_API_URL, dealerId, coordinates, country);
      dealerSearchResultsStore.state.ppnDealers[savedDealerCookie.id] = ppnDealer;
    }
    catch (err) {
      logger.error('GET_DEALER', err);
      dealerSearchResultsStore.state.savedDealerCookie = null;
    }
  }
  handleInitialRoutingKeyPath() {
    const [topLevelRoutingKey, ...segments] = this.initialRoutingPath.split('>');
    const rootContentItem = getRootMenuItem(navContentStore.state, topLevelRoutingKey);
    if (rootContentItem === null) {
      return;
    }
    const validSegments = getValidContentPathSegments(rootContentItem, segments);
    const routingKeyHistory = buildRoutingKeyHistoryFromContentPath([topLevelRoutingKey, ...validSegments]);
    routerStore.state.initialRoutingKeyHistory = routingKeyHistory;
    routerStore.state.initialRoutingKeyPointer = routingKeyHistory.length - 1;
  }
  componentWillLoad() {
    globalDataLayerService.setDefaultProperties(this.locale, this.pageName);
    window.ncs = navContentStore;
    this.checkMarketingConsent();
    this.initEnvironment()
      .then(() => Promise.all([this.initNavContentStore(), this.setDealerSearchResultsStore()]))
      .then(() => Promise.all([abTestingService().loadContentGeneratorExperiments()]))
      .then(() => {
      this.handleInitialRoutingKeyPath();
    });
  }
  async componentDidLoad() {
    windowService.version = VERSION;
    globalDataLayerService.pushDataLayerEvent(EventActions.GENERAL_LOAD);
    logger.info('NAVIGATION_LOAD');
  }
  disconnectedCallback() {
    this.eventPreventedTimeout.cancel();
  }
  hasLimitedWidth() {
    return this.mode === NavigationMode.hero && this.limitedWidth === 'true' ? true : false;
  }
  render() {
    if (!this.loadedToggles) {
      return hAsync("div", null);
    }
    return (
    // div needed because conditional styling does not work on Host of shadow component for some unknown reason
    hAsync("div", { class: this.hasLimitedWidth() ? 'header limited-width' : 'header' }, hAsync("phn-wrapper", { theme: this.theme, mode: this.mode, locale: this.locale, loadingContent: this.loadingContent, receivedContent: this.receivedContent, breakpoint: this.breakpoint, app: sanitizeApp(this.app), displayLogoOnly: this.displayLogoOnly, limitedWidth: this.hasLimitedWidth() }, isShopAvailable(this.locale, sanitizeApp(this.app)) ? (hAsync("div", { slot: "contextual_drawer_header" }, hAsync("slot", { name: "contextual_drawer_header" }))) : null)));
  }
  static get assetsDirs() { return ["auth"]; }
  static get watchers() { return {
    "locale": ["localeWatchHandler"],
    "pageName": ["pageNameWatchHandler"],
    "env": ["newEnvReceived"],
    "app": ["appWatcher"],
    "breakpoint": ["breakpointWatcher"],
    "numberOfShoppingItems": ["watchShopVariables"],
    "wishlistItemsNumber": ["watchShopVariables"],
    "shopInformation": ["watchShopVariable"],
    "initialRoutingPath": ["initialRoutingPathWatcher"]
  }; }
  static get style() { return headerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "phn-header",
    "$members$": {
      "locale": [1],
      "env": [1],
      "clientId": [1, "client-id"],
      "pageName": [1, "page-name"],
      "theme": [1],
      "mode": [1],
      "limitedWidth": [1, "limited-width"],
      "app": [1],
      "initialRoutingPath": [1, "initial-routing-path"],
      "displayLogoOnly": [4, "display-logo-only"],
      "numberOfShoppingItems": [2, "number-of-shopping-items"],
      "wishlistItemsNumber": [2, "wishlist-items-number"],
      "shopInformation": [1, "shop-information"],
      "loadingContent": [32],
      "receivedContent": [32],
      "breakpoint": [32]
    },
    "$listeners$": [[9, "resize", "resizeHandler"], [9, "message", "newAuthMessageReceived"], [0, "loginEvent", "handleLogin"], [0, "logoutEvent", "handleLogout"], [9, "ucReady", "handleUserCentricsReady"], [9, "ucInit", "handleUserCentricsInitalization"], [0, "navigationLoaded", "navigationLoadedHandler"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const headingCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-heading{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-heading{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-heading{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-heading{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-heading{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-heading{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-heading-h{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center}.sc-phn-heading-h phn-p-heading.sc-phn-heading{font:normal normal 600 clamp(1.27rem, 0.51vw + 1.16rem, 1.78rem)/calc(6px + 2.125ex) \"Porsche Next\", \"Arial Narrow\", Arial, \"Heiti SC\", SimHei, sans-serif}@media (min-width: 480px){.sc-phn-heading-h phn-p-heading.sc-phn-heading{font:normal normal 600 clamp(1.42rem, 0.94vw + 1.23rem, 2.37rem)/calc(6px + 2.125ex) \"Porsche Next\", \"Arial Narrow\", Arial, \"Heiti SC\", SimHei, sans-serif}}@media (min-width: 760px){.dealer-heading.sc-phn-heading-h phn-p-heading.sc-phn-heading{font-size:1.875rem;line-height:2.5rem}}@media (min-width: 1000px){.dealer-heading.sc-phn-heading-h phn-p-heading.sc-phn-heading{font-size:1.75rem;line-height:2.5rem}}@media (min-width: 0px){.sc-phn-heading-h div.text-limit.sc-phn-heading{width:180px}}@media (min-width: 480px){.sc-phn-heading-h div.text-limit.sc-phn-heading{width:100%}}";

class Heading {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.text = undefined;
    this.subtext = undefined;
  }
  render() {
    return (hAsync(Host, null, hAsync("phn-p-heading", { size: "inherit" }, this.text), isString(this.subtext) ? (hAsync("div", { class: "text-limit" }, hAsync("phn-p-text", { color: "contrast-high", size: "xx-small", tag: "div", ellipsis: "true" }, this.subtext))) : null));
  }
  static get style() { return headingCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-heading",
    "$members$": {
      "text": [1],
      "subtext": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const registerOpenSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideInFromLeft',
          from: -1000,
          duration: AnimationDurations.drawerOpen,
          cleanUpAfterAnimation: true
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeInBackdrop',
          duration: AnimationDurations.backdrop,
          to: 0.6
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_SINGLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierStart' }));
};
const registerCloseSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideOutToLeft',
          duration: AnimationDurations.drawer,
          to: -1000
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeOutBackdrop',
          duration: AnimationDurations.backdrop,
          from: 0.6
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_SINGLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierEnd' }));
};
const registerTransitionNextLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.register(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideInFromRightFixed',
          duration: AnimationDurations.drawer,
          timingFunction: 'easeInOutQuad'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const registerTransitionPreviousLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.register(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideOutToRightFixed',
          duration: AnimationDurations.drawer,
          timingFunction: 'easeInOutQuad'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const isPlayingSingleDrawerAnimation = () => {
  try {
    const singleDrawerAnimationSequences = [
      AnimationSequences.OPEN_SINGLE_DRAWER,
      AnimationSequences.CLOSE_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER
    ];
    return singleDrawerAnimationSequences.some((sequence) => {
      try {
        return animationManager.isPlaying(sequence);
      }
      catch (_a) {
        return false;
      }
    });
  }
  catch (e) {
    return false;
  }
};

const level0Css = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-level-0{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-level-0{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-level-0{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-level-0{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-level-0{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-level-0{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-level-0-h{display:block}.hero_light-theme.themed-background.sc-phn-level-0-h{background:-webkit-gradient(linear, left top, left bottom, from(rgba(224, 224, 224, 0.9)), color-stop(20%, rgba(224, 224, 224, 0.9)), color-stop(26.67%, rgba(224, 224, 224, 0.852589)), color-stop(33.33%, rgba(225, 225, 225, 0.768225)), color-stop(40%, rgba(226, 226, 226, 0.668116)), color-stop(46.67%, rgba(227, 227, 227, 0.557309)), color-stop(53.33%, rgba(228, 228, 228, 0.442691)), color-stop(60%, rgba(229, 229, 229, 0.331884)), color-stop(66.67%, rgba(230, 230, 230, 0.231775)), color-stop(73.33%, rgba(231, 231, 231, 0.147411)), color-stop(80%, rgba(232, 232, 232, 0.0816599)), color-stop(86.67%, rgba(232, 232, 232, 0.03551)), color-stop(93.33%, rgba(232, 232, 232, 0.0086472)), to(rgba(232, 232, 232, 0)));background:linear-gradient(to bottom, rgba(224, 224, 224, 0.9) 0%, rgba(224, 224, 224, 0.9) 20%, rgba(224, 224, 224, 0.852589) 26.67%, rgba(225, 225, 225, 0.768225) 33.33%, rgba(226, 226, 226, 0.668116) 40%, rgba(227, 227, 227, 0.557309) 46.67%, rgba(228, 228, 228, 0.442691) 53.33%, rgba(229, 229, 229, 0.331884) 60%, rgba(230, 230, 230, 0.231775) 66.67%, rgba(231, 231, 231, 0.147411) 73.33%, rgba(232, 232, 232, 0.0816599) 80%, rgba(232, 232, 232, 0.03551) 86.67%, rgba(232, 232, 232, 0.0086472) 93.33%, rgba(232, 232, 232, 0) 100%)}@media (min-width: 0px){.hero_light-theme.themed-background.sc-phn-level-0-h{height:72px}}@media (min-width: 760px){.hero_light-theme.themed-background.sc-phn-level-0-h{height:148px}}.hero_light-theme.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{color:black}.hero_dark-theme.themed-background.sc-phn-level-0-h{background:-webkit-gradient(linear, left top, left bottom, from(rgba(31, 31, 31, 0.9)), color-stop(20%, rgba(31, 31, 31, 0.9)), color-stop(26.67%, rgba(31, 31, 31, 0.852589)), color-stop(33.33%, rgba(32, 32, 32, 0.768225)), color-stop(40%, rgba(33, 33, 33, 0.668116)), color-stop(46.67%, rgba(34, 34, 34, 0.557309)), color-stop(53.33%, rgba(35, 35, 35, 0.442691)), color-stop(60%, rgba(36, 36, 36, 0.331884)), color-stop(66.67%, rgba(37, 37, 37, 0.231775)), color-stop(73.33%, rgba(38, 38, 38, 0.147411)), color-stop(80%, rgba(39, 39, 39, 0.0816599)), color-stop(86.67%, rgba(39, 39, 39, 0.03551)), color-stop(93.33%, rgba(39, 39, 39, 0.0086472)), to(rgba(39, 39, 39, 0)));background:linear-gradient(to bottom, rgba(31, 31, 31, 0.9) 0%, rgba(31, 31, 31, 0.9) 20%, rgba(31, 31, 31, 0.852589) 26.67%, rgba(32, 32, 32, 0.768225) 33.33%, rgba(33, 33, 33, 0.668116) 40%, rgba(34, 34, 34, 0.557309) 46.67%, rgba(35, 35, 35, 0.442691) 53.33%, rgba(36, 36, 36, 0.331884) 60%, rgba(37, 37, 37, 0.231775) 66.67%, rgba(38, 38, 38, 0.147411) 73.33%, rgba(39, 39, 39, 0.0816599) 80%, rgba(39, 39, 39, 0.03551) 86.67%, rgba(39, 39, 39, 0.0086472) 93.33%, rgba(39, 39, 39, 0) 100%)}@media (min-width: 0px){.hero_dark-theme.themed-background.sc-phn-level-0-h{height:72px}}@media (min-width: 760px){.hero_dark-theme.themed-background.sc-phn-level-0-h{height:148px}}.hero_dark-theme.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{color:white}.navbar-theme.themed-background.sc-phn-level-0-h{background:white;border-bottom:1px solid #e3e4e5}.navbar-theme.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{color:black}.transparent_dark-theme.themed-background.sc-phn-level-0-h{background:transparent}.transparent_dark-theme.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{color:white}.transparent_light-theme.themed-background.sc-phn-level-0-h{background:transparent}.transparent_light-theme.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{color:white}@media (min-width: 1920px){.sc-phn-level-0-h header.limited-width.sc-phn-level-0{padding:0 calc(50vw - 2560px)}}.sc-phn-level-0-h header.sc-phn-level-0{margin:0;display:grid;padding:0 calc(50vw - 1280px);grid-gap:clamp(16px, 1.25vw + 12px, 36px);max-width:2560px;min-width:320px;-webkit-box-sizing:content-box;box-sizing:content-box;grid-template-columns:[full-start] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [wide-start extended-start basic-start narrow-start] repeat(6, minmax(0, 1fr)) [narrow-end basic-end extended-end wide-end] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [full-end];--pds-internal-grid-safe-zone:max(22px, 10.625vw - 12px);--pds-grid-basic-span-one-half:span 3;--pds-grid-basic-span-one-third:span 2;--pds-grid-narrow-span-one-half:span 3;--pds-grid-basic-span-two-thirds:span 4;--pds-grid-extended-span-one-half:span 3;font-family:\"Porsche Next\", \"Arial Narrow\", Arial, \"Heiti SC\", SimHei, sans-serif;font-weight:400;color:#fff;height:4.125rem}@media (min-width: 760px){.sc-phn-level-0-h header.sc-phn-level-0{grid-template-columns:[full-start] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [wide-start] minmax(0, 1fr) [extended-start] minmax(0, 1fr) [basic-start] repeat(2, minmax(0, 1fr)) [narrow-start] repeat(8, minmax(0, 1fr)) [narrow-end] repeat(2, minmax(0, 1fr)) [basic-end] minmax(0, 1fr) [extended-end] minmax(0, 1fr) [wide-end] minmax(0, calc(var(--pds-internal-grid-safe-zone) - clamp(16px, 1.25vw + 12px, 36px))) [full-end];--pds-internal-grid-safe-zone:calc(5vw - 16px);--pds-grid-basic-span-one-half:span 6;--pds-grid-basic-span-one-third:span 4;--pds-grid-narrow-span-one-half:span 4;--pds-grid-basic-span-two-thirds:span 8;--pds-grid-extended-span-one-half:span 7}}@media (min-width: 1920px){.sc-phn-level-0-h header.sc-phn-level-0{--pds-internal-grid-safe-zone:min(50vw - 880px, 400px)}}@media (min-width: 480px){.sc-phn-level-0-h header.sc-phn-level-0{height:5rem}}@media (min-width: 760px){.sc-phn-level-0-h header.sc-phn-level-0{height:4.5625rem}}@media (min-width: 1000px){.sc-phn-level-0-h header.sc-phn-level-0{height:4.75rem}}@media (min-width: 1300px){.sc-phn-level-0-h header.sc-phn-level-0{height:5.125rem;-ms-flex-direction:row;flex-direction:row}}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0{height:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;position:relative;grid-column:wide-start/wide-end}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .level-0-content-logo.sc-phn-level-0{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .level-0-content-icons.sc-phn-level-0{position:absolute;width:100%}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 phn-burger-button.sc-phn-level-0,.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 phn-level-0-icons.sc-phn-level-0,.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 phn-logo.sc-phn-level-0,.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .skeleton-container.sc-phn-level-0{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .skeleton-container.crest-skeleton.sc-phn-level-0{-ms-flex-pack:center;justify-content:center}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 phn-logo.sc-phn-level-0{-ms-flex-pack:center;justify-content:center;z-index:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}@media (min-width: 1300px){.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 phn-logo.sc-phn-level-0{z-index:1}}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .burger-button-skeleton.sc-phn-level-0{width:1.5rem;height:1.5rem;border-radius:0.25rem;background:#d8d8db}@media (min-width: 480px){.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .burger-button-skeleton.sc-phn-level-0{width:4.75rem;height:1.5rem}}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .label-bone.sc-phn-level-0{width:7.75rem;height:1.5rem;border-radius:0.25rem;background-color:#d8d8db}@media (min-width: 760px){.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .label-bone.sc-phn-level-0{width:18rem}}.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .crest-bone.sc-phn-level-0{width:1.403125rem;height:1.8125rem;background-image:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='22.45px' height='29px' viewBox='0 0 29 37' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3Ecrest-path-pixel-perfect-3%3C/title%3E%3Cg id='Design-Focus' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='832-skeleton-hn-1366' transform='translate(-130.000000, -39.000000)' fill='%23E3E4E5' fill-rule='nonzero'%3E%3Cg id='Crest-bones' transform='translate(78.000000, 0.000000)'%3E%3Cpath d='M80.8612951,41.6891698 C79.3593022,41.0929534 77.8195513,40.5958533 76.2520235,40.2010916 C74.092052,39.6781633 71.8946453,39.3227949 69.6795438,39.1381787 C68.6125828,39.0425165 67.6096394,39.0106291 66.4786608,39 L66.4679912,39 C65.4010302,39 64.3340692,39 63.2671082,39.1381787 C61.0520067,39.3227949 58.8545999,39.6781633 56.6946284,40.2010916 C55.1285058,40.5930516 53.5918758,41.093847 52.0960265,41.6997989 L52,41.6997989 C52,41.6997989 52.1813834,52.8710141 52.3200883,58.3981614 C52.3624958,60.0288438 52.6613178,61.6428163 53.2056659,63.1812698 C53.83596,64.927843 54.6779771,66.5912102 55.7130243,68.1344441 C56.7974563,69.7321996 58.1093136,71.164397 59.6074319,72.3860959 C60.1877267,72.8817079 60.8047619,73.3329574 61.4532745,73.7359954 C62.4748439,74.3534515 63.5453697,74.8866836 64.6541575,75.3303648 C65.0062546,75.4791727 65.3263429,75.6279805 65.6144224,75.7236426 C65.9077386,75.8428333 66.2112826,75.9353298 66.5213392,76 C66.8313958,75.9353298 67.1349399,75.8428333 67.4282561,75.7236426 C67.7163355,75.6279805 68.0364238,75.4791727 68.3991906,75.3303648 C69.4899033,74.8845355 70.542531,74.3513317 71.5467255,73.7359954 C72.1928274,73.3294237 72.8096114,72.8783579 73.3925681,72.3860959 C74.8933275,71.167176 76.2055628,69.7345659 77.2869757,68.1344441 C78.3220229,66.5912102 79.16404,64.927843 79.7943341,63.1812698 C80.3386822,61.6428163 80.6375042,60.0288438 80.6799117,58.3981614 C80.8186166,52.8710141 81,41.6997989 81,41.6997989 L80.8612951,41.6891698 Z' id='crest-path-pixel-perfect-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");background-repeat:no-repeat;background-position:center}@media (min-width: 480px){.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .crest-bone.sc-phn-level-0{width:1.6875rem;height:2.25rem;background-image:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='27px' height='36px' viewBox='0 0 29 37' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3Ecrest-path-pixel-perfect-3%3C/title%3E%3Cg id='Design-Focus' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='832-skeleton-hn-1366' transform='translate(-130.000000, -39.000000)' fill='%23E3E4E5' fill-rule='nonzero'%3E%3Cg id='Crest-bones' transform='translate(78.000000, 0.000000)'%3E%3Cpath d='M80.8612951,41.6891698 C79.3593022,41.0929534 77.8195513,40.5958533 76.2520235,40.2010916 C74.092052,39.6781633 71.8946453,39.3227949 69.6795438,39.1381787 C68.6125828,39.0425165 67.6096394,39.0106291 66.4786608,39 L66.4679912,39 C65.4010302,39 64.3340692,39 63.2671082,39.1381787 C61.0520067,39.3227949 58.8545999,39.6781633 56.6946284,40.2010916 C55.1285058,40.5930516 53.5918758,41.093847 52.0960265,41.6997989 L52,41.6997989 C52,41.6997989 52.1813834,52.8710141 52.3200883,58.3981614 C52.3624958,60.0288438 52.6613178,61.6428163 53.2056659,63.1812698 C53.83596,64.927843 54.6779771,66.5912102 55.7130243,68.1344441 C56.7974563,69.7321996 58.1093136,71.164397 59.6074319,72.3860959 C60.1877267,72.8817079 60.8047619,73.3329574 61.4532745,73.7359954 C62.4748439,74.3534515 63.5453697,74.8866836 64.6541575,75.3303648 C65.0062546,75.4791727 65.3263429,75.6279805 65.6144224,75.7236426 C65.9077386,75.8428333 66.2112826,75.9353298 66.5213392,76 C66.8313958,75.9353298 67.1349399,75.8428333 67.4282561,75.7236426 C67.7163355,75.6279805 68.0364238,75.4791727 68.3991906,75.3303648 C69.4899033,74.8845355 70.542531,74.3513317 71.5467255,73.7359954 C72.1928274,73.3294237 72.8096114,72.8783579 73.3925681,72.3860959 C74.8933275,71.167176 76.2055628,69.7345659 77.2869757,68.1344441 C78.3220229,66.5912102 79.16404,64.927843 79.7943341,63.1812698 C80.3386822,61.6428163 80.6375042,60.0288438 80.6799117,58.3981614 C80.8186166,52.8710141 81,41.6997989 81,41.6997989 L80.8612951,41.6891698 Z' id='crest-path-pixel-perfect-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")}}@media (min-width: 760px){.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .crest-bone.sc-phn-level-0{width:1.75rem;height:2.25rem;background-image:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='28px' height='36px' viewBox='0 0 29 37' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3Ecrest-path-pixel-perfect-3%3C/title%3E%3Cg id='Design-Focus' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='832-skeleton-hn-1366' transform='translate(-130.000000, -39.000000)' fill='%23E3E4E5' fill-rule='nonzero'%3E%3Cg id='Crest-bones' transform='translate(78.000000, 0.000000)'%3E%3Cpath d='M80.8612951,41.6891698 C79.3593022,41.0929534 77.8195513,40.5958533 76.2520235,40.2010916 C74.092052,39.6781633 71.8946453,39.3227949 69.6795438,39.1381787 C68.6125828,39.0425165 67.6096394,39.0106291 66.4786608,39 L66.4679912,39 C65.4010302,39 64.3340692,39 63.2671082,39.1381787 C61.0520067,39.3227949 58.8545999,39.6781633 56.6946284,40.2010916 C55.1285058,40.5930516 53.5918758,41.093847 52.0960265,41.6997989 L52,41.6997989 C52,41.6997989 52.1813834,52.8710141 52.3200883,58.3981614 C52.3624958,60.0288438 52.6613178,61.6428163 53.2056659,63.1812698 C53.83596,64.927843 54.6779771,66.5912102 55.7130243,68.1344441 C56.7974563,69.7321996 58.1093136,71.164397 59.6074319,72.3860959 C60.1877267,72.8817079 60.8047619,73.3329574 61.4532745,73.7359954 C62.4748439,74.3534515 63.5453697,74.8866836 64.6541575,75.3303648 C65.0062546,75.4791727 65.3263429,75.6279805 65.6144224,75.7236426 C65.9077386,75.8428333 66.2112826,75.9353298 66.5213392,76 C66.8313958,75.9353298 67.1349399,75.8428333 67.4282561,75.7236426 C67.7163355,75.6279805 68.0364238,75.4791727 68.3991906,75.3303648 C69.4899033,74.8845355 70.542531,74.3513317 71.5467255,73.7359954 C72.1928274,73.3294237 72.8096114,72.8783579 73.3925681,72.3860959 C74.8933275,71.167176 76.2055628,69.7345659 77.2869757,68.1344441 C78.3220229,66.5912102 79.16404,64.927843 79.7943341,63.1812698 C80.3386822,61.6428163 80.6375042,60.0288438 80.6799117,58.3981614 C80.8186166,52.8710141 81,41.6997989 81,41.6997989 L80.8612951,41.6891698 Z' id='crest-path-pixel-perfect-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")}}@media (min-width: 1000px){.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .crest-bone.sc-phn-level-0{width:1.9375rem;height:2.5625rem;background-image:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='31px' height='41px' viewBox='0 0 29 37' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3Ecrest-path-pixel-perfect-3%3C/title%3E%3Cg id='Design-Focus' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='832-skeleton-hn-1366' transform='translate(-130.000000, -39.000000)' fill='%23E3E4E5' fill-rule='nonzero'%3E%3Cg id='Crest-bones' transform='translate(78.000000, 0.000000)'%3E%3Cpath d='M80.8612951,41.6891698 C79.3593022,41.0929534 77.8195513,40.5958533 76.2520235,40.2010916 C74.092052,39.6781633 71.8946453,39.3227949 69.6795438,39.1381787 C68.6125828,39.0425165 67.6096394,39.0106291 66.4786608,39 L66.4679912,39 C65.4010302,39 64.3340692,39 63.2671082,39.1381787 C61.0520067,39.3227949 58.8545999,39.6781633 56.6946284,40.2010916 C55.1285058,40.5930516 53.5918758,41.093847 52.0960265,41.6997989 L52,41.6997989 C52,41.6997989 52.1813834,52.8710141 52.3200883,58.3981614 C52.3624958,60.0288438 52.6613178,61.6428163 53.2056659,63.1812698 C53.83596,64.927843 54.6779771,66.5912102 55.7130243,68.1344441 C56.7974563,69.7321996 58.1093136,71.164397 59.6074319,72.3860959 C60.1877267,72.8817079 60.8047619,73.3329574 61.4532745,73.7359954 C62.4748439,74.3534515 63.5453697,74.8866836 64.6541575,75.3303648 C65.0062546,75.4791727 65.3263429,75.6279805 65.6144224,75.7236426 C65.9077386,75.8428333 66.2112826,75.9353298 66.5213392,76 C66.8313958,75.9353298 67.1349399,75.8428333 67.4282561,75.7236426 C67.7163355,75.6279805 68.0364238,75.4791727 68.3991906,75.3303648 C69.4899033,74.8845355 70.542531,74.3513317 71.5467255,73.7359954 C72.1928274,73.3294237 72.8096114,72.8783579 73.3925681,72.3860959 C74.8933275,71.167176 76.2055628,69.7345659 77.2869757,68.1344441 C78.3220229,66.5912102 79.16404,64.927843 79.7943341,63.1812698 C80.3386822,61.6428163 80.6375042,60.0288438 80.6799117,58.3981614 C80.8186166,52.8710141 81,41.6997989 81,41.6997989 L80.8612951,41.6891698 Z' id='crest-path-pixel-perfect-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")}}@media (min-width: 1300px){.sc-phn-level-0-h header.sc-phn-level-0 .level-0-content.sc-phn-level-0 .crest-bone.sc-phn-level-0{width:2rem;height:2.6875rem;background-image:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='32px' height='43px' viewBox='0 0 29 37' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3Ecrest-path-pixel-perfect-3%3C/title%3E%3Cg id='Design-Focus' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='832-skeleton-hn-1366' transform='translate(-130.000000, -39.000000)' fill='%23E3E4E5' fill-rule='nonzero'%3E%3Cg id='Crest-bones' transform='translate(78.000000, 0.000000)'%3E%3Cpath d='M80.8612951,41.6891698 C79.3593022,41.0929534 77.8195513,40.5958533 76.2520235,40.2010916 C74.092052,39.6781633 71.8946453,39.3227949 69.6795438,39.1381787 C68.6125828,39.0425165 67.6096394,39.0106291 66.4786608,39 L66.4679912,39 C65.4010302,39 64.3340692,39 63.2671082,39.1381787 C61.0520067,39.3227949 58.8545999,39.6781633 56.6946284,40.2010916 C55.1285058,40.5930516 53.5918758,41.093847 52.0960265,41.6997989 L52,41.6997989 C52,41.6997989 52.1813834,52.8710141 52.3200883,58.3981614 C52.3624958,60.0288438 52.6613178,61.6428163 53.2056659,63.1812698 C53.83596,64.927843 54.6779771,66.5912102 55.7130243,68.1344441 C56.7974563,69.7321996 58.1093136,71.164397 59.6074319,72.3860959 C60.1877267,72.8817079 60.8047619,73.3329574 61.4532745,73.7359954 C62.4748439,74.3534515 63.5453697,74.8866836 64.6541575,75.3303648 C65.0062546,75.4791727 65.3263429,75.6279805 65.6144224,75.7236426 C65.9077386,75.8428333 66.2112826,75.9353298 66.5213392,76 C66.8313958,75.9353298 67.1349399,75.8428333 67.4282561,75.7236426 C67.7163355,75.6279805 68.0364238,75.4791727 68.3991906,75.3303648 C69.4899033,74.8845355 70.542531,74.3513317 71.5467255,73.7359954 C72.1928274,73.3294237 72.8096114,72.8783579 73.3925681,72.3860959 C74.8933275,71.167176 76.2055628,69.7345659 77.2869757,68.1344441 C78.3220229,66.5912102 79.16404,64.927843 79.7943341,63.1812698 C80.3386822,61.6428163 80.6375042,60.0288438 80.6799117,58.3981614 C80.8186166,52.8710141 81,41.6997989 81,41.6997989 L80.8612951,41.6891698 Z' id='crest-path-pixel-perfect-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")}}.sc-phn-level-0-h header.sc-phn-level-0 phn-crest.sc-phn-level-0{z-index:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}@media (min-width: 1300px){.sc-phn-level-0-h header.sc-phn-level-0 phn-crest.sc-phn-level-0{z-index:1}}.sc-phn-level-0-h header.sc-phn-level-0 phn-burger-button.sc-phn-level-0{padding:1.25rem 0 1rem 0.75rem}@media (min-width: 480px){.sc-phn-level-0-h header.sc-phn-level-0 phn-burger-button.sc-phn-level-0{padding:1.25rem 0 1rem 0.75rem}}@media (min-width: 760px){.sc-phn-level-0-h header.sc-phn-level-0 phn-burger-button.sc-phn-level-0{padding:1.75rem 0 1.5rem 1.25rem}}@media (min-width: 1000px){.sc-phn-level-0-h header.sc-phn-level-0 phn-burger-button.sc-phn-level-0{padding:2rem 0 1.75rem 1.5rem}}@media (min-width: 1760px){.sc-phn-level-0-h header.sc-phn-level-0 phn-burger-button.sc-phn-level-0{padding:2.25rem 0 2rem 1.75rem}}.sc-phn-level-0-h header.sc-phn-level-0 .burger-button.sc-phn-level-0:focus{outline-width:2px;outline-style:solid;outline-offset:1px;outline-color:#1a44ea}.sc-phn-level-0-h .main-content.sc-phn-level-0{width:1.25rem}.sc-phn-level-0-h .main-content.sc-phn-level-0:focus{outline-style:none}.sc-phn-level-0-h .sr-only.sc-phn-level-0{position:absolute;width:0.0625rem;height:0.0625rem;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{width:1.5rem}@media (min-width: 760px){.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{width:1.5rem}}@media (min-width: 1000px){.sc-phn-level-0-h phn-p-icon.sc-phn-level-0{width:1.5rem}}";

class Level0 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.navigationLoaded = createEvent(this, "navigationLoaded", 7);
    this.operationPipeline = [];
    this.logoLoaded = false;
    this.drawerTimeout = new Timeout(20000);
    this.locale = undefined;
    this.breakpoint = undefined;
    this.loadingContent = false;
    this.receivedContent = false;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.app = Application.default;
    this.displayLogoOnly = false;
    this.limitedWidth = false;
    this.usingKeyboard = false;
    this.drawerClosed = true;
    this.scrolledPastHeader = false;
    this.showBackdrop = false;
    this.routingKeyHistory = [];
    this.routingKeyPointer = RoutingKeyPointers.LEVEL_ZERO;
    this.isNavigationLoaded = false;
    this.isLoading = false;
    this.isMyPorscheHoveredOn = false;
  }
  loadingContentWatcher() {
    this.setNavigationLoaded();
  }
  breakpointWatcher() {
    this.updateRoutingKeyPointerOfMobileLevel1();
    this.setNavigationLoaded();
    this.handleResizeAnimation();
  }
  handleResizeAnimation() {
    if (!isDesktop(this.breakpoint) && !this.drawerClosed) {
      this.operationPipeline.push(() => {
        animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);
      });
    }
  }
  receivedContentWatcher() {
    this.setNavigationLoaded();
  }
  logoLoadedHandler() {
    this.logoLoaded = true;
    this.setNavigationLoaded();
  }
  scrollHandler() {
    this.scrolledPastHeader = this.el.getBoundingClientRect().bottom <= 0;
  }
  handleKeyDown(e) {
    if (e.key === 'Escape' && !this.drawerClosed) {
      this.usingKeyboard = true;
      this.handleClickDrawerHeaderClose();
      return;
    }
  }
  handleClick(e) {
    this.usingKeyboard = IsKeyboardClick(e);
  }
  handleMobileMenuItemClick({ detail: newRoutingKeys }) {
    this.routingKeyHistory = [...this.routingKeyHistory.slice(0, this.routingKeyPointer + 1), ...newRoutingKeys];
    this.routingKeyPointer = this.routingKeyPointer + newRoutingKeys.length;
    this.updateRouterStore();
  }
  handleSideDrawerItemClick({ detail: routingKeys }) {
    this.routingKeyHistory = [...this.routingKeyHistory.slice(0, this.routingKeyPointer), ...routingKeys];
    if (routingKeys.length > 0) {
      this.routingKeyPointer = this.routingKeyPointer + routingKeys.length - 1;
    }
    this.updateRouterStore();
  }
  handleClickDrawerHeaderBack() {
    this.routingKeyPointer = this.routingKeyPointer - 1;
    this.updateRouterStore();
  }
  handleClickDrawerHeaderClose() {
    if (isPlayingSingleDrawerAnimation() || isPlayingDoubleDrawerAnimation()) {
      return;
    }
    this.routingKeyPointer = -1;
    this.updateRouterStore();
    if (isDesktop(this.breakpoint)) {
      animationManager.play(AnimationSequences.CLOSE_DOUBLE_DRAWER).then(() => {
        this.operationPipeline.push(() => {
          this.handleDrawerClosed();
        });
      });
    }
    else {
      this.operationPipeline.push(() => {
        animationManager.play(AnimationSequences.CLOSE_SINGLE_DRAWER).then(() => {
          this.operationPipeline.push(() => {
            this.handleDrawerClosed();
          });
        });
      });
    }
  }
  handleBackdropClosed() {
    this.showBackdrop = false;
  }
  handleDrawerChanged({ detail: isNavigatingBackwards }) {
    const activeRoutingKey = isNavigatingBackwards
      ? this.routingKeyHistory[this.routingKeyPointer + 1]
      : this.routingKeyHistory[this.routingKeyPointer];
    const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey !== null && activeRoutingKey !== void 0 ? activeRoutingKey : '');
    if (topLevelRoutingKey !== RoutingKeys.DEALER_SEARCH || topLevelRoutingKey === activeRoutingKey) {
      return;
    }
    if (isNavigatingBackwards) {
      dealerSearchResultsStore.state.savedDealerCookie = null;
      return;
    }
    const dealerId = getLastRoutingSegment(activeRoutingKey);
    const { ppnDealer: savedDealer } = dealerSearchResultsStore.state.ppnDealers[dealerId] || {};
    if (savedDealer !== undefined) {
      dealerSearchResultsStore.state.savedDealerCookie = {
        id: savedDealer.id,
        latitude: savedDealer.coordinates.latitude,
        longitude: savedDealer.coordinates.longitude
      };
    }
  }
  async handleOpenDrawer(event) {
    await this.openDrawer(event.detail);
  }
  updateRouterStore() {
    routerStore.state.routingKeyHistory = this.routingKeyHistory;
    routerStore.state.routingKeyPointer = this.routingKeyPointer;
  }
  handleDrawerClosed() {
    this.drawerClosed = true;
    if (this.usingKeyboard) {
      focusOnElement(this.el.querySelector('phn-burger-button phn-p-button-pure'));
    }
  }
  updateRoutingKeyPointerOfMobileLevel1() {
    if (this.routingKeyPointer === RoutingKeyPointers.LEVEL_ONE) {
      this.routingKeyPointer = isDesktop(this.breakpoint) ? RoutingKeyPointers.LEVEL_TWO : RoutingKeyPointers.LEVEL_ONE;
    }
  }
  setNavigationLoaded() {
    this.isNavigationLoaded = !this.loadingContent && this.logoLoaded;
    this.navigationLoaded.emit(this.isNavigationLoaded);
  }
  setInitialRoutingProperties(initialRoutingKey) {
    if (isString(initialRoutingKey)) {
      this.setRoutingProperties([initialRoutingKey]);
    }
    else if (routerStore.state.initialRoutingKeyHistory !== null) {
      this.setRoutingProperties(routerStore.state.initialRoutingKeyHistory);
    }
    else {
      this.setRoutingProperties([RoutingKeys.MODELS]);
    }
  }
  async openDrawer(routingKeyWithClick) {
    const { initialRoutingKey, isKeyboardClick } = routingKeyWithClick;
    if (!this.drawerClosed) {
      return;
    }
    this.isLoading = true;
    this.usingKeyboard = isKeyboardClick;
    this.drawerClosed = false;
    this.showBackdrop = true;
    this.setInitialRoutingProperties(initialRoutingKey);
    await componentsOnReady(this.el, this.drawerTimeout, '.drawer', 'phn-backdrop');
    this.isLoading = false;
    if (isDesktop(this.breakpoint)) {
      animationManager.play(AnimationSequences.OPEN_DOUBLE_DRAWER);
    }
    else {
      this.operationPipeline.push(() => {
        animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);
      });
    }
  }
  isDefaultRouteOnMobile() {
    return (!isDesktop(this.breakpoint) &&
      routerStore.state.initialRoutingKeyHistory === null &&
      this.routingKeyHistory.length === 2 &&
      this.routingKeyHistory[1] === RoutingKeys.MODELS);
  }
  setRoutingProperties(initialRoutingKeys) {
    this.routingKeyHistory = [RoutingKeys.MAIN_MENU, ...initialRoutingKeys];
    this.routingKeyPointer = isDesktop(this.breakpoint) ? RoutingKeyPointers.LEVEL_TWO : RoutingKeyPointers.LEVEL_ONE;
    if (!this.isDefaultRouteOnMobile()) {
      this.routingKeyPointer = this.routingKeyHistory.length - 1;
    }
    this.updateRouterStore();
  }
  disconnectedCallback() {
    this.drawerTimeout.cancel();
  }
  async componentDidRender() {
    const promises = [];
    for (const operation of this.operationPipeline) {
      const maybePromise = operation();
      if (isPromise(maybePromise)) {
        promises.push(maybePromise);
      }
    }
    await Promise.all(promises);
    this.operationPipeline.splice(0, this.operationPipeline.length);
  }
  getLogoSize() {
    if (featureToggles.isFeatureEnabled(FEATURE_PORSCHE_75_YEARS_LOGO, windowService.location.search)) {
      return 'medium';
    }
    return this.breakpoint >= breakpoint.m ? 'medium' : 'small';
  }
  render() {
    const renderBackdrop = this.showBackdrop;
    return (hAsync(Host, { class: `${constructThemeClass(this.mode, this.theme)}-theme themed-background` }, hAsync("header", { class: this.limitedWidth ? 'limited-width' : '' }, renderBackdrop ? (hAsync("phn-backdrop", { activeRoutingKey: this.routingKeyHistory[this.routingKeyPointer], style: this.isLoading ? { display: 'none' } : { backgroundColor: 'rgba(0, 0, 0, 0)', opacity: '0' } })) : null, hAsync("div", { class: "level-0-content" }, !this.displayLogoOnly ? (hAsync("div", { class: "level-0-content-icons" }, hAsync("phn-level-0-icons", { locale: this.locale, theme: this.theme, mode: this.mode, app: this.app, breakpoint: this.breakpoint, isLoading: this.isLoading, isNavigationLoaded: this.isNavigationLoaded }, hAsync("div", { class: "level-0-content-logo" }, hAsync("phn-logo", { app: this.app, locale: this.locale, theme: this.theme, mode: this.mode, size: this.getLogoSize(), breakpoint: this.breakpoint, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? (hAsync("div", { class: "crest-skeleton skeleton-container" }, this.breakpoint > breakpoint.xs ? hAsync("span", { class: "label-bone" }) : hAsync("span", { class: "crest-bone" }))) : null)), isShopAvailable(this.locale, this.app) ? (hAsync("contextual-drawer", null, hAsync("div", { slot: "contextual_drawer_header" }, hAsync("slot", { name: "contextual_drawer_header" })))) : null)) : (hAsync("div", { class: "level-0-content-logo" }, hAsync("phn-logo", { app: this.app, locale: this.locale, theme: this.theme, mode: this.mode, size: this.getLogoSize(), breakpoint: this.breakpoint, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? (hAsync("div", { class: "crest-skeleton skeleton-container" }, this.breakpoint > breakpoint.xs ? hAsync("span", { class: "label-bone" }) : hAsync("span", { class: "crest-bone" }))) : null))), !this.drawerClosed ? (isDesktop(this.breakpoint) ? (hAsync("phn-double-drawer", { class: "drawer", style: this.isLoading ? { display: 'none' } : {}, routingKeyHistory: this.routingKeyHistory, routingKeyPointer: this.routingKeyPointer, breakpoint: this.breakpoint, initialUsingKeyboard: this.usingKeyboard, locale: this.locale, receivedContent: this.receivedContent })) : (hAsync("phn-single-drawer", { class: "drawer", style: this.isLoading ? { display: 'none' } : {}, routingKeyHistory: this.routingKeyHistory, routingKeyPointer: this.routingKeyPointer, breakpoint: this.breakpoint, usingKeyboard: this.usingKeyboard, locale: this.locale, receivedContent: this.receivedContent }))) : null)));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "loadingContent": ["loadingContentWatcher"],
    "breakpoint": ["breakpointWatcher"],
    "receivedContent": ["receivedContentWatcher"]
  }; }
  static get style() { return level0Css; }
  static get cmpMeta() { return {
    "$flags$": 6,
    "$tagName$": "phn-level-0",
    "$members$": {
      "locale": [1],
      "breakpoint": [2],
      "loadingContent": [4, "loading-content"],
      "receivedContent": [4, "received-content"],
      "theme": [1],
      "mode": [1],
      "app": [1],
      "displayLogoOnly": [4, "display-logo-only"],
      "limitedWidth": [4, "limited-width"],
      "usingKeyboard": [32],
      "drawerClosed": [32],
      "scrolledPastHeader": [32],
      "showBackdrop": [32],
      "routingKeyHistory": [32],
      "routingKeyPointer": [32],
      "isNavigationLoaded": [32],
      "isLoading": [32],
      "isMyPorscheHoveredOn": [32]
    },
    "$listeners$": [[0, "logoLoaded", "logoLoadedHandler"], [9, "scroll", "scrollHandler"], [9, "keydown", "handleKeyDown"], [1, "click", "handleClick"], [0, "mobileMenuItemClick", "handleMobileMenuItemClick"], [0, "sideDrawerItemClick", "handleSideDrawerItemClick"], [0, "clickDrawerHeaderBack", "handleClickDrawerHeaderBack"], [0, "clickDrawerHeaderClose", "handleClickDrawerHeaderClose"], [0, "backdropClosed", "handleBackdropClosed"], [0, "drawerChanged", "handleDrawerChanged"], [0, "openDrawer", "handleOpenDrawer"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function isPcomSearchAvailable(locale, app) {
  const countryList = ['de-DE', 'en-US', 'en-CN', 'zh-CN'];
  return featureToggles.isPcomSearchToggleActive() && countryList.includes(locale) && app === Application.pcom;
}
function getSearchLink(locale) {
  switch (locale) {
    case 'de-DE':
      return 'https://www.porsche.com/germany/search/';
    case 'en-US':
      return 'https://www.porsche.com/usa/search/';
    case 'en-CN':
      return 'https://www.porsche.com/china/en/search/';
    case 'zh-CN':
      return 'https://www.porsche.com/china/zh/search/';
    default:
      return '';
  }
}

function pureButtonSkeleton() {
  return (hAsync("div", { class: "skeleton-container" },
    hAsync("div", { class: "pure-button-skeleton" })));
}
function burgerButtonSkeleton() {
  return (hAsync("div", { class: "skeleton-container" },
    hAsync("div", { class: "burger-button-skeleton" })));
}

function pcomIcons({ locale, app, mode, theme, isNavigationLoaded }) {
  function sendDataLayerEvent(url) {
    globalDataLayerService.pushDataLayerEvent(EventActions.PCOM_SEARCH_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.pcom.search',
        clickElementName: 'Pcom Search',
        targetUrl: url
      }
    });
  }
  return {
    leftIcons: isPcomSearchAvailable(locale, app) ? (hAsync("div", { class: "icon" },
      hAsync("phn-p-link-pure", { icon: "search", "hide-label": "true", stretch: "true", aria: "{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the Porsche.com search' }", "data-test-id": "pcom-search-button", target: '_self', href: getSearchLink(locale), onClick: () => {
          sendDataLayerEvent(getSearchLink(locale));
        }, theme: getRightTheme(theme, mode), style: isNavigationLoaded ? {} : { display: 'none' } }),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null,
    rightIcons: null
  };
}

function shopIcons({ locale, app, mode, theme, isNavigationLoaded }) {
  function getShoppingCartLink() {
    var _a;
    const shopLink = (_a = navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.cart;
    if (shopLink !== undefined && shopLink !== '') {
      return `${shopLink}`;
    }
    return '';
  }
  function showShoppingCart() {
    const { numberOfShoppingItems, shopInformation } = shopStateStore.state;
    let numberOfItems = shopInformation.numberOfShoppingItems;
    if (numberOfItems === 0) {
      numberOfItems = numberOfShoppingItems;
    }
    switch (true) {
      case numberOfItems === 0:
        return 'shopping-bag';
      case numberOfItems > 0:
        return 'shopping-bag-filled';
      default:
        return 'shopping-bag';
    }
  }
  function getAriaLabelForShoppingCart() {
    const { shopInformation } = shopStateStore.state;
    return `My shopping bag, ${shopInformation.numberOfShoppingItems} items, estimated subtotal ${shopInformation.subTotal}`;
  }
  return {
    leftIcons: isShopAvailable(locale, app) ? (hAsync("div", { class: "icon" },
      hAsync("phn-p-button-pure", { icon: "search", "hide-label": "true", stretch: "true", aria: "{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the shop search field' }", "data-test-id": "search-button", onClick: () => {
          animationManager.play('openContextualDrawer');
          sendDataLayerEventContextualDrawer();
        }, style: isNavigationLoaded ? {} : { display: 'none' }, theme: getRightTheme(theme, mode) }),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null,
    rightIcons: isShopAvailable(locale, app) ? (hAsync("div", { class: "icon" },
      hAsync("phn-p-link-pure", { target: '_self', "hide-label": "true", icon: "none", theme: getRightTheme(theme, mode), style: isNavigationLoaded ? {} : { display: 'none' }, class: "shopping-cart-link", "data-test-id": "shopping-cart-link", onClick: () => {
          sendDataLayerEventShoppingCart(getShoppingCartLink());
        } },
        hAsync("a", { href: getShoppingCartLink(), "aria-label": getAriaLabelForShoppingCart() },
          hAsync("div", { class: "icon-flex" },
            hAsync(ShoppingCartCount, { styleClass: "shopping-item-count", theme: theme, mode: mode }),
            hAsync("phn-p-icon", { theme: getRightTheme(theme, mode), name: showShoppingCart(), "data-test-id": "shopping-cart-link-icon" })))),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null
  };
}
const ShoppingCartCount = ({ styleClass, theme, mode }) => {
  const shoppingItemCountOver99 = '+99';
  const { numberOfShoppingItems, shopInformation } = shopStateStore.state;
  let numberOfItems = shopInformation.numberOfShoppingItems;
  if (numberOfItems === 0) {
    numberOfItems = numberOfShoppingItems;
  }
  const displayedCount = numberOfItems < 99 ? numberOfItems : shoppingItemCountOver99;
  if (numberOfItems <= 0)
    return '';
  return (hAsync("span", { class: styleClass, style: mode === NavigationMode.hero && theme === NavigationTheme.dark ? { color: 'black' } : { color: 'white' } }, displayedCount));
};
function sendDataLayerEventContextualDrawer() {
  globalDataLayerService.pushDataLayerEvent(EventActions.CONTEXTUAL_BUTTON_CLICK, {
    componentClick: {
      clickElementId: 'mainmenu.shop.search',
      clickElementName: 'Shop search'
    }
  });
}
function sendDataLayerEventShoppingCart(url) {
  globalDataLayerService.pushDataLayerEvent(EventActions.CONTEXTUAL_BUTTON_CLICK, {
    componentClick: {
      clickElementId: 'mainmenu.shop.shoppingbag',
      clickElementName: 'Shopping cart',
      targetUrl: url
    }
  });
}

const level0IconsCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-level-0-icons{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-level-0-icons{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-level-0-icons{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-level-0-icons{-ms-flex-wrap:wrap;flex-wrap:wrap}.contextual-icons.sc-phn-level-0-icons{display:grid;grid-template-columns:1fr auto 1fr;grid-template-rows:1fr;gap:0px 0px;grid-template-areas:\"left center right\";width:100%}.contextual-icons.sc-phn-level-0-icons div.left-icons.sc-phn-level-0-icons,.contextual-icons.sc-phn-level-0-icons div.right-icons.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center}.contextual-icons.sc-phn-level-0-icons div.left-icons.sc-phn-level-0-icons{grid-area:left;justify-self:start}.contextual-icons.sc-phn-level-0-icons-s>*,.contextual-icons .sc-phn-level-0-icons-s>*{grid-area:center;justify-self:center}.contextual-icons.sc-phn-level-0-icons div.right-icons.sc-phn-level-0-icons{grid-area:right;justify-self:end}.contextual-icons.sc-phn-level-0-icons .icon-flex.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{position:relative;overflow:hidden;padding:0.375rem}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-cart-link.sc-phn-level-0-icons{position:relative;z-index:2}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-item-count.sc-phn-level-0-icons{position:absolute;z-index:12;font-size:7px;font-weight:600;line-height:28px;-ms-flex-pack:center;justify-content:center}@media (min-width: 1000px){.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{padding:0.5rem}}@media (min-width: 1760px){.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{padding:0.75rem}}.skeleton-container.sc-phn-level-0-icons{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex;height:28px}.skeleton-container.sc-phn-level-0-icons .burger-button-skeleton.sc-phn-level-0-icons{margin-right:0.375rem;width:1.5rem;height:1.5rem;border-radius:4px;background:#d8d8db}@media (min-width: 760px){.skeleton-container.sc-phn-level-0-icons .burger-button-skeleton.sc-phn-level-0-icons{width:4.75rem;height:1.5rem}}.skeleton-container.sc-phn-level-0-icons .pure-button-skeleton.sc-phn-level-0-icons{width:1.5rem;height:1.5rem;border-radius:4px;background:#d8d8db}";

class Level0Icons {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.openDrawer = createEvent(this, "openDrawer", 7);
    this.locale = undefined;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.app = Application.default;
    this.breakpoint = undefined;
    this.isLoading = undefined;
    this.isNavigationLoaded = undefined;
  }
  render() {
    const contextualIconsProps = {
      locale: this.locale,
      app: this.app,
      mode: this.mode,
      theme: this.theme,
      isNavigationLoaded: this.isNavigationLoaded
    };
    const IconsStrategies = {
      pcom: () => pcomIcons(contextualIconsProps),
      shop: () => shopIcons(contextualIconsProps),
      default: () => ({ leftIcons: null, rightIcons: null })
    };
    const iconsStrategy = IconsStrategies[this.app];
    const contextualIcons = iconsStrategy();
    const hasMarketPorscheID = navContentStore.state.myPorsche;
    return (hAsync("div", { class: "contextual-icons" }, hAsync("div", { class: "left-icons" }, hAsync("phn-burger-button", { theme: this.theme, mode: this.mode, hideLabel: isPcomSearchAvailable(this.locale, this.app) || isShopAvailable(this.locale, this.app)
        ? this.breakpoint <= breakpoint.xs
        : this.breakpoint < breakpoint.xs, alignLabel: 'right', isLoading: this.isLoading, onClick: (e) => {
        this.openDrawer.emit({ initialRoutingKey: '', isKeyboardClick: IsKeyboardClick(e) });
      }, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? burgerButtonSkeleton() : null, this.breakpoint <= breakpoint.xs ? contextualIcons.leftIcons : null), hAsync("slot", null), hAsync("div", { class: "right-icons" }, this.breakpoint > breakpoint.xs ? contextualIcons.leftIcons : null, contextualIcons.rightIcons, hasMarketPorscheID ? (hAsync("div", { class: "icon" }, hAsync("phn-my-porsche-icon-button", { mode: this.mode, theme: this.theme, onClick: (e) => {
        this.openDrawer.emit({
          initialRoutingKey: RoutingKeys.MY_PORSCHE,
          isKeyboardClick: IsKeyboardClick(e)
        });
      }, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? pureButtonSkeleton() : null)) : null)));
  }
  static get style() { return level0IconsCss; }
  static get cmpMeta() { return {
    "$flags$": 6,
    "$tagName$": "phn-level-0-icons",
    "$members$": {
      "locale": [1],
      "theme": [1],
      "mode": [1],
      "app": [1],
      "breakpoint": [2],
      "isLoading": [4, "is-loading"],
      "isNavigationLoaded": [4, "is-navigation-loaded"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const level1Css = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-level-1{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-level-1{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-level-1{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-level-1{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-level-1{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-level-1{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-level-1-h{display:block}.sc-phn-level-1-h phn-menu-item.sc-phn-level-1{margin-top:2.25rem}.sc-phn-level-1-h phn-menu-item.sc-phn-level-1:first-of-type{margin-top:0}";

var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
class Level1 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.mobileMenuItemClick = createEvent(this, "mobileMenuItemClick", 7);
    this.locale = undefined;
    this.breakpoint = undefined;
  }
  showRightIconRight(iconRight) {
    const { app } = navStateStore.state;
    const isOneUiMobileShop = isShopAvailable(this.locale, app) && !isDesktop(this.breakpoint);
    if (iconRight !== undefined && isOneUiMobileShop) {
      iconRight = 'arrow-head-right';
    }
    return iconRight;
  }
  render() {
    const { loggedInState, unreadMessagesCount, userConsent } = navStateStore.state;
    const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, this.locale, loggedInState, unreadMessagesCount, userConsent);
    return (hAsync("nav", null, level1Items.map((_a) => {
      var { routingKeys, elementId, iconRight, showIconModifier } = _a, level1Item = __rest$1(_a, ["routingKeys", "elementId", "iconRight", "showIconModifier"]);
      return (hAsync("phn-menu-item", Object.assign({ key: elementId, elementId: elementId, onClick: () => {
          if (level1Item.link === undefined) {
            this.mobileMenuItemClick.emit(routingKeys);
          }
        }, iconRight: iconRight !== undefined ? this.showRightIconRight(iconRight) : 'arrow-head-right', variant: MenuItemVariant.Level1 }, level1Item), showIconModifier ? (hAsync("span", { slot: "icon-modifier", "aria-hidden": "true", class: "myporsche-unread-messages-indicator", "data-test-id": "unread-messages-indicator" })) : null));
    })));
  }
  static get style() { return level1Css; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-level-1",
    "$members$": {
      "locale": [1],
      "breakpoint": [2]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const logoCss = "";

class Logo {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.logoLoaded = createEvent(this, "logoLoaded", 7);
    this.size = undefined;
    this.locale = undefined;
    this.app = undefined;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.breakpoint = undefined;
  }
  sendDataLayerEvent(crest) {
    globalDataLayerService.pushDataLayerEvent(EventActions.CREST_CLICK, {
      componentClick: {
        clickElementId: crest.id,
        clickElementName: crest.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: crest.link
      }
    });
  }
  componentWillLoad() {
    componentsJs.componentsReady(this.el) // TR: I believe this first call waits for the phn-logo element to be ready
      .then(() => componentsJs.componentsReady(this.el)) // TR: Then this second call actually waits for its children (i.e.: phn-p-marque) to be ready
      .then(() => {
      this.logoLoaded.emit();
    });
  }
  getLogoLink(locale, app, crest, shop) {
    return isShopAvailableAndLogoLinksToShop(locale, app, shop) ? shop.link : crest.link;
  }
  getLogoAriaLabel(locale, app, shop) {
    return isShopAvailableAndLogoLinksToShop(locale, app, shop) ? 'Porsche Shop Homepage' : 'Porsche.com Homepage';
  }
  render() {
    const { crest, shop } = navContentStore.state;
    const logoLink = this.getLogoLink(this.locale, this.app, crest, shop);
    const logoAriaLabel = this.getLogoAriaLabel(this.locale, this.app, shop);
    return isDesktop(this.breakpoint) ? (hAsync("phn-p-wordmark", { onClick: () => this.sendDataLayerEvent(crest), href: isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel }, size: "small", theme: getRightTheme(this.theme, this.mode) })) : (hAsync("phn-p-crest", { onClick: () => this.sendDataLayerEvent(crest), href: isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel } }));
  }
  get el() { return getElement(this); }
  static get style() { return logoCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-logo",
    "$members$": {
      "size": [1],
      "locale": [1],
      "app": [1],
      "theme": [1],
      "mode": [1],
      "breakpoint": [2]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function MenuItemCountIndicator$1({ count }) {
  if (count <= 0)
    return null;
  return (hAsync("phn-p-tag", { slot: "suffix", class: "menu-item-count", color: "notification-info-soft" }, count));
}

function MenuItemLink({ content, count, showSkeleton }) {
  return content ? (hAsync(Fragment, null,
    hAsync("phn-menu-item", { elementId: getVehiclePurchaseRoutingKey(content.id), key: content.id, class: `${showSkeleton ? 'skeleton' : 'vehiclepurchase-link'}`, analyticsId: content.id, text: content.text, link: content.link, datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK, role: "listitem" },
      hAsync(MenuItemCountIndicator$1, { count: count })))) : null;
}

const menuCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-menu{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-menu{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-menu{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-menu{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-menu{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-menu{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-menu-h{display:block}.sc-phn-menu-h .skeleton.sc-phn-menu{width:auto;height:1.5rem;background:#d8d8db;border-radius:4px}.sc-phn-menu-h .skeleton-headline.sc-phn-menu{width:auto;height:3.125rem;background:#d8d8db;border-radius:4px}.sc-phn-menu-h ul.sc-phn-menu{padding:0;margin:0}.sc-phn-menu-h phn-headline.sc-phn-menu{margin-bottom:2.25rem}.sc-phn-menu-h phn-menu-item.sc-phn-menu{margin-top:1.5rem}@media (min-width: 480px){.sc-phn-menu-h phn-menu-item.sc-phn-menu{margin-top:1.25rem}.sc-phn-menu-h phn-menu-item.sc-phn-menu:first-of-type{margin:0}}@media (min-width: 1300px){.sc-phn-menu-h phn-menu-item.sc-phn-menu{margin-top:2rem}}.sc-phn-menu-h phn-menu-item.sc-phn-menu .vehiclepurchase-link.sc-phn-menu{margin-top:1.5rem}@media (min-width: 480px){.sc-phn-menu-h phn-menu-item.sc-phn-menu .vehiclepurchase-link.sc-phn-menu{margin-top:1.25rem}}@media (min-width: 1300px){.sc-phn-menu-h phn-menu-item.sc-phn-menu .vehiclepurchase-link.sc-phn-menu{margin-top:1.875rem}}.sc-phn-menu-h phn-menu-item.sc-phn-menu .vehiclepurchase-link.sc-phn-menu .menu-item-count.sc-phn-menu{margin-left:1rem}";

class Menu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.mobileMenuItemClick = createEvent(this, "mobileMenuItemClick", 6);
    this.savedVehiclesPosition = 3;
    this.routingKey = undefined;
    this.item = undefined;
    this.showHeadline = true;
    this.receivedContent = false;
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = !this.receivedContent;
  }
  showMenu(childItem) {
    if (!isString(childItem.link)) {
      this.mobileMenuItemClick.emit([constructRoutingKey(this.routingKey, childItem.id)]);
    }
  }
  getSavedVehiclesContent(content) {
    const savedVehicles = content.savedVehicles;
    if (savedVehicles !== undefined) {
      return savedVehicles;
    }
    return null;
  }
  render() {
    const displayedItem = this.item.children.length === 1 ? this.item.children[0] : this.item;
    const savedVehicles = this.getSavedVehiclesContent(this.item);
    const { savedVehiclesCount } = finderStateStore.state;
    const menuItems = displayedItem.children.map((childItem) => (hAsync("phn-menu-item", { key: childItem.id, class: `${this.showSkeleton ? 'skeleton' : ''}`, elementId: constructRoutingKey(this.routingKey, childItem.id), iconRight: childItem.children.length > 0 && !this.showSkeleton ? 'arrow-head-right' : '', analyticsId: childItem.id, text: childItem.text, link: childItem.link, datalayerEventAction: isString(childItem.link) ? EventActions.NAVIGATION_LINK_CLICK : EventActions.NAVIGATION_CLICK, onClick: () => this.showMenu(childItem), role: "listitem" })));
    return (hAsync(Host, { role: "list" }, hAsync("ul", null, menuItems, savedVehicles
      ? menuItems.splice(this.savedVehiclesPosition, 0, hAsync(MenuItemLink, { content: savedVehicles, count: savedVehiclesCount, showSkeleton: this.showSkeleton }))
      : null)));
  }
  get el() { return getElement(this); }
  static get style() { return menuCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-menu",
    "$members$": {
      "routingKey": [1, "routing-key"],
      "item": [16],
      "showHeadline": [4, "show-headline"],
      "receivedContent": [4, "received-content"],
      "showSkeleton": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function MenuItemText({ text, size, subtext, fontWeight }) {
  return (hAsync("div", { class: "skeleton-item" },
    hAsync("phn-p-text", { size: size, color: "inherit", tag: "div", weight: fontWeight }, text),
    isString(subtext) ? (hAsync("div", { class: "text-limit" },
      hAsync("phn-p-text", { class: 'subtext', color: 'inherit', weight: "regular", size: "x-small", tag: "div", ellipsis: "true", "data-test-id": "subtext" }, subtext))) : null));
}

function Icon({ isLoading, icon }) {
  if (isLoading) {
    return (hAsync("div", { class: "icon-container" },
      hAsync("phn-p-spinner", { color: "inherit", size: "inherit" })));
  }
  if (isString(icon)) {
    return (hAsync("div", { class: "icon-container skeleton-item" },
      hAsync("phn-p-icon", { color: "inherit", size: "inherit", source: icon }),
      hAsync("slot", { name: "icon-modifier" })));
  }
  return null;
}

function sendDataLayerEvent({ datalayerEventAction = EventActions.NAVIGATION_CLICK, analyticsId, text, link, elementId, clickElementType, customDatalayerProperties = {} }) {
  globalDataLayerService.pushDataLayerEvent(datalayerEventAction, Object.assign(Object.assign({ componentClick: Object.assign({ clickElementId: analyticsId, clickElementName: text, targetElement: analyticsManager.getModelTargetElement(elementId, text), clickElementType }, (clickElementType === ClickElementTypes.Link ? { targetUrl: link } : {})), componentDisplay: {
      displayElementId: analyticsManager.calculateDisplayElementId(elementId),
      displayElementType: analyticsManager.calculateDisplayElementType(removeLastRoutingSegment(elementId), ElementTypes.menuItem),
      displayElementName: text
    } }, customDatalayerProperties), (datalayerEventAction === EventActions.MODEL_RANGE_CLICK
    ? {
      car: {
        modelRangeName: text.toLowerCase()
      }
    }
    : {})));
}

const menuItemCss = "@charset \"UTF-8\";@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-menu-item{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-menu-item{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-menu-item{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-menu-item{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-menu-item{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-menu-item{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-menu-item-h{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:start;align-items:flex-start}@media (min-width: 1300px){.sc-phn-menu-item-h{border-bottom:0}}.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 8px}@media (min-width: 1300px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item{padding-left:0;border-bottom:0}}.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1rem}@media (min-width: 480px) and (max-width: 759px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.25rem}}@media (min-width: 760px) and (max-width: 1299px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.125rem}}@media (min-width: 1300px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.25rem}}.sc-phn-menu-item-h phn-p-link-pure.has-icon.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.has-icon.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.has-icon.sc-phn-menu-item{padding-left:0}.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item .icon-container.sc-phn-menu-item{position:relative;margin-right:0.25rem;width:1.5rem;height:1.5rem}@media (min-width: 760px) and (max-width: 999px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item .icon-container.sc-phn-menu-item{height:1.75rem;width:1.75rem}}@media (min-width: 1000px) and (max-width: 1759px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item .icon-container.sc-phn-menu-item{width:1.5rem;height:1.5rem}}@media (min-width: 1760px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item .icon-container.sc-phn-menu-item{width:1.75rem;height:1.75rem}}.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item{margin-right:0.25rem;width:1.5rem}@media (min-width: 760px) and (max-width: 999px){.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item,.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item,.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item{width:1.75rem}}.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item *.sc-phn-menu-item{visibility:hidden}.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item:empty::after,.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item *.sc-phn-menu-item:empty::after{content:\" \"}.model-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.125rem}@media (min-width: 480px){.model-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.25rem}}@media (min-width: 760px){.model-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1rem}}@media (min-width: 1300px){.model-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.125rem}}@media (min-width: 1920px){.model-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.model-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.25rem}}.model-variant.skeleton.sc-phn-menu-item-h .media-container.skeleton-item.sc-phn-menu-item{width:9.625rem;height:5.375rem;border-radius:4px}@media (min-width: 480px){.model-variant.skeleton.sc-phn-menu-item-h .media-container.skeleton-item.sc-phn-menu-item{width:10.25rem;height:5.75rem}}@media (min-width: 760px){.model-variant.skeleton.sc-phn-menu-item-h .media-container.skeleton-item.sc-phn-menu-item{width:9.375rem;height:5.3125rem}}@media (min-width: 1300px){.model-variant.skeleton.sc-phn-menu-item-h .media-container.skeleton-item.sc-phn-menu-item{width:10.9375rem;height:6.125rem}}@media (min-width: 1920px){.model-variant.skeleton.sc-phn-menu-item-h .media-container.skeleton-item.sc-phn-menu-item{width:12.5rem;height:7rem}}.sc-phn-menu-item-h.model-variant.skeleton .media-container.skeleton-item.sc-phn-menu-item-s>img{visibility:hidden}.model-variant.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item{width:6.25rem}@media (min-width: 480px){.model-variant.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item{width:7.75rem}}@media (min-width: 760px){.model-variant.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item{width:5.4375rem}}@media (min-width: 1300px){.model-variant.skeleton.sc-phn-menu-item-h .skeleton-item.sc-phn-menu-item{width:7.75rem}}.dealer-details-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.dealer-details-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.dealer-details-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1rem}.dealer-details-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item,.dealer-details-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item,.dealer-details-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item .icon-container.sc-phn-menu-item phn-p-icon.sc-phn-menu-item{margin-right:0.25rem;width:1.5rem}.level1-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.25rem}@media (min-width: 480px){.level1-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.5rem}}@media (min-width: 760px){.level1-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.125rem}}@media (min-width: 1000px){.level1-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.25rem}}@media (min-width: 1300px){.level1-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.375rem}}@media (min-width: 1920px){.level1-variant.sc-phn-menu-item-h phn-p-link-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-p-button-pure.sc-phn-menu-item phn-p-text.sc-phn-menu-item,.level1-variant.sc-phn-menu-item-h phn-menu-item.sc-phn-menu-item phn-p-text.sc-phn-menu-item{font-size:1.5rem}}@media (min-width: 0px){div.text-limit.sc-phn-menu-item{width:220px}}@media (min-width: 480px){div.text-limit.sc-phn-menu-item{width:100%}}";

class MenuItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.text = '';
    this.analyticsId = undefined;
    this.subtext = '';
    this.fontWeight = 'regular';
    this.elementId = '';
    this.size = 'inherit';
    this.iconLeft = '';
    this.iconRight = '';
    this.link = '';
    this.isLoading = false;
    this.datalayerEventAction = EventActions.NAVIGATION_CLICK;
    this.customDatalayerProperties = {};
    this.target = '_self';
    this.variant = '';
    this.isModels = false;
  }
  sendDataLayerEvent(clickElementType, elementId) {
    sendDataLayerEvent({
      analyticsId: this.analyticsId,
      text: this.text,
      elementId,
      clickElementType,
      link: this.link,
      customDatalayerProperties: this.customDatalayerProperties,
      datalayerEventAction: this.datalayerEventAction
    });
  }
  existsSlot(slotName) {
    return this.el.querySelector(`[slot="${slotName}"]`) !== null;
  }
  render() {
    const body = (hAsync("div", { class: "phn-flex-row phn-align-center" }, this.existsSlot('media') ? (hAsync("div", { class: "media-container skeleton-item" }, hAsync("slot", { name: "media" }))) : null, hAsync(Icon, { isLoading: this.isLoading, icon: this.iconLeft }), !this.isModels && isString(this.text) ? (hAsync(MenuItemText, { size: this.size, text: this.text, subtext: this.subtext, fontWeight: this.fontWeight })) : undefined, this.existsSlot('suffix') ? (hAsync("div", null, hAsync("slot", { name: "suffix" }))) : null));
    if (isString(this.link)) {
      return (hAsync(Host, { class: this.variant }, hAsync("phn-p-link-pure", { class: `${isString(this.iconLeft) ? 'has-icon' : ''}`, icon: isString(this.iconRight) ? this.iconRight : 'none', "align-label": "left", stretch: isString(this.iconRight) ? 'true' : 'false', "data-id": this.elementId, target: this.target, onClick: () => {
          this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);
        } }, hAsync("a", { href: this.link }, body))));
    }
    return (hAsync(Host, { class: this.variant }, hAsync("phn-p-button-pure", { class: `${isString(this.iconLeft) ? 'has-icon' : ''}`, size: "inherit", icon: isString(this.iconRight) ? this.iconRight : 'none', "align-label": "left", stretch: isString(this.iconRight) ? 'true' : 'false', "data-id": this.elementId, onClick: () => {
        this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);
      } }, body)));
  }
  get el() { return getElement(this); }
  static get style() { return menuItemCss; }
  static get cmpMeta() { return {
    "$flags$": 6,
    "$tagName$": "phn-menu-item",
    "$members$": {
      "text": [1],
      "analyticsId": [1, "analytics-id"],
      "subtext": [1],
      "fontWeight": [1, "font-weight"],
      "elementId": [1, "element-id"],
      "size": [1],
      "iconLeft": [1, "icon-left"],
      "iconRight": [1, "icon-right"],
      "link": [1],
      "isLoading": [4, "is-loading"],
      "datalayerEventAction": [1, "datalayer-event-action"],
      "customDatalayerProperties": [16],
      "target": [1],
      "variant": [1],
      "isModels": [4, "is-models"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const menuItemCardCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-menu-item-card{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-menu-item-card{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-menu-item-card{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-menu-item-card{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-menu-item-card{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-menu-item-card{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-menu-item-card-h{display:block;padding:1.1875rem;margin-top:1rem;border-radius:8px;background-color:rgba(148, 149, 152, 0.18);-webkit-transition:background-color 0.24s ease;transition:background-color 0.24s ease;cursor:pointer}.sc-phn-menu-item-card-h button.sc-phn-menu-item-card{all:unset;display:block;width:100%}.skeleton.sc-phn-menu-item-card-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-menu-item-card-h *.sc-phn-menu-item-card{visibility:hidden}@media (min-width: 760px){.sc-phn-menu-item-card-h{background-color:#fff}}@media (min-width: 760px){.sc-phn-menu-item-card-h:hover{background-color:rgba(148, 149, 152, 0.18)}}.sc-phn-menu-item-card-h a.sc-phn-menu-item-card{text-decoration:none}.sc-phn-menu-item-card-h .subtext.sc-phn-menu-item-card{color:#010205}.sc-phn-menu-item-card-h .title-container.sc-phn-menu-item-card{width:100%;margin:0}.sc-phn-menu-item-card-h .title-container.sc-phn-menu-item-card phn-p-heading.sc-phn-menu-item-card{word-break:break-word;white-space:pre-line}.sc-phn-menu-item-card-h .title-container.sc-phn-menu-item-card phn-p-icon.sc-phn-menu-item-card{margin-left:1rem}";

class MenuItemCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.text = undefined;
    this.analyticsId = undefined;
    this.subtext = '';
    this.elementId = '';
    this.link = '';
    this.datalayerEventAction = EventActions.NAVIGATION_CLICK;
    this.customDatalayerProperties = {};
    this.target = '_self';
    this.iconLeft = '';
  }
  handleKeyDown(e) {
    var _a;
    if (e.key === 'Enter') {
      const anchorElement = (_a = getHTMLElement(e.target)) === null || _a === void 0 ? void 0 : _a.querySelector('a');
      const targetElement = anchorElement ? anchorElement : getHTMLElement(e.target);
      if (targetElement) {
        targetElement.click();
        !anchorElement ? this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId) : null;
      }
    }
  }
  sendDataLayerEvent(clickElementType, elementId) {
    sendDataLayerEvent({
      analyticsId: this.analyticsId,
      text: this.text,
      elementId,
      clickElementType,
      link: this.link,
      customDatalayerProperties: this.customDatalayerProperties,
      datalayerEventAction: this.datalayerEventAction
    });
  }
  renderTitle() {
    return (hAsync("div", { class: "phn-flex-row phn-align-center phn-justify-between title-container" }, hAsync("phn-p-heading", { tag: "h3", size: "medium" }, this.text), isString(this.iconLeft) ? hAsync("phn-p-icon", { name: this.iconLeft }) : null));
  }
  renderSubtitle() {
    if (!isString(this.subtext)) {
      return null;
    }
    return (hAsync("phn-p-text", { class: 'subtext', color: "contrast-medium", weight: "regular", size: "xx-small", tag: "div", ellipsis: "true", "data-test-id": "subtext" }, this.subtext));
  }
  render() {
    const body = (hAsync(Fragment, null, hAsync("div", { class: "texts" }, this.renderTitle(), this.renderSubtitle()), hAsync("slot", null)));
    if (isString(this.link))
      return (hAsync("a", { tabIndex: -1, onClick: () => {
          this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);
        }, class: "card-link", href: this.link, target: this.target }, body));
    return (hAsync(Host, null, hAsync("button", { tabIndex: -1, onClick: () => {
        this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);
      } }, body)));
  }
  get el() { return getElement(this); }
  static get style() { return menuItemCardCss; }
  static get cmpMeta() { return {
    "$flags$": 6,
    "$tagName$": "phn-menu-item-card",
    "$members$": {
      "text": [1],
      "analyticsId": [1, "analytics-id"],
      "subtext": [1],
      "elementId": [1, "element-id"],
      "link": [1],
      "datalayerEventAction": [1, "datalayer-event-action"],
      "customDatalayerProperties": [16],
      "target": [1],
      "iconLeft": [1, "icon-left"]
    },
    "$listeners$": [[0, "keydown", "handleKeyDown"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const modelsCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-models{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-models{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-models{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-models{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-models{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-models{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-models-h{display:block}@media (min-width: 760px){.sc-phn-models-h{margin-top:-1.75rem}}@media (min-width: 1760px){.sc-phn-models-h{margin-top:-2.25rem}}.sc-phn-models-h ul.sc-phn-models{margin:0;padding:0}.sc-phn-models-h .skeleton-headline.sc-phn-models{width:auto;height:3.125rem;background:#d8d8db;border-radius:4px}.sc-phn-models-h .series.sc-phn-models{-ms-flex-pack:center;justify-content:center;margin:0 0 0.5rem 0}@media (min-width: 760px){.sc-phn-models-h .series.sc-phn-models{margin:0 0 0.5rem 0}}@media (min-width: 1000px){.sc-phn-models-h .series.sc-phn-models{margin:0 0 0.25rem 0}}@media (min-width: 1760px){.sc-phn-models-h .series.sc-phn-models{margin:0 0 0.5rem 0}}.sc-phn-models-h .series.sc-phn-models .image.sc-phn-models{position:relative;-webkit-transition:-webkit-transform 0.24s ease;transition:-webkit-transform 0.24s ease;transition:transform 0.24s ease;transition:transform 0.24s ease, -webkit-transform 0.24s ease;inset:0px;backface-visibility:hidden;-webkit-backface-visibility:hidden;-webkit-transform:translateZ(0);transform:translateZ(0)}.sc-phn-models-h .series.sc-phn-models .image.sc-phn-models:hover{image-rendering:high-quality;-webkit-transform:scale3d(1.08, 1.08, 1.08);transform:scale3d(1.08, 1.08, 1.08)}@media (min-width: 0px){.sc-phn-models-h .series.sc-phn-models .image.sc-phn-models{width:10.875rem}}@media (min-width: 480px){.sc-phn-models-h .series.sc-phn-models .image.sc-phn-models{width:14.9375rem}}@media (min-width: 760px){.sc-phn-models-h .series.sc-phn-models .image.sc-phn-models{width:10.875rem}}@media (min-width: 1300px){.sc-phn-models-h .series.sc-phn-models .image.sc-phn-models{width:12.25rem}}@media (min-width: 1920px){.sc-phn-models-h .series.sc-phn-models .image.sc-phn-models{width:14.9375rem}}.sc-phn-models-h .series.skeleton.sc-phn-models{margin:0 0 0.5rem 0}@media (min-width: 480px){.sc-phn-models-h .series.skeleton.sc-phn-models{margin:0 0 1rem}}@media (min-width: 1920px){.sc-phn-models-h .series.skeleton.sc-phn-models{margin:0 0 1.5rem 0}}";

class Models {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.mobileMenuItemClick = createEvent(this, "mobileMenuItemClick", 7);
    this.seriesImagesLoaded = new Set();
    this.seriesImagesNotLoaded = new Set();
    this.breakpoint = undefined;
    this.showHeadline = false;
    this.showSkeleton = true;
  }
  showMenuWithModels(series) {
    const modelsSeriesRoutingKey = getModelsRoutingKey(series.id);
    this.mobileMenuItemClick.emit([modelsSeriesRoutingKey]);
  }
  handleImageLoad(seriesId) {
    const { models } = navContentStore.state;
    this.seriesImagesLoaded.add(seriesId);
    if (models.series.every(({ id }) => this.seriesImagesLoaded.has(id))) {
      this.showSkeleton = false;
    }
  }
  handleImageLoadError(seriesId) {
    this.handleImageLoad(seriesId);
    this.seriesImagesNotLoaded.add(seriesId);
  }
  getImageSource(image) {
    const assetPath = getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/series-assets`);
    const imageSize = getImageSize(this.breakpoint);
    const imagePath = `${assetPath}/${imageSize}`;
    return `${imagePath}/${image}.webp, ${imagePath}/${image}@2x.webp 2x`;
  }
  render() {
    const { models } = navContentStore.state;
    return (hAsync(Host, null, hAsync("ul", null, models.series.map((modelsSeries) => (hAsync("phn-menu-item", { key: modelsSeries.id, class: `series ${this.seriesImagesNotLoaded.has(modelsSeries.id) || this.showSkeleton ? 'skeleton' : ''}`, elementId: getModelsRoutingKey(modelsSeries.id), analyticsId: modelsSeries.id, text: modelsSeries.name, subtext: modelsSeries.tags.map((tag) => tag.text).join(' | '), onClick: () => this.showMenuWithModels(modelsSeries), variant: MenuItemVariant.Model, isModels: true, datalayerEventAction: EventActions.MODEL_RANGE_CLICK, role: "listitem" }, hAsync("img", { slot: "media", class: "image", srcSet: this.getImageSource(modelsSeries.image), alt: `${modelsSeries.name} Frontshot`, onLoad: () => this.handleImageLoad(modelsSeries.id), onError: () => this.handleImageLoadError(modelsSeries.id) })))))));
  }
  static get assetsDirs() { return ["series-assets"]; }
  get el() { return getElement(this); }
  static get style() { return modelsCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-models",
    "$members$": {
      "breakpoint": [2],
      "showHeadline": [4, "show-headline"],
      "showSkeleton": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function Links({ content, onLogoutClick, showSkeleton }) {
  const messagesPosition = 1, savedSearchesPosition = 2, savedVehiclesPosition = 3;
  const { loggedInState, unreadMessagesCount } = navStateStore.state;
  const isLoggedIn = IsLoggedIn(loggedInState);
  const { links, messages, savedSearches, savedVehicles } = content;
  const { savedSearchesCount, savedVehiclesCount } = finderStateStore.state;
  const convertedLinks = links.map((link) => (hAsync("div", { class: "myporsche-link-item", key: link.id },
    hAsync("phn-menu-item", { elementId: getMyPorscheRoutingKey(link.id), class: `${showSkeleton ? 'skeleton' : ''}`, analyticsId: link.id, text: link.text, link: link.link, datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK }))));
  convertedLinks.splice(messagesPosition, 0, hAsync(MenuItemCountLink, { content: messages, count: unreadMessagesCount, showSkeleton: showSkeleton }));
  if (savedSearches && savedSearches.text !== '' && featureToggles.isSavedItemsToggleActive()) {
    convertedLinks.splice(savedSearchesPosition, 0, hAsync(MenuItemCountLink, { content: savedSearches, count: savedSearchesCount, showSkeleton: showSkeleton }));
  }
  if (savedVehicles && savedVehicles.text !== '' && featureToggles.isSavedItemsToggleActive()) {
    convertedLinks.splice(savedVehiclesPosition, 0, hAsync(MenuItemCountLink, { content: savedVehicles, count: savedVehiclesCount, showSkeleton: showSkeleton }));
  }
  if (isLoggedIn) {
    convertedLinks.push(hAsync(LogoutLink, { content: content, onLogoutClick: onLogoutClick, showSkeleton: showSkeleton }));
  }
  return (hAsync("div", { class: "myporsche-links" },
    showSkeleton ? (hAsync("div", { class: "skeleton-menu" }, convertedLinks.map(() => (hAsync("div", { class: "skeleton-menu-item" }))))) : null,
    hAsync("div", { style: { display: showSkeleton ? 'none' : '', width: '100%' } },
      hAsync("div", { class: `${isLoggedIn ? 'logged-in' : ''} myporsche-links-container` }, convertedLinks))));
}
function MenuItemCountLink({ content, count, showSkeleton }) {
  return content ? (hAsync("div", { class: "myporsche-link-item", key: content.id },
    hAsync("phn-menu-item", { elementId: getMyPorscheRoutingKey(content.id), class: `${showSkeleton ? 'skeleton' : ''}`, analyticsId: content.id, text: content.text, link: content.link, datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK },
      hAsync(MenuItemCountIndicator, { count: count })))) : null;
}
function LogoutLink({ content, onLogoutClick, showSkeleton }) {
  const { logout } = content;
  return (hAsync("div", { class: "myporsche-link-item", key: logout.id },
    hAsync("phn-menu-item", { elementId: getMyPorscheRoutingKey(logout.id), class: `myporsche-menu-item logout${showSkeleton ? 'skeleton' : ''}`, analyticsId: logout.id, text: logout.text, onClick: onLogoutClick, datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK })));
}
function MenuItemCountIndicator({ count }) {
  if (count <= 0)
    return null;
  return (hAsync("phn-p-tag", { slot: "suffix", class: "menu-item-count", color: "notification-info-soft" }, count));
}

function Login({ content, showSkeleton }) {
  const { login, more, signup, signupText } = content;
  const { loggedInState } = navStateStore.state;
  const isLoggedIn = IsLoggedIn(loggedInState);
  if (isLoggedIn) {
    return null;
  }
  return (hAsync("div", { class: "myporsche-login" },
    showSkeleton ? (hAsync(Fragment, null,
      hAsync("div", { class: "skeleton-login-container" },
        hAsync("div", { class: "skeleton-login" }),
        hAsync("div", { class: "skeleton-more" })),
      hAsync("div", { class: "skeleton-signup-container" },
        hAsync("div", { class: "skeleton-signup" }, content.signupText)))) : null,
    hAsync("phn-myporsche-login", { login: login, more: more, signup: signup, signupText: signupText, style: { display: showSkeleton ? 'none' : '' } })));
}

const myporscheDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-myporsche-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-myporsche-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-myporsche-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-myporsche-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-myporsche-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-myporsche-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-myporsche-drawer-h{display:block;margin-top:0}.skeleton.sc-phn-myporsche-drawer-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.sc-phn-myporsche-drawer-h .skeleton-headline.sc-phn-myporsche-drawer{width:100%;height:2.5rem;background:#d8d8db;border-radius:4px;font-size:1.75rem;line-height:2.5rem;margin-bottom:0.5rem}@media (min-width: 760px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-headline.sc-phn-myporsche-drawer{margin-bottom:0;font-size:1.875rem;line-height:2.5rem}}@media (min-width: 1000px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-headline.sc-phn-myporsche-drawer{font-size:1.75rem;line-height:2.5rem}}@media (min-width: 1300px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-headline.sc-phn-myporsche-drawer{font:normal normal 600 clamp(1.13rem, 0.21vw + 1.08rem, 1.33rem)/calc(6px + 2.125ex) \"Porsche Next\", \"Arial Narrow\", Arial, \"Heiti SC\", SimHei, sans-serif}}.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer{width:100%;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-direction:column;flex-direction:column;border-radius:4px}@media (min-width: 480px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer{-ms-flex-direction:row;flex-direction:row}}@media (min-width: 760px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer{-ms-flex-direction:column;flex-direction:column}}@media (min-width: 1920px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer{-ms-flex-direction:row;flex-direction:row}}.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-login.sc-phn-myporsche-drawer{height:3rem;width:100%;margin:2.25rem 0 1rem 0;border-radius:4px;background:#d8d8db}@media (min-width: 480px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-login.sc-phn-myporsche-drawer{margin:2.25rem 0.5rem 1rem 0}}@media (min-width: 760px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-login.sc-phn-myporsche-drawer{margin:0 1rem 1rem 0}}@media (min-width: 1760px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-login.sc-phn-myporsche-drawer{margin:0 1rem 1.4375rem 0}}.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-more.sc-phn-myporsche-drawer{height:3rem;margin:0 0 1rem 0;width:100%;background:#d8d8db;border-radius:4px}@media (min-width: 480px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-more.sc-phn-myporsche-drawer{margin:2.25rem 0 1rem 0.5rem}}@media (min-width: 760px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-more.sc-phn-myporsche-drawer{margin:0 0 1.4375rem 0}}@media (min-width: 1760px){.skeleton.sc-phn-myporsche-drawer-h .skeleton-login-container.sc-phn-myporsche-drawer .skeleton-more.sc-phn-myporsche-drawer{margin:0 1rem 1.4375rem 0}}.skeleton.sc-phn-myporsche-drawer-h .skeleton-signup-container.sc-phn-myporsche-drawer{padding-bottom:1.5rem;border-radius:4px}.skeleton.sc-phn-myporsche-drawer-h .skeleton-signup.sc-phn-myporsche-drawer{color:transparent;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-myporsche-drawer-h .skeleton-menu.sc-phn-myporsche-drawer{width:100%;height:3rem;border-radius:4px}.skeleton.sc-phn-myporsche-drawer-h .skeleton-menu-item.sc-phn-myporsche-drawer{width:100%;height:1.5rem;background:#d8d8db;margin-top:1.5rem;border-radius:4px}.skeleton.sc-phn-myporsche-drawer-h .skeleton-menu-item.sc-phn-myporsche-drawer:first-of-type{margin-top:0.75rem}.sc-phn-myporsche-drawer-h .myporsche-links.sc-phn-myporsche-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:center;justify-content:center}.sc-phn-myporsche-drawer-h .myporsche-links.sc-phn-myporsche-drawer .myporsche-links-container.logged-in.sc-phn-myporsche-drawer>.myporsche-link-item.sc-phn-myporsche-drawer:first-child>phn-menu-item.sc-phn-myporsche-drawer{padding-top:0}.sc-phn-myporsche-drawer-h .myporsche-links.sc-phn-myporsche-drawer .myporsche-links-container.sc-phn-myporsche-drawer .myporsche-link-item.sc-phn-myporsche-drawer>phn-menu-item.sc-phn-myporsche-drawer{padding:0.625rem 0 0.625rem 0}@media (min-width: 1920px){.sc-phn-myporsche-drawer-h .myporsche-links.sc-phn-myporsche-drawer .myporsche-links-container.sc-phn-myporsche-drawer .myporsche-link-item.sc-phn-myporsche-drawer>phn-menu-item.sc-phn-myporsche-drawer{padding:1rem 0 1rem 0}}.sc-phn-myporsche-drawer-h .myporsche-links.sc-phn-myporsche-drawer .menu-item-count.sc-phn-myporsche-drawer{margin-left:1rem}.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer{border-bottom:2px solid #0e0e12}@media (min-width: 480px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer{padding-bottom:0.125rem;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}}@media (min-width: 760px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer{padding-bottom:1rem}}@media (min-width: 1920px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer{padding-bottom:1.5rem}}.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .myporsche-headline.sc-phn-myporsche-drawer{font-size:1.75rem;line-height:2.5rem;padding-bottom:0.5rem}@media (min-width: 760px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .myporsche-headline.sc-phn-myporsche-drawer{padding-bottom:0;font-size:1.875rem;line-height:2.5rem}}@media (min-width: 1000px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .myporsche-headline.sc-phn-myporsche-drawer{font-size:1.75rem;line-height:2.5rem}}@media (min-width: 1300px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .myporsche-headline.sc-phn-myporsche-drawer{font:normal normal 600 clamp(1.13rem, 0.21vw + 1.08rem, 1.33rem)/calc(6px + 2.125ex) \"Porsche Next\", \"Arial Narrow\", Arial, \"Heiti SC\", SimHei, sans-serif}}.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .headline-divider.sc-phn-myporsche-drawer{padding:0 1.125rem 0 1rem;height:2rem}.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .user-container.sc-phn-myporsche-drawer{padding-bottom:1.0625rem;display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}@media (min-width: 480px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .user-container.sc-phn-myporsche-drawer{padding-bottom:0}}.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .user-container.sc-phn-myporsche-drawer phn-p-icon.sc-phn-myporsche-drawer{padding-right:0.4375rem;width:1.25rem;height:1.25rem}.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .user-container.sc-phn-myporsche-drawer phn-p-text.sc-phn-myporsche-drawer{font-size:0.75rem}@media (min-width: 480px){.sc-phn-myporsche-drawer-h .headline-container.sc-phn-myporsche-drawer .user-container.sc-phn-myporsche-drawer phn-p-text.sc-phn-myporsche-drawer{padding:0}}.sc-phn-myporsche-drawer-h phn-p-divider.sc-phn-myporsche-drawer{display:block;height:100%;-ms-flex-item-align:center;align-self:center;padding:0 7.4375rem}@media (min-width: 1760px){.sc-phn-myporsche-drawer-h phn-p-divider.sc-phn-myporsche-drawer{padding:0 9.375rem}}";

class MyPorscheDrawer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.logoutEvent = createEvent(this, "logoutEvent", 7);
    this.showSkeleton = true;
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = false;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  render() {
    const { myPorsche } = navContentStore.state;
    if (!myPorsche)
      return null;
    return (hAsync(Host, { class: this.showSkeleton ? 'skeleton' : '' }, hAsync("div", { class: "phn-flex-col phn-justify-around" }, hAsync(Login, { content: myPorsche, showSkeleton: this.showSkeleton }), hAsync(Links, { content: myPorsche, onLogoutClick: () => this.logoutEvent.emit(), showSkeleton: this.showSkeleton }))));
  }
  get el() { return getElement(this); }
  static get style() { return myporscheDrawerCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-myporsche-drawer",
    "$members$": {
      "showSkeleton": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const myPorscheIconButtonCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-my-porsche-icon-button{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-my-porsche-icon-button{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-my-porsche-icon-button{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-my-porsche-icon-button{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-my-porsche-icon-button{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-my-porsche-icon-button{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-my-porsche-icon-button-h phn-p-button-pure.sc-phn-my-porsche-icon-button{position:relative;display:inline-block;vertical-align:top;outline:0px !important}.sc-phn-my-porsche-icon-button-h .myporsche-unread-messages-indicator.sc-phn-my-porsche-icon-button{position:absolute;width:0.375rem;height:0.375rem;border-radius:50%}.sc-phn-my-porsche-icon-button-h .myporsche-unread-messages-indicator.light.sc-phn-my-porsche-icon-button{background-color:#2762ec}.sc-phn-my-porsche-icon-button-h .myporsche-unread-messages-indicator.dark.sc-phn-my-porsche-icon-button{background-color:#d3e1ff}";

class MyPorscheIconButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.mode = NavigationMode.navbar;
    this.theme = NavigationTheme.light;
    this.isMyPorscheHoveredOn = false;
  }
  sendDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.CONTEXTUAL_BUTTON_CLICK, {
      componentClick: {
        clickElementId: RoutingKeys.MY_PORSCHE,
        clickElementName: 'open the my porsche menu',
        clickElementType: ClickElementTypes.Button
      }
    });
  }
  render() {
    const { unreadMessagesCount, loggedInState } = navStateStore.state;
    const isLoggedIn = IsLoggedIn(loggedInState);
    return (hAsync(Host, null, hAsync("phn-p-button-pure", { icon: `user${isLoggedIn ? '-filled' : ''}`, "hide-label": "true", stretch: "true", "data-id": `${RoutingKeys.MY_PORSCHE}-contextual-button`, aria: "{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }", "data-test-id": "myporsche-button", theme: getRightTheme(this.theme, this.mode), onMouseEnter: () => {
        this.isMyPorscheHoveredOn = true;
      }, onMouseLeave: () => {
        this.isMyPorscheHoveredOn = false;
      }, onClick: () => {
        this.sendDataLayerEvent();
      } }), unreadMessagesCount > 0 ? (hAsync("span", { class: `myporsche-unread-messages-indicator ${this.mode === 'hero' ? this.theme : NavigationTheme.light}` })) : null));
  }
  static get style() { return myPorscheIconButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-my-porsche-icon-button",
    "$members$": {
      "mode": [1],
      "theme": [1],
      "isMyPorscheHoveredOn": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const myporscheLoginCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-myporsche-login{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-myporsche-login{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-myporsche-login{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-myporsche-login{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-myporsche-login{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-myporsche-login{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login{display:-ms-flexbox;display:flex}@media (min-width: 0px) and (max-width: 479px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between}}@media (min-width: 760px) and (max-width: 1299px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between}}.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:2.25rem 0 1rem 0}@media (min-width: 0px) and (max-width: 759px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{width:100%;padding-top:0}}@media (min-width: 480px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:0 0.5rem 1rem 0}}@media (min-width: 760px) and (max-width: 1299px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:0 0 1rem 0}}@media (min-width: 1760px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:0 1rem 1.4375rem 0}}.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 0 1rem 0}@media (min-width: 0px) and (max-width: 759px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{width:100%}}@media (min-width: 480px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 0 1rem 0.5rem}}@media (min-width: 760px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 0 1.4375rem 0}}@media (min-width: 1760px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 1rem 1.4375rem 0}}.sc-phn-myporsche-login-h phn-p-text.sc-phn-myporsche-login{padding-bottom:1.5rem;border-bottom:2px solid #d8d8db;margin-bottom:0.625rem}@media (min-width: 1920px){.sc-phn-myporsche-login-h phn-p-text.sc-phn-myporsche-login{margin-bottom:1rem}}.sc-phn-myporsche-login-h phn-p-link-pure.sc-phn-myporsche-login{float:left;text-decoration:underline;color:black}";

class MyPorscheLogin {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.loginEvent = createEvent(this, "loginEvent", 7);
    this.login = undefined;
    this.more = null;
    this.signup = undefined;
    this.signupText = undefined;
  }
  sendDataLayerEvent(link) {
    globalDataLayerService.pushDataLayerEvent(EventActions.NAVIGATION_LINK_CLICK, {
      componentClick: {
        clickElementId: link === null || link === void 0 ? void 0 : link.id,
        clickElementName: link === null || link === void 0 ? void 0 : link.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: link === null || link === void 0 ? void 0 : link.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.MY_PORSCHE, ElementTypes.myPorscheDrawer),
        displayElementName: link === null || link === void 0 ? void 0 : link.text
      }
    });
  }
  render() {
    return (hAsync(Fragment, null, hAsync("div", { class: "button-container" }, hAsync("phn-p-button", { variant: "primary", class: "login", onClick: () => {
        this.loginEvent.emit();
        this.sendDataLayerEvent(this.login);
      } }, this.login.text), this.more && isString(this.more.link) ? (hAsync("phn-p-link", { variant: "tertiary", class: "more", href: this.more.link, onClick: () => {
        this.sendDataLayerEvent(this.more);
      } }, this.more.text)) : null), hAsync("div", null, hAsync("phn-p-link-pure", { icon: "none", onClick: () => {
        this.sendDataLayerEvent(this.signup);
      } }, hAsync("a", { href: this.signup.link }, this.signup.text)), hAsync("phn-p-text", null, "\u00A0", this.signupText))));
  }
  static get style() { return myporscheLoginCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-myporsche-login",
    "$members$": {
      "login": [16],
      "more": [16],
      "signup": [16],
      "signupText": [1, "signup-text"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function replaceVariables(template, data) {
  const regex = /{(.*?)}/g;
  return ((template === null || template === void 0 ? void 0 : template.replace(regex, (_match, variable) => {
    const value = data[variable.trim()];
    return value !== undefined ? String(value) : '';
  })) || '');
}

function ShopSection({ activeRoutingKey, breakpoint, receivedContent, loginEvent }) {
  const showHeadline = !isDesktop(breakpoint);
  const displayedContent = getMenuContent(navContentStore.state, activeRoutingKey, RoutingKeys.SHOP);
  if (displayedContent === null) {
    return hAsync("div", null);
  }
  const wishListAuthStatusList = IsLoggedIn(navStateStore.state.loggedInState)
    ? ['loggedIn', null]
    : ['loggedOut', null];
  const wishListItems = filterWishlistItemsByAuthStatus(displayedContent.additionalContent, wishListAuthStatusList);
  function emitLogin(id) {
    if (id === 'login')
      loginEvent.emit();
  }
  return (hAsync(Fragment, null,
    hAsync("phn-menu", { item: displayedContent, routingKey: activeRoutingKey, showHeadline: showHeadline, receivedContent: receivedContent }),
    activeRoutingKey === RoutingKeys.SHOP ? (hAsync("div", { class: "wishlist-container", role: "list" }, wishListItems.map((childItem) => {
      return (hAsync("phn-menu-item", { key: childItem.id, "data-id": childItem.id, size: 'x-small', class: !(isString(childItem.iconUrl) || isString(childItem.icon)) ? 'no-icon' : '', iconLeft: (isString(childItem.id) && getIconNameByMenuItemId(childItem.id)) ||
          childItem.icon ||
          childItem.iconUrl, elementId: constructRoutingKey(activeRoutingKey, childItem.id), analyticsId: childItem.id, text: replaceVariables(childItem.text, getAvailableShopVariables()), link: childItem.link, datalayerEventAction: isString(childItem.link) ? EventActions.NAVIGATION_LINK_CLICK : EventActions.NAVIGATION_CLICK, onClick: () => {
          emitLogin(childItem.id);
        }, role: "listitem" }));
    }))) : null));
}

function VehiclePurchaseSection({ activeRoutingKey, topLevelRoutingKey, breakpoint, receivedContent }) {
  const showHeadline = !isDesktop(breakpoint);
  const displayedContent = getMenuContent(navContentStore.state, activeRoutingKey, topLevelRoutingKey);
  /* istanbul ignore if */
  if (displayedContent === null) {
    return hAsync("div", null);
  }
  return (hAsync("phn-menu", { item: displayedContent, routingKey: activeRoutingKey, showHeadline: showHeadline, receivedContent: receivedContent }));
}

const routerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-router{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-router{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-router{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-router{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-router{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-router{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-router-h{display:block;-webkit-box-sizing:border-box;box-sizing:border-box}.sc-phn-router-h .wishlist-container.sc-phn-router{padding:1rem;background-color:#ffffff;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:start;align-items:flex-start;gap:16px;border-radius:0.75rem;margin-top:3rem}@media (max-width: 759px){.sc-phn-router-h .wishlist-container.sc-phn-router{background-color:#EEEFF2}}.sc-phn-router-h .wishlist-container.sc-phn-router .no-icon.sc-phn-router{padding-left:1.75rem}";

class Router {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.loginEvent = createEvent(this, "loginEvent", 7);
    this.activeRoutingKey = undefined;
    this.breakpoint = undefined;
    this.locale = undefined;
    this.receivedContent = false;
  }
  render() {
    const { models, myPorsche, dealer } = navContentStore.state;
    const topLevelRoutingKey = findTopLevelRoutingKey(this.activeRoutingKey);
    const showHeadline = !isDesktop(this.breakpoint);
    switch (topLevelRoutingKey) {
      case RoutingKeys.DEALER_SEARCH: {
        const routingId = getLastRoutingSegment(this.activeRoutingKey);
        const dealerId = routingId !== topLevelRoutingKey ? routingId : '';
        if (isString(dealerId)) {
          return hAsync("phn-dealer-details-drawer", { breakpoint: this.breakpoint, dealerId: dealerId, locale: this.locale });
        }
        return (hAsync("phn-dealer-search-form", { breakpoint: this.breakpoint, dealer: dealer, locale: this.locale, showHeadline: showHeadline }));
      }
      case RoutingKeys.MY_PORSCHE: {
        if (myPorsche !== null) {
          return hAsync("phn-myporsche-drawer", { class: "overlay-content" });
        }
        return hAsync("div", null);
      }
      case RoutingKeys.SERIES:
      case RoutingKeys.MODELS: {
        const routingId = getLastRoutingSegment(this.activeRoutingKey);
        const activeModelsSeries = models.series.find((modelsSeries) => routingId === modelsSeries.id);
        if (activeModelsSeries !== undefined) {
          return (hAsync("phn-car-body-types-drawer", { series: activeModelsSeries, breakpoint: this.breakpoint, activeRoutingKey: this.activeRoutingKey }));
        }
        return hAsync("phn-models", { showHeadline: showHeadline, breakpoint: this.breakpoint });
      }
      case RoutingKeys.MORE:
      case RoutingKeys.EXPERIENCE:
      case RoutingKeys.SERVICES:
      case RoutingKeys.VEHICLE_PURCHASE: {
        return (hAsync(VehiclePurchaseSection, { activeRoutingKey: this.activeRoutingKey, topLevelRoutingKey: topLevelRoutingKey, receivedContent: this.receivedContent, breakpoint: this.breakpoint }));
      }
      case RoutingKeys.SHOP:
        return (hAsync(ShopSection, { activeRoutingKey: this.activeRoutingKey, receivedContent: this.receivedContent, breakpoint: this.breakpoint, loginEvent: this.loginEvent }));
      default: {
        return hAsync("phn-level-1", { locale: this.locale, breakpoint: this.breakpoint });
      }
    }
  }
  static get style() { return routerCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-router",
    "$members$": {
      "activeRoutingKey": [1, "active-routing-key"],
      "breakpoint": [2],
      "locale": [1],
      "receivedContent": [4, "received-content"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const sideDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-side-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-side-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-side-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-side-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-side-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-side-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-side-drawer-h{display:block;width:100%}.sc-phn-side-drawer-h .item-highlight.sc-phn-side-drawer{display:none}.sc-phn-side-drawer-h phn-side-drawer-item.sc-phn-side-drawer{margin-top:2.25rem}@media (min-width: 1000px){.sc-phn-side-drawer-h phn-side-drawer-item.sc-phn-side-drawer{margin-top:0.85rem}}@media (min-width: 1920px){.sc-phn-side-drawer-h phn-side-drawer-item.sc-phn-side-drawer{margin-top:1rem}}.sc-phn-side-drawer-h phn-side-drawer-item.models.sc-phn-side-drawer{margin-top:0.5rem}@media (min-width: 1920px){.sc-phn-side-drawer-h phn-side-drawer-item.models.sc-phn-side-drawer{margin-top:1rem}}.sc-phn-side-drawer-h phn-side-drawer-item.sc-phn-side-drawer:first-of-type{margin-top:0}";

var __rest = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
class SideDrawer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.sideDrawerItemClick = createEvent(this, "sideDrawerItemClick", 7);
    this.activeRoutingKey = undefined;
    this.locale = undefined;
  }
  render() {
    const { loggedInState, unreadMessagesCount, userConsent } = navStateStore.state;
    const sideDrawerItems = getSideDrawerItems(navContentStore.state, dealerSearchResultsStore.state, this.locale, loggedInState, unreadMessagesCount, this.activeRoutingKey, userConsent);
    return (hAsync("nav", null, sideDrawerItems.map((_a) => {
      var { routingKeys } = _a, sideDrawerItem = __rest(_a, ["routingKeys"]);
      const isActive = routingKeys.includes(this.activeRoutingKey);
      return (hAsync(Fragment, null, hAsync("phn-side-drawer-item", Object.assign({ key: sideDrawerItem.elementId, onClick: () => {
          if (!isString(sideDrawerItem.link) && !isActive) {
            this.sideDrawerItemClick.emit(routingKeys);
          }
        }, isActive: isActive, class: isModelName(sideDrawerItem.text) ? 'models' : '' }, sideDrawerItem)), isActive ? hAsync("div", { class: `item-highlight` }) : null));
    })));
  }
  static get style() { return sideDrawerCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-side-drawer",
    "$members$": {
      "activeRoutingKey": [1, "active-routing-key"],
      "locale": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function SideDrawerItemText({ isActive, text, subtext, renderSignatures }) {
  return (hAsync("div", { class: "text-container" },
    renderSignatures && isModelName(text) ? (hAsync("phn-p-model-signature", { model: text.toLowerCase(), size: "inherit", class: "model-signature" })) : (hAsync("phn-p-text", { size: "inherit", weight: isActive ? 'semibold' : 'regular', color: "inherit", tag: "div" }, text)),
    isString(subtext) && !isModelFuelTypeGasoline(text) ? (hAsync("div", { class: "text-limit" },
      hAsync("phn-p-text", { color: "inherit", class: "subtext", weight: "regular", size: "x-small", tag: "div", ellipsis: "true", "data-test-id": "subtext" }, subtext))) : null));
}

const sideDrawerItemCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-side-drawer-item{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-side-drawer-item{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-side-drawer-item{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-side-drawer-item{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-side-drawer-item{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-side-drawer-item{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-side-drawer-item-h{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:start;align-items:flex-start}.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 8px}.sc-phn-side-drawer-item-h phn-p-link-pure.models.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.models.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.models.sc-phn-side-drawer-item{padding:1rem 0.5rem 1rem 0.875rem}.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item{height:3.25rem}.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item{font-size:1.25rem}@media (min-width: 1300px){.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item{font-size:1.375rem}}@media (min-width: 1920px){.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item phn-p-text.sc-phn-side-drawer-item{font-size:1.5rem}}.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item{max-width:230px}@media (min-width: 1300px){.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item{max-width:270px}}@media (min-width: 1920px){.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item{max-width:400px}}.sc-phn-side-drawer-item-h phn-p-link-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item .text-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-p-button-pure.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item .text-container.sc-phn-side-drawer-item,.sc-phn-side-drawer-item-h phn-menu-item.sc-phn-side-drawer-item .body-container.sc-phn-side-drawer-item .text-container.sc-phn-side-drawer-item{width:100%}.sc-phn-side-drawer-item-h .model-signature.sc-phn-side-drawer-item{height:1.625rem}@media (min-width: 1920px){.sc-phn-side-drawer-item-h .model-signature.sc-phn-side-drawer-item{height:1.875rem}}@media (min-width: 1000px){.sc-phn-side-drawer-item-h div.text-limit.sc-phn-side-drawer-item{width:220px}}@media (min-width: 1300px){.sc-phn-side-drawer-item-h div.text-limit.sc-phn-side-drawer-item{width:265px}}";

class SideDrawerItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.text = undefined;
    this.analyticsId = undefined;
    this.subtext = '';
    this.elementId = '';
    this.link = '';
    this.iconRight = '';
    this.datalayerEventAction = EventActions.NAVIGATION_CLICK;
    this.customDatalayerProperties = {};
    this.isActive = false;
    this.hasDoubleDrawerAnimationFinished = false;
    this.renderSignatures = false;
  }
  sendDataLayerEvent(clickElementType, elementId) {
    globalDataLayerService.pushDataLayerEvent(this.datalayerEventAction, Object.assign(Object.assign(Object.assign({ componentClick: Object.assign({ clickElementId: this.analyticsId, clickElementName: this.text, targetElement: analyticsManager.getModelTargetElement(elementId, this.text), clickElementType }, (clickElementType === ClickElementTypes.Link ? { targetUrl: this.link } : {})) }, this.customDatalayerProperties), { componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(elementId, ElementTypes.sideDrawerItem, true),
        displayElementName: this.text
      } }), (this.datalayerEventAction === EventActions.MODEL_RANGE_CLICK
      ? {
        car: {
          modelRangeName: this.text.toLowerCase()
        }
      }
      : {})));
  }
  existsSlot(slotName) {
    return this.el.querySelector(`[slot="${slotName}"]`) !== null;
  }
  render() {
    var _a;
    const body = (hAsync("div", { class: "body-container phn-flex-row phn-align-center" }, hAsync(SideDrawerItemText, { isActive: false, text: this.text, subtext: this.subtext, renderSignatures: this.renderSignatures }), this.existsSlot('suffix') ? (hAsync("div", null, hAsync("slot", { name: "suffix" }))) : null));
    if (isString(this.link)) {
      const externalShop = ((_a = navContentStore.state.externalShop) === null || _a === void 0 ? void 0 : _a.link) === this.link;
      return (hAsync("phn-p-link-pure", { icon: isString(this.iconRight) ? this.iconRight : 'none', "align-label": "left", stretch: "true", "data-id": this.elementId, onClick: () => {
          this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);
        } }, hAsync("a", { href: this.link, target: externalShop ? '_blank' : '_self' }, body)));
    }
    return (hAsync(Host, { class: `${this.isActive ? 'active' : ''}` }, hAsync("phn-p-button-pure", { active: this.isActive, class: isModelName(this.text) ? 'models' : '', size: "inherit", stretch: "true", "data-id": this.elementId, onClick: () => {
        this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);
      }, aria: { 'aria-expanded': `${this.isActive ? 'true' : 'false'}` }, icon: 'arrow-head-right', "align-label": "left" }, body)));
  }
  get el() { return getElement(this); }
  static get style() { return sideDrawerItemCss; }
  static get cmpMeta() { return {
    "$flags$": 6,
    "$tagName$": "phn-side-drawer-item",
    "$members$": {
      "text": [1],
      "analyticsId": [1, "analytics-id"],
      "subtext": [1],
      "elementId": [1, "element-id"],
      "link": [1],
      "iconRight": [1, "icon-right"],
      "datalayerEventAction": [1, "datalayer-event-action"],
      "customDatalayerProperties": [16],
      "isActive": [4, "is-active"],
      "hasDoubleDrawerAnimationFinished": [4, "has-double-drawer-animation-finished"],
      "renderSignatures": [4, "render-signatures"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const signatureHeadingCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-signature-heading{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-signature-heading{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-signature-heading{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-signature-heading{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-signature-heading{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-signature-heading{-ms-flex-wrap:wrap;flex-wrap:wrap}.model-signature.sc-phn-signature-heading{height:1.625rem}@media (min-width: 1920px){.model-signature.sc-phn-signature-heading{height:1.875rem}}phn-p-text.sc-phn-signature-heading{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;color:#535457;font-size:1.25rem}@media (min-width: 1300px){phn-p-text.sc-phn-signature-heading{font-size:1.375rem}}@media (min-width: 1920px){phn-p-text.sc-phn-signature-heading{font-size:1.5rem}}";

class SignatureHeading {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.text = undefined;
    this.subtext = undefined;
  }
  render() {
    return (hAsync(Fragment, null, hAsync("phn-p-model-signature", { model: this.text.toLowerCase(), size: "inherit", class: "model-signature" }), isString(this.subtext) && !isModelFuelTypeGasoline(this.text) ? (hAsync("phn-p-text", { color: "inherit", class: "subtext", weight: "regular", size: "x-small", tag: "div", ellipsis: "true", "data-test-id": "subtext" }, this.subtext)) : null));
  }
  static get style() { return signatureHeadingCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-signature-heading",
    "$members$": {
      "text": [1],
      "subtext": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function DrawerContent({ routingKey, previousRoutingKey, breakpoint, locale, showBackButton, receivedContent }) {
  const { menu } = navContentStore.state;
  const backButtonText = getBackButtonText(navContentStore.state, previousRoutingKey !== null && previousRoutingKey !== void 0 ? previousRoutingKey : '') || menu.text;
  return (hAsync(Fragment, null,
    hAsync("div", { class: "bottom-gradient" }),
    hAsync("div", { class: "drawer-content" },
      hAsync("phn-drawer-header", { showBackButton: showBackButton, backButtonAnalyticsId: menu.id, backButtonText: backButtonText, activeRoutingKey: routingKey, breakpoint: breakpoint, receivedContent: receivedContent, locale: locale }),
      hAsync("phn-router", { activeRoutingKey: routingKey, breakpoint: breakpoint, locale: locale, receivedContent: receivedContent }))));
}

const singleDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-single-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-single-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-single-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-single-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-single-drawer-h{display:block}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer{z-index:301;background-color:#fff;position:fixed;top:0;bottom:0;right:0;width:100vw}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{overflow-y:auto;height:100vh;width:100vw;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 1.6875rem 6.25rem 1.6875rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.1875rem 6.25rem 2.1875rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 3.375rem 6.25rem 3.375rem}}@media (min-width: 1000px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.25rem 6.25rem 2.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:1.125rem;margin-bottom:1.9375rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-top:2rem;margin-bottom:2.3125rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-bottom:1.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-router.sc-phn-single-drawer{padding-bottom:4rem}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .bottom-gradient.sc-phn-single-drawer{height:10rem;background:-webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(rgb(255, 255, 255)));background:linear-gradient(to bottom, rgba(255, 255, 255, 0), rgb(255, 255, 255));opacity:1;position:absolute;width:100%;bottom:0;margin-left:-1.5rem;pointer-events:none;margin-left:0;z-index:1}";

// INFO: For routing explanation, see README in this directory
class SingleDrawer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.drawerClosed = createEvent(this, "drawerClosed", 7);
    this.drawerChanged = createEvent(this, "drawerChanged", 7);
    this.drawerStartsClosing = createEvent(this, "drawerStartsClosing", 7);
    this.backdropClosed = createEvent(this, "backdropClosed", 7);
    this.phnDrawerStatus = createEvent(this, "phnDrawerStatus", 7);
    this.focusTimeout = new Timeout(0);
    this.operationPipeline = [];
    this.breakpoint = undefined;
    this.locale = undefined;
    this.usingKeyboard = false;
    this.routingKeyHistory = undefined;
    this.routingKeyPointer = undefined;
    this.receivedContent = false;
    this.animatingPointer = -1;
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    const targetElement = getHTMLElement(e.target);
    if (targetElement === null) {
      return;
    }
    let focusableDrawerElements = getAllFocusableElements(this.el.querySelector('.active'));
    if (focusableDrawerElements.length === 0) {
      return;
    }
    const activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    if (activeRoutingKey.startsWith(RoutingKeys.DEALER_SEARCH)) {
      focusableDrawerElements = focusableDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const firstFocusableDrawerElement = focusableDrawerElements[0];
    const lastFocusableDrawerElement = focusableDrawerElements[focusableDrawerElements.length - 1];
    if (targetElement === firstFocusableDrawerElement && e.shiftKey) {
      e.preventDefault();
      if (lastFocusableDrawerElement !== null) {
        focusOnElement(lastFocusableDrawerElement);
      }
      return;
    }
    if (targetElement === lastFocusableDrawerElement && !e.shiftKey) {
      e.preventDefault();
      if (firstFocusableDrawerElement !== null) {
        focusOnElement(firstFocusableDrawerElement);
      }
      return;
    }
  }
  handleMobileMenuItemClick(e) {
    if (isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
    this.animatingPointer = this.routingKeyPointer;
  }
  handleClickDrawerHeaderClose(e) {
    if (isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
  }
  handleClickDrawerHeaderBack(e) {
    if (isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
    this.animatingPointer = this.routingKeyPointer;
  }
  onTransitionEnd() {
    const focussedElementId = this.animatingPointer > this.routingKeyPointer ? this.routingKeyHistory[this.animatingPointer] : '';
    this.animatingPointer = this.routingKeyPointer;
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    this.drawerChanged.emit(isNavigatingBackwards);
    // Focus needs to happen after rerender, so wait for next tick
    this.focusTimeout.set(async () => {
      this.focusOnActiveDrawer(focussedElementId);
    });
    this.sendDataLayerEvent();
  }
  componentWillLoad() {
    registerOpenSingleDrawerAnimation({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startOpening });
      },
      onAnimationEnds: () => {
        this.onTransitionEnd();
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishOpening });
      }
    });
    registerCloseSingleDrawerAnimation({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startClosing });
      },
      onAnimationEnds: () => {
        this.backdropClosed.emit();
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishClosing });
      }
    });
    registerTransitionNextLevelSingleDrawerAnimation({
      onAnimationEnds: () => this.onTransitionEnd()
    });
    registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds: () => this.onTransitionEnd() });
  }
  focusOnActiveDrawer(focussedElementId) {
    const autoFocusElement = getHTMLElement(this.el.querySelector('.active .autofocus'));
    if (autoFocusElement !== null) {
      focusOnElement(autoFocusElement);
      return;
    }
    if (this.usingKeyboard) {
      let focussableElement = null;
      if (isString(focussedElementId)) {
        focussableElement = getHTMLElement(this.el.querySelector(`.active [data-id="${focussedElementId}"]`));
      }
      if (focussableElement === null) {
        focussableElement = getHTMLElement(this.el.querySelector(`.active ${FOCUSABLE_ELEMENTS_SELECTOR}`));
      }
      if (focussableElement !== null) {
        focusOnElement(focussableElement);
      }
    }
    else {
      //Todo: Why first-focus class? We have it nowhere
      const firstFocus = getHTMLElement(this.el.querySelector('.first-focus'));
      if (firstFocus !== null) {
        focusOnElement(firstFocus);
      }
    }
  }
  sendDataLayerEvent() {
    analyticsManager.setDrawerType(DisplayElementTypes.SingleDrawer);
    const activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    globalDataLayerService.pushDataLayerEvent(EventActions.DRAWER_LOAD, {
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(activeRoutingKey, ElementTypes.singleDrawer),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Single Drawer'
      }
    });
  }
  disconnectedCallback() {
    this.focusTimeout.cancel();
  }
  async componentDidRender() {
    const promises = [];
    for (const operation of this.operationPipeline) {
      const maybePromise = operation();
      if (isPromise(maybePromise)) {
        promises.push(maybePromise);
      }
    }
    await Promise.all(promises);
    this.operationPipeline.splice(0, this.operationPipeline.length);
  }
  render() {
    var _a, _b;
    const isOpening = this.routingKeyPointer > this.animatingPointer;
    const isClosing = this.routingKeyPointer < this.animatingPointer;
    let topDrawerContentPointer = -1;
    let bottomDrawerContentPointer = this.routingKeyPointer;
    if (isOpening) {
      topDrawerContentPointer = this.routingKeyPointer;
      bottomDrawerContentPointer = this.animatingPointer;
      if (bottomDrawerContentPointer !== RoutingKeyPointers.LEVEL_ZERO) {
        this.operationPipeline.push(async () => {
          animationManager.play(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);
        });
      }
    }
    else if (isClosing) {
      topDrawerContentPointer = this.animatingPointer;
      if (bottomDrawerContentPointer !== RoutingKeyPointers.LEVEL_ZERO) {
        this.operationPipeline.push(async () => {
          animationManager.play(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);
        });
      }
    }
    const animatingRoutingKey = (_a = this.routingKeyHistory[topDrawerContentPointer]) !== null && _a !== void 0 ? _a : '';
    const routingKey = (_b = this.routingKeyHistory[bottomDrawerContentPointer]) !== null && _b !== void 0 ? _b : '';
    return (hAsync(Host, null, isString(routingKey) ? (hAsync("div", { class: "drawer active", key: routingKey }, hAsync("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }), hAsync(DrawerContent, { routingKey: routingKey, previousRoutingKey: this.routingKeyHistory[bottomDrawerContentPointer - 1], breakpoint: this.breakpoint, locale: this.locale, showBackButton: bottomDrawerContentPointer > 0, receivedContent: this.receivedContent }))) : null, isString(animatingRoutingKey) ? (hAsync("div", { class: `drawer animating`, style: isOpening ? { right: '-100%' } : {}, key: animatingRoutingKey }, hAsync(DrawerContent, { routingKey: animatingRoutingKey, previousRoutingKey: this.routingKeyHistory[topDrawerContentPointer - 1], breakpoint: this.breakpoint, locale: this.locale, showBackButton: topDrawerContentPointer > 0, receivedContent: this.receivedContent }))) : null));
  }
  get el() { return getElement(this); }
  static get style() { return singleDrawerCss; }
  static get cmpMeta() { return {
    "$flags$": 2,
    "$tagName$": "phn-single-drawer",
    "$members$": {
      "breakpoint": [2],
      "locale": [1],
      "usingKeyboard": [4, "using-keyboard"],
      "routingKeyHistory": [16],
      "routingKeyPointer": [2, "routing-key-pointer"],
      "receivedContent": [4, "received-content"],
      "animatingPointer": [32]
    },
    "$listeners$": [[0, "keydown", "handleKeyDown"], [0, "mobileMenuItemClick", "handleMobileMenuItemClick"], [0, "clickDrawerHeaderClose", "handleClickDrawerHeaderClose"], [0, "clickDrawerHeaderBack", "handleClickDrawerHeaderBack"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const wrapperCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-wrapper{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-wrapper{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-wrapper{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-wrapper{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-wrapper{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-wrapper{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-wrapper-h{display:block}.sc-phn-wrapper-h .limit-stretch.sc-phn-wrapper{-webkit-box-sizing:content-box;box-sizing:content-box;margin:0 0.5vw}.sc-phn-wrapper-h .preview-badge.sc-phn-wrapper{display:block;position:absolute;top:0;right:0;background-color:#cc1922;z-index:9999;padding:0 0.125rem}.sc-phn-wrapper-h .main-content.sc-phn-wrapper{width:20px}.sc-phn-wrapper-h .main-content.sc-phn-wrapper:focus{outline-style:none}.sc-phn-wrapper-h .screenreader-only.sc-phn-wrapper{position:absolute;width:1px;height:1px;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}";

class Wrapper {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.locale = undefined;
    this.breakpoint = undefined;
    this.loadingContent = false;
    this.receivedContent = false;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.app = Application.default;
    this.displayLogoOnly = false;
    this.limitedWidth = false;
    this.showCountryRecommender = windowService.redirected;
    this.countryRecommenderClosed = false;
  }
  componentWillLoad() {
    this.el.style.setProperty('--scrollbar-width', windowService.getScrollbarWidth());
    animationManager.initialize(this.el);
  }
  render() {
    const countryRecommenderContent = navContentStore.state.countryRecommender;
    const showCountryRecommender = this.showCountryRecommender && !this.countryRecommenderClosed && !this.loadingContent && this.receivedContent;
    const accessibilityStatement = navContentStore.state.accessibilityStatement;
    return (hAsync(Host, null, navStateStore.state.env === Environments.PREVIEW ? (hAsync("phn-p-text", { theme: "dark", size: "x-small", class: "preview-badge" }, "Header v", VERSION, " - PP content")) : null, showCountryRecommender ? (hAsync("phn-country-recommender", { locale: this.locale, content: countryRecommenderContent, role: "region", "aria-label": "Change recommended Region or Language", onBannerClosed: () => {
        this.countryRecommenderClosed = true;
      } })) : null, this.locale === 'en-US' && accessibilityStatement !== null ? (hAsync("a", { class: "screenreader-only", href: accessibilityStatement.link }, accessibilityStatement.text)) : null, hAsync("phn-level-0", { theme: this.theme, mode: this.mode, locale: this.locale, loadingContent: this.loadingContent, receivedContent: this.receivedContent, breakpoint: this.breakpoint, app: this.app, displayLogoOnly: this.displayLogoOnly, limitedWidth: this.limitedWidth }, isShopAvailable(this.locale, this.app) ? (hAsync("div", { slot: "contextual_drawer_header" }, hAsync("slot", { name: "contextual_drawer_header" }))) : null), hAsync("div", { id: "main", class: "main-content", onBlur: (e) => {
        const el = getHTMLElement(e.currentTarget);
        if (el !== null) {
          el.removeAttribute('tabIndex');
        }
      } })));
  }
  get el() { return getElement(this); }
  static get style() { return wrapperCss; }
  static get cmpMeta() { return {
    "$flags$": 6,
    "$tagName$": "phn-wrapper",
    "$members$": {
      "locale": [1],
      "breakpoint": [2],
      "loadingContent": [4, "loading-content"],
      "receivedContent": [4, "received-content"],
      "theme": [1],
      "mode": [1],
      "app": [1],
      "displayLogoOnly": [4, "display-logo-only"],
      "limitedWidth": [4, "limited-width"],
      "showCountryRecommender": [32],
      "countryRecommenderClosed": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

registerComponents([
  AutocompleteSearchField,
  BackButton,
  Backdrop,
  BurgerButton,
  CarBodyTypeDrawer,
  ContextualDrawer,
  CountryRecommender,
  DealerDetailsDrawer,
  DealerSearchByNumberOfDealers,
  DealerSearchForm,
  DealerSearchFormDropdown,
  DealerSearchFormGeolocation,
  DealerSearchResults,
  DoubleDrawer,
  DrawerHeader,
  Header,
  Heading,
  Level0,
  Level0Icons,
  Level1,
  Logo,
  Menu,
  MenuItem,
  MenuItemCard,
  Models,
  MyPorscheDrawer,
  MyPorscheIconButton,
  MyPorscheLogin,
  Router,
  SideDrawer,
  SideDrawerItem,
  SignatureHeading,
  SingleDrawer,
  Wrapper,
]);

exports.hydrateApp = hydrateApp;


  /*hydrateAppClosure end*/
  hydrateApp(window, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve);
  }

  hydrateAppClosure($stencilWindow);
}

function createWindowFromHtml(e, t) {
 let r = templateWindows.get(t);
 return null == r && (r = new MockWindow(e), templateWindows.set(t, r)), cloneWindow(r);
}

function inspectElement(e, t, r) {
 const s = t.children;
 for (let t = 0, n = s.length; t < n; t++) {
  const n = s[t], o = n.nodeName.toLowerCase();
  if (o.includes("-")) {
   const t = e.components.find((e => e.tag === o));
   null != t && (t.count++, r > t.depth && (t.depth = r));
  } else switch (o) {
  case "a":
   const t = collectAttributes(n);
   t.href = n.href, "string" == typeof t.href && (e.anchors.some((e => e.href === t.href)) || e.anchors.push(t));
   break;

  case "img":
   const r = collectAttributes(n);
   r.src = n.src, "string" == typeof r.src && (e.imgs.some((e => e.src === r.src)) || e.imgs.push(r));
   break;

  case "link":
   const s = collectAttributes(n);
   s.href = n.href, "string" == typeof s.rel && "stylesheet" === s.rel.toLowerCase() && "string" == typeof s.href && (e.styles.some((e => e.link === s.href)) || (delete s.rel, 
   delete s.type, e.styles.push(s)));
   break;

  case "script":
   const o = collectAttributes(n);
   if (n.hasAttribute("src")) o.src = n.src, "string" == typeof o.src && (e.scripts.some((e => e.src === o.src)) || e.scripts.push(o)); else {
    const t = n.getAttribute("data-stencil-static");
    t && e.staticData.push({
     id: t,
     type: n.getAttribute("type"),
     content: n.textContent
    });
   }
  }
  inspectElement(e, n, ++r);
 }
}

function collectAttributes(e) {
 const t = {}, r = e.attributes;
 for (let e = 0, s = r.length; e < s; e++) {
  const s = r.item(e), n = s.nodeName.toLowerCase();
  if (SKIP_ATTRS.has(n)) continue;
  const o = s.nodeValue;
  "class" === n && "" === o || (t[n] = o);
 }
 return t;
}

function patchDomImplementation(e, t) {
 let r;
 if (null != e.defaultView ? (t.destroyWindow = !0, patchWindow(e.defaultView), r = e.defaultView) : (t.destroyWindow = !0, 
 t.destroyDocument = !1, r = new MockWindow(!1)), r.document !== e && (r.document = e), 
 e.defaultView !== r && (e.defaultView = r), "function" != typeof e.documentElement.constructor.prototype.getRootNode && (e.createElement("unknown-element").constructor.prototype.getRootNode = getRootNode), 
 "function" == typeof e.createEvent) {
  const t = e.createEvent("CustomEvent").constructor;
  r.CustomEvent !== t && (r.CustomEvent = t);
 }
 try {
  e.baseURI;
 } catch (t) {
  Object.defineProperty(e, "baseURI", {
   get() {
    const t = e.querySelector("base[href]");
    return t ? new URL(t.getAttribute("href"), r.location.href).href : r.location.href;
   }
  });
 }
 return r;
}

function getRootNode(e) {
 const t = null != e && !0 === e.composed;
 let r = this;
 for (;null != r.parentNode; ) r = r.parentNode, !0 === t && null == r.parentNode && null != r.host && (r = r.host);
 return r;
}

function normalizeHydrateOptions(e) {
 const t = Object.assign({
  serializeToHtml: !1,
  destroyWindow: !1,
  destroyDocument: !1
 }, e || {});
 return "boolean" != typeof t.clientHydrateAnnotations && (t.clientHydrateAnnotations = !0), 
 "boolean" != typeof t.constrainTimeouts && (t.constrainTimeouts = !0), "number" != typeof t.maxHydrateCount && (t.maxHydrateCount = 300), 
 "boolean" != typeof t.runtimeLogging && (t.runtimeLogging = !1), "number" != typeof t.timeout && (t.timeout = 15e3), 
 Array.isArray(t.excludeComponents) ? t.excludeComponents = t.excludeComponents.filter(filterValidTags).map(mapValidTags) : t.excludeComponents = [], 
 Array.isArray(t.staticComponents) ? t.staticComponents = t.staticComponents.filter(filterValidTags).map(mapValidTags) : t.staticComponents = [], 
 t;
}

function filterValidTags(e) {
 return "string" == typeof e && e.includes("-");
}

function mapValidTags(e) {
 return e.trim().toLowerCase();
}

function generateHydrateResults(e) {
 "string" != typeof e.url && (e.url = "https://hydrate.stenciljs.com/"), "string" != typeof e.buildId && (e.buildId = createHydrateBuildId());
 const t = {
  buildId: e.buildId,
  diagnostics: [],
  url: e.url,
  host: null,
  hostname: null,
  href: null,
  pathname: null,
  port: null,
  search: null,
  hash: null,
  html: null,
  httpStatus: null,
  hydratedCount: 0,
  anchors: [],
  components: [],
  imgs: [],
  scripts: [],
  staticData: [],
  styles: [],
  title: null
 };
 try {
  const r = new URL(e.url, "https://hydrate.stenciljs.com/");
  t.url = r.href, t.host = r.host, t.hostname = r.hostname, t.href = r.href, t.port = r.port, 
  t.pathname = r.pathname, t.search = r.search, t.hash = r.hash;
 } catch (e) {
  renderCatchError(t, e);
 }
 return t;
}

function renderBuildDiagnostic(e, t, r, s) {
 const n = {
  level: t,
  type: "build",
  header: r,
  messageText: s,
  relFilePath: void 0,
  absFilePath: void 0,
  lines: []
 };
 return e.pathname ? "/" !== e.pathname && (n.header += ": " + e.pathname) : e.url && (n.header += ": " + e.url), 
 e.diagnostics.push(n), n;
}

function renderBuildError(e, t) {
 return renderBuildDiagnostic(e, "error", "Hydrate Error", t);
}

function renderCatchError(e, t) {
 const r = renderBuildError(e, null);
 return null != t && (null != t.stack ? r.messageText = t.stack.toString() : null != t.message ? r.messageText = t.message.toString() : r.messageText = t.toString()), 
 r;
}

function runtimeLog(e, t, r) {
 global.console[t].apply(global.console, [ `[ ${e}  ${t} ] `, ...r ]);
}

function renderToString(e, t) {
 const r = normalizeHydrateOptions(t);
 return r.serializeToHtml = !0, new Promise((t => {
  let s;
  const n = generateHydrateResults(r);
  if (hasError(n.diagnostics)) t(n); else if ("string" == typeof e) try {
   r.destroyWindow = !0, r.destroyDocument = !0, s = new MockWindow(e), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else if (isValidDocument(e)) try {
   r.destroyDocument = !1, s = patchDomImplementation(e, r), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else renderBuildError(n, 'Invalid html or document. Must be either a valid "html" string, or DOM "document".'), 
  t(n);
 }));
}

function hydrateDocument(e, t) {
 const r = normalizeHydrateOptions(t);
 return r.serializeToHtml = !1, new Promise((t => {
  let s;
  const n = generateHydrateResults(r);
  if (hasError(n.diagnostics)) t(n); else if ("string" == typeof e) try {
   r.destroyWindow = !0, r.destroyDocument = !0, s = new MockWindow(e), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else if (isValidDocument(e)) try {
   r.destroyDocument = !1, s = patchDomImplementation(e, r), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else renderBuildError(n, 'Invalid html or document. Must be either a valid "html" string, or DOM "document".'), 
  t(n);
 }));
}

function render(e, t, r, s) {
 if (process.__stencilErrors || (process.__stencilErrors = !0, process.on("unhandledRejection", (e => {
  console.log("unhandledRejection", e);
 }))), function n(e, t, r, s) {
  try {
   e.location.href = r.url;
  } catch (e) {
   renderCatchError(s, e);
  }
  if ("string" == typeof r.userAgent) try {
   e.navigator.userAgent = r.userAgent;
  } catch (e) {}
  if ("string" == typeof r.cookie) try {
   t.cookie = r.cookie;
  } catch (e) {}
  if ("string" == typeof r.referrer) try {
   t.referrer = r.referrer;
  } catch (e) {}
  if ("string" == typeof r.direction) try {
   t.documentElement.setAttribute("dir", r.direction);
  } catch (e) {}
  if ("string" == typeof r.language) try {
   t.documentElement.setAttribute("lang", r.language);
  } catch (e) {}
  if ("string" == typeof r.buildId) try {
   t.documentElement.setAttribute("data-stencil-build", r.buildId);
  } catch (e) {}
  try {
   e.customElements = null;
  } catch (e) {}
  return r.constrainTimeouts && constrainTimeouts(e), function n(e, t, r) {
   try {
    const s = e.location.pathname;
    e.console.error = (...e) => {
     const n = e.reduce(((e, t) => {
      if (t) {
       if (null != t.stack) return e + " " + String(t.stack);
       if (null != t.message) return e + " " + String(t.message);
      }
      return String(t);
     }), "").trim();
     "" !== n && (renderCatchError(r, n), t.runtimeLogging && runtimeLog(s, "error", [ n ]));
    }, e.console.debug = (...e) => {
     renderBuildDiagnostic(r, "debug", "Hydrate Debug", [ ...e ].join(", ")), t.runtimeLogging && runtimeLog(s, "debug", e);
    }, t.runtimeLogging && [ "log", "warn", "assert", "info", "trace" ].forEach((t => {
     e.console[t] = (...e) => {
      runtimeLog(s, t, e);
     };
    }));
   } catch (e) {
    renderCatchError(r, e);
   }
  }(e, r, s), e;
 }(e, e.document, t, r), "function" == typeof t.beforeHydrate) try {
  const n = t.beforeHydrate(e.document);
  isPromise(n) ? n.then((() => {
   hydrateFactory(e, t, r, afterHydrate, s);
  })) : hydrateFactory(e, t, r, afterHydrate, s);
 } catch (n) {
  renderCatchError(r, n), finalizeHydrate(e, e.document, t, r, s);
 } else hydrateFactory(e, t, r, afterHydrate, s);
}

function afterHydrate(e, t, r, s) {
 if ("function" == typeof t.afterHydrate) try {
  const n = t.afterHydrate(e.document);
  isPromise(n) ? n.then((() => {
   finalizeHydrate(e, e.document, t, r, s);
  })) : finalizeHydrate(e, e.document, t, r, s);
 } catch (n) {
  renderCatchError(r, n), finalizeHydrate(e, e.document, t, r, s);
 } else finalizeHydrate(e, e.document, t, r, s);
}

function finalizeHydrate(e, t, r, s, n) {
 try {
  if (inspectElement(s, t.documentElement, 0), !1 !== r.removeUnusedStyles) try {
   removeUnusedStyles(t, s.diagnostics);
  } catch (e) {
   renderCatchError(s, e);
  }
  if ("string" == typeof r.title) try {
   t.title = r.title;
  } catch (e) {
   renderCatchError(s, e);
  }
  s.title = t.title, r.removeScripts && removeScripts(t.documentElement);
  try {
   updateCanonicalLink(t, r.canonicalUrl);
  } catch (e) {
   renderCatchError(s, e);
  }
  try {
   relocateMetaCharset(t);
  } catch (e) {}
  hasError(s.diagnostics) || (s.httpStatus = 200);
  try {
   const e = t.head.querySelector('meta[http-equiv="status"]');
   if (null != e) {
    const t = e.getAttribute("content");
    t && t.length > 0 && (s.httpStatus = parseInt(t, 10));
   }
  } catch (e) {}
  r.clientHydrateAnnotations && t.documentElement.classList.add("hydrated"), r.serializeToHtml && (s.html = serializeDocumentToString(t, r));
 } catch (e) {
  renderCatchError(s, e);
 }
 if (r.destroyWindow) try {
  r.destroyDocument || (e.document = null, t.defaultView = null), e.close && e.close();
 } catch (e) {
  renderCatchError(s, e);
 }
 n(s);
}

function serializeDocumentToString(e, t) {
 return serializeNodeToHtml(e, {
  approximateLineWidth: t.approximateLineWidth,
  outerHtml: !1,
  prettyHtml: t.prettyHtml,
  removeAttributeQuotes: t.removeAttributeQuotes,
  removeBooleanAttributeQuotes: t.removeBooleanAttributeQuotes,
  removeEmptyAttributes: t.removeEmptyAttributes,
  removeHtmlComments: t.removeHtmlComments,
  serializeShadowRoot: !1
 });
}

function isValidDocument(e) {
 return null != e && 9 === e.nodeType && null != e.documentElement && 1 === e.documentElement.nodeType && null != e.body && 1 === e.body.nodeType;
}

function removeScripts(e) {
 const t = e.children;
 for (let e = t.length - 1; e >= 0; e--) {
  const r = t[e];
  removeScripts(r), ("SCRIPT" === r.nodeName || "LINK" === r.nodeName && "modulepreload" === r.getAttribute("rel")) && r.remove();
 }
}

const templateWindows = new Map, isPromise = e => !!e && ("object" == typeof e || "function" == typeof e) && "function" == typeof e.then, hasError = e => null != e && 0 !== e.length && e.some((e => "error" === e.level && "runtime" !== e.type)), TASK_CANCELED_MSG = "task canceled", updateCanonicalLink = (e, t) => {
 let r = e.head.querySelector('link[rel="canonical"]');
 "string" == typeof t ? (null == r && (r = e.createElement("link"), r.setAttribute("rel", "canonical"), 
 e.head.appendChild(r)), r.setAttribute("href", t)) : null != r && (r.getAttribute("href") || r.parentNode.removeChild(r));
}, relocateMetaCharset = e => {
 const t = e.head;
 let r = t.querySelector("meta[charset]");
 null == r ? (r = e.createElement("meta"), r.setAttribute("charset", "utf-8")) : r.remove(), 
 t.insertBefore(r, t.firstChild);
}, parseCss = (e, t) => {
 let r = 1, s = 1;
 const n = [], o = e => {
  const t = e.match(/\n/g);
  t && (r += t.length);
  const n = e.lastIndexOf("\n");
  s = ~n ? e.length - n : s + e.length;
 }, i = () => {
  const e = {
   line: r,
   column: s
  };
  return t => (t.position = new A(e), m(), t);
 }, a = o => {
  const i = e.split("\n"), a = {
   level: "error",
   type: "css",
   language: "css",
   header: "CSS Parse",
   messageText: o,
   absFilePath: t,
   lines: [ {
    lineIndex: r - 1,
    lineNumber: r,
    errorCharStart: s,
    text: e[r - 1]
   } ]
  };
  if (r > 1) {
   const t = {
    lineIndex: r - 1,
    lineNumber: r - 1,
    text: e[r - 2],
    errorCharStart: -1,
    errorLength: -1
   };
   a.lines.unshift(t);
  }
  if (r + 2 < i.length) {
   const e = {
    lineIndex: r,
    lineNumber: r + 1,
    text: i[r],
    errorCharStart: -1,
    errorLength: -1
   };
   a.lines.push(e);
  }
  return n.push(a), null;
 }, l = () => u(/^{\s*/), c = () => u(/^}/), u = t => {
  const r = t.exec(e);
  if (!r) return;
  const s = r[0];
  return o(s), e = e.slice(s.length), r;
 }, d = () => {
  let t;
  const r = [];
  for (m(), h(r); e.length && "}" !== e.charAt(0) && (t = T() || w()); ) r.push(t), 
  h(r);
  return r;
 }, m = () => u(/^\s*/), h = e => {
  let t;
  for (e = e || []; t = p(); ) e.push(t);
  return e;
 }, p = () => {
  const t = i();
  if ("/" !== e.charAt(0) || "*" !== e.charAt(1)) return null;
  let r = 2;
  for (;"" !== e.charAt(r) && ("*" !== e.charAt(r) || "/" !== e.charAt(r + 1)); ) ++r;
  if (r += 2, "" === e.charAt(r - 1)) return a("End of comment missing");
  const n = e.slice(2, r - 2);
  return s += 2, o(n), e = e.slice(r), s += 2, t({
   type: 1,
   comment: n
  });
 }, f = () => {
  const e = u(/^([^{]+)/);
  return e ? trim(e[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, (function(e) {
   return e.replace(/,/g, "‌");
  })).split(/\s*(?![^(]*\)),\s*/).map((function(e) {
   return e.replace(/\u200C/g, ",");
  })) : null;
 }, g = () => {
  const e = i();
  let t = u(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
  if (!t) return null;
  if (t = trim(t[0]), !u(/^:\s*/)) return a("property missing ':'");
  const r = u(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/), s = e({
   type: 4,
   property: t.replace(commentre, ""),
   value: r ? trim(r[0]).replace(commentre, "") : ""
  });
  return u(/^[;\s]*/), s;
 }, y = () => {
  const e = [];
  if (!l()) return a("missing '{'");
  let t;
  for (h(e); t = g(); ) e.push(t), h(e);
  return c() ? e : a("missing '}'");
 }, C = () => {
  let e;
  const t = [], r = i();
  for (;e = u(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/); ) t.push(e[1]), u(/^,\s*/);
  return t.length ? r({
   type: 9,
   values: t,
   declarations: y()
  }) : null;
 }, S = (e, t) => {
  const r = new RegExp("^@" + e + "\\s*([^;]+);");
  return () => {
   const s = i(), n = u(r);
   if (!n) return null;
   const o = {
    type: t
   };
   return o[e] = n[1].trim(), s(o);
  };
 }, E = S("import", 7), b = S("charset", 0), v = S("namespace", 11), T = () => "@" !== e[0] ? null : (() => {
  const e = i();
  let t = u(/^@([-\w]+)?keyframes\s*/);
  if (!t) return null;
  const r = t[1];
  if (t = u(/^([-\w]+)\s*/), !t) return a("@keyframes missing name");
  const s = t[1];
  if (!l()) return a("@keyframes missing '{'");
  let n, o = h();
  for (;n = C(); ) o.push(n), o = o.concat(h());
  return c() ? e({
   type: 8,
   name: s,
   vendor: r,
   keyframes: o
  }) : a("@keyframes missing '}'");
 })() || (() => {
  const e = i(), t = u(/^@media *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]);
  if (!l()) return a("@media missing '{'");
  const s = h().concat(d());
  return c() ? e({
   type: 10,
   media: r,
   rules: s
  }) : a("@media missing '}'");
 })() || (() => {
  const e = i(), t = u(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
  return t ? e({
   type: 2,
   name: trim(t[1]),
   media: trim(t[2])
  }) : null;
 })() || (() => {
  const e = i(), t = u(/^@supports *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]);
  if (!l()) return a("@supports missing '{'");
  const s = h().concat(d());
  return c() ? e({
   type: 15,
   supports: r,
   rules: s
  }) : a("@supports missing '}'");
 })() || E() || b() || v() || (() => {
  const e = i(), t = u(/^@([-\w]+)?document *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]), s = trim(t[2]);
  if (!l()) return a("@document missing '{'");
  const n = h().concat(d());
  return c() ? e({
   type: 3,
   document: s,
   vendor: r,
   rules: n
  }) : a("@document missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@page */)) return null;
  const t = f() || [];
  if (!l()) return a("@page missing '{'");
  let r, s = h();
  for (;r = g(); ) s.push(r), s = s.concat(h());
  return c() ? e({
   type: 12,
   selectors: t,
   declarations: s
  }) : a("@page missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@host\s*/)) return null;
  if (!l()) return a("@host missing '{'");
  const t = h().concat(d());
  return c() ? e({
   type: 6,
   rules: t
  }) : a("@host missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@font-face\s*/)) return null;
  if (!l()) return a("@font-face missing '{'");
  let t, r = h();
  for (;t = g(); ) r.push(t), r = r.concat(h());
  return c() ? e({
   type: 5,
   declarations: r
  }) : a("@font-face missing '}'");
 })(), w = () => {
  const e = i(), t = f();
  return t ? (h(), e({
   type: 13,
   selectors: t,
   declarations: y()
  })) : a("selector missing");
 };
 class A {
  constructor(e) {
   this.start = e, this.end = {
    line: r,
    column: s
   }, this.source = t;
  }
 }
 return A.prototype.content = e, {
  diagnostics: n,
  ...addParent((() => {
   const e = d();
   return {
    type: 14,
    stylesheet: {
     source: t,
     rules: e
    }
   };
  })())
 };
}, trim = e => e ? e.trim() : "", addParent = (e, t) => {
 const r = e && "string" == typeof e.type, s = r ? e : t;
 for (const t in e) {
  const r = e[t];
  Array.isArray(r) ? r.forEach((function(e) {
   addParent(e, s);
  })) : r && "object" == typeof r && addParent(r, s);
 }
 return r && Object.defineProperty(e, "parent", {
  configurable: !0,
  writable: !0,
  enumerable: !1,
  value: t || null
 }), e;
}, commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, getCssSelectors = e => {
 SELECTORS.all.length = SELECTORS.tags.length = SELECTORS.classNames.length = SELECTORS.ids.length = SELECTORS.attrs.length = 0;
 const t = (e = e.replace(/\./g, " .").replace(/\#/g, " #").replace(/\[/g, " [").replace(/\>/g, " > ").replace(/\+/g, " + ").replace(/\~/g, " ~ ").replace(/\*/g, " * ").replace(/\:not\((.*?)\)/g, " ")).split(" ");
 for (let e = 0, r = t.length; e < r; e++) t[e] = t[e].split(":")[0], 0 !== t[e].length && ("." === t[e].charAt(0) ? SELECTORS.classNames.push(t[e].slice(1)) : "#" === t[e].charAt(0) ? SELECTORS.ids.push(t[e].slice(1)) : "[" === t[e].charAt(0) ? (t[e] = t[e].slice(1).split("=")[0].split("]")[0].trim(), 
 SELECTORS.attrs.push(t[e].toLowerCase())) : /[a-z]/g.test(t[e].charAt(0)) && SELECTORS.tags.push(t[e].toLowerCase()));
 return SELECTORS.classNames = SELECTORS.classNames.sort(((e, t) => e.length < t.length ? -1 : e.length > t.length ? 1 : 0)), 
 SELECTORS;
}, SELECTORS = {
 all: [],
 tags: [],
 classNames: [],
 ids: [],
 attrs: []
}, serializeCssVisitNode = (e, t, r, s) => {
 var n;
 const o = t.type;
 return 4 === o ? serializeCssDeclaration(t, r, s) : 13 === o ? serializeCssRule(e, t) : 1 === o ? "!" === (null === (n = t.comment) || void 0 === n ? void 0 : n[0]) ? `/*${t.comment}*/` : "" : 10 === o ? serializeCssMedia(e, t) : 8 === o ? serializeCssKeyframes(e, t) : 9 === o ? serializeCssKeyframe(e, t) : 5 === o ? serializeCssFontFace(e, t) : 15 === o ? serializeCssSupports(e, t) : 7 === o ? "@import " + t.import + ";" : 0 === o ? "@charset " + t.charset + ";" : 12 === o ? serializeCssPage(e, t) : 6 === o ? "@host{" + serializeCssMapVisit(e, t.rules) + "}" : 2 === o ? "@custom-media " + t.name + " " + t.media + ";" : 3 === o ? serializeCssDocument(e, t) : 11 === o ? "@namespace " + t.namespace + ";" : "";
}, serializeCssRule = (e, t) => {
 var r, s;
 const n = t.declarations, o = e.usedSelectors, i = null !== (s = null === (r = t.selectors) || void 0 === r ? void 0 : r.slice()) && void 0 !== s ? s : [];
 if (null == n || 0 === n.length) return "";
 if (o) {
  let t, r, s = !0;
  for (t = i.length - 1; t >= 0; t--) {
   const n = getCssSelectors(i[t]);
   s = !0;
   let a = n.classNames.length;
   if (a > 0 && e.hasUsedClassNames) for (r = 0; r < a; r++) if (!o.classNames.has(n.classNames[r])) {
    s = !1;
    break;
   }
   if (s && e.hasUsedTags && (a = n.tags.length, a > 0)) for (r = 0; r < a; r++) if (!o.tags.has(n.tags[r])) {
    s = !1;
    break;
   }
   if (s && e.hasUsedAttrs && (a = n.attrs.length, a > 0)) for (r = 0; r < a; r++) if (!o.attrs.has(n.attrs[r])) {
    s = !1;
    break;
   }
   if (s && e.hasUsedIds && (a = n.ids.length, a > 0)) for (r = 0; r < a; r++) if (!o.ids.has(n.ids[r])) {
    s = !1;
    break;
   }
   s || i.splice(t, 1);
  }
 }
 if (0 === i.length) return "";
 const a = [];
 let l = "";
 if (t.selectors) for (const e of t.selectors) l = removeSelectorWhitespace(e), a.includes(l) || a.push(l);
 return `${a}{${serializeCssMapVisit(e, n)}}`;
}, serializeCssDeclaration = (e, t, r) => "" === e.value ? "" : r - 1 === t ? e.property + ":" + e.value : e.property + ":" + e.value + ";", serializeCssMedia = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules);
 return "" === r ? "" : "@media " + removeMediaWhitespace(t.media) + "{" + r + "}";
}, serializeCssKeyframes = (e, t) => {
 const r = serializeCssMapVisit(e, t.keyframes);
 return "" === r ? "" : "@" + (t.vendor || "") + "keyframes " + t.name + "{" + r + "}";
}, serializeCssKeyframe = (e, t) => {
 var r, s;
 return (null !== (s = null === (r = t.values) || void 0 === r ? void 0 : r.join(",")) && void 0 !== s ? s : "") + "{" + serializeCssMapVisit(e, t.declarations) + "}";
}, serializeCssFontFace = (e, t) => {
 const r = serializeCssMapVisit(e, t.declarations);
 return "" === r ? "" : "@font-face{" + r + "}";
}, serializeCssSupports = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules);
 return "" === r ? "" : "@supports " + t.supports + "{" + r + "}";
}, serializeCssPage = (e, t) => {
 var r, s;
 return "@page " + (null !== (s = null === (r = t.selectors) || void 0 === r ? void 0 : r.join(", ")) && void 0 !== s ? s : "") + "{" + serializeCssMapVisit(e, t.declarations) + "}";
}, serializeCssDocument = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules), s = "@" + (t.vendor || "") + "document " + t.document;
 return "" === r ? "" : s + "{" + r + "}";
}, serializeCssMapVisit = (e, t) => {
 let r = "";
 if (t) for (let s = 0, n = t.length; s < n; s++) r += serializeCssVisitNode(e, t[s], s, n);
 return r;
}, removeSelectorWhitespace = e => {
 let t = "", r = "", s = !1;
 for (let n = 0, o = (e = e.trim()).length; n < o; n++) if (r = e[n], "[" === r && "\\" !== t[t.length - 1] ? s = !0 : "]" === r && "\\" !== t[t.length - 1] && (s = !1), 
 !s && CSS_WS_REG.test(r)) {
  if (CSS_NEXT_CHAR_REG.test(e[n + 1])) continue;
  if (CSS_PREV_CHAR_REG.test(t[t.length - 1])) continue;
  t += " ";
 } else t += r;
 return t;
}, removeMediaWhitespace = e => {
 var t;
 let r = "", s = "";
 for (let n = 0, o = (e = null !== (t = null == e ? void 0 : e.trim()) && void 0 !== t ? t : "").length; n < o; n++) if (s = e[n], 
 CSS_WS_REG.test(s)) {
  if (CSS_WS_REG.test(r[r.length - 1])) continue;
  r += " ";
 } else r += s;
 return r;
}, CSS_WS_REG = /\s/, CSS_NEXT_CHAR_REG = /[>\(\)\~\,\+\s]/, CSS_PREV_CHAR_REG = /[>\(\~\,\+]/, collectUsedSelectors = (e, t) => {
 if (null != t && 1 === t.nodeType) {
  const r = t.children, s = t.nodeName.toLowerCase();
  e.tags.add(s);
  const n = t.attributes;
  for (let r = 0, s = n.length; r < s; r++) {
   const s = n.item(r), o = s.name.toLowerCase();
   if (e.attrs.add(o), "class" === o) {
    const r = t.classList;
    for (let t = 0, s = r.length; t < s; t++) e.classNames.add(r.item(t));
   } else "id" === o && e.ids.add(s.value);
  }
  if (r) for (let t = 0, s = r.length; t < s; t++) collectUsedSelectors(e, r[t]);
 }
}, removeUnusedStyles = (e, t) => {
 try {
  const r = e.head.querySelectorAll("style[data-styles]"), s = r.length;
  if (s > 0) {
   const n = (e => {
    const t = {
     attrs: new Set,
     classNames: new Set,
     ids: new Set,
     tags: new Set
    };
    return collectUsedSelectors(t, e), t;
   })(e.documentElement);
   for (let e = 0; e < s; e++) removeUnusedStyleText(n, t, r[e]);
  }
 } catch (e) {
  ((e, t, r) => {
   const s = {
    level: "error",
    type: "build",
    header: "Build Error",
    messageText: "build error",
    lines: []
   };
   null != t && (null != t.stack ? s.messageText = t.stack.toString() : null != t.message ? s.messageText = t.message.length ? t.message : "UNKNOWN ERROR" : s.messageText = t.toString()), 
   null == e || (e => e === TASK_CANCELED_MSG)(s.messageText) || e.push(s);
  })(t, e);
 }
}, removeUnusedStyleText = (e, t, r) => {
 try {
  const s = parseCss(r.innerHTML);
  if (t.push(...s.diagnostics), hasError(t)) return;
  try {
   r.innerHTML = ((e, t) => {
    const r = t.usedSelectors || null, s = {
     usedSelectors: r || null,
     hasUsedAttrs: !!r && r.attrs.size > 0,
     hasUsedClassNames: !!r && r.classNames.size > 0,
     hasUsedIds: !!r && r.ids.size > 0,
     hasUsedTags: !!r && r.tags.size > 0
    }, n = e.rules;
    if (!n) return "";
    const o = n.length, i = [];
    for (let e = 0; e < o; e++) i.push(serializeCssVisitNode(s, n[e], e, o));
    return i.join("");
   })(s.stylesheet, {
    usedSelectors: e
   });
  } catch (e) {
   t.push({
    level: "warn",
    type: "css",
    header: "CSS Stringify",
    messageText: e,
    lines: []
   });
  }
 } catch (e) {
  t.push({
   level: "warn",
   type: "css",
   header: "CSS Parse",
   messageText: e,
   lines: []
  });
 }
}, SKIP_ATTRS = new Set([ "s-id", "c-id" ]), createHydrateBuildId = () => {
 let e = "abcdefghijklmnopqrstuvwxyz", t = "";
 for (;t.length < 8; ) t += e[Math.floor(Math.random() * e.length)], 1 === t.length && (e += "0123456789");
 return t;
};

exports.createWindowFromHtml = createWindowFromHtml;
exports.hydrateDocument = hydrateDocument;
exports.renderToString = renderToString;
exports.serializeDocumentToString = serializeDocumentToString;
