import { a as animationManager, m as makeSequence } from './animation-manager-c48de0f1.js';
import { A as AnimationSequences } from './animations-8383aa25.js';

const resetToFarRight = (el) => {
  el.style.left = '150%';
  el.style.position = 'relative';
};
const mainDrawerHTMLSelector = '#main-drawer > div:first-child';
const registerOpenDoubleDrawerSequence = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-double-drawer',
        animation: {
          className: 'opening-animation',
          cleanUpAfterAnimation: (element) => {
            element.style.left = '0px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-in-animation',
          cleanUpAfterAnimation: (element) => {
            element.style.opacity = '1';
            element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_DOUBLE_DRAWER, makeSequence(sequence));
};
const registerCloseDoubleDrawerSequence = ({ onBackdropFadeOutEnd, onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        elementSelector: 'phn-double-drawer',
        onStart: onAnimationStarts,
        animation: {
          className: 'closing-animation',
          cleanUpBeforeAnimation: (element) => {
            element.style.left = '';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-out-animation',
          cleanUpBeforeAnimation: (element) => {
            element.style.opacity = '';
            element.style.backgroundColor = '';
          }
        },
        onEnd: () => {
          onBackdropFadeOutEnd();
          onAnimationEnds();
        }
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_DOUBLE_DRAWER, makeSequence(sequence));
};
const registerTransitionSequence = ({ onSlideMainDrawerOutEnd }, direction = 'normal') => {
  animationManager.register(`transitionSameLevelDoubleDrawer${direction === 'reverse' ? 'Reverse' : ''}`, makeSequence([
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: direction === 'reverse' ? 'transition-backward-animation-out' : 'transition-forward-animation-out',
          cleanUpAfterAnimation: resetToFarRight
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: direction === 'reverse' ? 'transition-forward-animation-in' : 'transition-forward-animation-in',
          cleanUpBeforeAnimation: (element) => {
            element.style.left = '';
            element.style.position = '';
          }
        }
      }
    ]
  ]));
};
const registerForwardToNextMenuSequence = ({ onSlideMainDrawerOutEnd }) => {
  animationManager.register('transitionNextLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-forward-animation-out'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-forward-animation-out'
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-forward-animation-in'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-forward-animation-in'
        }
      }
    ]
  ]));
};
const registerBackToPreviousMenuSequence = ({ onSlideMainDrawerOutEnd }) => {
  animationManager.register('transitionPreviousLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-backward-animation-out'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-backward-animation-out'
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-backward-animation-in'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-backward-animation-in'
        }
      }
    ]
  ]));
};
const isPlayingDoubleDrawerAnimation = () => {
  const doubleDrawerAnimationSequences = [
    AnimationSequences.OPEN_DOUBLE_DRAWER,
    AnimationSequences.CLOSE_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_NEXT_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_PREVIOUS_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER_REVERSE
  ];
  return doubleDrawerAnimationSequences.some((sequence) => {
    try {
      return animationManager.isPlaying(sequence);
    }
    catch (_a) {
      return false;
    }
  });
};

export { registerCloseDoubleDrawerSequence as a, registerBackToPreviousMenuSequence as b, registerForwardToNextMenuSequence as c, registerTransitionSequence as d, isPlayingDoubleDrawerAnimation as i, registerOpenDoubleDrawerSequence as r };

//# sourceMappingURL=double-drawer-animation-sequences-452976e8.js.map