import { a as animationManager, m as makeSequence } from './animation-manager-137f1cb8.js';
import { A as AnimationSequences, a as AnimationDurations } from './animations-e452c6bb.js';

const registerOpenSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideInFromLeft',
          from: -1000,
          duration: AnimationDurations.drawerOpen,
          cleanUpAfterAnimation: true
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeInBackdrop',
          duration: AnimationDurations.backdrop,
          to: 0.6
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_SINGLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierStart' }));
};
const registerCloseSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideOutToLeft',
          duration: AnimationDurations.drawer,
          to: -1000
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeOutBackdrop',
          duration: AnimationDurations.backdrop,
          from: 0.6
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_SINGLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierEnd' }));
};
const registerTransitionNextLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.register(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideInFromRightFixed',
          duration: AnimationDurations.drawer,
          timingFunction: 'easeInOutQuad'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const registerTransitionPreviousLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.register(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          name: 'slideOutToRightFixed',
          duration: AnimationDurations.drawer,
          timingFunction: 'easeInOutQuad'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const isPlayingSingleDrawerAnimation = () => {
  try {
    const singleDrawerAnimationSequences = [
      AnimationSequences.OPEN_SINGLE_DRAWER,
      AnimationSequences.CLOSE_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER
    ];
    return singleDrawerAnimationSequences.some((sequence) => {
      try {
        return animationManager.isPlaying(sequence);
      }
      catch (_a) {
        return false;
      }
    });
  }
  catch (e) {
    return false;
  }
};

export { registerCloseSingleDrawerAnimation as a, registerTransitionNextLevelSingleDrawerAnimation as b, registerTransitionPreviousLevelSingleDrawerAnimation as c, isPlayingSingleDrawerAnimation as i, registerOpenSingleDrawerAnimation as r };

//# sourceMappingURL=single-drawer-animation-sequences-e3d73dd8.js.map