import { N as NaviError, a as NaviErrorTypes, c as Environments, n as navStateStore, g as getEnvironment } from './nav-content-store-238e6137.js';
import { o as breakpoint, u as hasKey, g as getString, C as COOKIE_DOMAIN, M as MS_IN_MONTH, x as shallowCopySpecifiedAttributesWithDefault, y as camelToKebapCase, i as isString, t as getHTMLElement, V as VERSION, v as DEFAULT_ENVIRONMENT, a as getConfig } from './helper-76937d0b.js';

const FEATURE_OVERRIDE_ENABLED = 'featureOverrideEnabled';
const FEATURE_SHOP = 'shop';
const FEATURE_PCOM_SEARCH = 'pcom_search';
const FEATURE_SAVED_ITEMS = 'saved_items';
const FEATURE_AB_TESTING = 'ab';
const FEATURE_DEALER_SEARCH_CHINA = 'dealer_search_china';
const FEATURE_DEALER_SEARCH_OPENING_HOURS = 'opening_hours';
const FEATURE_SENTRY = 'sentry';
const FEATURE_SHOP_WISHLIST = 'shop_wishlist';

const local = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const preview = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const test = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const production = {
	featureOverrideEnabled: {
		enabled: false
	},
	homenav_1723: {
		enabled: false
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const featureJson = {
	local: local,
	preview: preview,
	test: test,
	production: production
};

/* istanbul ignore file */
class WindowService {
  constructor() {
    this.initialBodyStyleValues = {
      top: '',
      position: '',
      inlineSize: '',
      overflowY: ''
    };
    this.initialDocumentScrollTop = 0;
  }
  get location() {
    return window.location;
  }
  set location(newLocation) {
    window.location = newLocation;
  }
  get sessionStorage() {
    return window.sessionStorage;
  }
  get localStorage() {
    return window.localStorage;
  }
  set version(version) {
    Object.assign(window, { PHN_HEADER_VERSION: version });
  }
  set navigationLoaded(loaded) {
    Object.assign(window, { PHN_NAVIGATION_LOADED: loaded });
  }
  get bodyOverflow() {
    return document.body.style.overflow;
  }
  get bodyHeight() {
    return document.body.style.height;
  }
  requestAnimationFrame(callback) {
    return window.requestAnimationFrame(callback);
  }
  createDiv() {
    return window.document.createElement('div');
  }
  getBreakpoint() {
    const clientWidth = Math.max(window.document.documentElement.clientWidth, window.innerWidth || 0);
    const matchingBreakpoint = Object.keys(breakpoint)
      .reverse()
      .find((foundBreakpoint) => hasKey(breakpoint, foundBreakpoint) && clientWidth >= breakpoint[foundBreakpoint]);
    return typeof matchingBreakpoint === 'string' && hasKey(breakpoint, matchingBreakpoint)
      ? breakpoint[matchingBreakpoint]
      : 0;
  }
  get redirected() {
    return (window.REDIRECTED === true ||
      window.location.search.includes('cs_redirect='));
  }
  createIframe(id, src) {
    const iframe = window.document.createElement('iframe');
    iframe.id = id;
    iframe.style.display = 'none';
    iframe.src = src;
    window.document.body.appendChild(iframe);
  }
  removeElement(id) {
    var _a;
    (_a = window.document.getElementById(id)) === null || _a === void 0 ? void 0 : _a.remove();
  }
  redirectToUrl(url) {
    window.location.assign(url);
  }
  generateRandom(size) {
    const CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const buffer = new Uint8Array(size);
    window.crypto.getRandomValues(buffer);
    const state = [];
    for (let i = 0; i < buffer.byteLength; i += 1) {
      const index = buffer[i] % CHARSET.length;
      state.push(CHARSET[index]);
    }
    return state.join('');
  }
  /**
   * site does NOT have consent mechanism -> consent NOT needed
   * site does have consent mechanism + isConsentActive NOT exists -> consent NOT needed
   * site does have consent mechanism + isConsentActive exists + isConsentActive -> consent needed
   * site does have consent mechanism + NOT isConsentActive -> consent NOT needed
   */
  /**
   * consent needed + consent given -> userConsent = true
   * consent needed + consent NOT given -> userConsent = false
   * consent NOT needed -> userConsent = true
   */
  maybeCheckMarketingConsent(handleSuccess) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const args = {
      processorId: (_c = (_b = (_a = window.GlobalConsent) === null || _a === void 0 ? void 0 : _a.Processor) === null || _b === void 0 ? void 0 : _b.googleMaps) !== null && _c !== void 0 ? _c : 'Google Maps',
      timeoutVar: {},
      mapContainer: '',
      callbacks: {
        success: handleSuccess
      }
    };
    if (typeof ((_e = (_d = window.PCOM) === null || _d === void 0 ? void 0 : _d.globalConsent) === null || _e === void 0 ? void 0 : _e.checkConsent) === 'function') {
      (_h = (_g = (_f = window.PCOM) === null || _f === void 0 ? void 0 : _f.globalConsent) === null || _g === void 0 ? void 0 : _g.checkConsent) === null || _h === void 0 ? void 0 : _h.call(_g, args);
      return true;
    }
    if (typeof ((_j = window.ucPrivacyShield) === null || _j === void 0 ? void 0 : _j.checkConsent) === 'function') {
      (_l = (_k = window.ucPrivacyShield) === null || _k === void 0 ? void 0 : _k.checkConsent) === null || _l === void 0 ? void 0 : _l.call(_k, args);
      return true;
    }
    handleSuccess();
    return false;
  }
  async deriveChallenge(code) {
    if (code.length < 43 || code.length > 128) {
      throw new NaviError('invalid code length', NaviErrorTypes.INVALID_INPUT);
    }
    const buf = new ArrayBuffer(code.length);
    const bufView = new Uint8Array(buf);
    for (let i = 0; i < code.length; i++) {
      bufView[i] = code.charCodeAt(i);
    }
    const buffer = await window.crypto.subtle.digest('SHA-256', bufView);
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
  }
  async hashString(text) {
    const msgUint8 = new TextEncoder().encode(text);
    const hashBuffer = await window.crypto.subtle.digest('SHA-256', msgUint8);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');
  }
  getScrollbarWidth() {
    const scrollDiv = window.document.createElement('div');
    scrollDiv.style.overflow = 'scroll';
    window.document.body.appendChild(scrollDiv);
    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    window.document.body.removeChild(scrollDiv);
    return Number.isNaN(scrollbarWidth) ? '0px' : `${scrollbarWidth}px`;
  }
  async fetchGoogleMapsApi(apiKey, url = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`) {
    if (window.google !== undefined && window.google.maps !== undefined && window.google.maps.version !== undefined) {
      return window.google;
    }
    const existingScript = document.getElementById('googleMaps'); // -> Current name?!
    if (existingScript) {
      return window.google;
    }
    const script = document.createElement('script');
    script.src = url;
    script.id = 'googleMaps';
    document.head.appendChild(script);
    return new Promise((resolve, reject) => {
      script.onerror = () => {
        reject(new NaviError('Failed to load google maps script.', NaviErrorTypes.GENERAL));
      };
      script.onload = () => {
        resolve(window.google);
      };
    });
  }
  async getNavigatorLatLong() {
    return new Promise((resolve, reject) => {
      window.navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {
        resolve({ latitude, longitude });
      }, (error) => reject(new NaviError(`geolocation.getCurrentPosition failed with ${error.code}: ${error.message}`, getErrorType(error))));
    });
  }
  getCookie(cookieName) {
    var _a;
    return getString((_a = document.cookie
      .split('; ')
      .find((row) => row.startsWith(`${cookieName}=`))) === null || _a === void 0 ? void 0 : _a.split('=')[1]);
  }
  setCookie(cookieName, newValue) {
    document.cookie = `${cookieName}=${newValue};domain=${COOKIE_DOMAIN};expires=${new Date(Date.now() + MS_IN_MONTH * 10).toUTCString()};`;
  }
  btoa(data) {
    return window.btoa(data);
  }
  lockScroll() {
    this.initialBodyStyleValues = shallowCopySpecifiedAttributesWithDefault(document.body.style, this.initialBodyStyleValues);
    this.initialDocumentScrollTop = document.documentElement.scrollTop;
    document.body.style.top = `-${document.documentElement.scrollTop}px`;
    document.body.style.position = 'fixed';
    document.body.style.inlineSize = '100%';
    document.body.style.overflowY = 'scroll';
  }
  unlockScroll() {
    Object.entries(this.initialBodyStyleValues).forEach(([key, value]) => document.body.style.setProperty(camelToKebapCase(key), value));
    document.documentElement.scrollTop = this.initialDocumentScrollTop;
  }
  hasScrollbar() {
    return window.document.body.offsetHeight > window.innerHeight;
  }
  async waitForElement(parent, selector) {
    if (!isString(selector)) {
      return parent;
    }
    const el = getHTMLElement(parent.querySelector(selector));
    if (el !== null) {
      return el;
    }
    return new Promise((resolve) => {
      const observer = new MutationObserver(() => {
        const newEl = getHTMLElement(parent.querySelector(selector));
        if (newEl !== null) {
          resolve(newEl);
          observer.disconnect();
        }
      });
      observer.observe(parent, { childList: true, subtree: true });
    });
  }
}
function getErrorType(error) {
  switch (error.code) {
    case error.PERMISSION_DENIED: {
      return NaviErrorTypes.GEOLOCATION_DENIED;
    }
    case error.POSITION_UNAVAILABLE:
    case error.TIMEOUT: {
      return NaviErrorTypes.RETRY;
    }
    default: {
      return NaviErrorTypes.GENERAL;
    }
  }
}
const windowService = new WindowService();

class Logger {
  constructor() {
    this.version = VERSION;
    this.breakpoint = 0;
    this.locale = null;
  }
  init(_, locale) {
    this.breakpoint = windowService.getBreakpoint();
    this.locale = locale;
  }
  log(logName, level, id, message, errorType) {
    const { env } = navStateStore.state;
    if (env === Environments.TEST) {
      return;
    }
    try {
      const log = JSON.stringify({
        name: logName,
        level: level,
        env: env,
        breakpoint: this.breakpoint,
        locale: this.locale,
        version: this.version,
        hostname: windowService.location.hostname,
        pathname: windowService.location.pathname,
        id,
        errorType: errorType || '',
        message
      });
      if (env !== Environments.PRODUCTION) {
        // eslint-disable-next-line no-console
        console[level](log);
      }
      // eslint-disable-next-line no-empty
    }
    catch (err) { }
  }
  info(id, message = '') {
    this.log('PHN_HEADER_LOG_ENTRY', "info" /* LogLevel.INFO */, id, message);
  }
  error(id, err) {
    const errorType = err instanceof NaviError ? err.type : NaviErrorTypes.GENERAL;
    this.log('PHN_HEADER_LOG_ENTRY', "error" /* LogLevel.ERROR */, id, err.message, errorType);
    // captureNaviException(err, { breakpoint: this.breakpoint, locale: this.locale });
  }
}
const logger = new Logger();

class FeatureToggles {
  constructor(env = getEnvironment(DEFAULT_ENVIRONMENT), featureEnvMap = featureJson) {
    this.featureEnvMap = featureEnvMap;
    this.features = {};
    this.env = 'local';
    this.isShopToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP, windowService.location.search);
    this.isPcomSearchToggleActive = () => this.isFeatureEnabled(FEATURE_PCOM_SEARCH, windowService.location.search);
    this.isSavedItemsToggleActive = () => this.isFeatureEnabled(FEATURE_SAVED_ITEMS, windowService.location.search);
    this.isABTestingToggleActive = () => this.isFeatureEnabled(FEATURE_AB_TESTING, windowService.location.search);
    this.isDealerSearchChinaEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_CHINA, windowService.location.search);
    this.isDealerSearchOpeningHoursEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_OPENING_HOURS, windowService.location.search);
    this.isSentryEnabled = () => this.isFeatureEnabled(FEATURE_SENTRY, windowService.location.search);
    this.isShopWishlistToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP_WISHLIST, windowService.location.search);
    this.env = env;
    this.features = this.featureEnvMap[env];
  }
  async loadRemoteToggles() {
    try {
      const BFFEndpoint = getConfig(this.env).BFF_ENDPOINT;
      const response = await fetch(`${BFFEndpoint}/toggles?env=${this.env}`);
      if (!response.ok) {
        const text = await response.text();
        throw new Error(text);
      }
      const result = await response.json();
      this.features = result;
    }
    catch (err) {
      throw new NaviError(`Load Feature Toggles failed with error: ${err}`, NaviErrorTypes.GENERAL);
    }
  }
  stringToBooleanStrict(value) {
    if (value === 'true') {
      return true;
    }
    if (value === 'false') {
      return false;
    }
    return null;
  }
  getUrlFeatureToggleOverride(feature, searchString) {
    var _a, _b;
    const queryValue = (_b = (_a = searchString
      .split('?')[1]) === null || _a === void 0 ? void 0 : _a.split('&').find((query) => query.includes(feature))) === null || _b === void 0 ? void 0 : _b.split('=')[1];
    return isString(queryValue) ? this.stringToBooleanStrict(queryValue || '') : null;
  }
  getLocalStorageFeatureToggleOverride(feature) {
    const localStorageValue = localStorage.getItem(`phn.${feature}`);
    return isString(localStorageValue) ? this.stringToBooleanStrict(localStorageValue) : null;
  }
  isFeatureEnabled(feature, searchString) {
    var _a;
    if (this.features === undefined) {
      return false;
    }
    if (this.env === Environments.PRODUCTION && this.isOnSecurityLayer(feature)) {
      return false;
    }
    if ((_a = this.features[FEATURE_OVERRIDE_ENABLED]) === null || _a === void 0 ? void 0 : _a.enabled) {
      const featureToggleOverrides = [
        this.getUrlFeatureToggleOverride(feature, searchString),
        this.getLocalStorageFeatureToggleOverride(feature)
      ];
      for (const featureToggleOverride of featureToggleOverrides) {
        if (featureToggleOverride !== null) {
          return featureToggleOverride;
        }
      }
    }
    if (this.features[feature] !== undefined) {
      return this.features[feature].enabled;
    }
    else {
      return false;
    }
  }
  async setFeatures(env) {
    this.env = env;
    try {
      if (env === 'test') {
        this.features = this.featureEnvMap[env];
        return;
      }
      await this.loadRemoteToggles();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (error) {
      logger.error('INIT_APP_CONFIG', error);
      this.features = this.featureEnvMap[env];
    }
  }
  isOnSecurityLayer(feature) {
    const prodDisabledToggles = [FEATURE_SENTRY, FEATURE_DEALER_SEARCH_OPENING_HOURS];
    return prodDisabledToggles.includes(feature);
  }
}
const featureToggles = new FeatureToggles();

export { featureToggles as f, logger as l, windowService as w };

//# sourceMappingURL=feature-toggles-f5a05f06.js.map