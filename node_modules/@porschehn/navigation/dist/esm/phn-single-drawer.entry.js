import { h, F as Fragment, r as registerInstance, H as Host, g as getElement } from './index-192f2625.js';
import { a as RoutingKeys } from './routing-key-808e9d26.js';
import { n as focusOnElement, J as getHTMLElementFromRoot, E as dispatchEvent, t as getHTMLElement, i as isString, G as FOCUSABLE_ELEMENTS_SELECTOR, F as DrawerStatusValues } from './helper-76937d0b.js';
import { T as Timeout } from './timeout-aa680917.js';
import { b as navContentStore, n as navStateStore, f as DisplayElementTypes, E as EventActions, h as ElementTypes } from './nav-content-store-238e6137.js';
import { s as showBackButton, d as syncAnimation, p as pop, g as getCurrentRoute, h as handleAnimationRouting, e as isAnimatingForward } from './routing-manager-2bba85b2.js';
import { g as getAllFocusableElements } from './helper-26375c66.js';
import { r as routerStore } from './router-store-26b5bff5.js';
import { a as animationManager, m as makeSequence } from './animation-manager-2e28abcf.js';
import { A as AnimationSequences } from './animations-8383aa25.js';
import { a as analyticsManager } from './analytics-manager-8f2e83f9.js';
import { g as globalDataLayerService } from './global-data-layer-service-dc914682.js';
import './feature-toggles-f5a05f06.js';
import './dealer-search-results-store-f00291b6.js';
import './menu-items-service-0969229a.js';
import './ab-testing-constructor-service-d4355ec8.js';

function DrawerContent({ routingKey, breakpoint, locale, receivedContent }) {
  const { menu } = navContentStore.state;
  return (h(Fragment, null,
    h("div", { class: "bottom-gradient" }),
    h("div", { class: "drawer-content" },
      h("phn-drawer-header", { showBackButton: showBackButton(routingKey), backButtonAnalyticsId: menu.id, breakpoint: breakpoint, route: routingKey, receivedContent: receivedContent, locale: locale }),
      h("phn-router", { activeRoutingKey: routingKey, breakpoint: breakpoint, locale: locale, receivedContent: receivedContent }))));
}

function registerTransitionNextLevelSingleDrawerAnimation({ onAnimationEnds }) {
  animationManager.register(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          className: 'slide-in-from-right-fixed'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
}

function registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds }) {
  animationManager.register(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          className: 'slide-out-to-right-fixed'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
}

function registerOpenSingleDrawerAnimation({ onAnimationStarts, onAnimationEnds }) {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer',
        animation: {
          className: 'slide-in-from-left',
          cleanUpAfterAnimation: (element) => {
            element.style.left = '0px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-in-animation',
          cleanUpAfterAnimation: (element) => {
            element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
            element.style.opacity = '1';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_SINGLE_DRAWER, makeSequence(sequence));
}

function registerCloseSingleDrawerAnimation({ onAnimationStarts, onAnimationEnds }) {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer',
        animation: {
          className: 'slide-out-to-left',
          cleanUpBeforeAnimation: (element) => {
            element.style.left = '';
          },
          cleanUpAfterAnimation: (element) => {
            element.style.left = '-1000px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-out-animation',
          cleanUpBeforeAnimation: (element) => {
            element.style.backgroundColor = '';
            element.style.opacity = '';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_SINGLE_DRAWER, makeSequence(sequence));
}

function registerSingleDrawerAnimationSequences() {
  function dispatchDrawerStatusEvent(status) {
    dispatchEvent('phn-single-drawer', 'phnDrawerStatus', {
      bubbles: true,
      composed: true,
      detail: { status }
    });
  }
  registerTransitionNextLevelSingleDrawerAnimation({
    onAnimationEnds: () => onTransitionEnd()
  });
  registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds: () => onTransitionEnd() });
  registerOpenSingleDrawerAnimation({
    onAnimationStarts: () => {
      dispatchDrawerStatusEvent(DrawerStatusValues.startOpening);
    },
    onAnimationEnds: () => {
      onTransitionEnd();
      dispatchDrawerStatusEvent(DrawerStatusValues.finishOpening);
    }
  });
  registerCloseSingleDrawerAnimation({
    onAnimationStarts: () => {
      dispatchDrawerStatusEvent(DrawerStatusValues.startClosing);
    },
    onAnimationEnds: () => {
      dispatchDrawerStatusEvent(DrawerStatusValues.finishClosing);
      syncAnimation();
      if (navStateStore.state.usingKeyboard) {
        setTimeout(() => {
          focusOnElement(getHTMLElementFromRoot('phn-burger-button phn-p-button-pure'));
        }, 100);
      }
    }
  });
}
function onTransitionEnd() {
  const focussedElementId = routerStore.state.animatingPointer > routerStore.state.routingKeyPointer
    ? routerStore.state.routingKeyHistory[routerStore.state.animatingPointer]
    : '';
  syncAnimation();
  pop();
  setTimeout(() => {
    const singleDrawer = getHTMLElementFromRoot('.drawer');
    focusOn(singleDrawer, focussedElementId);
  });
  sendDataLayerEvent();
}
function sendDataLayerEvent() {
  analyticsManager.setDrawerType(DisplayElementTypes.SingleDrawer);
  globalDataLayerService.pushDataLayerEvent(EventActions.DRAWER_LOAD, {
    componentDisplay: {
      displayElementType: analyticsManager.calculateDisplayElementType(getCurrentRoute(), ElementTypes.singleDrawer),
      displayElementId: analyticsManager.calculateDisplayElementId(),
      displayElementName: 'Single Drawer'
    }
  });
}
function focusOn(element, focussedElementId) {
  if (!element)
    return;
  const autoFocusElement = getHTMLElement(element.querySelector('.autofocus'));
  if (autoFocusElement !== null) {
    focusOnElement(autoFocusElement);
    return;
  }
  if (navStateStore.state.usingKeyboard) {
    let focussableElement = null;
    if (isString(focussedElementId)) {
      focussableElement = getHTMLElement(element.querySelector(`.active [data-id="${focussedElementId}"]`));
    }
    if (focussableElement === null) {
      focussableElement = getHTMLElement(element.querySelector(`.active ${FOCUSABLE_ELEMENTS_SELECTOR}`));
    }
    if (focussableElement !== null) {
      focusOnElement(focussableElement);
    }
  }
  else {
    const firstFocus = getHTMLElement(element.querySelector('.first-focus'));
    if (firstFocus !== null) {
      focusOnElement(firstFocus);
    }
  }
}

const singleDrawerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-single-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-single-drawer{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-single-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-single-drawer{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-single-drawer{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-single-drawer{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-single-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-single-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-single-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-single-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-single-drawer-h{display:block;position:fixed;top:0;left:-1000px;height:100vh;width:100vw;z-index:301}.slide-in-from-left.sc-phn-single-drawer-h{position:absolute;-webkit-animation:slide-in-from-left-absolute 600ms;animation:slide-in-from-left-absolute 600ms}.slide-out-to-left.sc-phn-single-drawer-h{position:absolute;animation:slide-in-from-left-absolute 600ms reverse}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer{z-index:301;background-color:#fff;position:absolute;left:0}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{overflow-y:auto;height:100vh;width:100vw;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 1.6875rem 6.25rem 1.6875rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.1875rem 6.25rem 2.1875rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 3.375rem 6.25rem 3.375rem}}@media (min-width: 1000px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.25rem 6.25rem 2.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:1.125rem;margin-bottom:1.9375rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-top:2rem;margin-bottom:2.3125rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-bottom:1.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-router.sc-phn-single-drawer{padding-bottom:4rem}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .bottom-gradient.sc-phn-single-drawer{height:10rem;background:-webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(rgb(255, 255, 255)));background:linear-gradient(to bottom, rgba(255, 255, 255, 0), rgb(255, 255, 255));opacity:1;position:absolute;width:100%;bottom:0;margin-left:-1.5rem;pointer-events:none;margin-left:0;z-index:1}";

const SingleDrawer = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.focusTimeout = new Timeout(0);
    this.breakpoint = undefined;
    this.locale = undefined;
    this.usingKeyboard = false;
    this.receivedContent = false;
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    const targetElement = getHTMLElement(e.target);
    if (targetElement === null) {
      return;
    }
    let focusableDrawerElements = getAllFocusableElements(this.el.querySelector('.active'));
    if (focusableDrawerElements.length === 0) {
      return;
    }
    if (getCurrentRoute().startsWith(RoutingKeys.DEALER_SEARCH)) {
      focusableDrawerElements = focusableDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const firstFocusableDrawerElement = focusableDrawerElements[0];
    const lastFocusableDrawerElement = focusableDrawerElements[focusableDrawerElements.length - 1];
    if (targetElement === firstFocusableDrawerElement && e.shiftKey) {
      e.preventDefault();
      if (lastFocusableDrawerElement !== null) {
        focusOnElement(lastFocusableDrawerElement);
      }
      return;
    }
    if (targetElement === lastFocusableDrawerElement && !e.shiftKey) {
      e.preventDefault();
      if (firstFocusableDrawerElement !== null) {
        focusOnElement(firstFocusableDrawerElement);
      }
      return;
    }
  }
  componentWillLoad() {
    registerSingleDrawerAnimationSequences();
  }
  disconnectedCallback() {
    this.focusTimeout.cancel();
    routerStore.reset();
  }
  render() {
    const { nextRoute, currentRoute } = handleAnimationRouting();
    return (h(Host, null, isString(currentRoute) ? (h("div", { class: "drawer active", key: currentRoute }, h("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }), h(DrawerContent, { routingKey: currentRoute, breakpoint: this.breakpoint, locale: this.locale, receivedContent: this.receivedContent }))) : null, isString(nextRoute) ? (h("div", { class: `drawer animating`, style: isAnimatingForward() ? { left: '100%' } : {}, key: nextRoute }, h(DrawerContent, { routingKey: nextRoute, breakpoint: this.breakpoint, locale: this.locale, receivedContent: this.receivedContent }))) : null));
  }
  get el() { return getElement(this); }
};
SingleDrawer.style = singleDrawerCss;

export { SingleDrawer as phn_single_drawer };

//# sourceMappingURL=phn-single-drawer.entry.js.map