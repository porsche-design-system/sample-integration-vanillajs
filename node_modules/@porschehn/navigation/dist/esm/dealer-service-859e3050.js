import { c as Environments, N as NaviError, a as NaviErrorTypes, n as navStateStore } from './nav-content-store-238e6137.js';
import { w as windowService } from './feature-toggles-f5a05f06.js';
import { b as getQueryString, a as getConfig } from './helper-76937d0b.js';

var __rest = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
async function getAllPPNDealersForMarket(env, dealerApiUrl, country) {
  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });
}
async function getPPNDealers(env, dealerApiUrl, coordinates, country, options = {}) {
  const { radius } = options;
  let response;
  let ppnDealerSearchResults;
  try {
    const headers = new Headers();
    headers.set('Accept', '*/*');
    /* istanbul ignore next */
    if (env === Environments.LOCAL) {
      headers.set('Authorization', 'Basic ' + windowService.btoa(`${'undefined'}:${'undefined'}`));
    }
    const requestParams = {
      coordinates: `${coordinates.latitude},${coordinates.longitude}`,
      radius
    };
    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {
      method: 'GET',
      headers
    });
  }
  catch (err) {
    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);
  }
  if (response.status === 400) {
    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);
  }
  if (response.status === 404) {
    throw new NaviError('dealerService.getPPNDealers failed with invalid country code and therefore responded with no results', NaviErrorTypes.NO_RESULTS);
  }
  if (response.status !== 200) {
    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);
  }
  try {
    ppnDealerSearchResults = await response.json();
  }
  catch (err) {
    throw new NaviError('dealerService.getPPNDealers could not parse response into json format', NaviErrorTypes.GENERAL);
  }
  return ppnDealerSearchResults.map((_a) => {
    var { dealer } = _a, rest = __rest(_a, ["dealer"]);
    return (Object.assign({ ppnDealer: dealer }, rest));
  });
}
async function getPPNDealer(env, dealerApiUrl, id, coordinates, country) {
  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer
  let ppnDealer;
  try {
    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);
    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);
  }
  catch (err) {
    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);
  }
  if (ppnDealer === undefined) {
    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);
  }
  return ppnDealer;
}
const dealersByRegionMap = new Map();
async function getPPNDealerByRegion(id, region) {
  const dealersOfRegion = await getPPNDealersByRegion(region);
  const dealerResult = dealersOfRegion.regions
    .flatMap(({ cities }) => cities.flatMap(({ dealers }) => Object.values(dealers).reduce((dealerList, dealer) => [...dealerList, dealer], [])))
    .find(({ ppnDealer }) => ppnDealer.id === id);
  if (dealerResult === undefined) {
    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);
  }
  return dealerResult;
}
async function getPPNDealersByRegion(region) {
  const { env } = navStateStore.state;
  const headers = new Headers();
  let dealersByRegion;
  if (dealersByRegionMap.has(region)) {
    dealersByRegion = dealersByRegionMap.get(region);
  }
  else {
    const { BFF_ENDPOINT } = getConfig(env);
    headers.set('Accept', '*/*');
    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {
      method: 'GET',
      headers
    });
    dealersByRegion = await response.json();
    dealersByRegionMap.set(region, dealersByRegion);
  }
  if (dealersByRegion === undefined) {
    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);
  }
  return dealersByRegion;
}

export { getPPNDealer as a, getAllPPNDealersForMarket as b, getPPNDealersByRegion as c, getPPNDealers as d, getPPNDealerByRegion as g };

//# sourceMappingURL=dealer-service-859e3050.js.map