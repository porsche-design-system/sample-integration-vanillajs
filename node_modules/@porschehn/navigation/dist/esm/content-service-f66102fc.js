import { s as splitLocale, N as NaviError, a as NaviErrorTypes, i as isCountryInOneOfRegions } from './nav-content-store-0a34ed51.js';
import { A as Application, d as constructCacheKey, a as getConfig } from './helper-baaa661e.js';
import { m as modifyShopItemDependingOnMarket } from './shop-helper-67c9a5c7.js';
import { f as featureToggles } from './feature-toggles-007debe5.js';

const contentCache = new Map();
async function fetchContent(locale, app) {
  var _a;
  const config = getConfig(featureToggles.env);
  const isShopEnabled = featureToggles.isShopToggleActive() && app === Application.shop;
  const naviContentPromise = fetchNaviContent(config.CONTENT_URL, locale);
  const shopContentPromise = isShopEnabled ? fetchShopContent(config.SHOP_CONTENT_URL, locale) : Promise.resolve(null);
  const [naviContentResult, shopContentResult] = await Promise.allSettled([naviContentPromise, shopContentPromise]);
  if (naviContentResult.status === 'rejected') {
    throw naviContentResult.reason;
  }
  const naviContent = modifyShopItemDependingOnMarket(locale, app, naviContentResult.value);
  const shopContent = shopContentResult.status === 'fulfilled' ? shopContentResult.value : null;
  if (shopContent === null || naviContent.shop === null) {
    return naviContent;
  }
  return Object.assign(Object.assign({}, naviContent), { shop: Object.assign(Object.assign({}, naviContent.shop), { children: shopContent.menuItems || ((_a = naviContent.shop) === null || _a === void 0 ? void 0 : _a.children) || [], additionalContent: shopContent.additionalContent, availableLocales: naviContent.shop.availableLocales, availableLocalesOnlyForShop: naviContent.shop.availableLocalesOnlyForShop }) });
}
async function fetchNaviContent(contentUrl, locale) {
  const { country, language } = splitLocale(locale);
  const cacheKey = constructCacheKey(contentUrl, locale);
  const cachedContent = contentCache.get(cacheKey);
  if (cachedContent !== undefined) {
    return cachedContent;
  }
  const data = await fetch(`${contentUrl}/${`${language}-${country}`}.json`, {
    headers: {
      'Cache-Control': 'no-cache',
      'Content-Type': 'application/json'
    }
  });
  if (data.status === 404) {
    throw new NaviError(`No content for locale ${locale} found`, NaviErrorTypes.NO_RESULTS);
  }
  if (!data.ok) {
    throw new NaviError(`Could not get content for locale ${locale}`, NaviErrorTypes.GENERAL);
  }
  const content = await data.json();
  contentCache.set(cacheKey, content);
  return content;
}
async function fetchShopContent(contentUrl, locale) {
  const { country, language } = splitLocale(locale);
  const data = await fetch(`${contentUrl}/${country.toLowerCase()}/${`${language}-${country}`}/navigation`, {
    headers: {
      'Content-Type': 'application/json',
      'x-vercel-protection-bypass': 'hXMkVgu6erfnX2ydOdeSCixWDWbPjBUk'
    }
  });
  if (data.status === 404) {
    throw new NaviError(`No shop content for locale ${locale} found`, NaviErrorTypes.NO_RESULTS);
  }
  if (!data.ok) {
    throw new NaviError(`Could not get shop content for locale ${locale}`, NaviErrorTypes.GENERAL);
  }
  return data.json();
}
function constructFlagURL(footerAssetsUrl, locale) {
  const { country } = splitLocale(locale);
  let flag = country;
  if (flag.includes('-') && !isCountryInOneOfRegions(flag)) {
    flag = country.split('-')[0];
  }
  return `${footerAssetsUrl}/flags/${flag}.svg`;
}
async function getFlagURL(footerAssetsUrl, locale) {
  try {
    const flagURL = constructFlagURL(footerAssetsUrl, locale);
    const res = await fetch(flagURL);
    // Only set flagURL if flag actually exists
    if (res.ok) {
      return flagURL;
    }
  }
  catch (err) {
    // ignore error
  }
  return '';
}

export { fetchContent as f, getFlagURL as g };

//# sourceMappingURL=content-service-f66102fc.js.map