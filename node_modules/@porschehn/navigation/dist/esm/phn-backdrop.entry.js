import { r as registerInstance, c as createEvent, h, g as getElement, H as Host } from './index-3fb28577.js';
import { a as analyticsManager } from './analytics-manager-87641e35.js';
import { g as globalDataLayerService } from './global-data-layer-service-2c9dad09.js';
import { w as windowService } from './window-service-890948e7.js';
import { e as DisplayElementTypes, E as EventActions, C as ClickElementTypes, f as ElementTypes } from './nav-content-store-ad934a75.js';
import './routing-key-12b2ffae.js';
import './navi-error-d2e07707.js';
import './router-store-8c6b3651.js';
import './menu-items-service-6c03b266.js';
import './ab-testing-constructor-service-ac142693.js';
import './feature-toggles-1274e59b.js';

const backdropCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-backdrop{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-backdrop{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-backdrop{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-backdrop{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-backdrop{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-backdrop{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-backdrop-h{position:fixed;z-index:300;top:0;left:0;right:0;bottom:0;background-color:rgba(0, 0, 0, 0.6);cursor:pointer;backdrop-filter:blur(32px);-webkit-backdrop-filter:blur(32px)}";

const Backdrop = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.clickDrawerHeaderClose = createEvent(this, "clickDrawerHeaderClose", 7);
    this.backdropClosed = createEvent(this, "backdropClosed", 7);
    this.activeRoutingKey = undefined;
  }
  handleClick() {
    this.sendDataAnalyticsEvent();
    this.clickDrawerHeaderClose.emit();
  }
  sendDataAnalyticsEvent() {
    analyticsManager.setDrawerType(DisplayElementTypes.DoubleDrawer);
    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'backdrop',
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level-0'
      },
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.backdrop),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  componentWillLoad() {
    if (windowService.hasScrollbar()) {
      windowService.lockScroll();
    }
  }
  disconnectedCallback() {
    if (windowService.hasScrollbar()) {
      windowService.unlockScroll();
    }
  }
  render() {
    return h(Host, null);
  }
  get el() { return getElement(this); }
};
Backdrop.style = backdropCss;

export { Backdrop as phn_backdrop };

//# sourceMappingURL=phn-backdrop.entry.js.map