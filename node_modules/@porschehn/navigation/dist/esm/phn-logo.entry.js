import { r as registerInstance, c as createEvent, h, g as getElement } from './index-192f2625.js';
import { g as globalDataLayerService } from './global-data-layer-service-04808730.js';
import { c as componentsJs } from './index-a76fec20.js';
import { E as EventActions, C as ClickElementTypes, b as navContentStore } from './nav-content-store-0a34ed51.js';
import { N as NavigationTheme, f as NavigationMode, l as isDesktop, i as isString, z as getRightTheme } from './helper-baaa661e.js';
import { a as isShopAvailableAndLogoLinksToShop } from './shop-helper-67c9a5c7.js';

const logoCss = "";

const Logo = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.logoLoaded = createEvent(this, "logoLoaded", 7);
    this.size = undefined;
    this.locale = undefined;
    this.app = undefined;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.breakpoint = undefined;
  }
  sendDataLayerEvent(crest) {
    globalDataLayerService.pushDataLayerEvent(EventActions.CREST_CLICK, {
      componentClick: {
        clickElementId: crest.id,
        clickElementName: crest.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: crest.link
      }
    });
  }
  componentWillLoad() {
    componentsJs.componentsReady(this.el) // TR: I believe this first call waits for the phn-logo element to be ready
      .then(() => componentsJs.componentsReady(this.el)) // TR: Then this second call actually waits for its children (i.e.: phn-p-marque) to be ready
      .then(() => {
      this.logoLoaded.emit();
    });
  }
  getLogoLink(locale, app, crest, shop) {
    return isShopAvailableAndLogoLinksToShop(locale, app, shop) ? shop.link : crest.link;
  }
  getLogoAriaLabel(locale, app, shop) {
    return isShopAvailableAndLogoLinksToShop(locale, app, shop) ? 'Porsche Shop Homepage' : 'Porsche.com Homepage';
  }
  render() {
    const { crest, shop } = navContentStore.state;
    const logoLink = this.getLogoLink(this.locale, this.app, crest, shop);
    const logoAriaLabel = this.getLogoAriaLabel(this.locale, this.app, shop);
    return isDesktop(this.breakpoint) ? (h("phn-p-wordmark", { onClick: () => this.sendDataLayerEvent(crest), href: isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel }, size: "small", theme: getRightTheme(this.theme, this.mode) })) : (h("phn-p-crest", { onClick: () => this.sendDataLayerEvent(crest), href: isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel } }));
  }
  get el() { return getElement(this); }
};
Logo.style = logoCss;

export { Logo as phn_logo };

//# sourceMappingURL=phn-logo.entry.js.map