{"file":"analytics-manager-0d4961b8.js","mappings":"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","names":[],"sources":["src/services/analytics/analytics-manager.ts"],"sourcesContent":["import { BodyType } from '../../entities/content';\nimport { determineMainDrawerLevel, getLastRoutingSegment, getPreviousRoutingKey } from '../../entities/routing-key';\nimport { routerStore } from '../../state/router-store';\nimport { DEALER_SEARCH_ELEMENT_TYPE, DisplayElementType, ElementType, ElementTypes } from '../../utility/constants';\nimport { isString } from '../../utility/helper';\nimport { getSideDrawerRoutingKey } from '../menu-items-service';\n\nconst state: {\n  drawerType?: DisplayElementType;\n  elementType?: ElementType;\n} = {};\n\nfunction setDrawerType(drawerType: DisplayElementType): void {\n  state.drawerType = drawerType;\n}\n\nfunction calculateDisplayElementId(routingKeyForNavigatingForward?: string): string {\n  const { drawerType } = state;\n  const mainDrawerRoutingKey =\n    (isString(routingKeyForNavigatingForward)\n      ? getPreviousRoutingKey(routingKeyForNavigatingForward)\n      : routerStore.state.routingKeyHistory[routerStore.state.routingKeyPointer]) || '';\n  const lastMainDrawerRoutingKey = getLastRoutingSegment(mainDrawerRoutingKey);\n  const mainDrawerLevel = determineMainDrawerLevel(mainDrawerRoutingKey);\n  const sideDrawerLevel = mainDrawerLevel - 1;\n\n  if (!isString(mainDrawerRoutingKey)) {\n    return 'level0';\n  }\n\n  const mainDrawerDisplayElementId = isString(mainDrawerRoutingKey)\n    ? `level${mainDrawerLevel}-${lastMainDrawerRoutingKey}`\n    : `level${mainDrawerLevel - 1}-unknown`;\n\n  if (drawerType === 'doubleDrawer') {\n    if (mainDrawerRoutingKey === '') {\n      return `level${sideDrawerLevel}-unknown_level${mainDrawerLevel}-unknown`;\n    }\n    const sideDrawerRoutingKey = getSideDrawerRoutingKey(mainDrawerRoutingKey);\n    return `level${sideDrawerLevel}-${sideDrawerRoutingKey}_${mainDrawerDisplayElementId}`;\n  }\n\n  return mainDrawerDisplayElementId;\n}\n\nfunction calculateDisplayElementType(\n  activeRoutingKey: string,\n  elementType: ElementType,\n  isSideDrawer?: boolean\n): string {\n  const { drawerType } = state;\n  const mainDrawerLevel = determineMainDrawerLevel(activeRoutingKey);\n\n  if (drawerType === 'doubleDrawer') {\n    let sideDrawerLevel = mainDrawerLevel;\n    if (isSideDrawer) {\n      sideDrawerLevel = sideDrawerLevel - 1;\n    }\n    return `level${sideDrawerLevel}_${elementType}`;\n  } else {\n    return isString(activeRoutingKey)\n      ? `level${mainDrawerLevel}_${elementType}`\n      : `level${mainDrawerLevel - 1}_${elementType}`;\n  }\n}\n\nfunction getModelName(bodyType: BodyType): string {\n  const urlSplitIntoPieces: string[] = bodyType.link.split('/');\n  const lastElementInUrlSplit: string = urlSplitIntoPieces[urlSplitIntoPieces.length - 1];\n  let modelName: string;\n\n  if (lastElementInUrlSplit === '') {\n    if (urlSplitIntoPieces[urlSplitIntoPieces.length - 2] === undefined) {\n      modelName = '';\n    } else {\n      modelName = urlSplitIntoPieces[urlSplitIntoPieces.length - 2].split('-').join(' ');\n    }\n  } else {\n    modelName = lastElementInUrlSplit.split('-').join(' ');\n  }\n\n  return modelName;\n}\n\nfunction getModelTargetElement(elementId: string, text: string): string | undefined {\n  if (elementId.includes('models')) {\n    const mainDrawerLevel = determineMainDrawerLevel(elementId);\n\n    return `level${mainDrawerLevel}_${text.toLowerCase()}`;\n  }\n\n  return;\n}\n\nfunction getDrawerType() {\n  return state.drawerType;\n}\n\nfunction getDealerResultsLoadDisplayElementId(elementId: string): string {\n  if (getDrawerType() === 'doubleDrawer') {\n    return elementId;\n  } else {\n    return calculateDisplayElementId();\n  }\n}\n\nfunction getDealerResultsLoadDisplayElementType(): string {\n  if (getDrawerType() === 'doubleDrawer') {\n    return DEALER_SEARCH_ELEMENT_TYPE;\n  } else {\n    return calculateDisplayElementType('', ElementTypes.dealerSearchForm);\n  }\n}\n\nexport default {\n  setDrawerType,\n  getDealerResultsLoadDisplayElementId,\n  calculateDisplayElementId,\n  getDealerResultsLoadDisplayElementType,\n  calculateDisplayElementType,\n  getModelName,\n  getModelTargetElement\n};\n"],"version":3}