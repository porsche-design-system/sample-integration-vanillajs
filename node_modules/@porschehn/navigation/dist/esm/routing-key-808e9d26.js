import { g as getString, i as isString } from './helper-76937d0b.js';

const RoutingKeys = {
  MAIN_MENU: 'mainmenu',
  DEALER_SEARCH: 'find_a_dealer',
  MORE: 'more',
  SHOP: 'shop',
  SERIES: 'series',
  MY_PORSCHE: 'my_porsche',
  VEHICLE_PURCHASE: 'vehicle_purchase',
  EXPERIENCE: 'experience',
  SERVICES: 'services',
  MODELS: 'models'
};
var RoutingKeyPointers;
(function (RoutingKeyPointers) {
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_ZERO"] = -1] = "LEVEL_ZERO";
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_ONE"] = 0] = "LEVEL_ONE";
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_TWO"] = 1] = "LEVEL_TWO";
})(RoutingKeyPointers || (RoutingKeyPointers = {}));
function constructRoutingKey(...args) {
  return args
    .reduce((segments, arg) => [...segments, ...getString(arg).split('/')], [])
    .filter(Boolean)
    .join('/');
}
function findTopLevelRoutingKey(activeRoutingKey) {
  if (isString(activeRoutingKey)) {
    return Object.values(RoutingKeys).find((routingKey) => activeRoutingKey.startsWith(routingKey));
  }
}
function getModelsRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.MODELS, ...args);
}
function getDealerDetailsRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.DEALER_SEARCH, ...args);
}
function getMyPorscheRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.MY_PORSCHE, ...args);
}
function getVehiclePurchaseRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.VEHICLE_PURCHASE, ...args);
}
function getLastRoutingSegment(routingKey) {
  return routingKey.split('/').slice(-1)[0];
}
function removeLastRoutingSegment(routingKey) {
  return routingKey.split('/').slice(0, -1).join('/');
}
function determineMainDrawerLevel(activeRoutingKey) {
  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case RoutingKeys.MAIN_MENU: {
      return 1;
    }
    case activeRoutingKey: {
      return 2;
    }
    default: {
      return activeRoutingKey.split('/').length + 1;
    }
  }
}
function getPreviousRoutingKey(routingKey) {
  const previousRoutingKey = removeLastRoutingSegment(routingKey);
  if (!isString(previousRoutingKey)) {
    return RoutingKeys.MAIN_MENU;
  }
  return previousRoutingKey;
}

export { RoutingKeyPointers as R, RoutingKeys as a, getPreviousRoutingKey as b, constructRoutingKey as c, determineMainDrawerLevel as d, getDealerDetailsRoutingKey as e, findTopLevelRoutingKey as f, getLastRoutingSegment as g, getModelsRoutingKey as h, getVehiclePurchaseRoutingKey as i, getMyPorscheRoutingKey as j, removeLastRoutingSegment as r };

//# sourceMappingURL=routing-key-808e9d26.js.map