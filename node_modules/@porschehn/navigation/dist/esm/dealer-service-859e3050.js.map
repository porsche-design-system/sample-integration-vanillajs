{"file":"dealer-service-859e3050.js","mappings":"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","names":[],"sources":["src/services/dealer-service.ts"],"sourcesContent":["import { DealersByRegion, PPNDealer, PPNDealerSearchResult, PPNDistance } from '../entities/dealer-response';\nimport { Environment, Environments } from '../entities/environment';\nimport { LatLong } from '../entities/places';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getQueryString } from '../utility/helper';\n\nexport async function getAllPPNDealersForMarket(\n  env: Environment,\n  dealerApiUrl: string,\n  country: string\n): Promise<PPNDealerSearchResult[]> {\n  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });\n}\n\ntype GetPPNDealersOptions = {\n  /**\n   * The radius around the given coordinates to search for dealers\n   */\n  radius?: number;\n};\n\nexport async function getPPNDealers(\n  env: Environment,\n  dealerApiUrl: string,\n  coordinates: LatLong,\n  country: string,\n  options: GetPPNDealersOptions = {}\n): Promise<PPNDealerSearchResult[]> {\n  const { radius } = options;\n\n  let response: Response;\n  let ppnDealerSearchResults: { dealer: PPNDealer; distance: PPNDistance }[];\n\n  try {\n    const headers = new Headers();\n\n    headers.set('Accept', '*/*');\n\n    /* istanbul ignore next */\n    if (env === Environments.LOCAL) {\n      headers.set(\n        'Authorization',\n        'Basic ' + windowService.btoa(`${'DEALER_SEARCH_API_USER'}:${'DEALER_SEARCH_API_PASS'}`)\n      );\n    }\n\n    const requestParams = {\n      coordinates: `${coordinates.latitude},${coordinates.longitude}`,\n      radius\n    };\n\n    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {\n      method: 'GET',\n      headers\n    });\n  } catch (err) {\n    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 400) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 404) {\n    throw new NaviError(\n      'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results',\n      NaviErrorTypes.NO_RESULTS\n    );\n  }\n\n  if (response.status !== 200) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);\n  }\n\n  try {\n    ppnDealerSearchResults = await response.json();\n  } catch (err) {\n    throw new NaviError(\n      'dealerService.getPPNDealers could not parse response into json format',\n      NaviErrorTypes.GENERAL\n    );\n  }\n\n  return ppnDealerSearchResults.map(({ dealer, ...rest }) => ({ ppnDealer: dealer, ...rest }));\n}\n\nexport async function getPPNDealer(\n  env: Environment,\n  dealerApiUrl: string,\n  id: string,\n  coordinates: LatLong,\n  country: string\n): Promise<PPNDealerSearchResult> {\n  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer\n  let ppnDealer: PPNDealerSearchResult | undefined;\n\n  try {\n    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);\n    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);\n  } catch (err) {\n    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);\n  }\n\n  if (ppnDealer === undefined) {\n    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return ppnDealer;\n}\n\nconst dealersByRegionMap = new Map<string, DealersByRegion | undefined>();\n\nexport async function getPPNDealerByRegion(id: string, region: string): Promise<PPNDealerSearchResult> {\n  const dealersOfRegion = await getPPNDealersByRegion(region);\n\n  const dealerResult = dealersOfRegion.regions\n    .flatMap(({ cities }) =>\n      cities.flatMap(({ dealers }) =>\n        Object.values(dealers).reduce<{ ppnDealer: PPNDealer }[]>((dealerList, dealer) => [...dealerList, dealer], [])\n      )\n    )\n    .find(({ ppnDealer }) => ppnDealer.id === id);\n\n  if (dealerResult === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return dealerResult;\n}\n\nexport async function getPPNDealersByRegion(region: string): Promise<DealersByRegion> {\n  const { env } = navStateStore.state;\n  const headers = new Headers();\n  let dealersByRegion: DealersByRegion | undefined;\n  if (dealersByRegionMap.has(region)) {\n    dealersByRegion = dealersByRegionMap.get(region);\n  } else {\n    const { BFF_ENDPOINT } = getConfig(env);\n\n    headers.set('Accept', '*/*');\n\n    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {\n      method: 'GET',\n      headers\n    });\n\n    dealersByRegion = await response.json();\n    dealersByRegionMap.set(region, dealersByRegion);\n  }\n  if (dealersByRegion === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n  return dealersByRegion;\n}\n"],"version":3}