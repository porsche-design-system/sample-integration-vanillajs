import { e as createStore, N as NaviError, a as NaviErrorTypes, b as navContentStore, n as navStateStore } from './nav-content-store-0a34ed51.js';
import { w as windowService, f as featureToggles, l as logger } from './feature-toggles-007debe5.js';
import { S as SAVED_DEALER_COOKIE, r as getHTMLElement } from './helper-baaa661e.js';

const dealerSearchResultsStore = createStore({
  searchTerm: '',
  results: null,
  savedDealerCookie: readDealerCookie(),
  ppnDealers: {},
  dealersOfRegion: { regions: [] }
});
dealerSearchResultsStore.onChange('savedDealerCookie', (newValue) => {
  windowService.setCookie(SAVED_DEALER_COOKIE, JSON.stringify(newValue));
});
function readDealerCookie() {
  try {
    return JSON.parse(windowService.getCookie(SAVED_DEALER_COOKIE));
  }
  catch (err) {
    return null;
  }
}

const experimentsDefinitions = {};

class MatomoAbTestingService {
  constructor() {
    this.client = null;
    this.experiments = [];
  }
  async init() {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        await this.setClient();
        await this.loadExperiments();
      }
      catch (e) {
        logger.error('Could not initialize AbTesting', e);
      }
    }
  }
  execute(experimentName) {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        const experiment = this.getExperiment(experimentName);
        const variation = this.getVariation(experiment);
        variation.activate();
      }
      catch (e) {
        logger.error(`Could not execute experiment ${experimentName}`, e);
      }
    }
  }
  executeContentChange(menu) {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        const experiment = this.getExperiment(menu.experienceName);
        const variation = this.getVariation(experiment);
        if (variation.name === 'original') {
          return menu.children;
        }
        return variation.activate();
      }
      catch (e) {
        logger.error(`Could not execute experiment ${menu.experienceName}`, e);
      }
    }
    return menu.children;
  }
  async setClient() {
    if (this.client)
      return Promise.resolve(this.client);
    await this.injectScript();
    const w = window;
    this.client = w.Matomo;
    return this.client;
  }
  async loadExperiments() {
    const client = this.getClient();
    const ExperimentCreator = client.AbTesting.Experiment;
    const experimentsDefinitions = this.getAbTestingDefinitions();
    for (const experimentKey in experimentsDefinitions) {
      const experimentDefinition = experimentsDefinitions[experimentKey];
      const experiment = new ExperimentCreator(experimentDefinition);
      this.experiments.push(experiment);
    }
  }
  async loadContentGeneratorExperiments() {
    if (featureToggles.isABTestingToggleActive()) {
      const client = this.getClient();
      const ExperimentCreator = client.AbTesting.Experiment;
      const contentDefinitions = navContentStore.state.abExperiences;
      if (contentDefinitions) {
        for (const experimentDefinition of contentDefinitions) {
          const variationDefinition = experimentDefinition.variations.map((variation) => ({
            name: variation.name,
            activate: () => variation.children
          }));
          variationDefinition.push({
            name: 'original',
            activate: () => null
          });
          const experiment = new ExperimentCreator(Object.assign(Object.assign({}, experimentDefinition), { variations: variationDefinition }));
          this.experiments.push(experiment);
        }
      }
    }
  }
  getExperiment(name) {
    const experiment = this.experiments.find((experiment) => experiment.name === name);
    if (!experiment)
      throw new NaviError(`No experiment with name: ${name} found`, NaviErrorTypes.GENERAL);
    return experiment;
  }
  getVariation(experiment) {
    const variationName = experiment.getActivatedVariationName();
    const variation = experiment.variations.find((variation) => variation.name === variationName);
    if (!variation)
      throw new NaviError(`No variation in experiment: ${experiment.name} with name: ${variationName} found`, NaviErrorTypes.GENERAL);
    return variation;
  }
  getClient() {
    if (!this.client)
      throw new NaviError('No client is set, you must call init first', NaviErrorTypes.GENERAL);
    return this.client;
  }
  injectScript() {
    return new Promise((resolve, reject) => {
      const s = document.createElement('script');
      s.text = this.getMatomoScript();
      document.head.appendChild(s);
      const matomoScript = getHTMLElement(document.querySelector('script[src="//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js"]'));
      if (matomoScript) {
        matomoScript.onload = () => {
          resolve(true);
        };
        matomoScript.onerror = () => reject(new NaviError('Could not inject Matomo script', NaviErrorTypes.GENERAL));
      }
      else {
        reject(new NaviError('There is no HTML Script element available', NaviErrorTypes.GENERAL));
      }
    });
  }
  getAbTestingDefinitions() {
    return experimentsDefinitions;
  }
  getMatomoScript() {
    const currentEnvironment = navStateStore.state.env;
    return `var _paq = window._paq = window._paq || [];
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://porsche.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', ${currentEnvironment === 'production' ? '7' : '8'}]);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })
   ();`;
  }
}
const MatomoAbTesting = new MatomoAbTestingService();

function abTestingService() {
  return MatomoAbTesting;
}

export { abTestingService as a, dealerSearchResultsStore as d };

//# sourceMappingURL=ab-testing-constructor-service-a7d54c98.js.map