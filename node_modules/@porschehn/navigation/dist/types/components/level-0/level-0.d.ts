import { EventEmitter } from '../../stencil-public-runtime';
import { RoutingKeyPointers, RoutingKeyWithClick } from '../../entities/routing-key';
import { NavigationModeType, NavigationThemeType } from '../../utility/constants';
import { ApplicationType } from '../../utility/constants/app';
export declare class Level0 {
  locale: string;
  breakpoint: number;
  loadingContent: boolean;
  receivedContent: boolean;
  theme: NavigationThemeType;
  mode: NavigationModeType;
  app: ApplicationType;
  displayLogoOnly: boolean;
  limitedWidth: boolean;
  usingKeyboard: boolean;
  drawerClosed: boolean;
  scrolledPastHeader: boolean;
  showBackdrop: boolean;
  routingKeyHistory: string[];
  routingKeyPointer: RoutingKeyPointers;
  isNavigationLoaded: boolean;
  isLoading: boolean;
  isMyPorscheHoveredOn: boolean;
  el: HTMLPhnLevel0Element;
  navigationLoaded: EventEmitter<boolean>;
  private operationPipeline;
  private logoLoaded;
  private drawerTimeout;
  loadingContentWatcher(): void;
  breakpointWatcher(newBreakpoint: number, oldBreakpoint: number): void;
  private handleResizeAnimation;
  receivedContentWatcher(): void;
  logoLoadedHandler(): void;
  scrollHandler(): void;
  handleKeyDown(e: KeyboardEvent): void;
  handleClick(e: MouseEvent): void;
  handleMobileMenuItemClick({ detail: newRoutingKeys }: CustomEvent<string[]>): void;
  handleSideDrawerItemClick({ detail: routingKeys }: CustomEvent<string[]>): void;
  handleClickDrawerHeaderBack(): void;
  handleClickDrawerHeaderClose(): void;
  handleBackdropClosed(): void;
  handleDrawerChanged({ detail: isNavigatingBackwards }: CustomEvent<boolean>): void;
  handleOpenDrawer(event: CustomEvent<RoutingKeyWithClick>): Promise<void>;
  private updateRouterStore;
  private handleDrawerClosed;
  private updateRoutingKeyPointerOfMobileLevel1;
  private setNavigationLoaded;
  private setInitialRoutingProperties;
  private openDrawer;
  private isDefaultRouteOnMobile;
  private setRoutingProperties;
  disconnectedCallback(): void;
  componentDidRender(): Promise<void>;
  private getLogoSize;
  render(): HTMLPhnLevel0Element;
}
