import { AvailableExperiment } from '../utility/constants/ab-testing';
export type TLink = {
  id: string;
  text: string;
  link: string;
  icon: string;
  description: string;
};
export type TButton = {
  id: string;
  text: string;
  description: string;
};
export type TMenu = {
  id: string;
  text: string;
  link: string;
  children: TMenu[];
  experienceName?: AvailableExperiment;
};
export type TShopAuthStatus = 'loggedOut' | 'loggedIn' | null;
export type TShopAdditionalContentMenu = {
  id: string;
  link: string;
  text: string;
  iconUrl?: string;
  icon?: string;
  authStatus?: TShopAuthStatus;
};
export type TShopMenu = {
  id: string;
  text: string;
  link: string;
  cart?: string;
  children: TMenu[];
  additionalContent: TShopAdditionalContentMenu[];
  availableLocales: string[];
  availableLocalesOnlyForShop: string[];
  logoLinksToShopLocales: string[];
};
export type ShopContentResponse = {
  menuItems: TMenu[];
  additionalContent: TShopAdditionalContentMenu[];
};
export type TVehiclePurchaseMenu = {
  id: string;
  text: string;
  link: string;
  children: TMenu[];
  savedVehicles?: TLink | null;
};
export type TCountryRecommender = {
  statement: string;
  region: string;
  language: string;
  change: TButton;
};
export type Models = {
  text: string;
  id: string;
  all: TLink;
  series: Series[];
};
export type Series = {
  name: string;
  id: string;
  all: TLink;
  image: string;
  links: TLink[];
  tags: Tag[];
  bodyTypes: BodyType[];
};
export type BodyType = {
  id: string;
  name: string;
  description: string;
  image: string;
  link: string;
};
export type Tag = {
  text: string;
  icon: string;
};
export type Dealer = {
  id: string;
  text: string;
  numberOfDealers: number;
  search: {
    id: string;
    text: string;
    form: {
      inputPlaceholder: string;
      inputDescription: string;
    };
    clear: TButton;
    or: string;
    geolocation: TButton;
    dropdown: {
      province: string;
      city: string;
      selectAProvince: string;
      selectACity: string;
    };
    load: string;
    map: TLink;
    outboundLink: TLink | null;
  };
  details: {
    id: string;
    finder: TLink | null;
    bookService: TLink | null;
    testDrive: TLink | null;
    backToSearch: string;
  };
  openingHours: OpeningHours | null;
};
export type MyPorsche = {
  id: string;
  text: string;
  link: string;
  loggedInFallback: string;
  login: TLink;
  loginText: string;
  logout: TLink;
  messages: TLink;
  more: TLink | null;
  signup: TLink;
  signupText: string;
  links: TLink[];
  savedSearches: TLink | null;
  savedVehicles: TLink | null;
};
export type Errors = {
  wrong: string;
  retry: string;
  noResults: string;
  noInput: string;
  invalidInput: string;
  geolocationDenied: string;
};
export type Content = {
  menu: TButton;
  crest: TLink;
  back: TButton;
  close: TButton;
  accessibilityStatement: TLink | null;
  countryRecommender: TCountryRecommender;
  contextualButtons: {
    [buttonName: string]: TButton;
  };
  contextualLinks: {
    [linkName: string]: TLink;
  };
  models: Models;
  dealer: Dealer;
  myPorsche: MyPorsche | null;
  vehiclePurchase: TMenu;
  shop: TShopMenu | null;
  externalShop: TLink | null;
  experience: TMenu;
  services: TMenu;
  legacyMore: TMenu;
  legacyShop: TMenu;
  error: Errors;
  loadingDescription: string;
  abExperiences?: ContentExperimentDefinition[];
};
export type Target = {
  attribute: string;
  inverted: string;
  type: string;
  value: string;
};
export type VariationDefinition = {
  name: string;
  percentage: number;
  children: TMenu[];
};
export type ContentExperimentDefinition = {
  name: string;
  percentage: number;
  includedTargets: Target[];
  excludedTargets: Target[];
  variations: VariationDefinition[];
};
export type OpeningHours = {
  monday: string;
  tuesday: string;
  wednesday: string;
  thursday: string;
  friday: string;
  saturday: string;
  sunday: string;
  daily_lunch: string;
  timeFormat?: number;
};
export declare const EMPTY_SHOP_MENU: TShopMenu;
export declare const EMPTY_CONTENT: Content;
export declare function findMenuItemById(menu: TMenu | null, id: string): TMenu | null;
