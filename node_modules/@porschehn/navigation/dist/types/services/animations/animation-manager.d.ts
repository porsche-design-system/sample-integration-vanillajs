import { AnimationSequencesType } from '../../utility/constants';
import { AnimationGeneratorType, EffectType } from './animation-effects';
export type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P];
};
export type AnimationStartsCallbacks = {
  onAnimationStarts?: (() => Promise<unknown>) | (() => void);
};
export type AnimationEndsCallbacks = {
  onAnimationEnds?: (() => Promise<unknown>) | (() => void);
};
export type AnimationStatusCallbacks = AnimationStartsCallbacks & AnimationEndsCallbacks;
export type SequenceIdentifier = AnimationSequencesType | (string & {});
export interface NaviAnimation {
  animation: EffectType & AnimationGeneratorType;
  elementSelector: string;
  onStart?: (() => Promise<unknown>) | (() => unknown);
  onEnd?: (() => Promise<unknown>) | (() => unknown);
}
export type SequenceStep = Array<NaviAnimation>;
export type AnimationSequence = {
  steps: Array<SequenceStep>;
  currentStepIndex: number;
  running: boolean;
  resolve?: (value: unknown) => void;
  reject?: (reason?: unknown) => void;
  promise?: Promise<void>;
};
declare function initialize(element: HTMLElement): void;
declare function register(sequenceIdentifier: SequenceIdentifier, animationSequence: AnimationSequence): void;
declare function reset(): void;
declare function play(sequenceIdentifier: SequenceIdentifier): Promise<unknown>;
declare function isPlaying(sequenceIdentifier: SequenceIdentifier): boolean;
declare function makeSequence(sequenceSteps: SequenceStep[], animationDefaults?: Partial<Omit<AnimationGeneratorType & EffectType, 'name'>>): AnimationSequence;
declare const _default: {
  initialize: typeof initialize;
  play: typeof play;
  isPlaying: typeof isPlaying;
  register: typeof register;
  reset: typeof reset;
};
export default _default;
export { makeSequence };
