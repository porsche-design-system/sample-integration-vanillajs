import { AnimationSequencesType } from '../../utility/constants';
export type AnimationStartsCallbacks = {
  onAnimationStarts?: (() => Promise<unknown>) | (() => void);
};
export type AnimationEndsCallbacks = {
  onAnimationEnds?: (() => Promise<unknown>) | (() => void);
};
export type AnimationStatusCallbacks = AnimationStartsCallbacks & AnimationEndsCallbacks;
export type SequenceIdentifier = AnimationSequencesType | (string & {});
export interface NaviAnimation {
  animation: AnimationGeneratorType;
  elementSelector: string;
  onStart?: (() => Promise<unknown>) | (() => unknown);
  onEnd?: (() => Promise<unknown>) | (() => unknown);
}
export type SequenceStep = Array<NaviAnimation>;
export type AnimationSequence = {
  steps: Array<SequenceStep>;
  currentStepIndex: number;
  running: boolean;
  resolve?: (value: unknown) => void;
  reject?: (reason?: unknown) => void;
  promise?: Promise<void>;
};
export type AnimationGeneratorType = {
  className: string;
  cleanUpBeforeAnimation?: ((el: HTMLElement) => Promise<void>) | ((el: HTMLElement) => void) | boolean;
  cleanUpAfterAnimation?: ((el: HTMLElement) => Promise<void>) | ((el: HTMLElement) => void) | boolean;
};
declare function initialize(): void;
declare function register(sequenceIdentifier: SequenceIdentifier, animationSequence: AnimationSequence): void;
declare function reset(): void;
declare function play(sequenceIdentifier: SequenceIdentifier): Promise<unknown>;
declare function isPlaying(sequenceIdentifier: SequenceIdentifier): boolean;
declare function makeSequence(sequenceSteps: SequenceStep[], animationDefaults?: Partial<Omit<AnimationGeneratorType, 'name'>>): AnimationSequence;
declare const _default: {
  initialize: typeof initialize;
  play: typeof play;
  isPlaying: typeof isPlaying;
  register: typeof register;
  reset: typeof reset;
};
export default _default;
export { makeSequence };
