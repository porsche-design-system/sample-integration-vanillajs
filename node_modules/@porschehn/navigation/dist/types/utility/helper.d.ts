import { Config } from '../entities/config';
import { Environment } from '../entities/environment';
import { NavigationModeType, NavigationThemeType } from './constants';
import { Content, TMenu } from '../entities/content';
import { ApplicationType } from './constants/app';
export declare function getRootElement(): HTMLElement;
export declare function loadRootElement(element: HTMLElement): void;
export declare function getHTMLElementFromRoot(selector: string): HTMLElement | null;
export declare function getConfig(env: Environment): Config;
export declare function hasKey<O>(obj: O, key: PropertyKey): key is keyof O;
export declare function isString(test: unknown): test is string;
export declare function getString(test: unknown): string;
export declare function getHTMLElement(el: unknown): HTMLElement | null;
export declare function focusOnElement(el: unknown): void;
export declare function getHTMLInputElement(el: unknown): HTMLInputElement | null;
export declare function IsKeyboardClick(e: MouseEvent): boolean;
export declare function IsLoading(loggedInState: string): boolean;
export declare function IsLoggedOut(loggedInState: string): boolean;
export declare function IsLoggedIn(loggedInState: string): boolean;
export declare function getUsername(loggedInState: string, loggedInText: string): string;
export declare function getQueryString(params: {
  [name: string]: string | number | undefined;
}): string;
export declare function constructCacheKey(...args: string[]): string;
export declare function isDesktop(currentBreakpoint: number): boolean;
export declare function getImageSize(currentBreakpoint: number): number;
export declare function sanitizeMode(mode: NavigationModeType): NavigationModeType;
export declare function sanitizeTheme(theme: NavigationThemeType): NavigationThemeType;
export declare function sanitizeApp(app: string): ApplicationType;
export declare function constructThemeClass(mode: NavigationModeType, theme: NavigationThemeType): string;
export declare function isPromise<T>(value: unknown): value is Promise<T>;
export declare function addQueryParamsToUrl(url: string, params: Record<string, string>): string;
export declare function getValidContentPathSegments(rootContentItem: TMenu, segments: string[]): string[];
export declare function getRootMenuItem(content: Content, key: keyof Content): TMenu | null;
export declare function buildRoutingKeyHistoryFromContentPath(segments: string[]): string[];
export declare function isModelName(text: string): boolean;
export declare function isModelFuelTypeGasoline(model: string): boolean;
export declare const getRightTheme: (theme: NavigationThemeType, mode: NavigationModeType) => string;
export declare function camelToKebapCase(camelString: string): string;
export declare function shallowCopySpecifiedAttributesWithDefault<S extends {
  [s: string]: unknown;
} | ArrayLike<unknown>, C extends {
  [s: string]: unknown;
} | ArrayLike<unknown>>(sourceObject: S, copyObject: C, accessor?: (object: S, key: keyof C) => unknown): C;
export declare const dispatchEvent: (from: string, eventName: string, { bubbles, detail, composed, cancelable }: {
  bubbles?: boolean | undefined;
  cancelable?: boolean | undefined;
  composed?: boolean | undefined;
  detail?: unknown;
}) => void;
