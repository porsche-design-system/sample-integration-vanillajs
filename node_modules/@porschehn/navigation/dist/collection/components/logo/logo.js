import { h } from "@stencil/core";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import { componentsReady } from "@porsche-design-system/components-js";
import { navContentStore } from "../../state/nav-content-store";
import { ClickElementTypes, EventActions, NavigationMode, NavigationTheme } from "../../utility/constants";
import { getRightTheme, isDesktop, isString } from "../../utility/helper";
import { isShopAvailableAndLogoLinksToShop } from "../../utility/helpers/shop-helper";
export class Logo {
  constructor() {
    this.size = undefined;
    this.locale = undefined;
    this.app = undefined;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.breakpoint = undefined;
  }
  sendDataLayerEvent(crest) {
    globalDataLayerService.pushDataLayerEvent(EventActions.CREST_CLICK, {
      componentClick: {
        clickElementId: crest.id,
        clickElementName: crest.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: crest.link
      }
    });
  }
  componentWillLoad() {
    componentsReady(this.el) // TR: I believe this first call waits for the phn-logo element to be ready
      .then(() => componentsReady(this.el)) // TR: Then this second call actually waits for its children (i.e.: phn-p-marque) to be ready
      .then(() => {
      this.logoLoaded.emit();
    });
  }
  getLogoLink(locale, app, crest, shop) {
    return isShopAvailableAndLogoLinksToShop(locale, app, shop) ? shop.link : crest.link;
  }
  getLogoAriaLabel(locale, app, shop) {
    return isShopAvailableAndLogoLinksToShop(locale, app, shop) ? 'Porsche Shop Homepage' : 'Porsche.com Homepage';
  }
  render() {
    const { crest, shop } = navContentStore.state;
    const logoLink = this.getLogoLink(this.locale, this.app, crest, shop);
    const logoAriaLabel = this.getLogoAriaLabel(this.locale, this.app, shop);
    return isDesktop(this.breakpoint) ? (h("phn-p-wordmark", { onClick: () => this.sendDataLayerEvent(crest), href: isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel }, size: "small", theme: getRightTheme(this.theme, this.mode) })) : (h("phn-p-crest", { onClick: () => this.sendDataLayerEvent(crest), href: isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel } }));
  }
  static get is() { return "phn-logo"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["logo.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["logo.css"]
    };
  }
  static get properties() {
    return {
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "size",
        "reflect": false
      },
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      },
      "app": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ApplicationType",
          "resolved": "\"default\" | \"pcom\" | \"shop\"",
          "references": {
            "ApplicationType": {
              "location": "import",
              "path": "../../components",
              "id": "src/components.d.ts::ApplicationType"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "app",
        "reflect": false
      },
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationThemeType",
          "resolved": "\"dark\" | \"light\"",
          "references": {
            "NavigationThemeType": {
              "location": "import",
              "path": "../../utility/constants",
              "id": "src/utility/constants/index.ts::NavigationThemeType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "NavigationTheme.light"
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationModeType",
          "resolved": "\"hero\" | \"navbar\" | \"transparent\"",
          "references": {
            "NavigationModeType": {
              "location": "import",
              "path": "../../utility/constants",
              "id": "src/utility/constants/index.ts::NavigationModeType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "mode",
        "reflect": false,
        "defaultValue": "NavigationMode.navbar"
      },
      "breakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "breakpoint",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "logoLoaded",
        "name": "logoLoaded",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
//# sourceMappingURL=logo.js.map
