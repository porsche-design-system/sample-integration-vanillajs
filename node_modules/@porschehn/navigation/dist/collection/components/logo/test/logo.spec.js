import { breakpoint } from "@porsche-design-system/components-js/styles";
import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import featureToggles from "../../../services/feature-toggles";
import { navContentStore } from "../../../state/nav-content-store";
import { ClickElementTypes, EventActions, NavigationTheme } from "../../../utility/constants";
import { Application } from "../../../utility/constants/app";
import { getHTMLElement } from "../../../utility/helper";
import { Logo } from "../logo";
import { mockLocaleContent } from "../../../test/test-data";
describe('porsche logo', () => {
  let page;
  const testLocale = 'it-CH';
  const getPage = async ({ theme, breakpoint: breakPt, app, locale } = {
    theme: NavigationTheme.light,
    breakpoint: breakpoint.l,
    app: Application.default,
    locale: testLocale
  }) => {
    navContentStore.state.crest = {
      id: 'logo',
      text: 'I am a logo',
      link: 'https://www.porsche.com/swiss/it',
      icon: '',
      description: 'i am still a logo'
    };
    const specPage = await newSpecPage({
      components: [Logo],
      template: () => h("phn-logo", { app: app, locale: locale, size: 'medium', theme: theme, breakpoint: breakPt }),
      url: 'https://www.test-porsche.com/swiss/de?query=parameter#fragment'
    });
    await specPage.waitForChanges();
    return specPage;
  };
  describe('analytics', () => {
    const runAnalyticsExpects = () => {
      var _a;
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.CREST_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: navContentStore.state.crest.id,
        clickElementName: navContentStore.state.crest.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: navContentStore.state.crest.link
      });
    };
    it('should send CREST_CLICK data event when crest is clicked on Mobile', async () => {
      var _a, _b;
      page = await getPage({
        breakpoint: breakpoint.xs,
        theme: NavigationTheme.light,
        app: Application.default,
        locale: testLocale
      });
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-crest'))) === null || _b === void 0 ? void 0 : _b.click();
      runAnalyticsExpects();
    });
    it('should send CREST_CLICK data event when wordmark is clicked on Desktop', async () => {
      var _a, _b;
      page = await getPage({
        breakpoint: breakpoint.l,
        theme: NavigationTheme.light,
        app: Application.default,
        locale: testLocale
      });
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-wordmark'))) === null || _b === void 0 ? void 0 : _b.click();
      runAnalyticsExpects();
    });
  });
  describe('porsche logo on Desktop', () => {
    it('should show wordmark with pcom link by default', async () => {
      page = await getPage();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-logo>
          <phn-p-wordmark href="https://www.porsche.com/swiss/it" size="small" theme="light"></phn-p-wordmark>
        </phn-logo>
      `);
    });
    it('should show wordmark with pcom aria label by default', async () => {
      var _a, _b;
      page = await getPage();
      // TODO (MX): remove once PDS 2 is removed
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-wordmark')) === null || _b === void 0 ? void 0 : _b.aria).toEqual({
        'aria-label': 'Porsche.com Homepage'
      });
    });
    it('should show wordmark with shop link in shop only market inside the shop application', async () => {
      jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);
      navContentStore.state = mockLocaleContent;
      const page = await getPage({
        theme: NavigationTheme.light,
        breakpoint: breakpoint.l,
        app: Application.shop,
        locale: 'en-GB'
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-logo>
          <phn-p-wordmark href="https://shop.porsche.com" size="small" theme="light"></phn-p-wordmark>
        </phn-logo>
      `);
    });
    it('should show wordmark with shop aria label in shop only market inside the shop application', async () => {
      var _a, _b;
      jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);
      navContentStore.state = mockLocaleContent;
      const page = await getPage({
        theme: NavigationTheme.light,
        breakpoint: breakpoint.l,
        app: Application.shop,
        locale: 'en-GB'
      });
      // TODO (MX): remove once PDS 2 is removed
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-wordmark')) === null || _b === void 0 ? void 0 : _b.aria).toEqual({
        'aria-label': 'Porsche Shop Homepage'
      });
    });
    it('should set href to link if wordmark is present', async () => {
      var _a, _b;
      page = await getPage();
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-wordmark')) === null || _b === void 0 ? void 0 : _b.getAttribute('href')).toEqual('https://www.porsche.com/swiss/it');
    });
    it('should render wordmark in dark theme', async () => {
      var _a, _b;
      page = await getPage({ breakpoint: breakpoint.l, theme: 'dark', app: Application.default, locale: testLocale });
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-wordmark')) === null || _b === void 0 ? void 0 : _b.getAttribute('theme')).toEqual('light');
    });
    it('should render wordmark in light theme', async () => {
      var _a, _b;
      page = await getPage({ breakpoint: breakpoint.l, theme: 'light', app: Application.default, locale: testLocale });
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-wordmark')) === null || _b === void 0 ? void 0 : _b.getAttribute('theme')).toEqual('light');
    });
  });
  describe('porsche logo on Mobile', () => {
    it('should show crest with pcom link by default', async () => {
      navContentStore.state.shop.availableLocales = [];
      navContentStore.state.shop.logoLinksToShopLocales = [];
      const page = await getPage({
        theme: NavigationTheme.light,
        breakpoint: breakpoint.xs,
        app: Application.shop,
        locale: 'en-GB'
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-logo>
          <phn-p-crest href="https://www.porsche.com/swiss/it"></phn-p-crest>
        </phn-logo>
      `);
    });
    it('should show crest with shop aria label in shop only market inside the shop application', async () => {
      var _a, _b;
      const page = await getPage({
        theme: NavigationTheme.light,
        breakpoint: breakpoint.xs,
        app: Application.default,
        locale: 'en-GB'
      });
      // TODO (MX): remove once PDS 2 is removed
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-crest')) === null || _b === void 0 ? void 0 : _b.aria).toEqual({
        'aria-label': 'Porsche.com Homepage'
      });
    });
    it('should show crest with shop link when in shop only market inside of the shop app', async () => {
      navContentStore.state = mockLocaleContent;
      navContentStore.state.shop.availableLocales = ['en-GB'];
      navContentStore.state.shop.logoLinksToShopLocales = ['en-GB'];
      const page = await getPage({
        theme: NavigationTheme.light,
        breakpoint: breakpoint.xs,
        app: Application.shop,
        locale: 'en-GB'
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-logo>
          <phn-p-crest href="https://shop.porsche.com"></phn-p-crest>
        </phn-logo>
      `);
    });
    it('should show crest with shop aria label in shop only market inside the shop application', async () => {
      var _a, _b;
      navContentStore.state = mockLocaleContent;
      navContentStore.state.shop.availableLocales = ['en-GB'];
      navContentStore.state.shop.logoLinksToShopLocales = ['en-GB'];
      const page = await getPage({
        theme: NavigationTheme.light,
        breakpoint: breakpoint.xs,
        app: Application.shop,
        locale: 'en-GB'
      });
      // TODO (MX): remove once PDS 2 is removed
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-crest')) === null || _b === void 0 ? void 0 : _b.aria).toEqual({
        'aria-label': 'Porsche Shop Homepage'
      });
    });
  });
});
//# sourceMappingURL=logo.spec.js.map
