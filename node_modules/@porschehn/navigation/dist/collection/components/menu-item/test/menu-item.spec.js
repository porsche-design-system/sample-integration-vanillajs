import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { constructRoutingKey, RoutingKeys } from "../../../entities/routing-key";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { mockPPNDealer } from "../../../test/test-data";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { getHTMLElement } from "../../../utility/helper";
import { MenuItem } from "../menu-item";
describe('Menu Item', () => {
  let page;
  describe('as button', () => {
    const defaultProps = {
      id: 'mainmenu.shops.test',
      text: 'Text',
      link: ''
    };
    const getPage = async (props = {}) => {
      return await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", Object.assign({ elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text }, props)))
      });
    };
    it('renders without subtext', async () => {
      page = await getPage();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu-item>
          <!---->
          <phn-p-button-pure align-label="left" data-id="shop/mainmenu.shops.test" icon="none" size="inherit" stretch="false">
            <div class="phn-align-center phn-flex-row">
              <div class="skeleton-item">
                <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                  Text
                </phn-p-text>
              </div>
            </div>
          </phn-p-button-pure>
        </phn-menu-item>
      `);
    });
    it('should have subtext when subtext is given', async () => {
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text, subtext: "this is subtext" }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu-item>
          <!---->
          <phn-p-button-pure align-label="left" data-id="shop/mainmenu.shops.test" icon="none" size="inherit" stretch="false">
            <div class="phn-align-center phn-flex-row">
              <div class="skeleton-item">
                <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                  Text
                </phn-p-text>
                <div class="text-limit">
                  <phn-p-text class="subtext" color="inherit" data-test-id="subtext" ellipsis="true" size="x-small" tag="div" weight="regular">
                    this is subtext
                  </phn-p-text>
                </div>
              </div>
            </div>
          </phn-p-button-pure>
        </phn-menu-item>
      `);
    });
    it('should show arrow on the right side of item if iconRight is passed in with "arrow-head-right"', async () => {
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text, link: defaultProps.link, iconRight: "arrow-head-right" }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu-item>
          <!---->
          <phn-p-button-pure align-label="left" data-id="shop/mainmenu.shops.test" icon="arrow-head-right" size="inherit" stretch="true">
            <div class="phn-align-center phn-flex-row">
              <div class="skeleton-item">
                <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                  Text
                </phn-p-text>
              </div>
            </div>
          </phn-p-button-pure>
        </phn-menu-item>
      `);
    });
    it('should have text from text item', async () => {
      var _a;
      page = await getPage();
      const link = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-button-pure'));
      const actualText = link === null || link === void 0 ? void 0 : link.innerText;
      const expectedText = defaultProps.text;
      expect(actualText).toEqual(expectedText);
    });
    it('should show icon if icon is provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text, link: defaultProps.link, iconLeft: "icon" }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-icon')).toBeTruthy();
    });
    it('should not show icon if no icon is provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text, link: defaultProps.link }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-icon')).toBeNull();
    });
    it('should render suffix slot if provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text }, h("div", { slot: "suffix" })))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[slot="suffix"]')).not.toBeNull();
    });
    it('should render media slot if provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text }, h("div", { slot: "media" })))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[slot="media"]')).not.toBeNull();
    });
    it('renders button pure item for one ui with separated icon', async () => {
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.SHOP, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text, link: defaultProps.link, iconRight: "arrow-head-right" }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu-item>
          <!---->
          <phn-p-button-pure align-label="left" data-id="shop/mainmenu.shops.test" icon="arrow-head-right" size="inherit" stretch="true">
            <div class="phn-align-center phn-flex-row">
              <div class="skeleton-item">
                <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                  Text
                </phn-p-text>
              </div>
            </div>
          </phn-p-button-pure>
        </phn-menu-item>
      `);
    });
    describe('data analytics', () => {
      it('should send default NAVIGATION_CLICK data event after button text is clicked', async () => {
        var _a, _b, _c;
        page = await getPage();
        (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-button-pure'))) === null || _b === void 0 ? void 0 : _b.click();
        expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
        const event = globalDataLayerService.gdl.DataLayerStore[0];
        expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.NAVIGATION_CLICK);
        expect(event.componentClick).toEqual({
          clickElementId: defaultProps.id,
          clickElementName: defaultProps.text,
          clickElementType: ClickElementTypes.Button
        });
        expect(event.componentDisplay).toEqual({
          displayElementId: 'level2-shop',
          displayElementType: 'level2_menu-item',
          displayElementName: defaultProps.text
        });
      });
      it('should send MODEL_RANGE_CLICK data event after models button is clicked', async () => {
        var _a, _b, _c;
        const defaultProps = {
          id: 'mainmenu.taycan',
          text: 'Taycan'
        };
        page = await newSpecPage({
          components: [MenuItem],
          template: () => (h("phn-menu-item", { elementId: constructRoutingKey(RoutingKeys.MODELS, defaultProps.id), analyticsId: defaultProps.id, text: defaultProps.text, datalayerEventAction: EventActions.MODEL_RANGE_CLICK }))
        });
        (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-button-pure'))) === null || _b === void 0 ? void 0 : _b.click();
        expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
        const event = globalDataLayerService.gdl.DataLayerStore[0];
        expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.MODEL_RANGE_CLICK);
        expect(event.componentClick).toEqual({
          clickElementId: defaultProps.id,
          clickElementName: defaultProps.text,
          clickElementType: ClickElementTypes.Button,
          targetElement: 'level3_taycan'
        });
        expect(event.componentDisplay).toEqual({
          displayElementId: 'level2-models',
          displayElementType: 'level2_menu-item',
          displayElementName: defaultProps.text
        });
        expect(event.car).toEqual({
          modelRangeName: 'taycan'
        });
      });
    });
  });
  describe('as link', () => {
    const item = {
      id: 'mainmenu.shops.test',
      text: 'Text',
      link: 'http://www.porsche.com'
    };
    const defaultProps = {
      elementId: constructRoutingKey(RoutingKeys.SHOP, item.id),
      analyticsId: 'mainmenu.shops.test',
      text: 'Text',
      link: 'http://www.porsche.com',
      iconRight: 'arrow-head-right'
    };
    beforeEach(async () => {
      page = await newSpecPage({
        components: [MenuItem],
        template: () => h("phn-menu-item", Object.assign({}, defaultProps))
      });
    });
    it('renders without subtext', async () => {
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu-item>
          <!---->
          <phn-p-link-pure align-label="left" data-id="shop/mainmenu.shops.test" icon="arrow-head-right" stretch="true" target="_self">
            <a href="http://www.porsche.com">
              <div class="phn-align-center phn-flex-row">
                <div class="skeleton-item">
                  <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                    Text
                  </phn-p-text>
                </div>
              </div>
            </a>
          </phn-p-link-pure>
        </phn-menu-item>
      `);
    });
    it('should have subtext when subtext is given', async () => {
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => h("phn-menu-item", Object.assign({}, defaultProps, { subtext: "this is subtext" }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu-item>
          <!---->
          <phn-p-link-pure align-label="left" data-id="shop/mainmenu.shops.test" icon="arrow-head-right" stretch="true" target="_self">
            <a href="http://www.porsche.com">
              <div class="phn-align-center phn-flex-row">
                <div class="skeleton-item">
                  <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                    Text
                  </phn-p-text>
                  <div class="text-limit">
                    <phn-p-text class="subtext" color="inherit" data-test-id="subtext" ellipsis="true" size="x-small" tag="div" weight="regular">
                      this is subtext
                    </phn-p-text>
                  </div>
                </div>
              </div>
            </a>
          </phn-p-link-pure>
        </phn-menu-item>
      `);
    });
    it('should have text from menu item', () => {
      var _a;
      const link = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('a'));
      expect(link === null || link === void 0 ? void 0 : link.innerText).toEqual(item.text);
      expect(link === null || link === void 0 ? void 0 : link.getAttribute('href')).toEqual(item.link);
    });
    it('should show icon if icon is provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => h("phn-menu-item", Object.assign({}, defaultProps, { iconLeft: "icon" }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-icon')).toBeTruthy();
    });
    it('should not show icon if no icon is provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => h("phn-menu-item", Object.assign({}, defaultProps))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-icon')).toBeNull();
    });
    it('should show spinner if loading', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => h("phn-menu-item", Object.assign({}, defaultProps, { iconLeft: "icon", isLoading: true }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-spinner')).toBeTruthy();
    });
    it('should render suffix slot if provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", Object.assign({}, defaultProps), h("div", { slot: "suffix" })))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[slot="suffix"]')).not.toBeNull();
    });
    it('should render media slot if provided', async () => {
      var _a;
      const page = await newSpecPage({
        components: [MenuItem],
        template: () => (h("phn-menu-item", Object.assign({}, defaultProps), h("div", { slot: "media" })))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[slot="media"]')).not.toBeNull();
    });
    describe('data analytics', () => {
      it('should send default NAVIGATION_LINK_CLICK data event after link is clicked', async () => {
        var _a, _b, _c;
        const page = await newSpecPage({
          components: [MenuItem],
          template: () => (h("phn-menu-item", Object.assign({}, defaultProps, { datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK }), h("div", { slot: "suffix" })))
        });
        (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link-pure'))) === null || _b === void 0 ? void 0 : _b.click();
        expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
        const event = globalDataLayerService.gdl.DataLayerStore[0];
        expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
        expect(event.componentClick).toEqual({
          clickElementId: item.id,
          clickElementName: item.text,
          clickElementType: ClickElementTypes.Link,
          targetUrl: item.link
        });
        expect(event.componentDisplay).toEqual({
          displayElementId: 'level2-shop',
          displayElementType: 'level2_menu-item',
          displayElementName: item.text
        });
      });
      it('should send META_FUNCTION_CLICK data event after any myporsche link is clicked', async () => {
        var _a, _b, _c;
        const page = await newSpecPage({
          components: [MenuItem],
          template: () => (h("phn-menu-item", Object.assign({}, defaultProps, { datalayerEventAction: EventActions.META_FUNCTION_CLICK, iconLeft: "icon" })))
        });
        (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link-pure'))) === null || _b === void 0 ? void 0 : _b.click();
        expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
        const event = globalDataLayerService.gdl.DataLayerStore[0];
        expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.META_FUNCTION_CLICK);
        expect(event.componentClick).toEqual({
          clickElementId: item.id,
          clickElementName: item.text,
          clickElementType: ClickElementTypes.Link,
          targetUrl: item.link
        });
        expect(event.componentDisplay).toEqual({
          displayElementId: 'level2-shop',
          displayElementType: 'level2_menu-item',
          displayElementName: item.text
        });
      });
      it('should send DEALER_CONTACT_CLICK data event with custom data', async () => {
        var _a, _b, _c;
        const searchTerm = 'Fancy search term';
        const phoneLink = 'Call me baby';
        const elementId = 'mainmenu.finddealer.phone';
        const page = await newSpecPage({
          components: [MenuItem],
          template: () => (h("phn-menu-item", { elementId: "routing key", analyticsId: elementId, text: mockPPNDealer.contactDetails.phoneNumber, link: phoneLink, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: {
              partner: {
                companyId: mockPPNDealer.porschePartnerNo,
                companyName: mockPPNDealer.name
              },
              componentSearch: {
                searchTerm
              }
            }, iconLeft: "icon" }))
        });
        (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link-pure'))) === null || _b === void 0 ? void 0 : _b.click();
        expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
        const event = globalDataLayerService.gdl.DataLayerStore[0];
        expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.DEALER_CONTACT_CLICK);
        expect(event.componentClick).toEqual({
          clickElementId: elementId,
          clickElementName: mockPPNDealer.contactDetails.phoneNumber,
          clickElementType: ClickElementTypes.Link,
          targetUrl: phoneLink
        });
        expect(event.partner).toEqual({
          companyId: mockPPNDealer.porschePartnerNo,
          companyName: mockPPNDealer.name
        });
        expect(event.componentSearch).toEqual({
          searchTerm
        });
      });
    });
  });
});
//# sourceMappingURL=menu-item.spec.js.map
