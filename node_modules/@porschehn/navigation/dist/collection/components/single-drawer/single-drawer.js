import { h, Host } from "@stencil/core";
import { RoutingKeys } from "../../entities/routing-key";
import { focusOnElement, getHTMLElement, isString } from "../../utility/helper";
import { Timeout } from "../../utility/timeout";
import DrawerContent from "./drawer-content";
import { getAllFocusableElements } from "../double-drawer/helper";
import { getCurrentRoute, isAnimatingForward } from "../../services/routing-manager";
import { routerStore } from "../../state/router-store";
import { handleAnimationRouting } from "./animations/animations-controller";
import registerSingleDrawerAnimationSequences from "./animations/animations-register";
export class SingleDrawer {
  constructor() {
    this.focusTimeout = new Timeout(0);
    this.breakpoint = undefined;
    this.locale = undefined;
    this.usingKeyboard = false;
    this.receivedContent = false;
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    const targetElement = getHTMLElement(e.target);
    if (targetElement === null) {
      return;
    }
    let focusableDrawerElements = getAllFocusableElements(this.el.querySelector('.active'));
    if (focusableDrawerElements.length === 0) {
      return;
    }
    if (getCurrentRoute().startsWith(RoutingKeys.DEALER_SEARCH)) {
      focusableDrawerElements = focusableDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const firstFocusableDrawerElement = focusableDrawerElements[0];
    const lastFocusableDrawerElement = focusableDrawerElements[focusableDrawerElements.length - 1];
    if (targetElement === firstFocusableDrawerElement && e.shiftKey) {
      e.preventDefault();
      if (lastFocusableDrawerElement !== null) {
        focusOnElement(lastFocusableDrawerElement);
      }
      return;
    }
    if (targetElement === lastFocusableDrawerElement && !e.shiftKey) {
      e.preventDefault();
      if (firstFocusableDrawerElement !== null) {
        focusOnElement(firstFocusableDrawerElement);
      }
      return;
    }
  }
  componentWillLoad() {
    registerSingleDrawerAnimationSequences();
  }
  disconnectedCallback() {
    this.focusTimeout.cancel();
    routerStore.reset();
  }
  render() {
    const { nextRoute, currentRoute } = handleAnimationRouting();
    return (h(Host, null, isString(currentRoute) ? (h("div", { class: "drawer active", key: currentRoute }, h("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }), h(DrawerContent, { routingKey: currentRoute, breakpoint: this.breakpoint, locale: this.locale, receivedContent: this.receivedContent }))) : null, isString(nextRoute) ? (h("div", { class: `drawer animating`, style: isAnimatingForward() ? { left: '100%' } : {}, key: nextRoute }, h(DrawerContent, { routingKey: nextRoute, breakpoint: this.breakpoint, locale: this.locale, receivedContent: this.receivedContent }))) : null));
  }
  static get is() { return "phn-single-drawer"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["single-drawer.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["single-drawer.css"]
    };
  }
  static get properties() {
    return {
      "breakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "breakpoint",
        "reflect": false
      },
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      },
      "usingKeyboard": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "using-keyboard",
        "reflect": false,
        "defaultValue": "false"
      },
      "receivedContent": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "received-content",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get elementRef() { return "el"; }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "handleKeyDown",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=single-drawer.js.map
