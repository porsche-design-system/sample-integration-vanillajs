{"version":3,"file":"single-drawer-animation-sequences.js","sourceRoot":"","sources":["../../../../src/components/single-drawer/single-drawer-animation-sequences.ts"],"names":[],"mappings":"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","sourcesContent":["import animationManager, {\n  AnimationEndsCallbacks,\n  AnimationStatusCallbacks,\n  makeSequence,\n  SequenceStep\n} from '../../services/animations/animation-manager';\nimport { AnimationSequences, AnimationSequencesType } from '../../utility/constants';\n\nexport const registerOpenSingleDrawerAnimation = ({\n  onAnimationStarts,\n  onAnimationEnds\n}: Required<AnimationStatusCallbacks>): void => {\n  const sequence: SequenceStep[] = [\n    [\n      {\n        onStart: onAnimationStarts,\n        elementSelector: 'phn-single-drawer',\n        animation: {\n          className: 'slide-in-from-left',\n          cleanUpAfterAnimation: (element) => {\n            element.style.left = '0px';\n          }\n        }\n      },\n      {\n        elementSelector: 'phn-backdrop',\n        animation: {\n          className: 'fade-in-animation',\n          cleanUpAfterAnimation: (element) => {\n            element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';\n            element.style.opacity = '1';\n          }\n        },\n        onEnd: onAnimationEnds\n      }\n    ]\n  ];\n\n  animationManager.register(AnimationSequences.OPEN_SINGLE_DRAWER, makeSequence(sequence));\n};\n\nexport const registerCloseSingleDrawerAnimation = ({\n  onAnimationStarts,\n  onAnimationEnds\n}: Required<AnimationStatusCallbacks>): void => {\n  const sequence: SequenceStep[] = [\n    [\n      {\n        onStart: onAnimationStarts,\n        elementSelector: 'phn-single-drawer',\n        animation: {\n          className: 'slide-out-to-left',\n          cleanUpBeforeAnimation: (element) => {\n            element.style.left = '';\n          },\n          cleanUpAfterAnimation: (element) => {\n            element.style.left = '-1000px';\n          }\n        }\n      },\n      {\n        elementSelector: 'phn-backdrop',\n        animation: {\n          className: 'fade-out-animation',\n          cleanUpBeforeAnimation: (element) => {\n            element.style.backgroundColor = '';\n            element.style.opacity = '';\n          }\n        },\n        onEnd: onAnimationEnds\n      }\n    ]\n  ];\n\n  animationManager.register(AnimationSequences.CLOSE_SINGLE_DRAWER, makeSequence(sequence));\n};\n\nexport const registerTransitionNextLevelSingleDrawerAnimation = ({ onAnimationEnds }: AnimationEndsCallbacks): void => {\n  animationManager.register(\n    AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n    makeSequence([\n      [\n        {\n          elementSelector: 'phn-single-drawer .drawer.animating',\n          animation: {\n            className: 'slide-in-from-right-fixed'\n          },\n          onEnd: onAnimationEnds\n        }\n      ]\n    ])\n  );\n};\n\nexport const registerTransitionPreviousLevelSingleDrawerAnimation = ({\n  onAnimationEnds\n}: AnimationEndsCallbacks): void => {\n  animationManager.register(\n    AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER,\n    makeSequence([\n      [\n        {\n          elementSelector: 'phn-single-drawer .drawer.animating',\n          animation: {\n            className: 'slide-out-to-right-fixed'\n          },\n          onEnd: onAnimationEnds\n        }\n      ]\n    ])\n  );\n};\n\nexport const isPlayingSingleDrawerAnimation = (): boolean => {\n  try {\n    const singleDrawerAnimationSequences: AnimationSequencesType[] = [\n      AnimationSequences.OPEN_SINGLE_DRAWER,\n      AnimationSequences.CLOSE_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER\n    ];\n\n    return singleDrawerAnimationSequences.some((sequence) => {\n      try {\n        return animationManager.isPlaying(sequence);\n      } catch {\n        return false;\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n};\n"]}