import { DrawerStatusValues } from "../../../utility/constants/app";
import { dispatchEvent, focusOnElement, getHTMLElement, getHTMLElementFromRoot, isString } from "../../../utility/helper";
import registerTransitionNextLevelSingleDrawerAnimation from "./sequences/register-next-level-single-drawer-animation";
import registerTransitionPreviousLevelSingleDrawerAnimation from "./sequences/register-previous-level-single-drawer-animation";
import registerOpenSingleDrawerAnimation from "./sequences/register-open-single-drawer-animation";
import registerCloseSingleDrawerAnimation from "./sequences/register-close-single-drawer-animation";
import * as router from "../../../services/routing-manager";
import analyticsManager from "../../../services/analytics/analytics-manager";
import { DisplayElementTypes, ElementTypes, EventActions, FOCUSABLE_ELEMENTS_SELECTOR } from "../../../utility/constants";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { routerStore } from "../../../state/router-store";
import { navStateStore } from "../../../state/nav-state-store";
export default function registerSingleDrawerAnimationSequences() {
  function dispatchDrawerStatusEvent(status) {
    dispatchEvent('phn-single-drawer', 'phnDrawerStatus', {
      bubbles: true,
      composed: true,
      detail: { status }
    });
  }
  registerTransitionNextLevelSingleDrawerAnimation({
    onAnimationEnds: () => onTransitionEnd()
  });
  registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds: () => onTransitionEnd() });
  registerOpenSingleDrawerAnimation({
    onAnimationStarts: () => {
      dispatchDrawerStatusEvent(DrawerStatusValues.startOpening);
    },
    onAnimationEnds: () => {
      onTransitionEnd();
      dispatchDrawerStatusEvent(DrawerStatusValues.finishOpening);
    }
  });
  registerCloseSingleDrawerAnimation({
    onAnimationStarts: () => {
      dispatchDrawerStatusEvent(DrawerStatusValues.startClosing);
    },
    onAnimationEnds: () => {
      dispatchDrawerStatusEvent(DrawerStatusValues.finishClosing);
      router.syncAnimation();
      if (navStateStore.state.usingKeyboard) {
        setTimeout(() => {
          focusOnElement(getHTMLElementFromRoot('phn-burger-button phn-p-button-pure'));
        }, 100);
      }
    }
  });
}
function onTransitionEnd() {
  const focussedElementId = routerStore.state.animatingPointer > routerStore.state.routingKeyPointer
    ? routerStore.state.routingKeyHistory[routerStore.state.animatingPointer]
    : '';
  router.syncAnimation();
  router.pop();
  setTimeout(() => {
    const singleDrawer = getHTMLElementFromRoot('.drawer');
    focusOn(singleDrawer, focussedElementId);
  });
  sendDataLayerEvent();
}
function sendDataLayerEvent() {
  analyticsManager.setDrawerType(DisplayElementTypes.SingleDrawer);
  globalDataLayerService.pushDataLayerEvent(EventActions.DRAWER_LOAD, {
    componentDisplay: {
      displayElementType: analyticsManager.calculateDisplayElementType(router.getCurrentRoute(), ElementTypes.singleDrawer),
      displayElementId: analyticsManager.calculateDisplayElementId(),
      displayElementName: 'Single Drawer'
    }
  });
}
function focusOn(element, focussedElementId) {
  if (!element)
    return;
  const autoFocusElement = getHTMLElement(element.querySelector('.autofocus'));
  if (autoFocusElement !== null) {
    focusOnElement(autoFocusElement);
    return;
  }
  if (navStateStore.state.usingKeyboard) {
    let focussableElement = null;
    if (isString(focussedElementId)) {
      focussableElement = getHTMLElement(element.querySelector(`.active [data-id="${focussedElementId}"]`));
    }
    if (focussableElement === null) {
      focussableElement = getHTMLElement(element.querySelector(`.active ${FOCUSABLE_ELEMENTS_SELECTOR}`));
    }
    if (focussableElement !== null) {
      focusOnElement(focussableElement);
    }
  }
  else {
    const firstFocus = getHTMLElement(element.querySelector('.first-focus'));
    if (firstFocus !== null) {
      focusOnElement(firstFocus);
    }
  }
}
//# sourceMappingURL=animations-register.js.map
