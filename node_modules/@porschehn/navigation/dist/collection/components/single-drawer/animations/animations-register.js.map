{"version":3,"file":"animations-register.js","sourceRoot":"","sources":["../../../../../src/components/single-drawer/animations/animations-register.ts"],"names":[],"mappings":"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","sourcesContent":["import { DrawerStatusTypes, DrawerStatusValues } from '../../../utility/constants/app';\nimport {\n  dispatchEvent,\n  focusOnElement,\n  getHTMLElement,\n  getHTMLElementFromRoot,\n  isString\n} from '../../../utility/helper';\nimport registerTransitionNextLevelSingleDrawerAnimation from './sequences/register-next-level-single-drawer-animation';\nimport registerTransitionPreviousLevelSingleDrawerAnimation from './sequences/register-previous-level-single-drawer-animation';\nimport registerOpenSingleDrawerAnimation from './sequences/register-open-single-drawer-animation';\nimport registerCloseSingleDrawerAnimation from './sequences/register-close-single-drawer-animation';\nimport * as router from '../../../services/routing-manager';\nimport analyticsManager from '../../../services/analytics/analytics-manager';\nimport {\n  DisplayElementTypes,\n  ElementTypes,\n  EventActions,\n  FOCUSABLE_ELEMENTS_SELECTOR\n} from '../../../utility/constants';\nimport globalDataLayerService from '../../../services/analytics/global-data-layer-service';\nimport { routerStore } from '../../../state/router-store';\nimport { navStateStore } from '../../../state/nav-state-store';\n\nexport default function registerSingleDrawerAnimationSequences(): void {\n  function dispatchDrawerStatusEvent(status: DrawerStatusTypes) {\n    dispatchEvent('phn-single-drawer', 'phnDrawerStatus', {\n      bubbles: true,\n      composed: true,\n      detail: { status }\n    });\n  }\n\n  registerTransitionNextLevelSingleDrawerAnimation({\n    onAnimationEnds: () => onTransitionEnd()\n  });\n  registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds: () => onTransitionEnd() });\n  registerOpenSingleDrawerAnimation({\n    onAnimationStarts: () => {\n      dispatchDrawerStatusEvent(DrawerStatusValues.startOpening);\n    },\n    onAnimationEnds: () => {\n      onTransitionEnd();\n      dispatchDrawerStatusEvent(DrawerStatusValues.finishOpening);\n    }\n  });\n  registerCloseSingleDrawerAnimation({\n    onAnimationStarts: () => {\n      dispatchDrawerStatusEvent(DrawerStatusValues.startClosing);\n    },\n    onAnimationEnds: () => {\n      dispatchDrawerStatusEvent(DrawerStatusValues.finishClosing);\n      router.syncAnimation();\n\n      if (navStateStore.state.usingKeyboard) {\n        setTimeout(() => {\n          focusOnElement(getHTMLElementFromRoot('phn-burger-button phn-p-button-pure'));\n        }, 100);\n      }\n    }\n  });\n}\n\nfunction onTransitionEnd() {\n  const focussedElementId =\n    routerStore.state.animatingPointer > routerStore.state.routingKeyPointer\n      ? routerStore.state.routingKeyHistory[routerStore.state.animatingPointer]\n      : '';\n\n  router.syncAnimation();\n  router.pop();\n\n  setTimeout(() => {\n    const singleDrawer = getHTMLElementFromRoot('.drawer');\n    focusOn(singleDrawer, focussedElementId);\n  });\n\n  sendDataLayerEvent();\n}\n\nfunction sendDataLayerEvent() {\n  analyticsManager.setDrawerType(DisplayElementTypes.SingleDrawer);\n\n  globalDataLayerService.pushDataLayerEvent(EventActions.DRAWER_LOAD, {\n    componentDisplay: {\n      displayElementType: analyticsManager.calculateDisplayElementType(\n        router.getCurrentRoute(),\n        ElementTypes.singleDrawer\n      ),\n      displayElementId: analyticsManager.calculateDisplayElementId(),\n      displayElementName: 'Single Drawer'\n    }\n  });\n}\n\nfunction focusOn(element: HTMLElement | null, focussedElementId: string): void {\n  if (!element) return;\n\n  const autoFocusElement = getHTMLElement(element.querySelector('.autofocus'));\n  if (autoFocusElement !== null) {\n    focusOnElement(autoFocusElement);\n    return;\n  }\n\n  if (navStateStore.state.usingKeyboard) {\n    let focussableElement: HTMLElement | null = null;\n\n    if (isString(focussedElementId)) {\n      focussableElement = getHTMLElement(element.querySelector(`.active [data-id=\"${focussedElementId}\"]`));\n    }\n\n    if (focussableElement === null) {\n      focussableElement = getHTMLElement(element.querySelector(`.active ${FOCUSABLE_ELEMENTS_SELECTOR}`));\n    }\n\n    if (focussableElement !== null) {\n      focusOnElement(focussableElement);\n    }\n  } else {\n    const firstFocus = getHTMLElement(element.querySelector('.first-focus'));\n\n    if (firstFocus !== null) {\n      focusOnElement(firstFocus);\n    }\n  }\n}\n"]}