import animationManager from "../../../services/animations/animation-manager";
import { AnimationSequences } from "../../../utility/constants";
import { getAnimatedRoute, getCurrentRoute, isAnimatingBackward, isAnimatingForward, isClosing, isOpening } from "../../../services/routing-manager";
export const handleAnimationRouting = () => {
  const actions = {
    OPENING: openingAction,
    CLOSING: closingAction,
    FORWARD: forwardAction,
    BACKWARDS: backwardAction,
    UNCHANGED: unchangedAction
  };
  const conditionToExecute = getSingleDrawerAction();
  return actions[conditionToExecute]();
};
function getSingleDrawerAction() {
  if (isOpening()) {
    return 'OPENING';
  }
  if (isClosing()) {
    return 'CLOSING';
  }
  if (isAnimatingForward()) {
    return 'FORWARD';
  }
  if (isAnimatingBackward()) {
    return 'BACKWARDS';
  }
  return 'UNCHANGED';
}
const openingAction = () => {
  animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);
  return {
    nextRoute: '',
    currentRoute: getCurrentRoute()
  };
};
const closingAction = () => {
  animationManager.play(AnimationSequences.CLOSE_SINGLE_DRAWER).then(() => {
    // TODO: Focus on burger button if using the keyboard
  });
  return {
    nextRoute: getCurrentRoute() || '',
    currentRoute: getAnimatedRoute() || ''
  };
};
const forwardAction = () => {
  var _a, _b;
  setTimeout(() => {
    animationManager.play(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);
  });
  return {
    nextRoute: (_a = getCurrentRoute()) !== null && _a !== void 0 ? _a : '',
    currentRoute: (_b = getAnimatedRoute()) !== null && _b !== void 0 ? _b : ''
  };
};
const backwardAction = () => {
  var _a, _b;
  if (getCurrentRoute() !== '') {
    setTimeout(() => {
      animationManager.play(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);
    });
  }
  return {
    nextRoute: (_a = getAnimatedRoute()) !== null && _a !== void 0 ? _a : '',
    currentRoute: (_b = getCurrentRoute()) !== null && _b !== void 0 ? _b : ''
  };
};
const unchangedAction = () => {
  return {
    nextRoute: '',
    currentRoute: getCurrentRoute()
  };
};
export const isPlayingSingleDrawerAnimation = () => {
  try {
    const singleDrawerAnimationSequences = [
      AnimationSequences.OPEN_SINGLE_DRAWER,
      AnimationSequences.CLOSE_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER
    ];
    return singleDrawerAnimationSequences.some((sequence) => {
      try {
        return animationManager.isPlaying(sequence);
      }
      catch (_a) {
        return false;
      }
    });
  }
  catch (e) {
    return false;
  }
};
//# sourceMappingURL=animations-controller.js.map
