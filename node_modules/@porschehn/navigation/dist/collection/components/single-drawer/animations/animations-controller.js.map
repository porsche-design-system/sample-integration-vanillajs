{"version":3,"file":"animations-controller.js","sourceRoot":"","sources":["../../../../../src/components/single-drawer/animations/animations-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import animationManager from '../../../services/animations/animation-manager';\nimport { AnimationSequences, AnimationSequencesType } from '../../../utility/constants';\nimport {\n  getAnimatedRoute,\n  getCurrentRoute,\n  isAnimatingBackward,\n  isAnimatingForward,\n  isClosing,\n  isOpening\n} from '../../../services/routing-manager';\n\nexport const handleAnimationRouting = (): AnimationRouting => {\n  const actions: Record<Operations, () => AnimationRouting> = {\n    OPENING: openingAction,\n    CLOSING: closingAction,\n    FORWARD: forwardAction,\n    BACKWARDS: backwardAction,\n    UNCHANGED: unchangedAction\n  };\n\n  const conditionToExecute = getSingleDrawerAction();\n\n  return actions[conditionToExecute]();\n};\n\ntype Operations = 'OPENING' | 'CLOSING' | 'FORWARD' | 'BACKWARDS' | 'UNCHANGED';\nfunction getSingleDrawerAction(): Operations {\n  if (isOpening()) {\n    return 'OPENING';\n  }\n  if (isClosing()) {\n    return 'CLOSING';\n  }\n  if (isAnimatingForward()) {\n    return 'FORWARD';\n  }\n  if (isAnimatingBackward()) {\n    return 'BACKWARDS';\n  }\n  return 'UNCHANGED';\n}\n\ntype AnimationRouting = { nextRoute: string; currentRoute: string };\n\nconst openingAction = (): AnimationRouting => {\n  animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);\n\n  return {\n    nextRoute: '',\n    currentRoute: getCurrentRoute()\n  };\n};\n\nconst closingAction = (): AnimationRouting => {\n  animationManager.play(AnimationSequences.CLOSE_SINGLE_DRAWER).then(() => {\n    // TODO: Focus on burger button if using the keyboard\n  });\n\n  return {\n    nextRoute: getCurrentRoute() || '',\n    currentRoute: getAnimatedRoute() || ''\n  };\n};\n\nconst forwardAction = (): AnimationRouting => {\n  setTimeout(() => {\n    animationManager.play(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);\n  });\n\n  return {\n    nextRoute: getCurrentRoute() ?? '',\n    currentRoute: getAnimatedRoute() ?? ''\n  };\n};\n\nconst backwardAction = (): AnimationRouting => {\n  if (getCurrentRoute() !== '') {\n    setTimeout(() => {\n      animationManager.play(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);\n    });\n  }\n\n  return {\n    nextRoute: getAnimatedRoute() ?? '',\n    currentRoute: getCurrentRoute() ?? ''\n  };\n};\n\nconst unchangedAction = (): AnimationRouting => {\n  return {\n    nextRoute: '',\n    currentRoute: getCurrentRoute()\n  };\n};\n\nexport const isPlayingSingleDrawerAnimation = (): boolean => {\n  try {\n    const singleDrawerAnimationSequences: AnimationSequencesType[] = [\n      AnimationSequences.OPEN_SINGLE_DRAWER,\n      AnimationSequences.CLOSE_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER\n    ];\n\n    return singleDrawerAnimationSequences.some((sequence) => {\n      try {\n        return animationManager.isPlaying(sequence);\n      } catch {\n        return false;\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n};\n"]}