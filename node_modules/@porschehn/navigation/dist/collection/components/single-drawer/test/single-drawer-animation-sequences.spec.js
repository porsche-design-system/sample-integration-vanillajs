import animationManager from "../../../services/animations/animation-manager";
import registerOpenSingleDrawerAnimation from "../animations/sequences/register-open-single-drawer-animation";
import registerCloseSingleDrawerAnimation from "../animations/sequences/register-close-single-drawer-animation";
import registerTransitionNextLevelSingleDrawerAnimation from "../animations/sequences/register-next-level-single-drawer-animation";
import registerTransitionPreviousLevelSingleDrawerAnimation from "../animations/sequences/register-previous-level-single-drawer-animation";
import registerSingleDrawerAnimationSequences from "../animations/animations-register";
import * as nextLevelAnimation from "../animations/sequences/register-next-level-single-drawer-animation";
import * as previousLevelAnimation from "../animations/sequences/register-previous-level-single-drawer-animation";
import * as openAnimation from "../animations/sequences/register-open-single-drawer-animation";
import * as closeAnimation from "../animations/sequences/register-close-single-drawer-animation";
describe('Single Drawer Animation Sequence', () => {
  let registerAnimationMock;
  beforeEach(() => {
    registerAnimationMock = jest.spyOn(animationManager, 'register');
  });
  it('should register single drawer opening sequence, opening single drawer from right to left', async () => {
    registerOpenSingleDrawerAnimation({ onAnimationStarts: () => null, onAnimationEnds: () => null });
    expect(registerAnimationMock).toHaveBeenCalledWith('openSingleDrawer', {
      currentStepIndex: 0,
      running: false,
      steps: [
        [
          {
            onStart: expect.any(Function),
            elementSelector: 'phn-single-drawer',
            animation: {
              className: 'slide-in-from-left',
              cleanUpAfterAnimation: expect.any(Function)
            }
          },
          {
            elementSelector: 'phn-backdrop',
            animation: {
              className: 'fade-in-animation',
              cleanUpAfterAnimation: expect.any(Function)
            },
            onEnd: expect.any(Function)
          }
        ]
      ]
    });
  });
  it('should register single drawer closing sequence, closing single drawer from right to left', async () => {
    registerCloseSingleDrawerAnimation({ onAnimationStarts: jest.fn(), onAnimationEnds: jest.fn() });
    expect(registerAnimationMock).toHaveBeenCalledWith('closeSingleDrawer', {
      currentStepIndex: 0,
      running: false,
      steps: [
        [
          {
            onStart: expect.any(Function),
            elementSelector: 'phn-single-drawer',
            animation: {
              className: 'slide-out-to-left',
              cleanUpBeforeAnimation: expect.any(Function),
              cleanUpAfterAnimation: expect.any(Function)
            }
          },
          {
            elementSelector: 'phn-backdrop',
            animation: {
              className: 'fade-out-animation',
              cleanUpBeforeAnimation: expect.any(Function)
            },
            onEnd: expect.any(Function)
          }
        ]
      ]
    });
  });
  it('should register transition next level single drawer animation, transitioning the new page from right to left', () => {
    registerTransitionNextLevelSingleDrawerAnimation({
      onAnimationEnds: jest.fn()
    });
    expect(registerAnimationMock).toHaveBeenCalledWith('transitionNextLevelSingleDrawer', {
      currentStepIndex: 0,
      running: false,
      steps: [
        [
          {
            elementSelector: 'phn-single-drawer .drawer.animating',
            animation: {
              className: 'slide-in-from-right-fixed'
            },
            onEnd: expect.any(Function)
          }
        ]
      ]
    });
  });
  it('should register transition previous level single drawer animation, transitioning the old page from left to right', () => {
    registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds: jest.fn() });
    expect(registerAnimationMock).toHaveBeenCalledWith('transitionPreviousLevelSingleDrawer', {
      currentStepIndex: 0,
      running: false,
      steps: [
        [
          {
            elementSelector: 'phn-single-drawer .drawer.animating',
            animation: {
              className: 'slide-out-to-right-fixed'
            },
            onEnd: expect.any(Function)
          }
        ]
      ]
    });
  });
  describe('Register', () => {
    it('Should register animation sequences', () => {
      const spyNextLevelTransition = jest.spyOn(nextLevelAnimation, 'default');
      const spyPreviousLevelTransition = jest.spyOn(previousLevelAnimation, 'default');
      const spyOpenAnimation = jest.spyOn(openAnimation, 'default');
      const spyCloseAnimation = jest.spyOn(closeAnimation, 'default');
      registerSingleDrawerAnimationSequences();
      expect(spyNextLevelTransition).toHaveBeenCalledTimes(1);
      expect(spyNextLevelTransition).toHaveBeenLastCalledWith({ onAnimationEnds: expect.any(Function) });
      expect(spyPreviousLevelTransition).toHaveBeenCalledTimes(1);
      expect(spyPreviousLevelTransition).toHaveBeenLastCalledWith({ onAnimationEnds: expect.any(Function) });
      expect(spyOpenAnimation).toHaveBeenCalledTimes(1);
      expect(spyOpenAnimation).toHaveBeenLastCalledWith({
        onAnimationEnds: expect.any(Function),
        onAnimationStarts: expect.any(Function)
      });
      expect(spyCloseAnimation).toHaveBeenCalledTimes(1);
      expect(spyCloseAnimation).toHaveBeenLastCalledWith({
        onAnimationEnds: expect.any(Function),
        onAnimationStarts: expect.any(Function)
      });
    });
  });
});
//# sourceMappingURL=single-drawer-animation-sequences.spec.js.map
