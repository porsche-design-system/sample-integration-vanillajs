import { breakpoint } from "@porsche-design-system/components-js/styles";
import { Fragment, getAssetPath, h, Host } from "@stencil/core";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import { navStateStore } from "../../state/nav-state-store";
import { ClickElementTypes, ElementTypes, EventActions } from "../../utility/constants";
import { getConfig, getHTMLElement, isString } from "../../utility/helper";
import { componentsOnReady } from "../../utility/ready";
import { Timeout } from "../../utility/timeout";
import analyticsManager from "../../services/analytics/analytics-manager";
export class CarBodyTypeDrawer {
  constructor() {
    this.bodyTypesImagesLoaded = new Set();
    this.bodyTypesImagesNotLoaded = new Set();
    this.series = undefined;
    this.breakpoint = undefined;
    this.activeRoutingKey = undefined;
    this.seriesLoaded = false;
    this.showSkeleton = true;
  }
  seriesWatcher() {
    this.seriesLoaded = false;
    this.showSkeleton = true;
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = !this.seriesLoaded;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  componentDidRender() {
    this.showSkeleton = !this.seriesLoaded;
  }
  handleImageLoad(seriesId) {
    this.bodyTypesImagesLoaded.add(seriesId);
    if (this.series.bodyTypes.every(({ id }) => this.bodyTypesImagesLoaded.has(id))) {
      this.seriesLoaded = true;
    }
  }
  handleImageLoadError(seriesId) {
    this.handleImageLoad(seriesId);
    this.bodyTypesImagesNotLoaded.add(seriesId);
  }
  sendMetaFunctionDataLayerEvent(link) {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CTA_CLICK, {
      componentClick: {
        clickElementId: link.id,
        clickElementName: link.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: link.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: link.text
      },
      car: {
        modelRangeName: link.id.split('.')[1]
      }
    });
  }
  sendBodyTypeClickDataLayerEvent(bodyType, tagName) {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {
      componentClick: {
        clickElementId: bodyType.id,
        clickElementName: bodyType.name,
        clickElementType: tagName === 'IMG' ? ClickElementTypes.Image : ClickElementTypes.Link,
        targetUrl: bodyType.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: bodyType.name
      },
      car: {
        modelRangeName: bodyType.id.split('.')[1],
        modelName: analyticsManager.getModelName(bodyType)
      }
    });
  }
  sendNavigationDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {
      componentClick: {
        clickElementId: this.series.all.id,
        clickElementName: this.series.all.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: this.series.all.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: this.series.all.text
      }
    });
  }
  getImageSize(currentBreakpoint) {
    switch (currentBreakpoint) {
      case breakpoint.xxl:
        return 1920;
      case breakpoint.xl:
      case breakpoint.l:
        return 1360;
      case breakpoint.m:
        return 1024;
      case breakpoint.s:
        return 760;
      case breakpoint.xs:
      case breakpoint.base:
      default:
        return 320;
    }
  }
  getImageSource(image) {
    const assetPath = getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/model-assets`);
    const imageSize = this.getImageSize(this.breakpoint);
    const imagePath = `${assetPath}/${imageSize}`;
    return `${imagePath}/${image}.webp, ${imagePath}/${image}@2x.webp 2x`;
  }
  render() {
    return (h(Host, { class: `${this.showSkeleton ? 'skeleton' : ''}` }, h(Fragment, null, h("ul", { class: "links" }, this.series.links.map((link) => (h(Fragment, null, this.showSkeleton ? h("div", { class: "skeleton-link" }) : null, h("phn-p-link", { key: link.id, variant: "tertiary", href: link.link, icon: link.icon, size: "inherit", class: "link", style: { display: this.showSkeleton ? 'none' : '' }, onClick: () => {
        this.sendMetaFunctionDataLayerEvent(link);
      }, role: "listitem" }, link.text))))), h("ul", null, this.series.bodyTypes.map((bodyType) => {
      return (h(Fragment, null, this.showSkeleton ? (h(Fragment, null, h("div", { class: "skeleton-image" }))) : null, h("div", { class: "series-body-type", key: bodyType.id, style: { display: this.showSkeleton ? 'none' : '' }, role: "listitem" }, h("phn-p-link-pure", { icon: "none", onClick: (e) => {
          const clickedElement = getHTMLElement(e.target);
          if (clickedElement !== null) {
            this.sendBodyTypeClickDataLayerEvent(bodyType, clickedElement.tagName);
          }
        } }, h("a", { href: bodyType.link }, this.bodyTypesImagesNotLoaded.has(bodyType.id) ? (h(Fragment, null, h("div", { class: "skeleton-bodytype" }))) : (h("div", { class: "model-link-content" }, h("img", { srcSet: this.getImageSource(bodyType.image), alt: `${bodyType.name} Sideshot`, onLoad: () => this.handleImageLoad(bodyType.id), onError: () => this.handleImageLoadError(bodyType.id) }), h("phn-p-text", { size: "inherit", color: "inherit", align: "center" }, bodyType.name), isString(bodyType.description) ? (h("phn-p-text", { className: "model-description", size: "x-small", align: "center" }, bodyType.description)) : null)))))));
    })), this.showSkeleton ? null : (h("phn-p-link", { variant: "tertiary", href: this.series.all.link, size: "inherit", class: "further", "data-test-id": "car-body-types-drawer-further-links-button", onClick: () => {
        this.sendNavigationDataLayerEvent();
      } }, this.series.all.text)))));
  }
  static get is() { return "phn-car-body-types-drawer"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["car-body-types-drawer.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["car-body-types-drawer.css"]
    };
  }
  static get assetsDirs() { return ["model-assets"]; }
  static get properties() {
    return {
      "series": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Series",
          "resolved": "{ name: string; id: string; all: TLink; image: string; links: TLink[]; tags: Tag[]; bodyTypes: BodyType[]; }",
          "references": {
            "Series": {
              "location": "import",
              "path": "../../entities/content",
              "id": "src/entities/content.ts::Series"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "breakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "breakpoint",
        "reflect": false
      },
      "activeRoutingKey": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "active-routing-key",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "seriesLoaded": {},
      "showSkeleton": {}
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "series",
        "methodName": "seriesWatcher"
      }];
  }
}
//# sourceMappingURL=car-body-types-drawer.js.map
