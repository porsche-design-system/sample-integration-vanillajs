import { breakpoint } from "@porsche-design-system/components-js/styles";
import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { mockSeriesContent } from "../../../test/test-data";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { getHTMLElement } from "../../../utility/helper";
import { CarBodyTypeDrawer } from "../car-body-types-drawer";
import { routerStore } from "../../../state/router-store";
import { goTo } from "../../../services/routing-manager";
import { RoutingKeys } from "../../../entities/routing-key";
describe('phn-car-body-types-drawer', () => {
  let page;
  beforeEach(async () => {
    goTo(RoutingKeys.MODELS, 'models/mainmenu.911');
    page = await newSpecPage({
      components: [CarBodyTypeDrawer],
      template: () => h("phn-car-body-types-drawer", { series: mockSeriesContent, breakpoint: breakpoint.s })
    });
    routerStore.state.routingKeyHistory = ['mainmenu', 'models', 'models/mainmenu.911'];
    routerStore.state.routingKeyPointer = 2;
    page.rootInstance.seriesLoaded = true;
    await page.waitForChanges();
  });
  describe('testing component', () => {
    beforeEach(async () => {
      page = await newSpecPage({
        components: [CarBodyTypeDrawer],
        template: () => h("phn-car-body-types-drawer", { series: mockSeriesContent, breakpoint: breakpoint.s })
      });
      page.rootInstance.seriesLoaded = true;
      await page.waitForChanges();
    });
    it('should render properly', () => {
      expect(page.root).toMatchInlineSnapshot(`
        <phn-car-body-types-drawer>
          <ul class="links">
            <phn-p-link class="link" href="https://www.porsche.com/uk/modelstart/all/?modelrange=718" icon="configurate" role="listitem" size="inherit" variant="tertiary">
              Configure
            </phn-p-link>
            <phn-p-link class="link" href="https://www.porsche.com/uk/models/718/?compare" icon="compare" role="listitem" size="inherit" variant="tertiary">
              Compare
            </phn-p-link>
            <phn-p-link class="link" href="https://finder.porsche.com/gb/en_GB/search/list?modelSeriesKeys=718" icon="search" role="listitem" size="inherit" variant="tertiary">
              Find New and Pre-owned Vehicles
            </phn-p-link>
            <phn-p-link class="link" href="https://www.porsche.com/uk/testdrive/?modelsddPInt=id_ao1_primint%7Cid_ao2_primint" icon="steering-wheel" role="listitem" size="inherit" variant="tertiary">
              Book Test Drive
            </phn-p-link>
          </ul>
          <ul>
            <div class="series-body-type" role="listitem">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-models/718-cayman/">
                  <div class="model-link-content">
                    <img alt="718 Cayman Models Sideshot" srcset="http://assets/url/model-assets/760/718-cayman.webp, http://assets/url/model-assets/760/718-cayman@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Cayman Models
                    </phn-p-text>
                    <phn-p-text align="center" class="model-description" size="x-small">
                      718 description
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="series-body-type" role="listitem">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-models/718-boxster/">
                  <div class="model-link-content">
                    <img alt="718 Boxster Models Sideshot" srcset="http://assets/url/model-assets/760/718-boxster.webp, http://assets/url/model-assets/760/718-boxster@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Boxster Models
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="series-body-type" role="listitem">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-cayman-gt4/">
                  <div class="model-link-content">
                    <img alt="718 Cayman GT4 Sideshot" srcset="http://assets/url/model-assets/760/718-cayman-gt4.webp, http://assets/url/model-assets/760/718-cayman-gt4@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Cayman GT4
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="series-body-type" role="listitem">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-cayman-gt4-rs">
                  <div class="model-link-content">
                    <img alt="Cayman GT4 RS Sideshot" srcset="http://assets/url/model-assets/760/718-cayman-gt4-rs.webp, http://assets/url/model-assets/760/718-cayman-gt4-rs@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      Cayman GT4 RS
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="series-body-type" role="listitem">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-spyder/">
                  <div class="model-link-content">
                    <img alt="718 Spyder Sideshot" srcset="http://assets/url/model-assets/760/718-spyder.webp, http://assets/url/model-assets/760/718-spyder@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Spyder
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
          </ul>
          <phn-p-link class="further" data-test-id="car-body-types-drawer-further-links-button" href="https://www.porsche.com/uk/models/718" size="inherit" variant="tertiary">
            718 Models
          </phn-p-link>
        </phn-car-body-types-drawer>
      `);
    });
    it('should render skeletons', async () => {
      page.rootInstance.seriesLoaded = false;
      await page.waitForChanges();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-car-body-types-drawer class="skeleton">
          <ul class="links">
            <div class="skeleton-link"></div>
            <phn-p-link class="link" href="https://www.porsche.com/uk/modelstart/all/?modelrange=718" icon="configurate" role="listitem" size="inherit" variant="tertiary" style="display: none;">
              Configure
            </phn-p-link>
            <div class="skeleton-link"></div>
            <phn-p-link class="link" href="https://www.porsche.com/uk/models/718/?compare" icon="compare" role="listitem" size="inherit" variant="tertiary" style="display: none;">
              Compare
            </phn-p-link>
            <div class="skeleton-link"></div>
            <phn-p-link class="link" href="https://finder.porsche.com/gb/en_GB/search/list?modelSeriesKeys=718" icon="search" role="listitem" size="inherit" variant="tertiary" style="display: none;">
              Find New and Pre-owned Vehicles
            </phn-p-link>
            <div class="skeleton-link"></div>
            <phn-p-link class="link" href="https://www.porsche.com/uk/testdrive/?modelsddPInt=id_ao1_primint%7Cid_ao2_primint" icon="steering-wheel" role="listitem" size="inherit" variant="tertiary" style="display: none;">
              Book Test Drive
            </phn-p-link>
          </ul>
          <ul>
            <div class="skeleton-image"></div>
            <div class="series-body-type" role="listitem" style="display: none;">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-models/718-cayman/">
                  <div class="model-link-content">
                    <img alt="718 Cayman Models Sideshot" srcset="http://assets/url/model-assets/760/718-cayman.webp, http://assets/url/model-assets/760/718-cayman@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Cayman Models
                    </phn-p-text>
                    <phn-p-text align="center" class="model-description" size="x-small">
                      718 description
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="skeleton-image"></div>
            <div class="series-body-type" role="listitem" style="display: none;">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-models/718-boxster/">
                  <div class="model-link-content">
                    <img alt="718 Boxster Models Sideshot" srcset="http://assets/url/model-assets/760/718-boxster.webp, http://assets/url/model-assets/760/718-boxster@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Boxster Models
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="skeleton-image"></div>
            <div class="series-body-type" role="listitem" style="display: none;">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-cayman-gt4/">
                  <div class="model-link-content">
                    <img alt="718 Cayman GT4 Sideshot" srcset="http://assets/url/model-assets/760/718-cayman-gt4.webp, http://assets/url/model-assets/760/718-cayman-gt4@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Cayman GT4
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="skeleton-image"></div>
            <div class="series-body-type" role="listitem" style="display: none;">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-cayman-gt4-rs">
                  <div class="model-link-content">
                    <img alt="Cayman GT4 RS Sideshot" srcset="http://assets/url/model-assets/760/718-cayman-gt4-rs.webp, http://assets/url/model-assets/760/718-cayman-gt4-rs@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      Cayman GT4 RS
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
            <div class="skeleton-image"></div>
            <div class="series-body-type" role="listitem" style="display: none;">
              <phn-p-link-pure icon="none">
                <a href="https://www.porsche.com/uk/models/718/718-spyder/">
                  <div class="model-link-content">
                    <img alt="718 Spyder Sideshot" srcset="http://assets/url/model-assets/760/718-spyder.webp, http://assets/url/model-assets/760/718-spyder@2x.webp 2x">
                    <phn-p-text align="center" color="inherit" size="inherit">
                      718 Spyder
                    </phn-p-text>
                  </div>
                </a>
              </phn-p-link-pure>
            </div>
          </ul>
        </phn-car-body-types-drawer>
      `);
    });
    it('should fetch images in the correct size for the breakpoint', async () => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('760');
      (_b = page.root) === null || _b === void 0 ? void 0 : _b.setAttribute('breakpoint', `${breakpoint.xxl}`);
      await page.waitForChanges();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('1920');
      (_d = page.root) === null || _d === void 0 ? void 0 : _d.setAttribute('breakpoint', `${breakpoint.xl}`);
      await page.waitForChanges();
      expect((_e = page.root) === null || _e === void 0 ? void 0 : _e.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('1360');
      (_f = page.root) === null || _f === void 0 ? void 0 : _f.setAttribute('breakpoint', `${breakpoint.l}`);
      await page.waitForChanges();
      expect((_g = page.root) === null || _g === void 0 ? void 0 : _g.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('1360');
      (_h = page.root) === null || _h === void 0 ? void 0 : _h.setAttribute('breakpoint', `${breakpoint.m}`);
      await page.waitForChanges();
      expect((_j = page.root) === null || _j === void 0 ? void 0 : _j.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('1024');
      (_k = page.root) === null || _k === void 0 ? void 0 : _k.setAttribute('breakpoint', `${breakpoint.xs}`);
      await page.waitForChanges();
      expect((_l = page.root) === null || _l === void 0 ? void 0 : _l.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('320');
      (_m = page.root) === null || _m === void 0 ? void 0 : _m.setAttribute('breakpoint', `${breakpoint.base}`);
      await page.waitForChanges();
      expect((_o = page.root) === null || _o === void 0 ? void 0 : _o.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('320');
      (_p = page.root) === null || _p === void 0 ? void 0 : _p.setAttribute('breakpoint', '10');
      await page.waitForChanges();
      expect((_q = page.root) === null || _q === void 0 ? void 0 : _q.querySelectorAll('img')[0].getAttribute('srcSet')).toContain('320');
    });
  });
  describe('data analytics', () => {
    it('should send MODEL_CTA_CLICK data event after one of link functionalities is clicked', () => {
      var _a, _b, _c;
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.MODEL_CTA_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockSeriesContent.links[0].id,
        clickElementName: mockSeriesContent.links[0].text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: mockSeriesContent.links[0].link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level3-mainmenu.911',
        displayElementType: 'level3_body-type-button',
        displayElementName: mockSeriesContent.links[0].text
      });
      expect(event.car).toEqual({
        modelRangeName: '718'
      });
    });
    it('should send MODEL_CLICK data event after model image is clicked', () => {
      var _a, _b, _c;
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('img'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.MODEL_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockSeriesContent.bodyTypes[0].id,
        clickElementName: mockSeriesContent.bodyTypes[0].name,
        clickElementType: ClickElementTypes.Image,
        targetUrl: mockSeriesContent.bodyTypes[0].link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level3-mainmenu.911',
        displayElementType: 'level3_body-type-button',
        displayElementName: mockSeriesContent.bodyTypes[0].name
      });
      expect(event.car).toEqual({
        modelRangeName: '718',
        modelName: '718 cayman'
      });
    });
    it('should send MODEL_CLICK data event after model name is clicked', () => {
      var _a, _b, _c, _d;
      (_c = getHTMLElement((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link-pure')) === null || _b === void 0 ? void 0 : _b.querySelector('phn-p-text'))) === null || _c === void 0 ? void 0 : _c.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_d = event.context) === null || _d === void 0 ? void 0 : _d.eventAction).toEqual(EventActions.MODEL_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockSeriesContent.bodyTypes[0].id,
        clickElementName: mockSeriesContent.bodyTypes[0].name,
        clickElementType: ClickElementTypes.Link,
        targetUrl: mockSeriesContent.bodyTypes[0].link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level3-mainmenu.911',
        displayElementType: 'level3_body-type-button',
        displayElementName: mockSeriesContent.bodyTypes[0].name
      });
      expect(event.car).toEqual({
        modelRangeName: '718',
        modelName: '718 cayman'
      });
    });
    it('should send NAVIGATION_CLICK data event after all series button is clicked', () => {
      var _a, _b, _c;
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="car-body-types-drawer-further-links-button"]'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.MODEL_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockSeriesContent.all.id,
        clickElementName: mockSeriesContent.all.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: mockSeriesContent.all.link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level3-mainmenu.911',
        displayElementType: 'level3_body-type-button',
        displayElementName: mockSeriesContent.all.text
      });
    });
  });
  describe('skeleton', () => {
    it('should render skeleton when images are not loaded yet', async () => {
      var _a;
      page = await newSpecPage({
        components: [CarBodyTypeDrawer],
        template: () => h("phn-car-body-types-drawer", { series: mockSeriesContent, breakpoint: breakpoint.s })
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.skeleton-image')).not.toBeNull();
    });
    it('should release skeleton when images are loaded', async () => {
      var _a, _b, _c;
      page = await newSpecPage({
        components: [CarBodyTypeDrawer],
        template: () => h("phn-car-body-types-drawer", { series: mockSeriesContent, breakpoint: breakpoint.s })
      });
      const imgs = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('img');
      if (imgs === undefined) {
        return;
      }
      imgs.forEach(async (img) => {
        img.dispatchEvent(new Event('load'));
      });
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.skeleton-headline')).toBeNull();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.skeleton-image')).toBeNull();
    });
  });
});
//# sourceMappingURL=car-body-types-drawer.spec.js.map
