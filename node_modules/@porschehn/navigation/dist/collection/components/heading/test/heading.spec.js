import { newSpecPage } from "@stencil/core/testing";
import { h } from "@stencil/core";
import { Heading } from "../heading";
describe('heading', () => {
  let page;
  async function getPage({ text, subtext }) {
    return await newSpecPage({
      components: [Heading],
      template: () => h("phn-heading", { text: text, subtext: subtext })
    });
  }
  it('should render phn-heading tag', async () => {
    var _a;
    page = await getPage({ text: 'Title' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.tagName.toLowerCase()).toEqual('phn-heading');
  });
  it('should contain the heading based on the prop name', async () => {
    var _a, _b;
    page = await getPage({ text: 'Title' });
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-heading')) === null || _b === void 0 ? void 0 : _b.textContent).toEqual('Title');
  });
  it('should not contain subtext if subtext is not set', async () => {
    var _a;
    page = await getPage({ text: 'Title' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')).toBeFalsy();
  });
  it('should contain the subtext', async () => {
    var _a, _b;
    page = await getPage({ text: 'Title', subtext: 'Any subtext' });
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')) === null || _b === void 0 ? void 0 : _b.textContent).toEqual('Any subtext');
  });
  it('should not contain subtext if subtext is not set', async () => {
    var _a;
    page = await getPage({ text: 'Title', subtext: '' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')).toBeFalsy();
  });
});
//# sourceMappingURL=heading.spec.js.map
