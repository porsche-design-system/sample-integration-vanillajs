{"version":3,"file":"heading.spec.js","sourceRoot":"","sources":["../../../../../src/components/heading/test/heading.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAY,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAErC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;EACvB,IAAI,IAAc,CAAC;EAEnB,KAAK,UAAU,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAsC;IAC1E,OAAO,MAAM,WAAW,CAAC;MACvB,UAAU,EAAE,CAAC,OAAO,CAAC;MACrB,QAAQ,EAAE,GAAG,EAAE,CAAC,mBAAa,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,GAAI;KAC9D,CAAC,CAAC;EACL,CAAC;EAED,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;;IAC7C,IAAI,GAAG,MAAM,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACxC,MAAM,CAAC,MAAA,IAAI,CAAC,IAAI,0CAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;EAClE,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;;IACjE,IAAI,GAAG,MAAM,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACxC,MAAM,CAAC,MAAA,MAAA,IAAI,CAAC,IAAI,0CAAE,aAAa,CAAC,eAAe,CAAC,0CAAE,WAAW,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;EAClF,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;;IAChE,IAAI,GAAG,MAAM,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACxC,MAAM,CAAC,MAAA,IAAI,CAAC,IAAI,0CAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;EAC7D,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;;IAC1C,IAAI,GAAG,MAAM,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;IAChE,MAAM,CAAC,MAAA,MAAA,IAAI,CAAC,IAAI,0CAAE,aAAa,CAAC,YAAY,CAAC,0CAAE,WAAW,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;EACrF,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;;IAChE,IAAI,GAAG,MAAM,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;IACrD,MAAM,CAAC,MAAA,IAAI,CAAC,IAAI,0CAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;EAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage, SpecPage } from '@stencil/core/testing';\nimport { h } from '@stencil/core';\nimport { Heading } from '../heading';\n\ndescribe('heading', () => {\n  let page: SpecPage;\n\n  async function getPage({ text, subtext }: { text: string; subtext?: string }): Promise<SpecPage> {\n    return await newSpecPage({\n      components: [Heading],\n      template: () => <phn-heading text={text} subtext={subtext} />\n    });\n  }\n\n  it('should render phn-heading tag', async () => {\n    page = await getPage({ text: 'Title' });\n    expect(page.root?.tagName.toLowerCase()).toEqual('phn-heading');\n  });\n\n  it('should contain the heading based on the prop name', async () => {\n    page = await getPage({ text: 'Title' });\n    expect(page.root?.querySelector('phn-p-heading')?.textContent).toEqual('Title');\n  });\n\n  it('should not contain subtext if subtext is not set', async () => {\n    page = await getPage({ text: 'Title' });\n    expect(page.root?.querySelector('phn-p-text')).toBeFalsy();\n  });\n\n  it('should contain the subtext', async () => {\n    page = await getPage({ text: 'Title', subtext: 'Any subtext' });\n    expect(page.root?.querySelector('phn-p-text')?.textContent).toEqual('Any subtext');\n  });\n\n  it('should not contain subtext if subtext is not set', async () => {\n    page = await getPage({ text: 'Title', subtext: '' });\n    expect(page.root?.querySelector('phn-p-text')).toBeFalsy();\n  });\n});\n"]}