import animationManager, { makeSequence } from "../../services/animations/animation-manager";
import { AnimationDurations, AnimationSequences } from "../../utility/constants";
const resetToFarRight = (el) => {
  el.style.left = '';
  el.style.right = '150%';
};
const mainDrawerHTMLSelector = '#main-drawer > div:first-child';
export const registerOpenDoubleDrawerSequence = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-double-drawer',
        animation: {
          name: 'slideInFromLeft',
          duration: AnimationDurations.drawerOpen,
          from: -1000
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeInBackdrop',
          duration: AnimationDurations.backdrop,
          to: 0.6
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_DOUBLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierStart' }));
};
export const registerCloseDoubleDrawerSequence = ({ onBackdropFadeOutEnd, onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        elementSelector: 'phn-double-drawer',
        onStart: onAnimationStarts,
        animation: {
          name: 'slideOutToLeft',
          duration: AnimationDurations.drawer,
          to: -1000
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          name: 'fadeOutBackdrop',
          duration: AnimationDurations.backdrop,
          from: 0.6
        },
        onEnd: () => {
          onBackdropFadeOutEnd();
          onAnimationEnds();
        }
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_DOUBLE_DRAWER, makeSequence(sequence, { timingFunction: 'cubicBezierEnd' }));
};
export const registerTransitionSequence = ({ onGrowHighlightEnd, onSlideMainDrawerOutEnd }, direction = 'normal') => {
  animationManager.register(`transitionSameLevelDoubleDrawer${direction === 'reverse' ? 'Reverse' : ''}`, makeSequence([
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'shrinkElement', duration: AnimationDurations.highlight }
      }
    ],
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: direction === 'reverse' ? 'slideOutToRightRelative' : 'slideOutToLeftRelative',
          to: -150,
          cleanUpAfterAnimation: resetToFarRight,
          duration: AnimationDurations.drawerContent
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: direction === 'reverse' ? 'slideInFromLeftRelative' : 'slideInFromRightRelative',
          from: -150,
          duration: AnimationDurations.drawerContent
        }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'growElement', duration: AnimationDurations.highlight },
        onEnd: onGrowHighlightEnd
      }
    ]
  ], { timingFunction: 'easeInOutQuad' }));
};
export const registerForwardToNextMenuSequence = ({ onSlideMainDrawerOutEnd, onGrowHighlightEnd }) => {
  animationManager.register('transitionNextLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'shrinkElement', duration: AnimationDurations.highlight }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          name: 'slideOutToLeftRelative',
          to: -150,
          cleanUpAfterAnimation: resetToFarRight,
          duration: AnimationDurations.drawerContent
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: 'slideOutToLeftRelative',
          to: -150,
          cleanUpAfterAnimation: resetToFarRight,
          duration: AnimationDurations.drawerContent
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          name: 'slideInFromRightRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: 'slideInFromRightRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'growElement', duration: AnimationDurations.highlight },
        onEnd: onGrowHighlightEnd
      }
    ]
  ], { timingFunction: 'easeInOutQuad' }));
};
export const registerBackToPreviousMenuSequence = ({ onGrowHighlightEnd, onSlideMainDrawerOutEnd }) => {
  animationManager.register('transitionPreviousLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'shrinkElement', duration: AnimationDurations.highlight }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: { name: 'slideOutToRightRelative', to: -150, duration: AnimationDurations.drawerContent }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: { name: 'slideOutToRightRelative', to: -150, duration: AnimationDurations.drawerContent },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          name: 'slideInFromLeftRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          name: 'slideInFromLeftRelative',
          from: -150,
          cleanUpAfterAnimation: true,
          duration: AnimationDurations.drawerContent
        }
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div > phn-side-drawer > nav > .item-highlight',
        animation: { name: 'growElement', duration: AnimationDurations.highlight },
        onEnd: onGrowHighlightEnd
      }
    ]
  ], { timingFunction: 'easeInOutQuad' }));
};
export const isPlayingDoubleDrawerAnimation = () => {
  const doubleDrawerAnimationSequences = [
    AnimationSequences.OPEN_DOUBLE_DRAWER,
    AnimationSequences.CLOSE_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_NEXT_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_PREVIOUS_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER_REVERSE
  ];
  return doubleDrawerAnimationSequences.some((sequence) => {
    try {
      return animationManager.isPlaying(sequence);
    }
    catch (_a) {
      return false;
    }
  });
};
//# sourceMappingURL=double-drawer-animation-sequences.js.map
