import { newSpecPage } from "@stencil/core/testing";
import { h } from "@stencil/core";
import { MyPorscheIconButton } from "../my-porsche-icon-button";
import { navStateStore } from "../../../state/nav-state-store";
import { getHTMLElement } from "../../../utility/helper";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { RoutingKeys } from "../../../entities/routing-key";
import * as el from "../../../test/element-helpers";
describe('my-porsche-icon-button', () => {
  async function getPage() {
    return await newSpecPage({
      components: [MyPorscheIconButton],
      template: () => h("phn-my-porsche-icon-button", { mode: "navbar", theme: "light" })
    });
  }
  it('should not render an unread message indicator', async () => {
    const page = await getPage();
    navStateStore.state.unreadMessagesCount = 0;
    await page.waitForChanges();
    expect(page.root).toMatchInlineSnapshot(`
      <phn-my-porsche-icon-button>
        <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
      </phn-my-porsche-icon-button>
    `);
  });
  it('should render an unread message indicator', async () => {
    const page = await getPage();
    navStateStore.state.unreadMessagesCount = 22;
    await page.waitForChanges();
    expect(page.root).toMatchInlineSnapshot(`
      <phn-my-porsche-icon-button>
        <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
        <span class="light myporsche-unread-messages-indicator"></span>
      </phn-my-porsche-icon-button>
    `);
  });
  describe('user is logged out', () => {
    it('display default user icon', async () => {
      var _a;
      const page = await getPage();
      const myPorscheButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="myporsche-button"]'));
      expect(myPorscheButton === null || myPorscheButton === void 0 ? void 0 : myPorscheButton.getAttribute('icon-source')).toBeNull();
      expect(page.rootInstance.isMyPorscheHoveredOn).toBe(false);
    });
    it('display red user icon when hovering over button', async () => {
      var _a;
      const page = await getPage();
      const myPorscheButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="myporsche-button"]'));
      el.mouseEnter(myPorscheButton);
      await page.waitForChanges();
      expect(page.rootInstance.isMyPorscheHoveredOn).toBe(true);
      expect(myPorscheButton === null || myPorscheButton === void 0 ? void 0 : myPorscheButton.getAttribute('icon-source')).toBeNull();
      el.mouseLeave(myPorscheButton);
      await page.waitForChanges();
      expect(page.rootInstance.isMyPorscheHoveredOn).toBe(false);
      expect(myPorscheButton === null || myPorscheButton === void 0 ? void 0 : myPorscheButton.getAttribute('icon-source')).toBeNull();
    });
  });
  describe('user is logged in', () => {
    beforeEach(async () => {
      navStateStore.state.loggedInState = 'Mirinda Doe';
    });
    it('display filled version of user icon', async () => {
      var _a;
      const page = await getPage();
      const myPorscheButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="myporsche-button"]'));
      expect(myPorscheButton === null || myPorscheButton === void 0 ? void 0 : myPorscheButton.getAttribute('icon')).toEqual('user-filled');
      expect(page.rootInstance.isMyPorscheHoveredOn).toBe(false);
    });
  });
  describe('data analytics', () => {
    it('should send event after clicking on myporsche button', async () => {
      var _a, _b;
      const page = await getPage();
      const myPorscheButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="myporsche-button"]'));
      myPorscheButton === null || myPorscheButton === void 0 ? void 0 : myPorscheButton.click();
      await page.waitForChanges();
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.CONTEXTUAL_BUTTON_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: RoutingKeys.MY_PORSCHE,
        clickElementName: 'open the my porsche menu',
        clickElementType: ClickElementTypes.Button
      });
    });
  });
});
//# sourceMappingURL=my-porsche-icon-button.spec.js.map
