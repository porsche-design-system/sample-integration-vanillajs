import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { Environments } from "../../../entities/environment";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import * as el from "../../../test/element-helpers";
import { mockCountryRecommenderContent, sixDigitLocale } from "../../../test/test-data";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { getConfig, getHTMLElement } from "../../../utility/helper";
import { CountryRecommender } from "../country-recommender";
describe('Country Recommender', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [CountryRecommender],
      template: () => h("phn-country-recommender", { locale: 'de-CH', content: mockCountryRecommenderContent })
    });
  });
  it('should render country recommender correctly', () => {
    expect(page.root).toMatchInlineSnapshot(`
      <phn-country-recommender class="showing">
        <div class="country-recommender-container">
          <div class="country-recommender">
            <div class="country-recommender-icons-tray">
              <div class="left-icons">
                <phn-p-text class="statement" size="inherit" theme="dark">
                  You are currently seeing contents for:
                </phn-p-text>
                <div class="selector">
                  <div class="phn-flex-row phn-flex-wrap">
                    <div class="flag-region">
                      <phn-p-icon aria-hidden="true" class="flag" color="inherit" size="inherit" source="http://footer/assets/flags/CH.svg"></phn-p-icon>
                      <phn-p-text class="language" size="inherit" theme="dark">
                        Great Britain / English
                      </phn-p-text>
                    </div>
                    <phn-p-link-pure class="change" size="inherit" theme="dark">
                      <a href="http://select/countries">
                        Change
                      </a>
                    </phn-p-link-pure>
                  </div>
                </div>
              </div>
              <div class="right-icons">
                <phn-p-button-pure class="close-button" hide-label="true" icon="close" theme="dark">
                  Close dialog
                </phn-p-button-pure>
              </div>
            </div>
          </div>
        </div>
      </phn-country-recommender>
    `);
  });
  it('should render country recommender correctly in oneUI', async () => {
    page = await newSpecPage({
      components: [CountryRecommender],
      template: () => h("phn-country-recommender", { locale: 'de-CH', content: mockCountryRecommenderContent })
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-country-recommender class="showing">
        <div class="country-recommender-container">
          <div class="country-recommender">
            <div class="country-recommender-icons-tray">
              <div class="left-icons">
                <phn-p-text class="statement" size="inherit" theme="dark">
                  You are currently seeing contents for:
                </phn-p-text>
                <div class="selector">
                  <div class="phn-flex-row phn-flex-wrap">
                    <div class="flag-region">
                      <phn-p-icon aria-hidden="true" class="flag" color="inherit" size="inherit" source="http://footer/assets/flags/CH.svg"></phn-p-icon>
                      <phn-p-text class="language" size="inherit" theme="dark">
                        Great Britain / English
                      </phn-p-text>
                    </div>
                    <phn-p-link-pure class="change" size="inherit" theme="dark">
                      <a href="http://select/countries">
                        Change
                      </a>
                    </phn-p-link-pure>
                  </div>
                </div>
              </div>
              <div class="right-icons">
                <phn-p-button-pure class="close-button" hide-label="true" icon="close" theme="dark">
                  Close dialog
                </phn-p-button-pure>
              </div>
            </div>
          </div>
        </div>
      </phn-country-recommender>
    `);
  });
  it('when close button is clicked and close animation completes, close banner event is emitted', async () => {
    page.rootInstance.bannerClosed = { emit: jest.fn() };
    if (page.root === undefined) {
      throw new Error('page root not defined');
    }
    el.endAnimation(page.root, 'slideDown');
    const button = getHTMLElement(page.root.querySelector('phn-p-button-pure'));
    button === null || button === void 0 ? void 0 : button.click();
    el.endAnimation(page.root, 'slideUp');
    expect(page.rootInstance.bannerClosed.emit).toHaveBeenCalledTimes(1);
  });
  it('should send data layer event when change button is clicked', async () => {
    var _a, _b;
    const { text, id } = mockCountryRecommenderContent.change;
    const link = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.change'));
    link === null || link === void 0 ? void 0 : link.click();
    await page.waitForChanges();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[1];
    expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.COUNTRY_RECOMMENDER_CHANGE);
    expect(event.componentClick).toEqual({
      clickElementId: id,
      clickElementName: text,
      clickElementType: ClickElementTypes.Link,
      targetUrl: getConfig(Environments.TEST).COUNTRY_SELECTOR_URL
    });
  });
  it('should send data layer event when close button is clicked', async () => {
    var _a, _b;
    const button = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.close-button'));
    button === null || button === void 0 ? void 0 : button.click();
    await page.waitForChanges();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[1];
    expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.COUNTRY_RECOMMENDER_CLOSE);
    expect(event.componentClick).toEqual({
      clickElementId: 'mainmenu.banner.close',
      clickElementName: 'close',
      clickElementType: ClickElementTypes.Button
    });
  });
  it('should send data layer event when the banner loads', async () => {
    var _a;
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.COUNTRY_RECOMMENDER_LOAD);
    expect(event.componentClick).toEqual({
      clickElementId: 'mainmenu.banner',
      clickElementName: 'Country Recommender',
      clickElementType: ClickElementTypes.Link
    });
  });
  it('should retrieve the correct flag for 4 digit locales', () => {
    expect(page.rootInstance.flagURL).toContain('CH.svg');
  });
  it('should retrieve the correct flag for 6 digit locales', async () => {
    const page = await newSpecPage({
      components: [CountryRecommender],
      template: () => h("phn-country-recommender", { locale: sixDigitLocale, content: mockCountryRecommenderContent })
    });
    const flag = sixDigitLocale.split('-')[1];
    expect(page.rootInstance.flagURL).toContain(`${flag}.svg`);
  });
  it('should update the flag when locale changes', async () => {
    var _a;
    (_a = page.root) === null || _a === void 0 ? void 0 : _a.setAttribute('locale', sixDigitLocale);
    await page.waitForChanges();
    const flag = sixDigitLocale.split('-')[1];
    expect(page.rootInstance.flagURL).toContain(`${flag}.svg`);
  });
  it('should unset flagURL when locale is not a string', async () => {
    var _a;
    (_a = page.root) === null || _a === void 0 ? void 0 : _a.setAttribute('locale', '');
    await page.waitForChanges();
    expect(page.rootInstance.flagURL).toBe('');
  });
});
//# sourceMappingURL=country-recommender.spec.js.map
