{"version":3,"file":"country-recommender.spec.js","sourceRoot":"","sources":["../../../../../src/components/country-recommender/test/country-recommender.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage, SpecPage } from '@stencil/core/testing';\nimport { Environments } from '../../../entities/environment';\nimport globalDataLayerService from '../../../services/analytics/global-data-layer-service';\nimport * as el from '../../../test/element-helpers';\nimport { mockCountryRecommenderContent, sixDigitLocale } from '../../../test/test-data';\nimport { ClickElementTypes, EventActions } from '../../../utility/constants';\nimport { getConfig, getHTMLElement } from '../../../utility/helper';\nimport { CountryRecommender } from '../country-recommender';\n\ndescribe('Country Recommender', () => {\n  let page: SpecPage;\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      components: [CountryRecommender],\n      template: () => <phn-country-recommender locale={'de-CH'} content={mockCountryRecommenderContent} />\n    });\n  });\n\n  it('should render country recommender correctly', () => {\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-country-recommender class=\"showing\">\n        <div class=\"country-recommender-container\">\n          <div class=\"country-recommender\">\n            <div class=\"country-recommender-icons-tray\">\n              <div class=\"left-icons\">\n                <phn-p-text class=\"statement\" size=\"inherit\" theme=\"dark\">\n                  You are currently seeing contents for:\n                </phn-p-text>\n                <div class=\"selector\">\n                  <div class=\"phn-flex-row phn-flex-wrap\">\n                    <div class=\"flag-region\">\n                      <phn-p-icon aria-hidden=\"true\" class=\"flag\" color=\"inherit\" size=\"inherit\" source=\"http://footer/assets/flags/CH.svg\"></phn-p-icon>\n                      <phn-p-text class=\"language\" size=\"inherit\" theme=\"dark\">\n                        Great Britain / English\n                      </phn-p-text>\n                    </div>\n                    <phn-p-link-pure class=\"change\" size=\"inherit\" theme=\"dark\">\n                      <a href=\"http://select/countries\">\n                        Change\n                      </a>\n                    </phn-p-link-pure>\n                  </div>\n                </div>\n              </div>\n              <div class=\"right-icons\">\n                <phn-p-button-pure class=\"close-button\" hide-label=\"true\" icon=\"close\" theme=\"dark\">\n                  Close dialog\n                </phn-p-button-pure>\n              </div>\n            </div>\n          </div>\n        </div>\n      </phn-country-recommender>\n    `);\n  });\n\n  it('should render country recommender correctly in oneUI', async () => {\n    page = await newSpecPage({\n      components: [CountryRecommender],\n      template: () => <phn-country-recommender locale={'de-CH'} content={mockCountryRecommenderContent} />\n    });\n\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-country-recommender class=\"showing\">\n        <div class=\"country-recommender-container\">\n          <div class=\"country-recommender\">\n            <div class=\"country-recommender-icons-tray\">\n              <div class=\"left-icons\">\n                <phn-p-text class=\"statement\" size=\"inherit\" theme=\"dark\">\n                  You are currently seeing contents for:\n                </phn-p-text>\n                <div class=\"selector\">\n                  <div class=\"phn-flex-row phn-flex-wrap\">\n                    <div class=\"flag-region\">\n                      <phn-p-icon aria-hidden=\"true\" class=\"flag\" color=\"inherit\" size=\"inherit\" source=\"http://footer/assets/flags/CH.svg\"></phn-p-icon>\n                      <phn-p-text class=\"language\" size=\"inherit\" theme=\"dark\">\n                        Great Britain / English\n                      </phn-p-text>\n                    </div>\n                    <phn-p-link-pure class=\"change\" size=\"inherit\" theme=\"dark\">\n                      <a href=\"http://select/countries\">\n                        Change\n                      </a>\n                    </phn-p-link-pure>\n                  </div>\n                </div>\n              </div>\n              <div class=\"right-icons\">\n                <phn-p-button-pure class=\"close-button\" hide-label=\"true\" icon=\"close\" theme=\"dark\">\n                  Close dialog\n                </phn-p-button-pure>\n              </div>\n            </div>\n          </div>\n        </div>\n      </phn-country-recommender>\n    `);\n  });\n\n  it('when close button is clicked and close animation completes, close banner event is emitted', async () => {\n    page.rootInstance.bannerClosed = { emit: jest.fn() };\n\n    if (page.root === undefined) {\n      throw new Error('page root not defined');\n    }\n\n    el.endAnimation(page.root, 'slideDown');\n\n    const button = getHTMLElement(page.root.querySelector('phn-p-button-pure'));\n    button?.click();\n\n    el.endAnimation(page.root, 'slideUp');\n\n    expect(page.rootInstance.bannerClosed.emit).toHaveBeenCalledTimes(1);\n  });\n\n  it('should send data layer event when change button is clicked', async () => {\n    const pushEventSpy = jest.spyOn(globalDataLayerService, 'pushDataLayerEvent');\n    page = await newSpecPage({\n      components: [CountryRecommender],\n      template: () => <phn-country-recommender locale={'de-CH'} content={mockCountryRecommenderContent} />\n    });\n\n    const link = getHTMLElement(page.root?.querySelector('.change'));\n    link?.click();\n    await page.waitForChanges();\n\n    expect(pushEventSpy).toHaveBeenCalled();\n  });\n\n  it('should call data layer service', async () => {\n    const { text, id } = mockCountryRecommenderContent.change;\n\n    const link = getHTMLElement(page.root?.querySelector('.change'));\n    link?.click();\n    await page.waitForChanges();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[1];\n\n    expect(event.context?.eventAction).toEqual(EventActions.COUNTRY_RECOMMENDER_CHANGE);\n    expect(event.componentClick).toEqual({\n      clickElementId: id,\n      clickElementName: text,\n      clickElementType: ClickElementTypes.Link,\n      targetUrl: getConfig(Environments.TEST).COUNTRY_SELECTOR_URL\n    });\n  });\n\n  it('should send data layer event when close button is clicked', async () => {\n    const button = getHTMLElement(page.root?.querySelector('.close-button'));\n    button?.click();\n    await page.waitForChanges();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[1];\n\n    expect(event.context?.eventAction).toEqual(EventActions.COUNTRY_RECOMMENDER_CLOSE);\n    expect(event.componentClick).toEqual({\n      clickElementId: 'mainmenu.banner.close',\n      clickElementName: 'close',\n      clickElementType: ClickElementTypes.Button\n    });\n  });\n\n  it('should send data layer event when the banner loads', async () => {\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[0];\n\n    expect(event.context?.eventAction).toEqual(EventActions.COUNTRY_RECOMMENDER_LOAD);\n    expect(event.componentClick).toEqual({\n      clickElementId: 'mainmenu.banner',\n      clickElementName: 'Country Recommender',\n      clickElementType: ClickElementTypes.Link\n    });\n  });\n\n  it('should retrieve the correct flag for 4 digit locales', () => {\n    expect(page.rootInstance.flagURL).toContain('CH.svg');\n  });\n\n  it('should retrieve the correct flag for 6 digit locales', async () => {\n    const page = await newSpecPage({\n      components: [CountryRecommender],\n      template: () => <phn-country-recommender locale={sixDigitLocale} content={mockCountryRecommenderContent} />\n    });\n\n    const flag = sixDigitLocale.split('-')[1];\n    expect(page.rootInstance.flagURL).toContain(`${flag}.svg`);\n  });\n\n  it('should update the flag when locale changes', async () => {\n    page.root?.setAttribute('locale', sixDigitLocale);\n\n    await page.waitForChanges();\n\n    const flag = sixDigitLocale.split('-')[1];\n    expect(page.rootInstance.flagURL).toContain(`${flag}.svg`);\n  });\n\n  it('should unset flagURL when locale is not a string', async () => {\n    page.root?.setAttribute('locale', '');\n\n    await page.waitForChanges();\n\n    expect(page.rootInstance.flagURL).toBe('');\n  });\n});\n"]}