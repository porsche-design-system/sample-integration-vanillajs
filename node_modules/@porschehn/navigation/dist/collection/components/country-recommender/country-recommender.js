import { h, Host } from "@stencil/core";
import { getFlagURL } from "../../services/content-service";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import { navStateStore } from "../../state/nav-state-store";
import { ClickElementTypes, EventActions } from "../../utility/constants";
import { getConfig, getHTMLElement, isString } from "../../utility/helper";
export class CountryRecommender {
  constructor() {
    this.locale = undefined;
    this.content = undefined;
    this.flagURL = '';
  }
  async localeWatcher() {
    await this.setFlagURL();
  }
  async setFlagURL() {
    const footerAssetsUrl = getConfig(navStateStore.state.env).FOOTER_ASSETS_URL;
    this.flagURL = await getFlagURL(footerAssetsUrl, this.locale);
  }
  closeCountryRecommender() {
    globalDataLayerService.pushDataLayerEvent(EventActions.COUNTRY_RECOMMENDER_CLOSE, {
      componentClick: {
        clickElementId: 'mainmenu.banner.close',
        clickElementName: 'close',
        clickElementType: ClickElementTypes.Button
      }
    });
    this.el.classList.remove('showing');
    this.el.classList.add('hiding');
  }
  componentWillLoad() {
    this.setFlagURL();
  }
  componentDidLoad() {
    globalDataLayerService.pushDataLayerEvent(EventActions.COUNTRY_RECOMMENDER_LOAD, {
      componentClick: {
        clickElementId: 'mainmenu.banner',
        clickElementName: 'Country Recommender',
        clickElementType: ClickElementTypes.Link
      }
    });
  }
  handleAnimationEnd(e) {
    var _a, _b;
    if (e.animationName === 'slideUp') {
      (_a = getHTMLElement(e.target)) === null || _a === void 0 ? void 0 : _a.classList.remove('hiding');
      this.bannerClosed.emit();
    }
    else if (e.animationName === 'slideDown') {
      (_b = getHTMLElement(e.target)) === null || _b === void 0 ? void 0 : _b.classList.remove('showing');
    }
  }
  sendDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.COUNTRY_RECOMMENDER_CHANGE, {
      componentClick: {
        clickElementId: this.content.change.id,
        clickElementName: this.content.change.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: getConfig(navStateStore.state.env).COUNTRY_SELECTOR_URL
      }
    });
  }
  render() {
    const { statement, region, language, change } = this.content;
    return (h(Host, { class: "showing" }, h("div", { class: "country-recommender-container" }, h("div", { class: "country-recommender" }, h("div", { class: "country-recommender-icons-tray" }, h("div", { class: "left-icons" }, isString(statement) ? (h("phn-p-text", { theme: "dark", size: "inherit", class: "statement" }, statement)) : /* istanbul ignore next */
      null, h("div", { class: "selector" }, h("div", { class: "phn-flex-row phn-flex-wrap" }, h("div", { class: "flag-region" }, isString(this.flagURL) ? (h("phn-p-icon", { source: this.flagURL, class: "flag", "aria-hidden": "true", size: "inherit", color: "inherit" })) : /* istanbul ignore next */
      null, isString(region) && isString(language) ? (h("phn-p-text", { theme: "dark", class: "language", size: "inherit" }, region, " / ", language)) : /* istanbul ignore next */
      null), h("phn-p-link-pure", { theme: "dark", size: "inherit", class: "change", onClick: () => this.sendDataLayerEvent(), aria: { 'aria-label': 'Change Region or Language' } }, h("a", { href: getConfig(navStateStore.state.env).COUNTRY_SELECTOR_URL }, change.text))))), h("div", { class: "right-icons" }, h("phn-p-button-pure", { theme: "dark", icon: "close", onClick: () => this.closeCountryRecommender(), class: "close-button", "hide-label": "true" }, "Close dialog")))))));
  }
  static get is() { return "phn-country-recommender"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["country-recommender.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["country-recommender.css"]
    };
  }
  static get properties() {
    return {
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      },
      "content": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "TCountryRecommender",
          "resolved": "{ statement: string; region: string; language: string; change: TButton; }",
          "references": {
            "TCountryRecommender": {
              "location": "import",
              "path": "../../entities/content",
              "id": "src/entities/content.ts::TCountryRecommender"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get states() {
    return {
      "flagURL": {}
    };
  }
  static get events() {
    return [{
        "method": "bannerClosed",
        "name": "bannerClosed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "locale",
        "methodName": "localeWatcher"
      }];
  }
  static get listeners() {
    return [{
        "name": "animationend",
        "method": "handleAnimationEnd",
        "target": undefined,
        "capture": false,
        "passive": true
      }];
  }
}
//# sourceMappingURL=country-recommender.js.map
