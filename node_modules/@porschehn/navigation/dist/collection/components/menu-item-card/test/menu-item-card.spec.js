import { newSpecPage } from "@stencil/core/testing";
import { h } from "@stencil/core";
import { MenuItemCard } from "../menu-item-card";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { getHTMLElement } from "../../../utility/helper";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { mockPPNDealer } from "../../../test/test-data";
describe('menu-item-card', () => {
  const defaultProps = {
    link: 'http://example.com',
    analyticsId: 'analyticsId',
    subtext: 'Subtext',
    text: 'Title Text',
    iconLeft: 'user'
  };
  const getPage = async (props) => {
    return await newSpecPage({
      components: [MenuItemCard],
      template: () => h("phn-menu-item-card", Object.assign({ datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK }, props))
    });
  };
  it('Should render anchor if there is a link', async () => {
    var _a, _b;
    const page = await getPage(defaultProps);
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('a')) === null || _b === void 0 ? void 0 : _b.getAttribute('href')).toEqual('http://example.com');
  });
  it('Should render a button if there is no link', async () => {
    var _a;
    const page = await getPage(Object.assign(Object.assign({}, defaultProps), { link: '' }));
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('a')).toBeNull();
  });
  it('Should fill slots', async () => {
    var _a, _b;
    const page = await newSpecPage({
      components: [MenuItemCard],
      template: () => (h("phn-menu-item-card", Object.assign({}, defaultProps), h("h1", null, "Children")))
    });
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('h1')) === null || _b === void 0 ? void 0 : _b.innerText).toEqual('Children');
  });
  it('Should render subtitle ', async () => {
    var _a, _b;
    const page = await getPage(Object.assign({}, defaultProps));
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.subtext')) === null || _b === void 0 ? void 0 : _b.textContent).toEqual('Subtext');
  });
  it('Should not render subtitle ', async () => {
    var _a;
    const page = await getPage(Object.assign(Object.assign({}, defaultProps), { subtext: '' }));
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.subtext')).toBeNull();
  });
  it('Should render heading with title and icon', async () => {
    var _a, _b, _c, _d;
    const page = await getPage(Object.assign({}, defaultProps));
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.title-container > phn-p-heading')) === null || _b === void 0 ? void 0 : _b.textContent).toEqual('Title Text');
    expect((_d = (_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.title-container > phn-p-icon')) === null || _d === void 0 ? void 0 : _d.getAttribute('name')).toEqual('user');
  });
  it('Should render text instead of heading', async () => {
    var _a, _b, _c;
    const page = await getPage(Object.assign(Object.assign({}, defaultProps), { elementId: 'dealer/id' }));
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.title-container > phn-p-heading')).toBeNull();
    expect((_c = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.title-container > phn-p-text')) === null || _c === void 0 ? void 0 : _c.textContent).toEqual('Title Text');
  });
  it('Should render heading without icon if iconHeader is not provided', async () => {
    var _a;
    const page = await getPage(Object.assign(Object.assign({}, defaultProps), { iconLeft: '' }));
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.title-container > phn-p-icon')).toBeNull();
  });
  describe('data analytics', () => {
    it('should send default NAVIGATION_LINK_CLICK data event after link is clicked', async () => {
      var _a, _b, _c;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { link: '' }));
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('button'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'analyticsId',
        clickElementName: 'Title Text',
        clickElementType: 'button',
        targetElement: undefined
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level0',
        displayElementName: 'Title Text',
        displayElementType: 'level1_menu-item'
      });
    });
    it('should send NAVIGATION_LINK_CLICK data event after keyboard navigation with enter is used for link', async () => {
      var _a, _b;
      const page = await getPage(defaultProps);
      const keyboardEvent = new KeyboardEvent('keydown', {
        key: 'Enter'
      });
      (_a = page.root) === null || _a === void 0 ? void 0 : _a.dispatchEvent(keyboardEvent);
      await page.waitForChanges();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'analyticsId',
        clickElementName: 'Title Text',
        clickElementType: 'link',
        targetElement: undefined,
        targetUrl: 'http://example.com'
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level0',
        displayElementName: 'Title Text',
        displayElementType: 'level1_menu-item'
      });
    });
    it('should send NAVIGATION_LINK_CLICK data event after keyboard navigation with enter is used for button', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { link: '' }));
      const keyboardEvent = new KeyboardEvent('keydown', {
        key: 'Enter'
      });
      (_a = page.root) === null || _a === void 0 ? void 0 : _a.dispatchEvent(keyboardEvent);
      await page.waitForChanges();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'analyticsId',
        clickElementName: 'Title Text',
        clickElementType: 'button',
        targetElement: undefined
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level0',
        displayElementName: 'Title Text',
        displayElementType: 'level1_menu-item'
      });
    });
    it('should send META_FUNCTION_CLICK data event after any link is clicked', async () => {
      var _a, _b, _c;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { datalayerEventAction: EventActions.META_FUNCTION_CLICK }));
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('a'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.META_FUNCTION_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'analyticsId',
        clickElementName: 'Title Text',
        clickElementType: 'link',
        targetElement: undefined,
        targetUrl: 'http://example.com'
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level0',
        displayElementName: 'Title Text',
        displayElementType: 'level1_menu-item'
      });
    });
    it('should send DEALER_CONTACT_CLICK data event with custom data', async () => {
      var _a, _b, _c;
      const searchTerm = 'Fancy search term';
      const phoneLink = 'Call me baby';
      const elementId = 'mainmenu.finddealer.phone';
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { analyticsId: elementId, text: mockPPNDealer.contactDetails.phoneNumber, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, link: phoneLink, customDatalayerProperties: {
          partner: {
            companyId: mockPPNDealer.porschePartnerNo,
            companyName: mockPPNDealer.name
          },
          componentSearch: {
            searchTerm
          }
        } }));
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('a'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.DEALER_CONTACT_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: elementId,
        clickElementName: mockPPNDealer.contactDetails.phoneNumber,
        clickElementType: ClickElementTypes.Link,
        targetUrl: phoneLink
      });
      expect(event.partner).toEqual({
        companyId: mockPPNDealer.porschePartnerNo,
        companyName: mockPPNDealer.name
      });
      expect(event.componentSearch).toEqual({
        searchTerm
      });
    });
  });
});
//# sourceMappingURL=menu-item-card.spec.js.map
