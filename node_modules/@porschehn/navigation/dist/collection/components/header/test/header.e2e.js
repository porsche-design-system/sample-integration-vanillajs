import { newE2EPage } from "@stencil/core/testing";
describe('Header', () => {
  it('should render', async () => {
    const page = await newE2EPage();
    await page.setContent('<phn-header />');
    const element = await page.find('phn-header');
    await page.waitForChanges();
    expect(element).toHaveClass('hydrated');
  });
  describe('Drawer overlay behaviour', () => {
    it('should set the body to be unscrollable when the menu overlay is open and set it back to initial value when closed', async () => {
      const page = await newE2EPage();
      await page.setContent('<body style="overflow:auto"><phn-header /></body>');
      const body = await page.find('body');
      // menu open
      const burgerButton = await page.find('phn-header >>> phn-burger-button');
      await burgerButton.click();
      const bodyStyle = await body.getComputedStyle();
      expect(bodyStyle.overflow).toEqual('hidden');
      expect(bodyStyle.paddingRight).toEqual('15px');
      // menu close
      const closeButton = await page.find('phn-header >>> .close-button');
      await closeButton.click();
      const bodyStyleChanged = await body.getComputedStyle();
      expect(bodyStyleChanged.overflow).toEqual('auto');
      expect(bodyStyleChanged.paddingRight).toEqual('0px');
    });
    it('should set the body to be unscrollable with calculated padding when the menu overlay is open and set it back to initial value when closed', async () => {
      const page = await newE2EPage();
      await page.setContent('<body style="overflow:auto; padding-right:10px"><phn-header /></body>');
      const body = await page.find('body');
      // menu open
      const burgerButton = await page.find('phn-header >>> phn-burger-button');
      await burgerButton.click();
      const bodyStyle = await body.getComputedStyle();
      expect(bodyStyle.overflow).toEqual('hidden');
      expect(bodyStyle.paddingRight).toEqual('25px');
      // menu close
      const closeButton = await page.find('phn-header >>> .close-button');
      await closeButton.click();
      const bodyStyleChanged = await body.getComputedStyle();
      expect(bodyStyleChanged.overflow).toEqual('auto');
      expect(bodyStyleChanged.paddingRight).toEqual('10px');
    });
  });
});
//# sourceMappingURL=header.e2e.js.map
