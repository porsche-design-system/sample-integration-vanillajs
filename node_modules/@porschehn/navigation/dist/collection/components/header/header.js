import { h } from "@stencil/core";
import { getEnvironment } from "../../entities/environment";
import { splitLocale } from "../../entities/locale";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import * as contentService from "../../services/content-service";
import { getPPNDealer, getPPNDealerByRegion } from "../../services/dealer-service";
import featureToggles from "../../services/feature-toggles";
import logger from "../../services/logger";
import { initAuthIframe, initializeUserData } from "../../services/user-service";
import windowService from "../../services/window-service";
import { dealerSearchResultsStore } from "../../state/dealer-search-results-store";
import { navContentStore } from "../../state/nav-content-store";
import { navStateStore } from "../../state/nav-state-store";
import { shopStateStore } from "../../state/shop-state-store";
import { routerStore } from "../../state/router-store";
import { DEFAULT_LOCALE, EventActions, IFRAME_ID, NavigationMode, NavigationTheme, VERSION } from "../../utility/constants";
import { buildRoutingKeyHistoryFromContentPath, getConfig, getRootMenuItem, getValidContentPathSegments, isString, sanitizeApp } from "../../utility/helper";
import { isShopAvailable, loadsShopPropsOnStore } from "../../utility/helpers/shop-helper";
import { Timeout } from "../../utility/timeout";
import { Application } from "../../utility/constants/app";
import { showDealerSearchDropdown } from "../../utility/helpers/dealer-search-helper";
import abTestingService from "../../services/ab-testing/ab-testing-constructor-service";
import { initMonitoringSystem } from "../../services/monitoring";
export class Header {
  constructor() {
    this.eventPreventedTimeout = new Timeout(0);
    this.checkedMarketingConsent = false;
    this.loadedToggles = false;
    this.locale = DEFAULT_LOCALE;
    this.env = '';
    this.clientId = '';
    this.pageName = '';
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.limitedWidth = 'true';
    this.app = Application.default;
    this.initialRoutingPath = '';
    this.displayLogoOnly = false;
    this.numberOfShoppingItems = 0;
    this.wishlistItemsNumber = 0;
    this.shopInformation = '{ "wishlistItemsNumber": 0, "numberOfShoppingItems": 0, "subTotal": "0" }';
    this.loadingContent = false;
    this.receivedContent = false;
    this.breakpoint = windowService.getBreakpoint();
  }
  async localeWatchHandler() {
    navStateStore.state.locale = this.locale;
    await this.initNavContentStore();
    globalDataLayerService.setLocale(this.locale);
    logger.init(this.breakpoint, this.locale);
  }
  pageNameWatchHandler() {
    globalDataLayerService.setPageName(this.pageName);
  }
  async newEnvReceived() {
    await this.initEnvironment();
    await this.initNavContentStore();
    initAuthIframe(getConfig(navStateStore.state.env));
  }
  async appWatcher(newValue) {
    navStateStore.state.app = sanitizeApp(newValue);
  }
  breakpointWatcher() {
    logger.init(this.breakpoint, this.locale);
  }
  watchShopVariable(information, _, propName) {
    const shopInformation = JSON.parse(information);
    shopStateStore.set(propName, shopInformation);
  }
  initialRoutingPathWatcher() {
    this.handleInitialRoutingKeyPath();
  }
  resizeHandler() {
    this.breakpoint = windowService.getBreakpoint();
  }
  async newAuthMessageReceived(event) {
    const config = getConfig(navStateStore.state.env);
    if (new URL(config.LOGIN_REDIRECT_URL).origin !== new URL(event.origin).origin) {
      return;
    }
    if (isString(event.data.token)) {
      try {
        windowService.removeElement(IFRAME_ID);
        await initializeUserData(event.data.token, this.locale);
      }
      catch (err) {
        logger.error('INIT_USER_DATA', err);
      }
    }
  }
  async handleLogin() {
    const phnLogin = this.phnLogin.emit();
    this.eventPreventedTimeout.set(async () => {
      var _a;
      if (phnLogin.defaultPrevented) {
        return;
      }
      const loginLink = (_a = navContentStore.state.myPorsche) === null || _a === void 0 ? void 0 : _a.link;
      if (isString(loginLink)) {
        windowService.redirectToUrl(loginLink);
        return;
      }
    });
  }
  async handleLogout() {
    const config = getConfig(navStateStore.state.env);
    const phnLogout = this.phnLogout.emit();
    this.eventPreventedTimeout.set(async () => {
      if (phnLogout.defaultPrevented) {
        return;
      }
      // TODO which logout url to use? myporsche? auth0?
      windowService.redirectToUrl(`${config.IDENTITY_PROVIDER_URL}/v2/logout`);
      return;
    });
  }
  handleUserCentricsReady() {
    this.checkMarketingConsent();
  }
  handleUserCentricsInitalization() {
    this.checkMarketingConsent();
  }
  navigationLoadedHandler({ detail: navigationLoaded }) {
    windowService.navigationLoaded = navigationLoaded;
    if (navigationLoaded) {
      this.navigationDidLoad.emit();
    }
  }
  checkMarketingConsent() {
    if (!this.checkedMarketingConsent) {
      navStateStore.state.userConsent = false;
      this.checkedMarketingConsent = windowService.maybeCheckMarketingConsent(() => {
        navStateStore.state.userConsent = true;
      });
    }
  }
  async initEnvironment() {
    navStateStore.state.env = getEnvironment(this.env);
    navStateStore.state.app = sanitizeApp(this.app);
    navStateStore.state.locale = this.locale;
    globalDataLayerService.setEnvironment(navStateStore.state.env);
    const config = getConfig(navStateStore.state.env);
    initAuthIframe(config);
    this.loadedToggles = false;
    await featureToggles.setFeatures(navStateStore.state.env);
    this.loadedToggles = true;
    initMonitoringSystem();
    logger.init(this.breakpoint, this.locale);
    const shopInformation = JSON.parse(this.shopInformation);
    loadsShopPropsOnStore({
      shopInformation: shopInformation
    });
    await abTestingService().init();
  }
  async initNavContentStore() {
    const previouslyReceivedContent = this.receivedContent;
    this.receivedContent = false;
    this.loadingContent = true;
    try {
      const fetchedLocale = this.locale;
      const fetchedEnv = navStateStore.state.env;
      const contentForLocale = await contentService.fetchContent(fetchedLocale, this.app);
      // This is to make sure that the response is valid for the current locale and environment
      // and wasn't made with another locale or enironment
      if (this.locale === fetchedLocale && navStateStore.state.env === fetchedEnv) {
        Object.assign(navContentStore.state, contentForLocale);
        this.receivedContent = true;
      }
    }
    catch (err) {
      logger.error('FETCH_CONTENT', err);
      if (previouslyReceivedContent) {
        this.receivedContent = true;
      }
    }
    this.loadingContent = false;
  }
  async setDealerSearchResultsStore() {
    const { savedDealerCookie, ppnDealers } = dealerSearchResultsStore.state;
    if (savedDealerCookie === null || ppnDealers[savedDealerCookie.id] !== undefined) {
      return;
    }
    const coordinates = { latitude: savedDealerCookie.latitude, longitude: savedDealerCookie.longitude };
    const { env } = navStateStore.state;
    try {
      const { country } = splitLocale(this.locale);
      const { id: dealerId } = savedDealerCookie;
      const ppnDealer = showDealerSearchDropdown(country)
        ? await getPPNDealerByRegion(dealerId, country)
        : await getPPNDealer(env, getConfig(env).DEALER_API_URL, dealerId, coordinates, country);
      dealerSearchResultsStore.state.ppnDealers[savedDealerCookie.id] = ppnDealer;
    }
    catch (err) {
      logger.error('GET_DEALER', err);
      dealerSearchResultsStore.state.savedDealerCookie = null;
    }
  }
  handleInitialRoutingKeyPath() {
    const [topLevelRoutingKey, ...segments] = this.initialRoutingPath.split('>');
    const rootContentItem = getRootMenuItem(navContentStore.state, topLevelRoutingKey);
    if (rootContentItem === null) {
      return;
    }
    const validSegments = getValidContentPathSegments(rootContentItem, segments);
    const routingKeyHistory = buildRoutingKeyHistoryFromContentPath([topLevelRoutingKey, ...validSegments]);
    routerStore.state.initialRoutingKeyHistory = routingKeyHistory;
    routerStore.state.initialRoutingKeyPointer = routingKeyHistory.length - 1;
  }
  componentWillLoad() {
    globalDataLayerService.setDefaultProperties(this.locale, this.pageName);
    window.ncs = navContentStore;
    this.checkMarketingConsent();
    this.initEnvironment()
      .then(() => Promise.all([this.initNavContentStore(), this.setDealerSearchResultsStore()]))
      .then(() => Promise.all([abTestingService().loadContentGeneratorExperiments()]))
      .then(() => {
      this.handleInitialRoutingKeyPath();
    });
  }
  async componentDidLoad() {
    windowService.version = VERSION;
    globalDataLayerService.pushDataLayerEvent(EventActions.GENERAL_LOAD);
    logger.info('NAVIGATION_LOAD');
  }
  disconnectedCallback() {
    this.eventPreventedTimeout.cancel();
  }
  hasLimitedWidth() {
    return this.mode === NavigationMode.hero && this.limitedWidth === 'true' ? true : false;
  }
  render() {
    if (!this.loadedToggles) {
      return h("div", null);
    }
    return (
    // div needed because conditional styling does not work on Host of shadow component for some unknown reason
    h("div", { class: this.hasLimitedWidth() ? 'header limited-width' : 'header' }, h("phn-wrapper", { theme: this.theme, mode: this.mode, locale: this.locale, loadingContent: this.loadingContent, receivedContent: this.receivedContent, breakpoint: this.breakpoint, app: sanitizeApp(this.app), displayLogoOnly: this.displayLogoOnly, limitedWidth: this.hasLimitedWidth() }, isShopAvailable(this.locale, sanitizeApp(this.app)) ? (h("div", { slot: "contextual_drawer_header" }, h("slot", { name: "contextual_drawer_header" }))) : null)));
  }
  static get is() { return "phn-header"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["header.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["header.css"]
    };
  }
  static get assetsDirs() { return ["auth"]; }
  static get properties() {
    return {
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false,
        "defaultValue": "DEFAULT_LOCALE"
      },
      "env": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "env",
        "reflect": false,
        "defaultValue": "''"
      },
      "clientId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "client-id",
        "reflect": false,
        "defaultValue": "''"
      },
      "pageName": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "page-name",
        "reflect": false,
        "defaultValue": "''"
      },
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationThemeType",
          "resolved": "\"dark\" | \"light\"",
          "references": {
            "NavigationThemeType": {
              "location": "import",
              "path": "../../utility/constants",
              "id": "src/utility/constants/index.ts::NavigationThemeType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "NavigationTheme.light"
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationModeType",
          "resolved": "\"hero\" | \"navbar\" | \"transparent\"",
          "references": {
            "NavigationModeType": {
              "location": "import",
              "path": "../../utility/constants",
              "id": "src/utility/constants/index.ts::NavigationModeType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "mode",
        "reflect": false,
        "defaultValue": "NavigationMode.navbar"
      },
      "limitedWidth": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "limited-width",
        "reflect": false,
        "defaultValue": "'true'"
      },
      "app": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ApplicationType",
          "resolved": "\"default\" | \"pcom\" | \"shop\"",
          "references": {
            "ApplicationType": {
              "location": "import",
              "path": "../../utility/constants/app",
              "id": "src/utility/constants/app.ts::ApplicationType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "app",
        "reflect": false,
        "defaultValue": "Application.default"
      },
      "initialRoutingPath": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "initial-routing-path",
        "reflect": false,
        "defaultValue": "''"
      },
      "displayLogoOnly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "display-logo-only",
        "reflect": false,
        "defaultValue": "false"
      },
      "numberOfShoppingItems": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "number-of-shopping-items",
        "reflect": false,
        "defaultValue": "0"
      },
      "wishlistItemsNumber": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "wishlist-items-number",
        "reflect": false,
        "defaultValue": "0"
      },
      "shopInformation": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "shop-information",
        "reflect": false,
        "defaultValue": "'{ \"wishlistItemsNumber\": 0, \"numberOfShoppingItems\": 0, \"subTotal\": \"0\" }'"
      }
    };
  }
  static get states() {
    return {
      "loadingContent": {},
      "receivedContent": {},
      "breakpoint": {}
    };
  }
  static get events() {
    return [{
        "method": "navigationDidLoad",
        "name": "navigationDidLoad",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "phnLogout",
        "name": "phnLogout",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "phnLogin",
        "name": "phnLogin",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "locale",
        "methodName": "localeWatchHandler"
      }, {
        "propName": "pageName",
        "methodName": "pageNameWatchHandler"
      }, {
        "propName": "env",
        "methodName": "newEnvReceived"
      }, {
        "propName": "app",
        "methodName": "appWatcher"
      }, {
        "propName": "breakpoint",
        "methodName": "breakpointWatcher"
      }, {
        "propName": "shopInformation",
        "methodName": "watchShopVariable"
      }, {
        "propName": "initialRoutingPath",
        "methodName": "initialRoutingPathWatcher"
      }];
  }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "resizeHandler",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "message",
        "method": "newAuthMessageReceived",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "loginEvent",
        "method": "handleLogin",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "logoutEvent",
        "method": "handleLogout",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "ucReady",
        "method": "handleUserCentricsReady",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "ucInit",
        "method": "handleUserCentricsInitalization",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "navigationLoaded",
        "method": "navigationLoadedHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=header.js.map
