import { h, Host } from "@stencil/core";
import analyticsManager from "../../services/analytics/analytics-manager";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import { ClickElementTypes, ElementTypes, EventActions } from "../../utility/constants";
import { isModelName, isString } from "../../utility/helper";
import SideDrawerItemText from "./side-drawer-item-text";
import { navContentStore } from "../../state/nav-content-store";
export class SideDrawerItem {
  constructor() {
    this.text = undefined;
    this.analyticsId = undefined;
    this.subtext = '';
    this.elementId = '';
    this.link = '';
    this.iconRight = '';
    this.datalayerEventAction = EventActions.NAVIGATION_CLICK;
    this.customDatalayerProperties = {};
    this.isActive = false;
    this.hasDoubleDrawerAnimationFinished = false;
    this.renderSignatures = false;
  }
  sendDataLayerEvent(clickElementType, elementId) {
    globalDataLayerService.pushDataLayerEvent(this.datalayerEventAction, Object.assign(Object.assign(Object.assign({ componentClick: Object.assign({ clickElementId: this.analyticsId, clickElementName: this.text, targetElement: analyticsManager.getModelTargetElement(elementId, this.text), clickElementType }, (clickElementType === ClickElementTypes.Link ? { targetUrl: this.link } : {})) }, this.customDatalayerProperties), { componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(elementId, ElementTypes.sideDrawerItem, true),
        displayElementName: this.text
      } }), (this.datalayerEventAction === EventActions.MODEL_RANGE_CLICK
      ? {
        car: {
          modelRangeName: this.text.toLowerCase()
        }
      }
      : {})));
  }
  existsSlot(slotName) {
    return this.el.querySelector(`[slot="${slotName}"]`) !== null;
  }
  render() {
    var _a;
    const body = (h("div", { class: "body-container phn-flex-row phn-align-center" }, h(SideDrawerItemText, { isActive: false, text: this.text, subtext: this.subtext, renderSignatures: this.renderSignatures }), this.existsSlot('suffix') ? (h("div", null, h("slot", { name: "suffix" }))) : null));
    if (isString(this.link)) {
      const externalShop = ((_a = navContentStore.state.externalShop) === null || _a === void 0 ? void 0 : _a.link) === this.link;
      return (h("phn-p-link-pure", { icon: isString(this.iconRight) ? this.iconRight : 'none', "align-label": "left", stretch: "true", "data-id": this.elementId, onClick: () => {
          this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);
        } }, h("a", { href: this.link, target: externalShop ? '_blank' : '_self' }, body)));
    }
    return (h(Host, { class: `${this.isActive ? 'active' : ''}` }, h("phn-p-button-pure", { active: this.isActive, class: isModelName(this.text) ? 'models' : '', size: "inherit", stretch: "true", "data-id": this.elementId, onClick: () => {
        this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);
      }, aria: { 'aria-expanded': `${this.isActive ? 'true' : 'false'}` }, icon: 'arrow-head-right', "align-label": "left" }, body)));
  }
  static get is() { return "phn-side-drawer-item"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["side-drawer-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["side-drawer-item.css"]
    };
  }
  static get properties() {
    return {
      "text": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "text",
        "reflect": false
      },
      "analyticsId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "analytics-id",
        "reflect": false
      },
      "subtext": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "subtext",
        "reflect": false,
        "defaultValue": "''"
      },
      "elementId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "element-id",
        "reflect": false,
        "defaultValue": "''"
      },
      "link": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "link",
        "reflect": false,
        "defaultValue": "''"
      },
      "iconRight": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "icon-right",
        "reflect": false,
        "defaultValue": "''"
      },
      "datalayerEventAction": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "EventAction",
          "resolved": "\"PAGHomeNav_General_Load\" | \"PAGHomeNav_CountryRecommender_Load\" | \"PAGHomeNav_CountryRecommenderChange_Click\" | \"PAGHomeNav_CountryRecommenderClose_Click\" | \"PAGHomeNav_Crest_Click\" | \"PAGHomeNav_Navigation_Load\" | \"PAGHomeNav_ModelRangeOverlay_Load\" | \"PAGHomeNav_MenuBack_Click\" | \"PAGHomeNav_MenuClose_Click\" | \"PAGHomeNav_MetaFunction_Click\" | \"PAGHomeNav_Model_Click\" | \"PAGHomeNav_ModelMetaFunction_Click\" | \"PAGHomeNav_ModelCTA_Click\" | \"PAGHomeNav_ModelRange_Click\" | \"PAGHomeNav_More_Click\" | \"PAGHomeNav_Navigation_Click\" | \"PAGHomeNav_NavigationLink_Click\" | \"PAGHomeNav_FindADealerSearchScreen_Load\" | \"PAGHomeNav_FindADealerResultsScreen_Load\" | \"PAGHomeNav_FindADealerSearch_Click\" | \"PAGHomeNav_FindADealerLocateMe_Click\" | \"PAGHomeNav_FindADealerDealer_Click\" | \"PAGHomeNav_FindADealerDealerScreen_Load\" | \"PAGHomeNav_FindADealerDealerContact_Click\" | \"PAGHomeNav_FindADealerMap_Click\" | \"PAGHomeNav_IconContextLink_Click\" | \"PAGHomeNav_Drawer_Load\" | \"PAGHomeNav_IconGlobalLink_Click\"",
          "references": {
            "EventAction": {
              "location": "import",
              "path": "../../utility/constants",
              "id": "src/utility/constants/index.ts::EventAction"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "datalayer-event-action",
        "reflect": false,
        "defaultValue": "EventActions.NAVIGATION_CLICK"
      },
      "customDatalayerProperties": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "TDataLayer",
          "resolved": "{ basicProduct?: TBasicProduct | undefined; car?: TCar | undefined; componentAudio?: TComponentAudio | undefined; componentClick?: TComponentClick | undefined; componentDisplay?: TComponentDisplay | undefined; componentFile?: TComponentFile | undefined; componentFilter?: TComponentFilter | undefined; componentForm?: TComponentForm | undefined; componentNavigation?: TComponentNavigation | undefined; componentSearch?: TComponentSearch | undefined; componentSort?: TComponentSort | undefined; componentVideo?: TComponentVideo | undefined; consents?: TConsents | undefined; context?: TContext | undefined; financialProduct?: TFinancialProduct | undefined; ids?: TIds | undefined; pageExperience?: TPageExperience | undefined; partner?: TPartner | undefined; personalization?: TPersonalization | undefined; preferences?: TPreferences | undefined; process?: TProcess | undefined; serviceProduct?: TServiceProduct | undefined; socialShareConsents?: TSocialShareConsents | undefined; visitor?: TVisitor | undefined; }",
          "references": {
            "TDataLayer": {
              "location": "import",
              "path": "@porsche/globaldatalayer-events/projects/pcom/all/types",
              "id": ""
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "defaultValue": "{}"
      },
      "isActive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "is-active",
        "reflect": false,
        "defaultValue": "false"
      },
      "hasDoubleDrawerAnimationFinished": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "has-double-drawer-animation-finished",
        "reflect": false,
        "defaultValue": "false"
      },
      "renderSignatures": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "render-signatures",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get elementRef() { return "el"; }
}
//# sourceMappingURL=side-drawer-item.js.map
