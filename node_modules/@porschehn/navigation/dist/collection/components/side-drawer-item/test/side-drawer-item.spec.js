import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { getHTMLElement } from "../../../utility/helper";
import { SideDrawerItem } from "../side-drawer-item";
import { constructRoutingKey, RoutingKeys } from "../../../entities/routing-key";
import { routerStore } from "../../../state/router-store";
import analyticsManager from "../../../services/analytics/analytics-manager";
import { navContentStore } from "../../../state/nav-content-store";
describe('side-drawer-item', () => {
  const defaultProps = {
    text: 'Side Drawer Item Text',
    analyticsId: 'mainmenu.sideDrawerItemId'
  };
  describe('snapshot tests', () => {
    it('renders with button', async () => {
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-side-drawer-item>
          <!---->
          <phn-p-button-pure align-label="left" data-id icon="arrow-head-right" size="inherit" stretch="true">
            <div class="body-container phn-align-center phn-flex-row">
              <div class="text-container">
                <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                  Side Drawer Item Text
                </phn-p-text>
              </div>
            </div>
          </phn-p-button-pure>
        </phn-side-drawer-item>
      `);
    });
    it('renders with external shop link', async () => {
      navContentStore.state.externalShop = { id: '', text: '', link: 'this.is.a.link.com', description: '', icon: '' };
      const link = 'this.is.a.link.com';
      const iconRight = 'fancy_icon';
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps, { link: link, iconRight: iconRight }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-side-drawer-item>
          <!---->
          <phn-p-link-pure align-label="left" data-id icon="fancy_icon" stretch="true">
            <a href="this.is.a.link.com" target="_blank">
              <div class="body-container phn-align-center phn-flex-row">
                <div class="text-container">
                  <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                    Side Drawer Item Text
                  </phn-p-text>
                </div>
              </div>
            </a>
          </phn-p-link-pure>
        </phn-side-drawer-item>
      `);
    });
    it('renders with internal shop link', async () => {
      const link = 'this.is.a.link.com';
      const iconRight = 'fancy_icon';
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps, { link: link, iconRight: iconRight }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-side-drawer-item>
          <!---->
          <phn-p-link-pure align-label="left" data-id icon="fancy_icon" stretch="true">
            <a href="this.is.a.link.com" target="_self">
              <div class="body-container phn-align-center phn-flex-row">
                <div class="text-container">
                  <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                    Side Drawer Item Text
                  </phn-p-text>
                </div>
              </div>
            </a>
          </phn-p-link-pure>
        </phn-side-drawer-item>
      `);
    });
    it('renders with model signitures', async () => {
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps, { renderSignatures: true, text: 'Taycan' }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-side-drawer-item>
          <!---->
          <phn-p-button-pure align-label="left" class="models" data-id icon="arrow-head-right" size="inherit" stretch="true">
            <div class="body-container phn-align-center phn-flex-row">
              <div class="text-container">
                <phn-p-model-signature class="model-signature" model="taycan" size="inherit"></phn-p-model-signature>
              </div>
            </div>
          </phn-p-button-pure>
        </phn-side-drawer-item>
      `);
    });
    it('displays correct text and subtext', async () => {
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps, { subtext: "Sub Text" }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-side-drawer-item>
          <!---->
          <phn-p-button-pure align-label="left" data-id icon="arrow-head-right" size="inherit" stretch="true">
            <div class="body-container phn-align-center phn-flex-row">
              <div class="text-container">
                <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                  Side Drawer Item Text
                </phn-p-text>
                <div class="text-limit">
                  <phn-p-text class="subtext" color="inherit" data-test-id="subtext" ellipsis="true" size="x-small" tag="div" weight="regular">
                    Sub Text
                  </phn-p-text>
                </div>
              </div>
            </div>
          </phn-p-button-pure>
        </phn-side-drawer-item>
      `);
    });
  });
  describe('data analytics', () => {
    beforeEach(() => {
      analyticsManager.setDrawerType('doubleDrawer');
      routerStore.state.routingKeyHistory = ['mainmenu', 'models'];
      routerStore.state.routingKeyPointer = 1;
    });
    const assertNavigationClickEventForButton = () => {
      var _a;
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.NAVIGATION_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: defaultProps.analyticsId,
        clickElementName: defaultProps.text,
        clickElementType: ClickElementTypes.Button
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level1-mainmenu_level2-models',
        displayElementType: 'level1_side-drawer-item',
        displayElementName: defaultProps.text
      });
    };
    const assertModelRangeClickEvent = (props) => {
      var _a;
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.MODEL_RANGE_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: props.analyticsId,
        clickElementName: props.text,
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level3_taycan'
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level1-mainmenu_level2-models',
        displayElementType: 'level2_side-drawer-item',
        displayElementName: props.text
      });
      expect(event.car).toEqual({
        modelRangeName: 'taycan'
      });
    };
    it('should call NAVIGATION_CLICK data event after side-drawer-item button is clicked', async () => {
      var _a;
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps))
      });
      const button = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-button-pure'));
      expect(button === null || button === void 0 ? void 0 : button.innerText).toEqual(defaultProps.text);
      button === null || button === void 0 ? void 0 : button.click();
      assertNavigationClickEventForButton();
    });
    it('should call NAVIGATION_CLICK data event after side-drawer-item button icon is clicked', async () => {
      var _a;
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps))
      });
      const button = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-p-button-pure')[0]);
      expect(button === null || button === void 0 ? void 0 : button.innerText).toEqual('Side Drawer Item Text');
      button === null || button === void 0 ? void 0 : button.click();
      assertNavigationClickEventForButton();
    });
    it('should call MODEL_RANGE_CLICK data event after side-drawer-item model button is clicked', async () => {
      var _a;
      const defaultProps = {
        text: 'Taycan',
        analyticsId: 'mainmenu.taycan'
      };
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => (h("phn-side-drawer-item", Object.assign({}, defaultProps, { elementId: constructRoutingKey(RoutingKeys.MODELS, defaultProps.analyticsId), datalayerEventAction: EventActions.MODEL_RANGE_CLICK })))
      });
      routerStore.state.routingKeyHistory = ['mainmenu', 'models'];
      routerStore.state.routingKeyPointer = 1;
      const button = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-button-pure'));
      expect(button === null || button === void 0 ? void 0 : button.innerText).toEqual(defaultProps.text);
      button === null || button === void 0 ? void 0 : button.click();
      assertModelRangeClickEvent(defaultProps);
    });
    it('should call MODEL_RANGE_CLICK data event after link button is clicked', async () => {
      var _a, _b;
      const link = 'this.is.a.link.com';
      const iconRight = 'fancy_icon';
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps, { link: link, iconRight: iconRight }))
      });
      const button = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link-pure'));
      expect(button === null || button === void 0 ? void 0 : button.innerText).toEqual(defaultProps.text);
      button === null || button === void 0 ? void 0 : button.click();
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.NAVIGATION_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: defaultProps.analyticsId,
        clickElementName: defaultProps.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level1-mainmenu_level2-models',
        displayElementType: 'level1_side-drawer-item',
        displayElementName: defaultProps.text
      });
    });
    it('should call MODEL_RANGE_CLICK data event after link button icon is clicked', async () => {
      var _a, _b;
      const link = 'this.is.a.link.com';
      const iconRight = 'fancy_icon';
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => h("phn-side-drawer-item", Object.assign({}, defaultProps, { link: link, iconRight: iconRight }))
      });
      const button = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-p-link-pure')[0]);
      expect(button === null || button === void 0 ? void 0 : button.innerText).toEqual('Side Drawer Item Text');
      button === null || button === void 0 ? void 0 : button.click();
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.NAVIGATION_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: defaultProps.analyticsId,
        clickElementName: defaultProps.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level1-mainmenu_level2-models',
        displayElementType: 'level1_side-drawer-item',
        displayElementName: defaultProps.text
      });
    });
    it('should call MODEL_RANGE_CLICK data event after side-drawer-item model button icon is clicked', async () => {
      var _a;
      const defaultProps = {
        text: 'Taycan',
        analyticsId: 'mainmenu.taycan'
      };
      const page = await newSpecPage({
        components: [SideDrawerItem],
        template: () => (h("phn-side-drawer-item", Object.assign({}, defaultProps, { elementId: constructRoutingKey(RoutingKeys.MODELS, defaultProps.analyticsId), datalayerEventAction: EventActions.MODEL_RANGE_CLICK })))
      });
      routerStore.state.routingKeyHistory = ['mainmenu', 'models'];
      routerStore.state.routingKeyPointer = 1;
      const button = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-p-button-pure')[0]);
      expect(button === null || button === void 0 ? void 0 : button.innerText).toEqual('Taycan');
      button === null || button === void 0 ? void 0 : button.click();
      assertModelRangeClickEvent(defaultProps);
    });
  });
});
//# sourceMappingURL=side-drawer-item.spec.js.map
