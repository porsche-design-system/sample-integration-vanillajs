import { h } from "@stencil/core";
import { getMyPorscheRoutingKey } from "../../entities/routing-key";
import { EventActions } from "../../utility/constants";
import { IsLoggedIn } from "../../utility/helper";
import { finderStateStore } from "../../state/finder-state-store";
import { navStateStore } from "../../state/nav-state-store";
import { shopStateStore } from "../../state/shop-state-store";
import { isShopAvailable } from "../../utility/helpers/shop-helper";
import { navContentStore } from "../../state/nav-content-store";
import featureToggles from "../../services/feature-toggles";
export default function Links({ content, onLogoutClick, showSkeleton }) {
  const messagesPosition = 1, savedSearchesPosition = 2, savedVehiclesPosition = 3, wishlistPosition = 4;
  const { loggedInState, unreadMessagesCount, app, locale } = navStateStore.state;
  const isLoggedIn = IsLoggedIn(loggedInState);
  const { links, messages, savedSearches, savedVehicles } = content;
  const { savedSearchesCount, savedVehiclesCount } = finderStateStore.state;
  const { wishlistItemsNumber } = shopStateStore.state.shopInformation;
  const { shop } = navContentStore.state;
  const convertedLinks = links.map((link) => (h("div", { class: "myporsche-link-item", key: link.id }, h("phn-menu-item", { elementId: getMyPorscheRoutingKey(link.id), class: `${showSkeleton ? 'skeleton' : ''}`, analyticsId: link.id, text: link.text, link: link.link, datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK }))));
  convertedLinks.splice(messagesPosition, 0, h(MenuItemCountLink, { content: messages, count: unreadMessagesCount, showSkeleton: showSkeleton }));
  if (savedSearches && savedSearches.text !== '') {
    convertedLinks.splice(savedSearchesPosition, 0, h(MenuItemCountLink, { content: savedSearches, count: savedSearchesCount, showSkeleton: showSkeleton }));
  }
  if (savedVehicles && savedVehicles.text !== '') {
    convertedLinks.splice(savedVehiclesPosition, 0, h(MenuItemCountLink, { content: savedVehicles, count: savedVehiclesCount, showSkeleton: showSkeleton }));
  }
  if (isShopAvailable(locale, app) && (shop === null || shop === void 0 ? void 0 : shop.wishlist) && featureToggles.isShopWishlistToggleActive()) {
    convertedLinks.splice(wishlistPosition, 0, h(MenuItemCountLink, { content: shop.wishlist, count: wishlistItemsNumber, showSkeleton: showSkeleton }));
  }
  if (isLoggedIn) {
    convertedLinks.push(h(LogoutLink, { content: content, onLogoutClick: onLogoutClick, showSkeleton: showSkeleton }));
  }
  return (h("div", { class: "myporsche-links" }, showSkeleton ? (h("div", { class: "skeleton-menu" }, convertedLinks.map(() => (h("div", { class: "skeleton-menu-item" }))))) : null, h("div", { style: { display: showSkeleton ? 'none' : '', width: '100%' } }, h("div", { class: `${isLoggedIn ? 'logged-in' : ''} myporsche-links-container` }, convertedLinks))));
}
function MenuItemCountLink({ content, count, showSkeleton }) {
  return content ? (h("div", { class: "myporsche-link-item", key: content.id }, h("phn-menu-item", { elementId: getMyPorscheRoutingKey(content.id), class: `${showSkeleton ? 'skeleton' : ''}`, analyticsId: content.id, text: content.text, link: content.link, datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK }, h(MenuItemCountIndicator, { count: count })))) : null;
}
function LogoutLink({ content, onLogoutClick, showSkeleton }) {
  const { logout } = content;
  return (h("div", { class: "myporsche-link-item", key: logout.id }, h("phn-menu-item", { elementId: getMyPorscheRoutingKey(logout.id), class: `myporsche-menu-item logout${showSkeleton ? 'skeleton' : ''}`, analyticsId: logout.id, text: logout.text, onClick: onLogoutClick, datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK })));
}
function MenuItemCountIndicator({ count }) {
  if (count <= 0)
    return null;
  return (h("phn-p-tag", { slot: "suffix", class: "menu-item-count", color: "notification-info-soft" }, count));
}
//# sourceMappingURL=myporsche-drawer-links.js.map
