import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { mockLocaleContent, mockMyPorscheContent } from "../../../test/test-data";
import { getHTMLElement } from "../../../utility/helper";
import { MyPorscheDrawer } from "../myporsche-drawer";
import { navStateStore } from "../../../state/nav-state-store";
import { navContentStore } from "../../../state/nav-content-store";
import featureToggles from "../../../services/feature-toggles";
import { getHTMLElementFromPage } from "../../../test/actions";
describe('myporsche-drawer', () => {
  beforeEach(() => {
    navContentStore.state.myPorsche = mockMyPorscheContent;
  });
  async function getPage() {
    return await newSpecPage({
      components: [MyPorscheDrawer],
      template: () => h("phn-myporsche-drawer", null)
    });
  }
  describe('mobile', () => {
    describe('logged out user', () => {
      let page;
      beforeEach(async () => {
        page = await newSpecPage({
          components: [MyPorscheDrawer],
          template: () => h("phn-myporsche-drawer", null)
        });
      });
      it('should render order correctly', async () => {
        expect(page.root).toMatchInlineSnapshot(`
          <phn-myporsche-drawer>
            <div class="phn-flex-col phn-justify-around">
              <div class="myporsche-login">
                <phn-myporsche-login signuptext="to discover the digital world of Porsche."></phn-myporsche-login>
              </div>
              <div class="myporsche-links">
                <div style="width: 100%;">
                  <div class="myporsche-links-container">
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.overview" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.overview" link="https://my.porsche.com/core/gb/en_GB/home" text="Overview"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.messages" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.messages" link="https://inbox.porsche.com/gb/en_GB/messages" text="Messages"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedsearches" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedsearches" link="https://finder.porsche.com/gb/en_GB/saved-searches" text="Saved Searches"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedvehicles" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedvehicles" link="https://finder.porsche.com/gb/en_GB/favorites" text="Saved Vehicles"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.accountadministration" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.accountadministration" link="https://profile.porsche.com/myprofile/gb/en_GB/personal-data" text="Profile settings"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.contact" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.contact" link="https://my.porsche.com/core/gb/en_GB/contact" text="Contact &amp; Support"></phn-menu-item>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </phn-myporsche-drawer>
        `);
      });
      it('should not render logout link', async () => {
        var _a;
        (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-p-link-pure').forEach((link) => {
          expect(link.textContent).not.toContain('Logout');
        });
      });
      it('should not render logged in icon and text', async () => {
        var _a, _b;
        expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=user-name]')).toBeNull();
        expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('[data-test-id=user-icon]')).toBeNull();
      });
    });
    describe('logged in user', () => {
      let page;
      beforeEach(async () => {
        navStateStore.set('loggedInState', 'Test User');
        navStateStore.set('unreadMessagesCount', 234);
        page = await getPage();
      });
      it('should render order correctly', async () => {
        expect(page.root).toMatchInlineSnapshot(`
          <phn-myporsche-drawer>
            <div class="phn-flex-col phn-justify-around">
              <div class="myporsche-links">
                <div style="width: 100%;">
                  <div class="logged-in myporsche-links-container">
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.overview" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.overview" link="https://my.porsche.com/core/gb/en_GB/home" text="Overview"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.messages" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.messages" link="https://inbox.porsche.com/gb/en_GB/messages" text="Messages">
                        <phn-p-tag class="menu-item-count" color="notification-info-soft" slot="suffix">
                          234
                        </phn-p-tag>
                      </phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedsearches" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedsearches" link="https://finder.porsche.com/gb/en_GB/saved-searches" text="Saved Searches"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedvehicles" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedvehicles" link="https://finder.porsche.com/gb/en_GB/favorites" text="Saved Vehicles"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.accountadministration" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.accountadministration" link="https://profile.porsche.com/myprofile/gb/en_GB/personal-data" text="Profile settings"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.contact" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.contact" link="https://my.porsche.com/core/gb/en_GB/contact" text="Contact &amp; Support"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.logout" class="logout myporsche-menu-item" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.logout" text="Logout"></phn-menu-item>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </phn-myporsche-drawer>
        `);
      });
      it('should not render login section', () => {
        var _a;
        expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.myporsche-login')).toBeNull();
      });
      it('should render unread message indicator', () => {
        var _a;
        expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.menu-item-count')).not.toBeNull();
      });
      it('should emit logout event on logout', async () => {
        var _a, _b;
        jest.spyOn(page.rootInstance.logoutEvent, 'emit');
        (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.logout'))) === null || _b === void 0 ? void 0 : _b.click();
        await page.waitForChanges();
        expect(page.rootInstance.logoutEvent.emit).toHaveBeenCalledTimes(1);
      });
    });
  });
  describe('desktop', () => {
    let page;
    describe('logged out user', () => {
      it('should render order correctly', async () => {
        page = await getPage();
        expect(page.root).toMatchInlineSnapshot(`
          <phn-myporsche-drawer>
            <div class="phn-flex-col phn-justify-around">
              <div class="myporsche-login">
                <phn-myporsche-login signuptext="to discover the digital world of Porsche."></phn-myporsche-login>
              </div>
              <div class="myporsche-links">
                <div style="width: 100%;">
                  <div class="myporsche-links-container">
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.overview" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.overview" link="https://my.porsche.com/core/gb/en_GB/home" text="Overview"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.messages" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.messages" link="https://inbox.porsche.com/gb/en_GB/messages" text="Messages"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedsearches" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedsearches" link="https://finder.porsche.com/gb/en_GB/saved-searches" text="Saved Searches"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedvehicles" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedvehicles" link="https://finder.porsche.com/gb/en_GB/favorites" text="Saved Vehicles"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.accountadministration" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.accountadministration" link="https://profile.porsche.com/myprofile/gb/en_GB/personal-data" text="Profile settings"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.contact" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.contact" link="https://my.porsche.com/core/gb/en_GB/contact" text="Contact &amp; Support"></phn-menu-item>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </phn-myporsche-drawer>
        `);
      });
      it('should not render entire headline', async () => {
        var _a;
        page = await getPage();
        expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.headline-container')).toBeNull();
      });
      it('should not show saved Search and Vehicles if null', async () => {
        navContentStore.state.myPorsche = Object.assign(Object.assign({}, mockMyPorscheContent), { savedSearches: null, savedVehicles: null });
        const page = await newSpecPage({
          components: [MyPorscheDrawer],
          template: () => h("phn-myporsche-drawer", null)
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-myporsche-drawer>
            <div class="phn-flex-col phn-justify-around">
              <div class="myporsche-login">
                <phn-myporsche-login signuptext="to discover the digital world of Porsche."></phn-myporsche-login>
              </div>
              <div class="myporsche-links">
                <div style="width: 100%;">
                  <div class="myporsche-links-container">
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.overview" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.overview" link="https://my.porsche.com/core/gb/en_GB/home" text="Overview"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.messages" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.messages" link="https://inbox.porsche.com/gb/en_GB/messages" text="Messages"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.accountadministration" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.accountadministration" link="https://profile.porsche.com/myprofile/gb/en_GB/personal-data" text="Profile settings"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.contact" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.contact" link="https://my.porsche.com/core/gb/en_GB/contact" text="Contact &amp; Support"></phn-menu-item>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </phn-myporsche-drawer>
        `);
      });
    });
    describe('logged in user', () => {
      async function getPage() {
        navStateStore.set('loggedInState', 'Test User');
        navStateStore.set('unreadMessagesCount', 234);
        return await newSpecPage({
          components: [MyPorscheDrawer],
          template: () => h("phn-myporsche-drawer", null)
        });
      }
      it('should render order correctly', async () => {
        page = await getPage();
        expect(page.root).toMatchInlineSnapshot(`
          <phn-myporsche-drawer>
            <div class="phn-flex-col phn-justify-around">
              <div class="myporsche-links">
                <div style="width: 100%;">
                  <div class="logged-in myporsche-links-container">
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.overview" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.overview" link="https://my.porsche.com/core/gb/en_GB/home" text="Overview"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.messages" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.messages" link="https://inbox.porsche.com/gb/en_GB/messages" text="Messages">
                        <phn-p-tag class="menu-item-count" color="notification-info-soft" slot="suffix">
                          234
                        </phn-p-tag>
                      </phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedsearches" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedsearches" link="https://finder.porsche.com/gb/en_GB/saved-searches" text="Saved Searches"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.savedvehicles" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.savedvehicles" link="https://finder.porsche.com/gb/en_GB/favorites" text="Saved Vehicles"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.accountadministration" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.accountadministration" link="https://profile.porsche.com/myprofile/gb/en_GB/personal-data" text="Profile settings"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.contact" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.contact" link="https://my.porsche.com/core/gb/en_GB/contact" text="Contact &amp; Support"></phn-menu-item>
                    </div>
                    <div class="myporsche-link-item">
                      <phn-menu-item analyticsid="mainmenu.myporsche.logout" class="logout myporsche-menu-item" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="my_porsche/mainmenu.myporsche.logout" text="Logout"></phn-menu-item>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </phn-myporsche-drawer>
        `);
      });
      it('should not render PDS headline', async () => {
        var _a;
        page = await getPage();
        expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.myporsche-headline')).toBeNull();
      });
      it('should not render headline divider', async () => {
        var _a;
        page = await getPage();
        expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.headline-divider')).toBeNull();
      });
      it('should render unread count messages', async () => {
        var _a, _b, _c;
        navStateStore.set('unreadMessagesCount', 234);
        page = await getPage();
        expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item>phn-p-tag')).not.toBeNull();
        expect((_c = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-menu-item>phn-p-tag')) === null || _c === void 0 ? void 0 : _c.textContent).toEqual('234');
      });
    });
  });
  describe('savedSearches & savedVehicles option', () => {
    it('should not show saved Search and Vehicles if null', async () => {
      var _a, _b;
      navContentStore.state.myPorsche = Object.assign(Object.assign({}, mockMyPorscheContent), { savedVehicles: null, savedSearches: null });
      const page = await getPage();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item[analyticsid="mainmenu.myporsche.savedvehicles"]')).toBeNull();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-menu-item[analyticsid="mainmenu.myporsche.savedsearches"]')).toBeNull();
    });
    it('should show saved Search and Vehicles', async () => {
      const page = await getPage();
      const savedVehiclesItem = getHTMLElementFromPage(page, 'phn-menu-item[analyticsid="mainmenu.myporsche.savedvehicles"]');
      const savedSearchesItem = getHTMLElementFromPage(page, 'phn-menu-item[analyticsid="mainmenu.myporsche.savedsearches"]');
      expect(savedVehiclesItem).toBeTruthy();
      expect(savedSearchesItem).toBeTruthy();
      expect(savedVehiclesItem === null || savedVehiclesItem === void 0 ? void 0 : savedVehiclesItem.getAttribute('link')).toEqual('https://finder.porsche.com/gb/en_GB/favorites');
      expect(savedSearchesItem === null || savedSearchesItem === void 0 ? void 0 : savedSearchesItem.getAttribute('link')).toEqual('https://finder.porsche.com/gb/en_GB/saved-searches');
    });
  });
  describe('shop wishlist option', () => {
    it('wishlist should not be displayed when feature toggles is off', async () => {
      var _a;
      jest.spyOn(featureToggles, 'isShopWishlistToggleActive').mockReturnValue(false);
      const page = await getPage();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item[analyticsid="mainmenu.myporsche.wishlist"]')).toBeNull();
    });
    it('wishlist should be displayed when feature toggle is on', async () => {
      jest.spyOn(featureToggles, 'isShopWishlistToggleActive').mockReturnValue(true);
      navContentStore.state.shop = mockLocaleContent.shop;
      navStateStore.state.locale = 'de-DE';
      navStateStore.state.app = 'shop';
      const page = await getPage();
      const wishlistItem = getHTMLElementFromPage(page, 'phn-menu-item[analyticsid="mainmenu.shops.wishlist"]');
      expect(wishlistItem).toBeTruthy();
      expect(wishlistItem === null || wishlistItem === void 0 ? void 0 : wishlistItem.getAttribute('link')).toEqual('https://shop.porsche.com/gb/en-GB/wishlist');
    });
    it('wishlist should be displayed after saved searches & vehicles', async () => {
      var _a;
      jest.spyOn(featureToggles, 'isShopWishlistToggleActive').mockReturnValue(true);
      navContentStore.state.shop = mockLocaleContent.shop;
      navStateStore.state.locale = 'de-DE';
      navStateStore.state.app = 'shop';
      const page = await getPage();
      const allMenuItems = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.myporsche-links-container > .myporsche-link-item');
      if (allMenuItems && allMenuItems.length > 0) {
        expect(allMenuItems[2].children[0].getAttribute('text')).toEqual('Saved Searches');
        expect(allMenuItems[3].children[0].getAttribute('text')).toEqual('Saved Vehicles');
        expect(allMenuItems[4].children[0].getAttribute('text')).toEqual('Wishlist');
      }
      else {
        throw Error('no element found');
      }
    });
  });
  it('should return null if there is no myPorsche content', async () => {
    var _a;
    navContentStore.state.myPorsche = null;
    const page = await getPage();
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.innerHTML).toEqual('');
  });
});
//# sourceMappingURL=myporsche-drawer.spec.js.map
