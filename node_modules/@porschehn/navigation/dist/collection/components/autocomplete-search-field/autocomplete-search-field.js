import { h, getAssetPath } from "@stencil/core";
import { navStateStore } from "../../state/nav-state-store";
import { getConfig, getHTMLInputElement, isString } from "../../utility/helper";
import { dealerSearchResultsStore } from "../../state/dealer-search-results-store";
export class AutocompleteSearchField {
  constructor() {
    this.placeholder = undefined;
    this.predictions = undefined;
    this.initialValue = '';
    this.errorState = '';
    this.errorMessage = '';
    this.showPredictions = false;
    this.highlightedPredictionIndex = -1;
    this.searchterm = this.initialValue;
  }
  clickListener(e) {
    this.showPredictions =
      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;
  }
  keydownListener(e) {
    if (e.key === 'Escape' && this.showPredictions) {
      e.preventDefault();
      e.stopPropagation();
      this.showPredictions = false;
    }
  }
  watchShowPredictions(newValue) {
    this.predictionsToggle.emit(newValue);
  }
  watchInitialValue() {
    this.searchterm = this.initialValue;
  }
  componentDidRender() {
    this.autoCompleteLoaded.emit(true);
  }
  onKeyDown(pressedKey) {
    if (this.predictions.length === 0)
      return;
    switch (pressedKey) {
      case 'ArrowDown':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex === this.predictions.length - 1) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        this.highlightedPredictionIndex++;
        break;
      case 'ArrowUp':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex < 0) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        else if (this.highlightedPredictionIndex === 0) {
          this.highlightedPredictionIndex = this.predictions.length - 1;
          break;
        }
        this.highlightedPredictionIndex--;
        break;
    }
    if (this.highlightedPredictionIndex > -1) {
      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;
    }
  }
  onSubmit() {
    const prediction = this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];
    this.submitSearch.emit(prediction !== null && prediction !== void 0 ? prediction : null);
    this.showPredictions = false;
    if (prediction !== undefined)
      this.searchterm = prediction.text;
  }
  render() {
    return (h("form", { class: "form-container", onSubmit: (event) => {
        event.preventDefault();
        this.onSubmit();
      } }, h("phn-p-text-field-wrapper", { "data-test-id": "dealer-search-form-input", state: isString(this.errorMessage) ? 'error' : 'none', message: this.errorMessage }, h("input", { class: "autofocus", "aria-label": "Find a dealer by typing a city name or zip code", type: "search", placeholder: this.placeholder, autocomplete: "off", role: "combobox", "data-validate": "required", "aria-expanded": (this.predictions.length > 0 && this.showPredictions).toString(), "aria-controls": "predictions", "aria-autocomplete": "list", "aria-activedescendant": this.showPredictions ? String(this.highlightedPredictionIndex) : undefined, value: this.searchterm, onInput: (event) => {
        var _a;
        event.preventDefault();
        this.showPredictions = true;
        this.highlightedPredictionIndex = -1;
        const value = (_a = getHTMLInputElement(event.target)) === null || _a === void 0 ? void 0 : _a.value;
        if (!isString(value)) {
          this.searchterm = '';
          this.showPredictions = false;
          dealerSearchResultsStore.state.savedDealerCookie = null;
          this.clearSearch.emit();
          return;
        }
        this.searchInput.emit(value);
      }, onKeyDown: (event) => {
        this.onKeyDown(event.key);
      } })), this.predictions.length > 0 && this.showPredictions ? (h("div", { class: "prediction-container" }, h("ul", { id: "predictions", "data-test-id": "dealer-search-autocomplete-predictions", role: "listbox", "aria-label": "List of location predictions" }, this.predictions.map((prediction, index) => (h("li", { key: prediction.id, class: index === this.highlightedPredictionIndex ? 'highlighted-prediction' : '', role: "option", "aria-selected": String(index === this.highlightedPredictionIndex), id: String(index), onClick: () => {
        this.highlightedPredictionIndex = index;
        this.onSubmit();
      }, onKeyDown: (event) => {
        // TODO: does this code ever get executed?
        if (event.key === 'Enter') {
          this.onSubmit();
        }
      } }, h("phn-p-text", { color: "inherit" }, prediction.text))))), h("img", { class: "powered-by-google", src: getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`), alt: "powered by Google" }))) : null));
  }
  static get is() { return "phn-autocomplete-search-field"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["autocomplete-search-field.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["autocomplete-search-field.css"]
    };
  }
  static get properties() {
    return {
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "placeholder",
        "reflect": false
      },
      "predictions": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Prediction[]",
          "resolved": "Prediction[]",
          "references": {
            "Prediction": {
              "location": "import",
              "path": "../../entities/places",
              "id": "src/entities/places.ts::Prediction"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "initialValue": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "initial-value",
        "reflect": false,
        "defaultValue": "''"
      },
      "errorState": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "error-state",
        "reflect": false,
        "defaultValue": "''"
      },
      "errorMessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "error-message",
        "reflect": false,
        "defaultValue": "''"
      }
    };
  }
  static get states() {
    return {
      "showPredictions": {},
      "highlightedPredictionIndex": {},
      "searchterm": {}
    };
  }
  static get events() {
    return [{
        "method": "searchInput",
        "name": "searchInput",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "clearSearch",
        "name": "clearSearch",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "submitSearch",
        "name": "submitSearch",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "Prediction | null",
          "resolved": "Prediction | null",
          "references": {
            "Prediction": {
              "location": "import",
              "path": "../../entities/places",
              "id": "src/entities/places.ts::Prediction"
            }
          }
        }
      }, {
        "method": "predictionsToggle",
        "name": "predictionsToggle",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "autoCompleteLoaded",
        "name": "autoCompleteLoaded",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "showPredictions",
        "methodName": "watchShowPredictions"
      }, {
        "propName": "initialValue",
        "methodName": "watchInitialValue"
      }];
  }
  static get listeners() {
    return [{
        "name": "click",
        "method": "clickListener",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "keydown",
        "method": "keydownListener",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=autocomplete-search-field.js.map
