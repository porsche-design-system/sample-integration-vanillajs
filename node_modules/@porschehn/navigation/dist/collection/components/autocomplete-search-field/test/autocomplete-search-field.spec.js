import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import * as el from "../../../test/element-helpers";
import { mockPredictions } from "../../../test/test-data";
import { getHTMLElement } from "../../../utility/helper";
import { AutocompleteSearchField } from "../autocomplete-search-field";
import { dealerSearchResultsStore } from "../../../state/dealer-search-results-store";
describe('autocomplete-search-field', () => {
  let page;
  let inputField;
  const defaultProps = {
    placeholder: 'City or ZIP',
    predictions: mockPredictions
  };
  beforeEach(async () => {
    page = await newSpecPage({
      components: [AutocompleteSearchField],
      template: () => h("phn-autocomplete-search-field", Object.assign({}, defaultProps))
    });
    inputField = page.doc.querySelector('input');
  });
  describe('snapshot testing', () => {
    it('should render autocomplete input', async () => {
      const page = await newSpecPage({
        components: [AutocompleteSearchField],
        template: () => h("phn-autocomplete-search-field", Object.assign({}, defaultProps, { predictions: [] }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-autocomplete-search-field>
          <form class="form-container">
            <phn-p-text-field-wrapper data-test-id="dealer-search-form-input" message="" state="none">
              <input aria-autocomplete="list" aria-controls="predictions" aria-expanded="false" aria-label="Find a dealer by typing a city name or zip code" autocomplete="off" class="autofocus" data-validate="required" placeholder="City or ZIP" role="combobox" type="search" value="">
            </phn-p-text-field-wrapper>
          </form>
        </phn-autocomplete-search-field>
      `);
    });
    it('should render autocomplete input with predictions', async () => {
      expect(page.root).toMatchInlineSnapshot(`
        <phn-autocomplete-search-field>
          <form class="form-container">
            <phn-p-text-field-wrapper data-test-id="dealer-search-form-input" message="" state="none">
              <input aria-autocomplete="list" aria-controls="predictions" aria-expanded="false" aria-label="Find a dealer by typing a city name or zip code" autocomplete="off" class="autofocus" data-validate="required" placeholder="City or ZIP" role="combobox" type="search" value="">
            </phn-p-text-field-wrapper>
          </form>
        </phn-autocomplete-search-field>
      `);
    });
  });
  it('should show predictions when user starts typing in search field', async () => {
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    expect(page.doc.querySelectorAll('li')).toHaveLength(3);
  });
  it('should not show predictions when search is submitted', async () => {
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).not.toBeNull();
    expect(page.doc.querySelectorAll('li')).toHaveLength(3);
    el.submit(inputField);
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).toBeNull();
  });
  it('should not show predictions after search is cleared', async () => {
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).not.toBeNull();
    expect(page.doc.querySelectorAll('li')).toHaveLength(3);
    inputField.value = '';
    inputField.dispatchEvent(new Event('input'));
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).toBeNull();
  });
  it('should not show predictions after search is cleared', async () => {
    dealerSearchResultsStore.state.savedDealerCookie = { id: '1', latitude: 0, longitude: 0 };
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    inputField.value = '';
    inputField.dispatchEvent(new Event('input'));
    expect(dealerSearchResultsStore.state.savedDealerCookie).toBeNull();
  });
  it('should hide predictions on blur', async () => {
    var _a;
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).not.toBeNull();
    expect(page.doc.querySelectorAll('li')).toHaveLength(3);
    (_a = page.root) === null || _a === void 0 ? void 0 : _a.click();
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).toBeNull();
  });
  it('should make predictions reappear when clicking on input with text', async () => {
    var _a;
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).not.toBeNull();
    expect(page.doc.querySelectorAll('li')).toHaveLength(3);
    (_a = page.root) === null || _a === void 0 ? void 0 : _a.click();
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).toBeNull();
    inputField.click();
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).not.toBeNull();
    expect(page.doc.querySelectorAll('li')).toHaveLength(3);
  });
  it('should choose the prediction that is being clicked on', async () => {
    var _a, _b;
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    expect(page.doc.querySelector('[data-test-id="dealer-search-autocomplete-predictions"]')).not.toBeNull();
    expect(page.doc.querySelectorAll('li')).toHaveLength(3);
    (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('[data-test-id="dealer-search-autocomplete-predictions"] li')[1])) === null || _b === void 0 ? void 0 : _b.click();
    await page.waitForChanges();
    expect(inputField.value).toEqual(mockPredictions[1].text);
  });
  it('should emit searchInput event when form is submitted', async () => {
    const searchInputSpy = jest.spyOn(page.rootInstance.searchInput, 'emit');
    const searchTerm = 'Stu';
    el.sendInput(inputField, searchTerm);
    await page.waitForChanges();
    el.submit(inputField);
    await page.waitForChanges();
    expect(searchInputSpy).toBeCalledTimes(1);
    expect(searchInputSpy).toBeCalledWith(searchTerm);
  });
  it('should emit searchInput event when user selects prediction', async () => {
    const searchInputSpy = jest.spyOn(page.rootInstance.searchInput, 'emit');
    const searchTerm = 'Stu';
    el.sendInput(inputField, searchTerm);
    await page.waitForChanges();
    page.doc.querySelectorAll('li')[0].click();
    await page.waitForChanges();
    expect(searchInputSpy).toBeCalledTimes(1);
    expect(searchInputSpy).toBeCalledWith(searchTerm);
  });
  it('should show powered by google logo when predictions are visible', async () => {
    var _a, _b;
    el.sendInput(inputField, 'Stu');
    await page.waitForChanges();
    expect(page.doc.querySelector('img')).not.toBeNull();
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('img')) === null || _b === void 0 ? void 0 : _b.getAttribute('src')).toBe('http://assets/url/icon-assets/powered_by_google_on_white.png');
    expect(page.doc.querySelector('.powered-by-google')).not.toBeNull();
  });
  describe('Keyboard navigation', () => {
    it('should highlight first prediction in dropdown on down arrow down after cycling through all predictions once', async () => {
      el.sendInput(inputField, 'Stu');
      await page.waitForChanges();
      mockPredictions.forEach(async () => {
        el.keyDown(inputField, 'ArrowDown');
        await page.waitForChanges();
      });
      el.keyDown(inputField, 'ArrowDown');
      await page.waitForChanges();
      const firstPrediction = page.doc.querySelectorAll('li')[0];
      expect(firstPrediction).toHaveClass('highlighted-prediction');
      expect(inputField.value).toBe(mockPredictions[0].text);
    });
    it('should highlight second prediction in dropdown when pressing twice the arrow down key', async () => {
      el.sendInput(inputField, 'Stu');
      await page.waitForChanges();
      el.keyDown(inputField, 'ArrowDown');
      await page.waitForChanges();
      el.keyDown(inputField, 'ArrowDown');
      await page.waitForChanges();
      const secondPrediction = page.doc.querySelectorAll('li')[1];
      expect(secondPrediction).toHaveClass('highlighted-prediction');
    });
    it('should highlight first prediction in dropdown on up arrow down', async () => {
      el.sendInput(inputField, 'Stu');
      await page.waitForChanges();
      el.keyDown(inputField, 'ArrowUp');
      await page.waitForChanges();
      const firstPrediction = page.doc.querySelectorAll('li')[0];
      expect(firstPrediction).toHaveClass('highlighted-prediction');
    });
    it('should highlight pre-last prediction in dropdown on hitting the arrow up twice when the first prediction is highlighted', async () => {
      el.sendInput(inputField, 'Stu');
      await page.waitForChanges();
      //Highlight the first element
      el.keyDown(inputField, 'ArrowUp');
      await page.waitForChanges();
      //Highlight the last element
      el.keyDown(inputField, 'ArrowUp');
      await page.waitForChanges();
      //Highlight the pre-last element
      el.keyDown(inputField, 'ArrowUp');
      await page.waitForChanges();
      const predictions = page.doc.querySelectorAll('li');
      const prelastPrediction = predictions[predictions.length - 2];
      expect(prelastPrediction).toHaveClass('highlighted-prediction');
    });
    it('should not highlight a prediction when arrow down is pressed', async () => {
      var _a, _b, _c;
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.prediction-container')).toBeNull();
      el.keyDown(inputField, 'ArrowDown');
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.prediction-container')).toBeNull();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.highlighted-prediction')).toBeNull();
    });
    it('should not highlight a prediction when arrow up is pressed', async () => {
      var _a, _b, _c;
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.prediction-container')).toBeNull();
      el.keyDown(inputField, 'ArrowUp');
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.prediction-container')).toBeNull();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.highlighted-prediction')).toBeNull();
    });
    it('should not have a highlighted prediction if input field is cleared', async () => {
      var _a;
      el.sendInput(inputField, 'Stu');
      await page.waitForChanges();
      el.keyDown(inputField, 'ArrowUp');
      await page.waitForChanges();
      el.sendInput(inputField, '');
      await page.waitForChanges();
      el.sendInput(inputField, 'Ber');
      await page.waitForChanges();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.highlighted-prediction')).toBeNull();
    });
    it('should hide predictions when Escape button is pressed', async () => {
      var _a, _b;
      el.sendInput(inputField, 'Stu');
      await page.waitForChanges();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.prediction-container')).not.toBeNull();
      el.keyDown(inputField, 'Escape');
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.prediction-container')).toBeNull();
    });
    it('should search predictions with the input text after selecting the second prediction and submitting form', async () => {
      const dealerSearchSpy = jest.spyOn(page.rootInstance.searchInput, 'emit');
      const searchTerm = 'Stu';
      el.sendInput(inputField, searchTerm);
      await page.waitForChanges();
      el.keyDown(inputField, 'ArrowDown');
      await page.waitForChanges();
      el.keyDown(inputField, 'ArrowDown');
      await page.waitForChanges();
      el.submit(inputField);
      await page.waitForChanges();
      expect(dealerSearchSpy).toBeCalledTimes(1);
      expect(dealerSearchSpy).toBeCalledWith(searchTerm);
    });
  });
});
//# sourceMappingURL=autocomplete-search-field.spec.js.map
