import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import animationManager from "../../../services/animations/animation-manager";
import featureToggles from "../../../services/feature-toggles";
import { EventActions, NavigationMode, NavigationTheme } from "../../../utility/constants";
import * as helper from "../../../utility/helper";
import { getHTMLElement, loadRootElement } from "../../../utility/helper";
import { Backdrop } from "../../backdrop/backdrop";
import { Level0Icons } from "../level-0-icons";
import { registerContextualDrawerOpening } from "../../contextual-drawer/contextual-drawer-animation-sequence";
import { MyPorscheIconButton } from "../../my-porsche-icon-button/my-porsche-icon-button";
import { navContentStore } from "../../../state/nav-content-store";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { breakpoint } from "@porsche-design-system/components-js/styles";
import { Application } from "../../../utility/constants/app";
import { shopStateStore } from "../../../state/shop-state-store";
import { mockContentWithoutShopMyporsche, mockLocaleContent } from "../../../test/test-data";
import { navStateStore } from "../../../state/nav-state-store";
import * as routingManager from "../../../services/routing-manager";
describe('level-0-icons', () => {
  const defaultProps = {
    locale: 'it-CH',
    app: Application.default,
    theme: NavigationTheme.light,
    mode: NavigationMode.navbar,
    breakpoint: breakpoint.xs,
    isLoading: false,
    isNavigationLoaded: true
  };
  async function getPage(props = defaultProps) {
    const page = await newSpecPage({
      components: [Level0Icons, Backdrop, MyPorscheIconButton],
      template: () => h("phn-level-0-icons", Object.assign({}, props))
    });
    if (page.root)
      loadRootElement(page.root);
    return page;
  }
  describe('snapshots', () => {
    it('should render level0 icons', async () => {
      const page = await getPage(Object.assign({}, defaultProps));
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0-icons>
          <!---->
          <div class="contextual-icons">
            <div class="left-icons">
              <phn-burger-button alignlabel="right" mode="navbar" theme="light"></phn-burger-button>
            </div>
            <div class="right-icons">
              <div class="icon">
                <phn-my-porsche-icon-button>
                  <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                </phn-my-porsche-icon-button>
              </div>
            </div>
          </div>
        </phn-level-0-icons>
      `);
    });
    it('should render oneui level0 with skeletons for burger and myporsche button', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs, locale: 'de-DE', isNavigationLoaded: false }));
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0-icons>
          <!---->
          <div class="contextual-icons">
            <div class="left-icons">
              <phn-burger-button alignlabel="right" mode="navbar" theme="light" style="display: none;"></phn-burger-button>
              <div class="skeleton-container">
                <div class="burger-button-skeleton"></div>
              </div>
            </div>
            <div class="right-icons">
              <div class="icon">
                <phn-my-porsche-icon-button style="display: none;">
                  <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                </phn-my-porsche-icon-button>
                <div class="skeleton-container">
                  <div class="pure-button-skeleton"></div>
                </div>
              </div>
            </div>
          </div>
        </phn-level-0-icons>
      `);
    });
    it('should render oneui level0', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs, locale: 'de-DE' }));
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0-icons>
          <!---->
          <div class="contextual-icons">
            <div class="left-icons">
              <phn-burger-button alignlabel="right" mode="navbar" theme="light"></phn-burger-button>
            </div>
            <div class="right-icons">
              <div class="icon">
                <phn-my-porsche-icon-button>
                  <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                </phn-my-porsche-icon-button>
              </div>
            </div>
          </div>
        </phn-level-0-icons>
      `);
    });
  });
  describe('default icons', () => {
    it('should render phn-my-porsche-icon-button on the left side of porsche logo', async () => {
      var _a, _b;
      const page = await getPage(defaultProps);
      const level0Items = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.right-icons');
      const myPorscheIconButton = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-my-porsche-icon-button');
      const iconsGrid = level0Items === null || level0Items === void 0 ? void 0 : level0Items.lastChild;
      expect(iconsGrid === null || iconsGrid === void 0 ? void 0 : iconsGrid.firstChild).toEqual(myPorscheIconButton);
    });
    it('should emit event when click on myporsche icon on desktop', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.m }));
      const openMyPorscheDrawerEventSpy = jest.spyOn(page.rootInstance.openDrawer, 'emit');
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-my-porsche-icon-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      expect(openMyPorscheDrawerEventSpy).toHaveBeenCalledWith({
        initialRoutingKey: 'my_porsche',
        isKeyboardClick: false
      });
    });
    it('should go to myporsche on mobile by chanring the routing manager', async () => {
      var _a, _b;
      const page = await getPage(defaultProps);
      const routingManagerGoTo = jest.spyOn(routingManager, 'goTo');
      await page.waitForChanges();
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-my-porsche-icon-button')) === null || _b === void 0 ? void 0 : _b.click();
      expect(routingManagerGoTo).toHaveBeenCalledWith('my_porsche');
    });
    it('should render my porsche icon in dark mode', async () => {
      var _a;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.dark, mode: NavigationMode.hero }));
      const myPorscheIconButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-my-porsche-icon-button');
      expect(myPorscheIconButton === null || myPorscheIconButton === void 0 ? void 0 : myPorscheIconButton.theme).toEqual('dark');
    });
    it('should render my porsche icon in light mode', async () => {
      var _a;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.light, mode: NavigationMode.hero }));
      const myPorscheIconButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-my-porsche-icon-button');
      expect(myPorscheIconButton === null || myPorscheIconButton === void 0 ? void 0 : myPorscheIconButton.theme).toEqual('light');
    });
    it('should not render user icon if market has no Porsche-ID', async () => {
      var _a;
      navContentStore.state = mockContentWithoutShopMyporsche;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.light, mode: NavigationMode.hero }));
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-my-porsche-icon-button')).toBeFalsy();
    });
  });
  describe('in shop', () => {
    let page;
    beforeEach(async () => {
      registerContextualDrawerOpening({
        onStartOpening: () => null,
        onFinishOpening: () => null
      });
      navContentStore.state = mockLocaleContent;
      jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);
      navStateStore.state.app = Application.shop;
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, locale: 'en-GB' }));
    });
    it('renders navigation with search drawer', async () => {
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0-icons>
          <!---->
          <div class="contextual-icons">
            <div class="left-icons">
              <phn-burger-button alignlabel="right" hidelabel="" mode="navbar" theme="light"></phn-burger-button>
              <div class="icon">
                <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the shop search field' }" data-test-id="search-button" hide-label="true" icon="search" stretch="true" theme="light"></phn-p-button-pure>
              </div>
            </div>
            <div class="right-icons">
              <div class="icon">
                <phn-p-link-pure class="shopping-cart-link" data-test-id="shopping-cart-link" hide-label="true" icon="none" target="_self" theme="light">
                  <a aria-label="My shopping bag, 0 items, estimated subtotal 0" href="https://shop.porsche.com/gb/en-GB/cart">
                    <div class="icon-flex">
                      <phn-p-icon data-test-id="shopping-cart-link-icon" name="shopping-bag" theme="light"></phn-p-icon>
                    </div>
                  </a>
                </phn-p-link-pure>
              </div>
              <div class="icon">
                <phn-my-porsche-icon-button>
                  <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                </phn-my-porsche-icon-button>
              </div>
            </div>
          </div>
        </phn-level-0-icons>
      `);
    });
    it('display search and shopping cart icons', async () => {
      var _a, _b;
      const searchButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=search-button]'));
      const shoppingCartButton = helper.getHTMLElement((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('[data-test-id=shopping-cart-link-icon]'));
      expect(searchButton).toBeTruthy();
      expect(shoppingCartButton).toBeTruthy();
    });
    it('do not display wishlist icon for mobile', async () => {
      var _a;
      const wishlistButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=wishlist-link-icon]'));
      expect(wishlistButton).toBeFalsy();
    });
    it('display wishlist icon for desktop', async () => {
      var _a;
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, breakpoint: breakpoint.m }));
      const wishlistButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=wishlist-link-icon]'));
      expect(wishlistButton).toBeTruthy();
    });
    it('display contextual drawer when clicking on shop search icon', async () => {
      var _a;
      const searchButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=search-button]'));
      const animationPlayMock = jest.spyOn(animationManager, 'play');
      searchButton === null || searchButton === void 0 ? void 0 : searchButton.click();
      expect(animationPlayMock).toHaveBeenCalledWith('openContextualDrawer');
    });
    it('should call sendDataLayerEvent when clicking on search button', async () => {
      var _a, _b;
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop', locale: 'it-CH' }));
      const searchButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=search-button]'));
      searchButton === null || searchButton === void 0 ? void 0 : searchButton.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.CONTEXTUAL_BUTTON_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'mainmenu.shop.search',
        clickElementName: 'Shop search'
      });
    });
    it('should call sendDataLayerEvent when clicking on shopping cart button', async () => {
      var _a, _b;
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop', locale: 'it-CH' }));
      const shoppingCartButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=shopping-cart-link]'));
      shoppingCartButton === null || shoppingCartButton === void 0 ? void 0 : shoppingCartButton.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.CONTEXTUAL_BUTTON_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'mainmenu.shop.shoppingbag',
        clickElementName: 'Shopping cart',
        targetUrl: 'https://shop.porsche.com/gb/en-GB/cart'
      });
    });
    it('should call sendDataLayerEvent when clicking on wishlist button', async () => {
      var _a, _b;
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop', locale: 'it-CH', breakpoint: breakpoint.m }));
      const wishlistButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=wishlist-link]'));
      wishlistButton === null || wishlistButton === void 0 ? void 0 : wishlistButton.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.CONTEXTUAL_BUTTON_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'mainmenu.shop.wishlist',
        clickElementName: 'Wishlist',
        targetUrl: 'https://shop.porsche.com/gb/en-GB/wishlist'
      });
    });
    describe('shopping bag', () => {
      it('show empty shopping bag icon of light and dark theme', () => {
        var _a;
        const shopCartButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=shopping-cart-link-icon]');
        expect(shopCartButton === null || shopCartButton === void 0 ? void 0 : shopCartButton.getAttribute('name')).toEqual('shopping-bag');
      });
      it('show empty shopping bag icon when there are no shopping items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 0, numberOfShoppingItems: 0, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop' }));
        const shopCartButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=shopping-cart-link-icon]');
        expect(shopCartButton === null || shopCartButton === void 0 ? void 0 : shopCartButton.getAttribute('name')).toEqual('shopping-bag');
      });
      it('show filled shopping bag icon when there are 101 shopping items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 0, numberOfShoppingItems: 101, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop' }));
        await page.waitForChanges();
        const shopCartButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=shopping-cart-link-icon]');
        expect(shopCartButton === null || shopCartButton === void 0 ? void 0 : shopCartButton.getAttribute('name')).toEqual('shopping-bag-filled');
      });
      it('show shopping bag icon with circle badge when < 10 shopping items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 0, numberOfShoppingItems: 9, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop' }));
        await page.waitForChanges();
        const shopCartCountCircle = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.shopping-item-count');
        expect(shopCartCountCircle).toBeTruthy();
        expect(shopCartCountCircle === null || shopCartCountCircle === void 0 ? void 0 : shopCartCountCircle.textContent).toEqual(`9`);
      });
      it('show shopping bag icon with pill badge when > 10 shopping items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 0, numberOfShoppingItems: 10, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop' }));
        await page.waitForChanges();
        const shopCartCountPill = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.pill');
        expect(shopCartCountPill).toBeTruthy();
        expect(shopCartCountPill === null || shopCartCountPill === void 0 ? void 0 : shopCartCountPill.textContent).toEqual(`10`);
      });
      it('show empty shopping bag icon when there are -1 shopping items', async () => {
        var _a;
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'shop' }));
        page.rootInstance.numberOfShoppingItems = -1;
        await page.waitForChanges();
        const shopCartButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=shopping-cart-link-icon]');
        expect(shopCartButton === null || shopCartButton === void 0 ? void 0 : shopCartButton.getAttribute('name')).toEqual('shopping-bag');
      });
    });
    describe('wishlist', () => {
      it('show empty wishlist icon of light and dark theme', async () => {
        var _a;
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, breakpoint: breakpoint.m }));
        const wishlistButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=wishlist-link-icon]');
        expect(wishlistButton === null || wishlistButton === void 0 ? void 0 : wishlistButton.getAttribute('name')).toEqual('heart');
      });
      it('show empty wishlist icon when there are no wishlist items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 0, numberOfShoppingItems: 0, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, breakpoint: breakpoint.m }));
        const wishlistButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=wishlist-link-icon]');
        expect(wishlistButton === null || wishlistButton === void 0 ? void 0 : wishlistButton.getAttribute('name')).toEqual('heart');
      });
      it('show filled wishlist icon when there are 101 wishlist items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 101, numberOfShoppingItems: 0, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, breakpoint: breakpoint.m }));
        await page.waitForChanges();
        const wishlistButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=wishlist-link-icon]');
        expect(wishlistButton === null || wishlistButton === void 0 ? void 0 : wishlistButton.getAttribute('name')).toEqual('heart-filled');
      });
      it('show wishlist icon with circle badge when < 10 wishlist items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 9, numberOfShoppingItems: 0, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, breakpoint: breakpoint.m }));
        await page.waitForChanges();
        const wishlistCountCircle = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.shopping-item-count');
        expect(wishlistCountCircle).toBeTruthy();
        expect(wishlistCountCircle === null || wishlistCountCircle === void 0 ? void 0 : wishlistCountCircle.textContent).toEqual(`9`);
      });
      it('show wishlist icon with pill badge when >= 10 wishlist items', async () => {
        var _a;
        shopStateStore.set('shopInformation', { wishlistItemsNumber: 10, numberOfShoppingItems: 0, subTotal: '0€' });
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, breakpoint: breakpoint.m }));
        await page.waitForChanges();
        const wishlistCountPill = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.pill');
        expect(wishlistCountPill).toBeTruthy();
        expect(wishlistCountPill === null || wishlistCountPill === void 0 ? void 0 : wishlistCountPill.textContent).toEqual(`10`);
      });
      it('show empty wishlist icon when there are -1 wishlist items', async () => {
        var _a;
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: Application.shop, breakpoint: breakpoint.m }));
        page.rootInstance.wishlistItemsNumber = -1;
        await page.waitForChanges();
        const wishlistButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=wishlist-link-icon]');
        expect(wishlistButton === null || wishlistButton === void 0 ? void 0 : wishlistButton.getAttribute('name')).toEqual('heart');
      });
    });
  });
  describe('in pcom', () => {
    let page;
    beforeEach(async () => {
      jest.spyOn(featureToggles, 'isPcomSearchToggleActive').mockReturnValue(true);
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'pcom', locale: 'de-DE' }));
    });
    describe('in pcom', () => {
      it('should render search button', async () => {
        var _a;
        page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'pcom', locale: 'de-DE' }));
        const searchButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=pcom-search-button]'));
        expect(searchButton).toBeTruthy();
      });
    });
    it('should call sendDataLayerEvent when clicking on Pcom search button', async () => {
      var _a, _b;
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { app: 'pcom', locale: 'de-DE' }));
      const searchButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=pcom-search-button]'));
      searchButton === null || searchButton === void 0 ? void 0 : searchButton.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.PCOM_SEARCH_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'mainmenu.pcom.search',
        clickElementName: 'Pcom Search',
        targetUrl: 'https://www.porsche.com/germany/search/'
      });
    });
  });
});
//# sourceMappingURL=level-0-icons.spec.js.map
