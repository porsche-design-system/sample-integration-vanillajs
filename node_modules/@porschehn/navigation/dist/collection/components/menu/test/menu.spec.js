import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RoutingKeys } from "../../../entities/routing-key";
import { EventActions } from "../../../utility/constants";
import { getHTMLElement } from "../../../utility/helper";
import { MenuItem } from "../../menu-item/menu-item";
import { Menu } from "../menu";
import { mockExperienceItem, mockShopItems, mockVehiclePurchaseItem } from "../../../test/test-data";
describe('Menu', () => {
  describe('snapshots', () => {
    it('should render the correct structure for shops', async () => {
      const page = await newSpecPage({
        components: [Menu, MenuItem],
        template: () => h("phn-menu", { item: mockShopItems, routingKey: RoutingKeys.SHOP })
      });
      page.rootInstance.showSkeleton = false;
      await page.waitForChanges();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu role="list">
          <ul>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="shop/item-1" icon="none" stretch="false" target="_self">
                <a href="link1">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 1
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="shop/item-2" icon="none" stretch="false" target="_self">
                <a href="link2">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 2
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="shop/item-3" icon="none" stretch="false" target="_self">
                <a href="link3">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 3
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
          </ul>
        </phn-menu>
      `);
    });
    it('should render the correct HTML structure for experience', async () => {
      const page = await newSpecPage({
        components: [Menu, MenuItem],
        template: () => h("phn-menu", { item: mockExperienceItem, routingKey: RoutingKeys.EXPERIENCE })
      });
      page.rootInstance.showSkeleton = false;
      await page.waitForChanges();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu role="list">
          <ul>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-button-pure align-label="left" data-id="experience/mainmenu.experience.golfsport" icon="arrow-head-right" size="inherit" stretch="true">
                <div class="phn-align-center phn-flex-row">
                  <div class="skeleton-item">
                    <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                      Golf
                    </phn-p-text>
                  </div>
                </div>
              </phn-p-button-pure>
            </phn-menu-item>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="experience/mainmenu.experience.motorsport" icon="none" stretch="false" target="_self">
                <a href="https://preview.ppn.porsche.com/swiss/de/motorsportandevents/motorsport/">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        Motorsport
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
          </ul>
        </phn-menu>
      `);
    });
    it('should render the correct structure for vehicle purchase', async () => {
      const page = await newSpecPage({
        components: [Menu, MenuItem],
        template: () => h("phn-menu", { item: mockVehiclePurchaseItem, routingKey: RoutingKeys.VEHICLE_PURCHASE })
      });
      page.rootInstance.showSkeleton = false;
      await page.waitForChanges();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu role="list">
          <ul>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="vehicle_purchase/item-1" icon="none" stretch="false" target="_self">
                <a href="link1">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 1
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="vehicle_purchase/item-2" icon="none" stretch="false" target="_self">
                <a href="link2">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 2
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
          </ul>
        </phn-menu>
      `);
    });
    it('should render the correct structure for vehicle purchase, including saved vehicles', async () => {
      const page = await newSpecPage({
        components: [Menu, MenuItem],
        template: () => (h("phn-menu", { item: Object.assign(Object.assign({}, mockVehiclePurchaseItem), { savedVehicles: {
              id: 'saved vehicles',
              text: 'Saved Vehicles',
              description: '',
              link: 'https://finder.porsche.com/de/de-DE/favorites',
              icon: ''
            } }), routingKey: RoutingKeys.VEHICLE_PURCHASE }))
      });
      page.rootInstance.showSkeleton = false;
      await page.waitForChanges();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-menu role="list">
          <ul>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="vehicle_purchase/item-1" icon="none" stretch="false" target="_self">
                <a href="link1">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 1
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="vehicle_purchase/item-2" icon="none" stretch="false" target="_self">
                <a href="link2">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 2
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
            <phn-menu-item class="vehiclepurchase-link" role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="vehicle_purchase/saved vehicles" icon="none" stretch="false" target="_self">
                <a href="https://finder.porsche.com/de/de-DE/favorites">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        Saved Vehicles
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
          </ul>
        </phn-menu>
      `);
    });
  });
  it('should render the correct structure for vehicle purchase, without saved vehicles', async () => {
    const page = await newSpecPage({
      components: [Menu, MenuItem],
      template: () => (h("phn-menu", { item: Object.assign({}, mockVehiclePurchaseItem), routingKey: RoutingKeys.VEHICLE_PURCHASE }))
    });
    page.rootInstance.showSkeleton = false;
    await page.waitForChanges();
    expect(page.root).toMatchInlineSnapshot(`
        <phn-menu role="list">
          <ul>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="vehicle_purchase/item-1" icon="none" stretch="false" target="_self">
                <a href="link1">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 1
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
            <phn-menu-item role="listitem">
              <!---->
              <phn-p-link-pure align-label="left" data-id="vehicle_purchase/item-2" icon="none" stretch="false" target="_self">
                <a href="link2">
                  <div class="phn-align-center phn-flex-row">
                    <div class="skeleton-item">
                      <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                        item 2
                      </phn-p-text>
                    </div>
                  </div>
                </a>
              </phn-p-link-pure>
            </phn-menu-item>
          </ul>
        </phn-menu>
      `);
  });
  it('should not open a drawer for a link item', async () => {
    var _a, _b;
    const page = await newSpecPage({
      components: [Menu, MenuItem],
      template: () => h("phn-menu", { item: mockShopItems, routingKey: RoutingKeys.SHOP })
    });
    jest.spyOn(page.rootInstance.mobileMenuItemClick, 'emit');
    (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item'))) === null || _b === void 0 ? void 0 : _b.click();
    expect(page.rootInstance.mobileMenuItemClick.emit).not.toHaveBeenCalled();
  });
  it('should open drawer for a menu item', async () => {
    var _a, _b;
    const page = await newSpecPage({
      components: [Menu, MenuItem],
      template: () => h("phn-menu", { item: mockExperienceItem, routingKey: RoutingKeys.EXPERIENCE })
    });
    page.rootInstance.mobileMenuItemClick.emit = jest.fn();
    (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item'))) === null || _b === void 0 ? void 0 : _b.click();
    expect(page.rootInstance.mobileMenuItemClick.emit).toHaveBeenCalled();
  });
  it('should open drawer with saved vehicles menu item', async () => {
    var _a;
    const page = await newSpecPage({
      components: [Menu, MenuItem],
      template: () => (h("phn-menu", { item: Object.assign(Object.assign({}, mockVehiclePurchaseItem), { savedVehicles: {
            id: 'saved vehicles',
            text: 'Saved Vehicles',
            description: '',
            link: 'https://finder.porsche.com/de/de-DE/favorites',
            icon: ''
          } }), routingKey: RoutingKeys.VEHICLE_PURCHASE, receivedContent: true }))
    });
    const savedVehiclesButton = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.vehiclepurchase-link'));
    expect(savedVehiclesButton).toBeTruthy();
  });
  describe('data analytics', () => {
    it('should send NAVIGATION_LINK_CLICK data event if it is a link', async () => {
      var _a;
      const page = await newSpecPage({
        components: [Menu, MenuItem],
        template: () => h("phn-menu", { item: mockShopItems, routingKey: RoutingKeys.SHOP })
      });
      const menuItem = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item'));
      expect(menuItem === null || menuItem === void 0 ? void 0 : menuItem.datalayerEventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
    });
    it('should send NAVIGATION_CLICK data event if it is a link', async () => {
      var _a;
      const page = await newSpecPage({
        components: [Menu, MenuItem],
        template: () => h("phn-menu", { item: mockExperienceItem, routingKey: RoutingKeys.SHOP })
      });
      const menuItem = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item'));
      expect(menuItem === null || menuItem === void 0 ? void 0 : menuItem.datalayerEventAction).toEqual(EventActions.NAVIGATION_CLICK);
    });
  });
});
//# sourceMappingURL=menu.spec.js.map
