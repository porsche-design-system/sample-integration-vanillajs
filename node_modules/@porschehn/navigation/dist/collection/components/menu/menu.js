import { h, Host } from "@stencil/core";
import { constructRoutingKey } from "../../entities/routing-key";
import { EventActions } from "../../utility/constants";
import { isString } from "../../utility/helper";
import { componentsOnReady } from "../../utility/ready";
import { Timeout } from "../../utility/timeout";
import { finderStateStore } from "../../state/finder-state-store";
import MenuItemLink from "./saved-vehicles/menu-item-link";
import { addRoute, getCurrentRoute } from "../../services/routing-manager";
export class Menu {
  constructor() {
    this.savedVehiclesPosition = 3;
    this.item = undefined;
    this.showHeadline = true;
    this.receivedContent = false;
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = !this.receivedContent;
  }
  // TODO: fix this
  showMenu(childItem) {
    if (!isString(childItem.link)) {
      addRoute([childItem.id]);
    }
  }
  getSavedVehiclesContent(content) {
    const savedVehicles = content.savedVehicles;
    if (savedVehicles !== undefined) {
      return savedVehicles;
    }
    return null;
  }
  render() {
    const displayedItem = this.item.children.length === 1 ? this.item.children[0] : this.item;
    const savedVehicles = this.getSavedVehiclesContent(this.item);
    const { savedVehiclesCount } = finderStateStore.state;
    const menuItems = displayedItem.children.map((childItem) => (h("phn-menu-item", { key: childItem.id, class: `${this.showSkeleton ? 'skeleton' : ''}`, elementId: constructRoutingKey(getCurrentRoute(), childItem.id), iconRight: childItem.children.length > 0 && !this.showSkeleton ? 'arrow-head-right' : '', analyticsId: childItem.id, text: childItem.text, link: childItem.link, datalayerEventAction: isString(childItem.link) ? EventActions.NAVIGATION_LINK_CLICK : EventActions.NAVIGATION_CLICK, onClick: () => this.showMenu(childItem), role: "listitem" })));
    return (h(Host, { role: "list" }, h("ul", null, menuItems, savedVehicles
      ? menuItems.splice(this.savedVehiclesPosition, 0, h(MenuItemLink, { content: savedVehicles, count: savedVehiclesCount, showSkeleton: this.showSkeleton }))
      : null)));
  }
  static get is() { return "phn-menu"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["menu.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["menu.css"]
    };
  }
  static get properties() {
    return {
      "item": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "TMenu | TVehiclePurchaseMenu",
          "resolved": "{ id: string; text: string; link: string; children: TMenu[]; experienceName?: unknown; } | { id: string; text: string; link: string; children: TMenu[]; savedVehicles?: TLink | null | undefined; }",
          "references": {
            "TMenu": {
              "location": "import",
              "path": "../../entities/content",
              "id": "src/entities/content.ts::TMenu"
            },
            "TVehiclePurchaseMenu": {
              "location": "import",
              "path": "../../entities/content",
              "id": "src/entities/content.ts::TVehiclePurchaseMenu"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "showHeadline": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "show-headline",
        "reflect": false,
        "defaultValue": "true"
      },
      "receivedContent": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "received-content",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "showSkeleton": {}
    };
  }
  static get events() {
    return [{
        "method": "mobileMenuItemClick",
        "name": "mobileMenuItemClick",
        "bubbles": true,
        "cancelable": false,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "string[]",
          "resolved": "string[]",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
//# sourceMappingURL=menu.js.map
