import { h, Host } from "@stencil/core";
import { registerContextualDrawerClosing, registerContextualDrawerOpening } from "./contextual-drawer-animation-sequence";
import animationManager from "../../services/animations/animation-manager";
import { DrawerStatusValues } from "../../utility/constants/app";
export class ContextualDrawer {
  constructor() {
    this.isDrawerOpened = false;
  }
  closeContextualDrawer() {
    this.closeDrawer();
  }
  openContextualDrawer() {
    animationManager.play('openContextualDrawer');
  }
  closeDrawer() {
    animationManager.play('closeContextualDrawer');
  }
  componentDidLoad() {
    registerContextualDrawerOpening({
      onStartOpening: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.startOpening });
        this.isDrawerOpened = true;
        const contextualDrawerHeader = document.getElementById('contextual-drawer-header');
        if (contextualDrawerHeader) {
          contextualDrawerHeader.style.display = '';
        }
      },
      onFinishOpening: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.finishOpening });
      }
    });
    registerContextualDrawerClosing({
      onStartClosing: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.startClosing });
      },
      onEndClosing: () => {
        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.finishClosing });
        this.isDrawerOpened = false;
      }
    });
  }
  render() {
    return (h(Host, { style: { display: this.isDrawerOpened ? '' : 'none' } }, h("phn-p-button", { variant: "secondary", className: "close-button", theme: "dark", "hide-label": "true", icon: 'close', "aria-label": "close modal dialog", onClick: () => {
        this.closeDrawer();
      } }), h("div", { class: "contextual-drawer", id: "contextual-drawer" }, h("div", { slot: "contextual_drawer_header" }, h("slot", { name: "contextual_drawer_header" }))), h("div", { "aria-hidden": "true", class: "contextual-drawer-backdrop", onClick: () => {
        this.closeDrawer();
      } })));
  }
  static get is() { return "contextual-drawer"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["contextual-drawer.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["contextual-drawer.css"]
    };
  }
  static get states() {
    return {
      "isDrawerOpened": {}
    };
  }
  static get events() {
    return [{
        "method": "openBackdrop",
        "name": "openBackdrop",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "phnContextualDrawerStatus",
        "name": "phnContextualDrawerStatus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "{\n    status: DrawerStatusTypes;\n  }",
          "resolved": "{ status: DrawerStatusTypes; }",
          "references": {
            "DrawerStatusTypes": {
              "location": "import",
              "path": "../../utility/constants/app",
              "id": "src/utility/constants/app.ts::DrawerStatusTypes"
            }
          }
        }
      }];
  }
  static get listeners() {
    return [{
        "name": "phnCloseContextualDrawer",
        "method": "closeContextualDrawer",
        "target": "window",
        "capture": false,
        "passive": false
      }, {
        "name": "phnOpenContextualDrawer",
        "method": "openContextualDrawer",
        "target": "window",
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=contextual-drawer.js.map
