import { newSpecPage } from "@stencil/core/testing";
import { ContextualDrawer } from "../contextual-drawer";
import { getHTMLElement, loadRootElement } from "../../../utility/helper";
import animationManager from "../../../services/animations/animation-manager";
describe('contextual-drawer', () => {
  const getPage = async () => {
    const page = await newSpecPage({
      components: [ContextualDrawer],
      html: `<contextual-drawer>
                <div style="display: none" id='contextual-drawer-header' slot="contextual_drawer_header">
                  <h1>This is a contextual Drawer Content</h1>
                </div>
             </contextual-drawer>`
    });
    if (page.root)
      loadRootElement(page.root);
    return page;
  };
  it('renders', async () => {
    const page = await getPage();
    expect(page.root).toMatchInlineSnapshot(`
      <contextual-drawer style="display: none;">
        <!---->
        <phn-p-button aria-label="close modal dialog" class="close-button" hide-label="true" icon="close" theme="dark" variant="secondary"></phn-p-button>
        <div class="contextual-drawer" id="contextual-drawer">
          <div slot="contextual_drawer_header">
            <div id="contextual-drawer-header" slot="contextual_drawer_header" style="display: none;">
              <h1>
                This is a contextual Drawer Content
              </h1>
            </div>
          </div>
        </div>
        <div aria-hidden="true" class="contextual-drawer-backdrop"></div>
      </contextual-drawer>
    `);
  });
  describe('animations', () => {
    it('should play close animation when click on close button', async () => {
      var _a, _b;
      const animationPlayMock = jest.spyOn(animationManager, 'play');
      const page = await getPage();
      await page.waitForChanges();
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.close-button'))) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      expect(animationPlayMock).toHaveBeenCalledWith('closeContextualDrawer');
    });
    it('should play close animation when click on backdrop', async () => {
      var _a, _b;
      const animationPlayMock = jest.spyOn(animationManager, 'play');
      const page = await getPage();
      await page.waitForChanges();
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.contextual-drawer-backdrop'))) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      expect(animationPlayMock).toHaveBeenCalledWith('closeContextualDrawer');
    });
    it('should play close animation when phnCloseContextualDrawer event is emitted', async () => {
      const animationPlayMock = jest.spyOn(animationManager, 'play');
      const page = await getPage();
      await page.waitForChanges();
      window.dispatchEvent(new CustomEvent('phnCloseContextualDrawer'));
      await page.waitForChanges();
      expect(animationPlayMock).toHaveBeenCalledWith('closeContextualDrawer');
    });
    it('should play open animation when phnOpenContextualDrawer event is emitted', async () => {
      const animationPlayMock = jest.spyOn(animationManager, 'play');
      const page = await getPage();
      await page.waitForChanges();
      window.dispatchEvent(new CustomEvent('phnOpenContextualDrawer'));
      await page.waitForChanges();
      expect(animationPlayMock).toHaveBeenCalledWith('openContextualDrawer');
    });
    it('should show contextual drawer content when start opening', async () => {
      var _a, _b;
      const page = await getPage();
      await page.waitForChanges();
      window.dispatchEvent(new CustomEvent('phnOpenContextualDrawer'));
      await page.waitForChanges();
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('#contextual-drawer-header')) === null || _b === void 0 ? void 0 : _b.getAttribute('style')).toEqual(null);
    });
  });
});
//# sourceMappingURL=contextual-drawer.spec.js.map
