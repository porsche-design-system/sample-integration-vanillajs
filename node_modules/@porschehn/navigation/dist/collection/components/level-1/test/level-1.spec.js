import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RoutingKeys } from "../../../entities/routing-key";
import { navContentStore } from "../../../state/nav-content-store";
import { navStateStore } from "../../../state/nav-state-store";
import { mockDealerContent, mockModelsContent, mockMyPorscheContent, mockShopLinkContent } from "../../../test/test-data";
import { LOGGED_IN_USER_NO_NAME_STATUS } from "../../../utility/constants";
import { MenuItem } from "../../menu-item/menu-item";
import { Level1 } from "../level-1";
import { breakpoint } from "@porsche-design-system/components-js/styles";
import * as routingManager from "../../../services/routing-manager";
describe('level-1', () => {
  let page;
  const defaultProps = {
    locale: 'de-DE'
  };
  let routingManagerGoToSpy;
  beforeEach(async () => {
    navContentStore.state.models = mockModelsContent;
    navContentStore.state.shop = mockShopLinkContent;
    navContentStore.state.dealer = mockDealerContent;
    navContentStore.state.myPorsche = mockMyPorscheContent;
    navStateStore.state.loggedInState = 'Mirinda Doe';
    navStateStore.state.unreadMessagesCount = 2;
    page = await newSpecPage({
      components: [Level1, MenuItem],
      template: () => h("phn-level-1", Object.assign({}, defaultProps, { breakpoint: breakpoint.xs }))
    });
    routingManagerGoToSpy = jest.spyOn(routingManager, 'goTo');
  });
  it('should render level 1', () => {
    expect(page.root).toMatchInlineSnapshot(`
      <phn-level-1>
        <nav>
          <phn-menu-item class="level1-variant">
            <!---->
            <phn-p-button-pure align-label="left" data-id="models" icon="arrow-head-right" size="inherit" stretch="true">
              <div class="phn-align-center phn-flex-row">
                <div class="skeleton-item">
                  <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                    Models
                  </phn-p-text>
                </div>
              </div>
            </phn-p-button-pure>
          </phn-menu-item>
          <phn-menu-item class="level1-variant">
            <!---->
            <phn-p-button-pure align-label="left" data-id="vehicle_purchase" icon="arrow-head-right" size="inherit" stretch="true">
              <div class="phn-align-center phn-flex-row"></div>
            </phn-p-button-pure>
          </phn-menu-item>
          <phn-menu-item class="level1-variant">
            <!---->
            <phn-p-link-pure align-label="left" data-id="shop" icon="none" stretch="true" target="_self">
              <a href="https://shop.porsche.com/de/de-DE">
                <div class="phn-align-center phn-flex-row">
                  <div class="skeleton-item">
                    <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                      Shop
                    </phn-p-text>
                  </div>
                </div>
              </a>
            </phn-p-link-pure>
          </phn-menu-item>
          <phn-menu-item class="level1-variant">
            <!---->
            <phn-p-button-pure align-label="left" data-id="services" icon="arrow-head-right" size="inherit" stretch="true">
              <div class="phn-align-center phn-flex-row"></div>
            </phn-p-button-pure>
          </phn-menu-item>
          <phn-menu-item class="level1-variant">
            <!---->
            <phn-p-button-pure align-label="left" data-id="experience" icon="arrow-head-right" size="inherit" stretch="true">
              <div class="phn-align-center phn-flex-row"></div>
            </phn-p-button-pure>
          </phn-menu-item>
          <phn-menu-item class="level1-variant">
            <!---->
            <phn-p-link-pure align-label="left" data-id="find_a_dealer" icon="arrow-head-right" stretch="true" target="_self">
              <a href="http://www.porsche.com/all-dealers-map">
                <div class="phn-align-center phn-flex-row">
                  <div class="skeleton-item">
                    <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                      Find a Dealer
                    </phn-p-text>
                  </div>
                </div>
              </a>
            </phn-p-link-pure>
          </phn-menu-item>
          <phn-menu-item class="level1-variant">
            <!---->
            <span aria-hidden="true" class="myporsche-unread-messages-indicator" data-test-id="unread-messages-indicator" slot="icon-modifier"></span>
            <phn-p-button-pure align-label="left" data-id="my_porsche" icon="arrow-head-right" size="inherit" stretch="true">
              <div class="phn-align-center phn-flex-row">
                <div class="skeleton-item">
                  <phn-p-text color="inherit" size="inherit" tag="div" weight="regular">
                    My Porsche
                  </phn-p-text>
                  <div class="text-limit">
                    <phn-p-text class="subtext" color="inherit" data-test-id="subtext" ellipsis="true" size="x-small" tag="div" weight="regular">
                      Mirinda Doe
                    </phn-p-text>
                  </div>
                </div>
              </div>
            </phn-p-button-pure>
          </phn-menu-item>
        </nav>
      </phn-level-1>
    `);
  });
  it('should emit event when clicking on one menu item', () => {
    var _a, _b;
    const items = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-menu-item');
    (_b = items === null || items === void 0 ? void 0 : items[0]) === null || _b === void 0 ? void 0 : _b.click();
    expect(routingManagerGoToSpy).toHaveBeenCalledTimes(1);
    expect(routingManagerGoToSpy).toHaveBeenCalledWith(RoutingKeys.MODELS);
  });
  it('should not emit event when dealer search menu item is clicked in China', async () => {
    var _a;
    const page = await newSpecPage({
      components: [Level1, MenuItem],
      template: () => h("phn-level-1", Object.assign({}, defaultProps, { locale: 'zh-CN', breakpoint: breakpoint.xs }))
    });
    const items = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-menu-item');
    expect(items === null || items === void 0 ? void 0 : items[5].querySelector('a')).toEqualAttribute('href', navContentStore.state.dealer.search.map.link);
  });
  it('should show generic name if myPorsche is enabled and user is logged in but has no username', async () => {
    var _a;
    navStateStore.state.loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
    await page.waitForChanges();
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.innerHTML).toContain(mockMyPorscheContent.loggedInFallback);
  });
});
//# sourceMappingURL=level-1.spec.js.map
