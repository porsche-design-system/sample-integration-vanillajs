import { h } from "@stencil/core/internal";
import { newSpecPage } from "@stencil/core/testing";
import { SignatureHeading } from "../signature-heading";
describe('signature heading', () => {
  let page;
  async function getPage({ text, subtext }) {
    return await newSpecPage({
      components: [SignatureHeading],
      template: () => h("phn-signature-heading", { text: text, subtext: subtext })
    });
  }
  it('should render', async () => {
    var _a;
    page = await getPage({ text: 'Title' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.tagName.toLowerCase()).toEqual('phn-signature-heading');
  });
  it('should contain correct signature based on the prop name', async () => {
    var _a, _b;
    page = await getPage({ text: 'Panamera' });
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-model-signature')) === null || _b === void 0 ? void 0 : _b.getAttribute('model')).toEqual('panamera');
  });
  it('should contain subtext if subtext is given', async () => {
    var _a, _b;
    page = await getPage({ text: 'Panamera', subtext: 'Gasoline | Hybrid' });
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')) === null || _b === void 0 ? void 0 : _b.textContent).toEqual('Gasoline | Hybrid');
  });
  it('should not contain subtext if subtext is not set', async () => {
    var _a;
    page = await getPage({ text: 'Panamera' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')).toBeFalsy();
  });
  it('should not contain subtext if subtext is empty string', async () => {
    var _a;
    page = await getPage({ text: 'Panamera', subtext: '' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')).toBeFalsy();
  });
  it('should not contain subtext if text is 911', async () => {
    var _a;
    page = await getPage({ text: '911', subtext: 'Benzin' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')).toBeFalsy();
  });
  it('should not contain subtext if text is 718', async () => {
    var _a;
    page = await getPage({ text: '718', subtext: 'Benzin' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')).toBeFalsy();
  });
  it('should not contain subtext if text is Macan', async () => {
    var _a;
    page = await getPage({ text: 'Macan', subtext: 'Benzin' });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text')).toBeFalsy();
  });
});
//# sourceMappingURL=signature-heading.spec.js.map
