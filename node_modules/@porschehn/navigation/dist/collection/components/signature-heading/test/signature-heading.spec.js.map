{"version":3,"file":"signature-heading.spec.js","sourceRoot":"","sources":["../../../../../src/components/signature-heading/test/signature-heading.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { SpecPage, h } from '@stencil/core/internal';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { SignatureHeading } from '../signature-heading';\n\ndescribe('signature heading', () => {\n  let page: SpecPage;\n\n  async function getPage({ text, subtext }: { text: string; subtext?: string }): Promise<SpecPage> {\n    return await newSpecPage({\n      components: [SignatureHeading],\n      template: () => <phn-signature-heading text={text} subtext={subtext} />\n    });\n  }\n\n  it('should render', async () => {\n    page = await getPage({ text: 'Title' });\n    expect(page.root?.tagName.toLowerCase()).toEqual('phn-signature-heading');\n  });\n\n  it('should contain correct signature based on the prop name', async () => {\n    page = await getPage({ text: 'Panamera' });\n    expect(page.root?.querySelector('phn-p-model-signature')?.getAttribute('model')).toEqual('panamera');\n  });\n\n  it('should contain subtext if subtext is given', async () => {\n    page = await getPage({ text: 'Panamera', subtext: 'Gasoline | Hybrid' });\n    expect(page.root?.querySelector('phn-p-text')?.textContent).toEqual('Gasoline | Hybrid');\n  });\n\n  it('should not contain subtext if subtext is not set', async () => {\n    page = await getPage({ text: 'Panamera' });\n    expect(page.root?.querySelector('phn-p-text')).toBeFalsy();\n  });\n\n  it('should not contain subtext if subtext is empty string', async () => {\n    page = await getPage({ text: 'Panamera', subtext: '' });\n    expect(page.root?.querySelector('phn-p-text')).toBeFalsy();\n  });\n\n  it('should not contain subtext if text is 911', async () => {\n    page = await getPage({ text: '911', subtext: 'Benzin' });\n    expect(page.root?.querySelector('phn-p-text')).toBeFalsy();\n  });\n\n  it('should not contain subtext if text is 718', async () => {\n    page = await getPage({ text: '718', subtext: 'Benzin' });\n    expect(page.root?.querySelector('phn-p-text')).toBeFalsy();\n  });\n\n  it('should not contain subtext if text is Macan', async () => {\n    page = await getPage({ text: 'Macan', subtext: 'Benzin' });\n    expect(page.root?.querySelector('phn-p-text')).toBeFalsy();\n  });\n});\n"]}