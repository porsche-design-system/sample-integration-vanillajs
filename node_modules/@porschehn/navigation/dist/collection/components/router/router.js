import { h } from "@stencil/core";
import { findTopLevelRoutingKey, getLastRoutingSegment, RoutingKeys } from "../../entities/routing-key";
import { navContentStore } from "../../state/nav-content-store";
import { isDesktop, isString } from "../../utility/helper";
import ShopSection from "./sections/shop";
import VehiclePurchaseSection from "./sections/vehiclePurchase";
export class Router {
  constructor() {
    this.activeRoutingKey = undefined;
    this.breakpoint = undefined;
    this.locale = undefined;
    this.receivedContent = false;
  }
  render() {
    const { models, myPorsche, dealer } = navContentStore.state;
    const topLevelRoutingKey = findTopLevelRoutingKey(this.activeRoutingKey);
    const showHeadline = !isDesktop(this.breakpoint);
    switch (topLevelRoutingKey) {
      case RoutingKeys.DEALER_SEARCH: {
        const routingId = getLastRoutingSegment(this.activeRoutingKey);
        const dealerId = routingId !== topLevelRoutingKey ? routingId : '';
        if (isString(dealerId)) {
          return h("phn-dealer-details-drawer", { breakpoint: this.breakpoint, dealerId: dealerId, locale: this.locale });
        }
        return (h("phn-dealer-search-form", { breakpoint: this.breakpoint, dealer: dealer, locale: this.locale, showHeadline: showHeadline }));
      }
      case RoutingKeys.MY_PORSCHE: {
        if (myPorsche !== null) {
          return h("phn-myporsche-drawer", { class: "overlay-content" });
        }
        return h("div", null);
      }
      case RoutingKeys.SERIES:
      case RoutingKeys.MODELS: {
        const routingId = getLastRoutingSegment(this.activeRoutingKey);
        const activeModelsSeries = models.series.find((modelsSeries) => routingId === modelsSeries.id);
        if (activeModelsSeries !== undefined) {
          return h("phn-car-body-types-drawer", { series: activeModelsSeries, breakpoint: this.breakpoint });
        }
        return h("phn-models", { showHeadline: showHeadline, breakpoint: this.breakpoint });
      }
      case RoutingKeys.MORE:
      case RoutingKeys.EXPERIENCE:
      case RoutingKeys.SERVICES:
      case RoutingKeys.VEHICLE_PURCHASE: {
        return (h(VehiclePurchaseSection, { activeRoutingKey: this.activeRoutingKey, topLevelRoutingKey: topLevelRoutingKey, receivedContent: this.receivedContent, breakpoint: this.breakpoint }));
      }
      case RoutingKeys.SHOP:
        return (h(ShopSection, { activeRoutingKey: this.activeRoutingKey, receivedContent: this.receivedContent, breakpoint: this.breakpoint, loginEvent: this.loginEvent }));
      default: {
        return h("phn-level-1", { locale: this.locale, breakpoint: this.breakpoint });
      }
    }
  }
  static get is() { return "phn-router"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["router.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["router.css"]
    };
  }
  static get properties() {
    return {
      "activeRoutingKey": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "active-routing-key",
        "reflect": false
      },
      "breakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "breakpoint",
        "reflect": false
      },
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      },
      "receivedContent": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "received-content",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "loginEvent",
        "name": "loginEvent",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
}
//# sourceMappingURL=router.js.map
