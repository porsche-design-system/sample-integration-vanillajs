import { getMenuContent } from "../../../services/menu-items-service";
import { navContentStore } from "../../../state/nav-content-store";
import { Fragment, h } from "@stencil/core";
import { constructRoutingKey, RoutingKeys } from "../../../entities/routing-key";
import { isDesktop, IsLoggedIn, isString } from "../../../utility/helper";
import { EventActions } from "../../../utility/constants";
import { navStateStore } from "../../../state/nav-state-store";
import { filterWishlistItemsByAuthStatus, getAvailableShopVariables, getIconNameByMenuItemId } from "../../../utility/helpers/shop-helper";
import { replaceVariables } from "../../../utility/helpers/string-helper";
export default function ShopSection({ activeRoutingKey, breakpoint, receivedContent, loginEvent }) {
  const showHeadline = !isDesktop(breakpoint);
  const displayedContent = getMenuContent(navContentStore.state, activeRoutingKey, RoutingKeys.SHOP);
  if (displayedContent === null) {
    return h("div", null);
  }
  const wishListAuthStatusList = IsLoggedIn(navStateStore.state.loggedInState)
    ? ['loggedIn', null]
    : ['loggedOut', null];
  const wishListItems = filterWishlistItemsByAuthStatus(displayedContent.additionalContent, wishListAuthStatusList);
  function emitLogin(id) {
    if (id === 'login')
      loginEvent.emit();
  }
  return (h(Fragment, null, h("phn-menu", { item: displayedContent, showHeadline: showHeadline, receivedContent: receivedContent }), activeRoutingKey === RoutingKeys.SHOP ? (h("div", { class: "wishlist-container", role: "list" }, wishListItems.map((childItem) => {
    return (h("phn-menu-item", { key: childItem.id, "data-id": childItem.id, size: 'x-small', class: !(isString(childItem.iconUrl) || isString(childItem.icon)) ? 'no-icon' : '', iconLeft: (isString(childItem.id) && getIconNameByMenuItemId(childItem.id)) ||
        childItem.icon ||
        childItem.iconUrl, elementId: constructRoutingKey(activeRoutingKey, childItem.id), analyticsId: childItem.id, text: replaceVariables(childItem.text, getAvailableShopVariables()), link: childItem.link, datalayerEventAction: isString(childItem.link) ? EventActions.NAVIGATION_LINK_CLICK : EventActions.NAVIGATION_CLICK, onClick: () => {
        emitLogin(childItem.id);
      }, role: "listitem" }));
  }))) : null));
}
//# sourceMappingURL=shop.js.map
