import { breakpoint } from "@porsche-design-system/components-js/styles";
import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { EMPTY_SHOP_MENU } from "../../../entities/content";
import { constructRoutingKey, getDealerDetailsRoutingKey, getSeriesRoutingKey, RoutingKeys } from "../../../entities/routing-key";
import { navContentStore } from "../../../state/nav-content-store";
import { navStateStore } from "../../../state/nav-state-store";
import { mockDealerContent, mockModelsContent, mockMyPorscheContent, mockPPNDealerSearchResultsWithLocalizedAddress, mockSeriesContent, mockShopContent } from "../../../test/test-data";
import { Menu } from "../../menu/menu";
import { Router } from "../router";
import { LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS } from "../../../utility/constants";
import * as helper from "../../../utility/helper";
import { shopStateStore } from "../../../state/shop-state-store";
describe('Router', () => {
  const defaultProps = {
    breakpoint: 0,
    locale: 'xx-XX',
    previousRoutingKey: null
  };
  beforeEach(() => {
    navStateStore.set('loggedInState', 'Test User');
    navStateStore.set('unreadMessagesCount', 3);
  });
  it('displays level 1 when activeRoutingKey is MAIN_MENU', async () => {
    const page = await newSpecPage({
      components: [Router],
      template: () => h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: RoutingKeys.MAIN_MENU }))
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-router>
        <phn-level-1 breakpoint="0" locale="xx-XX"></phn-level-1>
      </phn-router>
    `);
  });
  it('displays level 1 when activeRoutingKey is invalid', async () => {
    const page = await newSpecPage({
      components: [Router],
      template: () => h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: 'abc' }))
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-router>
        <phn-level-1 breakpoint="0" locale="xx-XX"></phn-level-1>
      </phn-router>
    `);
  });
  it('displays myporsche when activeRoutingKey is MYPORSCHE', async () => {
    const page = await newSpecPage({
      components: [Router],
      template: () => h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: RoutingKeys.MY_PORSCHE }))
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-router>
        <phn-myporsche-drawer class="overlay-content"></phn-myporsche-drawer>
      </phn-router>
    `);
  });
  it('displays car series model overview when activeRoutingKey is a car series', async () => {
    navContentStore.state.models.series = [mockSeriesContent];
    const page = await newSpecPage({
      components: [Router],
      template: () => h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: getSeriesRoutingKey(mockSeriesContent.id) }))
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-router>
        <phn-car-body-types-drawer activeroutingkey="series/mainmenu.718" breakpoint="0"></phn-car-body-types-drawer>
      </phn-router>
    `);
  });
  it('displays vehicle purchase when activeRoutingKey is VEHICLE_PURCHASE', async () => {
    const page = await newSpecPage({
      components: [Router],
      template: () => h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: RoutingKeys.VEHICLE_PURCHASE }))
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-router>
        <phn-menu routingkey="vehicle_purchase" showheadline=""></phn-menu>
      </phn-router>
    `);
  });
  it('should not show menu-drawer-header on desktop for any content', async () => {
    var _a, _b, _c, _d, _e, _f, _g;
    navContentStore.state.myPorsche = mockMyPorscheContent;
    navContentStore.state.dealer = mockDealerContent;
    navContentStore.state.models = mockModelsContent;
    navContentStore.state.models.series = [mockSeriesContent];
    const page = await newSpecPage({
      components: [Router],
      template: () => (h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: getDealerDetailsRoutingKey('abcdefgh'), breakpoint: breakpoint.l })))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-drawer-header')).toBeNull();
    if (page.root !== undefined) {
      page.root.activeRoutingKey = RoutingKeys.DEALER_SEARCH;
    }
    await page.waitForChanges();
    expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-drawer-header')).toBeNull();
    if (page.root !== undefined) {
      page.root.activeRoutingKey = RoutingKeys.MY_PORSCHE;
    }
    await page.waitForChanges();
    expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-drawer-header')).toBeNull();
    if (page.root !== undefined) {
      page.root.activeRoutingKey = RoutingKeys.SHOP;
    }
    await page.waitForChanges();
    expect((_d = page.root) === null || _d === void 0 ? void 0 : _d.querySelector('phn-drawer-header')).toBeNull();
    if (page.root !== undefined) {
      page.root.activeRoutingKey = RoutingKeys.MAIN_MENU;
    }
    await page.waitForChanges();
    expect((_e = page.root) === null || _e === void 0 ? void 0 : _e.querySelector('phn-drawer-header')).toBeNull();
    if (page.root !== undefined) {
      page.root.activeRoutingKey = getSeriesRoutingKey(mockSeriesContent.id);
    }
    await page.waitForChanges();
    expect((_f = page.root) === null || _f === void 0 ? void 0 : _f.querySelector('phn-drawer-header')).toBeNull();
    if (page.root !== undefined) {
      page.root.activeRoutingKey = RoutingKeys.MAIN_MENU;
    }
    await page.waitForChanges();
    expect((_g = page.root) === null || _g === void 0 ? void 0 : _g.querySelector('phn-drawer-header')).toBeNull();
  });
  describe('Dealer Search', () => {
    it('should display dealer search if activeRoutingKey does not contain dealerId', async () => {
      navContentStore.state.dealer = mockDealerContent;
      const page = await newSpecPage({
        components: [Router],
        template: () => h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: RoutingKeys.DEALER_SEARCH }))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-router>
          <phn-dealer-search-form breakpoint="0" locale="xx-XX" showheadline=""></phn-dealer-search-form>
        </phn-router>
      `);
    });
    it('should display dealer search detail page if activeRoutingKey contains dealerId', async () => {
      navContentStore.state.dealer = mockDealerContent;
      const page = await newSpecPage({
        components: [Router],
        template: () => (h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: getDealerDetailsRoutingKey(mockPPNDealerSearchResultsWithLocalizedAddress[1].ppnDealer.id) })))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-router>
          <phn-dealer-details-drawer breakpoint="0" dealerid="14f3b8a2-b78d-4f96-b7b5-123124" locale="xx-XX"></phn-dealer-details-drawer>
        </phn-router>
      `);
    });
  });
  describe('Shop', () => {
    async function getPage() {
      return await newSpecPage({
        components: [Router, Menu],
        template: () => h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: RoutingKeys.SHOP }))
      });
    }
    it('displays shops item as menu when searching for parent', async () => {
      navContentStore.state.shop = mockShopContent;
      const page = await getPage();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-router>
          <phn-menu role="list">
            <ul>
              <phn-menu-item analyticsid="mainmenu.services.accessories" class="skeleton" datalayereventaction="PAGHomeNav_Navigation_Click" elementid="shop/mainmenu.services.accessories" iconright="" link="" role="listitem" text="Accessories, Services &amp; Fashion"></phn-menu-item>
              <phn-menu-item analyticsid="mainmenu.shops.whatever" class="skeleton" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/mainmenu.shops.whatever" iconright="" link="more-shop-stuff-link" role="listitem" text="More Shop stuff"></phn-menu-item>
            </ul>
          </phn-menu>
          <div class="wishlist-container" role="list">
            <phn-menu-item analyticsid="wishlist" data-id="wishlist" datalayereventaction="PAGHomeNav_Navigation_Click" elementid="shop/wishlist" iconleft="heart" link="" role="listitem" size="x-small" text="Wishlist (0)"></phn-menu-item>
            <phn-menu-item analyticsid="username" data-id="username" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/username" iconleft="user" link="https://login.com" role="listitem" size="x-small" text="Welcome, Test User"></phn-menu-item>
            <phn-menu-item analyticsid="My Porsche" class="no-icon" data-id="My Porsche" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/My Porsche" link="https://login.com" role="listitem" size="x-small" text="My Porsche Id"></phn-menu-item>
            <phn-menu-item analyticsid="login_security" class="no-icon" data-id="login_security" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/login_security" link="https://login.com" role="listitem" size="x-small" text="Login e Security"></phn-menu-item>
            <phn-menu-item analyticsid="personal_details" class="no-icon" data-id="personal_details" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/personal_details" link="https://personal_details.com" role="listitem" size="x-small" text="Personal Details"></phn-menu-item>
            <phn-menu-item analyticsid="payment" class="no-icon" data-id="payment" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/payment" link="https://payment.com" role="listitem" size="x-small" text="Payment &amp; Orders"></phn-menu-item>
            <phn-menu-item analyticsid="my_orders" class="no-icon" data-id="my_orders" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/my_orders" link="https://my_orders.com" role="listitem" size="x-small" text="My Orders"></phn-menu-item>
            <phn-menu-item analyticsid="help" class="no-icon" data-id="help" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/help" link="https://login.com" role="listitem" size="x-small" text="Help"></phn-menu-item>
            <phn-menu-item analyticsid="Country Selector" class="no-icon" data-id="Country Selector" datalayereventaction="PAGHomeNav_NavigationLink_Click" elementid="shop/Country Selector" link="https://login.com" role="listitem" size="x-small" text="North America"></phn-menu-item>
          </div>
        </phn-router>
      `);
    });
    it('should displays wishlist section', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      const page = await getPage();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.wishlist-container')).not.toBeNull();
    });
    it('should have leftIcon for wishlist if provided', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const page = await getPage();
      const wishlist = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.wishlist-container');
      const iconLeftIcons = wishlist === null || wishlist === void 0 ? void 0 : wishlist.querySelectorAll('phn-menu-item[iconleft]');
      expect(iconLeftIcons).toHaveLength(2);
      expect(iconLeftIcons && iconLeftIcons[0].getAttribute('iconleft')).toEqual('heart');
      expect(iconLeftIcons).toHaveLength(2);
      expect(iconLeftIcons && iconLeftIcons[1].getAttribute('iconleft')).toEqual('user');
    });
    it('Should only display loggedin and default items on menu ', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      navStateStore.state.loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
      const page = await getPage();
      const wishlist = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.wishlist-container');
      const menuItems = wishlist === null || wishlist === void 0 ? void 0 : wishlist.querySelectorAll('phn-menu-item');
      expect(menuItems).toHaveLength(9);
    });
    it('Should only display logged out and default items on menu ', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const page = await getPage();
      const wishlist = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.wishlist-container');
      const menuItems = wishlist === null || wishlist === void 0 ? void 0 : wishlist.querySelectorAll('phn-menu-item');
      expect(menuItems).toHaveLength(4);
    });
    it('should show empty menu area if shop content if not provided ', async () => {
      navContentStore.state.shop = Object.assign(Object.assign({}, EMPTY_SHOP_MENU), { id: 'mainmenu.shops', text: 'Shop', link: '' });
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const page = await getPage();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-router>
          <phn-menu role="list">
            <ul></ul>
          </phn-menu>
          <div class="wishlist-container" role="list"></div>
        </phn-router>
      `);
    });
    it('should only show wishlist on shop for level 1', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const page = await getPage();
      if (page.root !== undefined) {
        page.root.activeRoutingKey = 'shop/mainmenu.services.accessories';
      }
      await page.waitForChanges();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('wishlist-container')).toBeNull();
    });
    it('should render empty if there is no content', async () => {
      navContentStore.state.shop = mockShopContent;
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const page = await getPage();
      if (page.root !== undefined) {
        page.root.activeRoutingKey = 'shop/unexistingcontent';
      }
      await page.waitForChanges();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-router>
          <div></div>
        </phn-router>
        `);
    });
    it('displays shops item with links when searching for nested item', async () => {
      const firstLevelId = 'shops.first';
      const secondLevelId = 'shops.first.first';
      const shopContent = {
        id: 'shops',
        text: 'Shops',
        link: '',
        children: [
          {
            id: firstLevelId,
            text: 'First Item',
            link: '',
            children: [
              {
                id: secondLevelId,
                text: 'First First Item',
                link: '',
                children: []
              }
            ]
          }
        ],
        additionalContent: [],
        availableLocales: [],
        availableLocalesOnlyForShop: [],
        logoLinksToShopLocales: []
      };
      navContentStore.state.shop = shopContent;
      const page = await newSpecPage({
        components: [Router, Menu],
        template: () => (h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: constructRoutingKey(RoutingKeys.SHOP, firstLevelId, secondLevelId) })))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-router>
          <phn-menu role="list">
            <ul></ul>
          </phn-menu>
        </phn-router>
      `);
    });
    it('displays shops item with links when searching for item with siblings', async () => {
      const shopContent = {
        id: RoutingKeys.SHOP,
        text: 'Shops',
        link: '',
        children: [
          {
            id: 'shops.first',
            text: 'First Item',
            link: '',
            children: []
          },
          {
            id: 'shops.second',
            text: 'Second Item',
            link: '',
            children: []
          }
        ],
        additionalContent: [],
        availableLocales: [],
        availableLocalesOnlyForShop: [],
        logoLinksToShopLocales: []
      };
      navContentStore.state.shop = shopContent;
      const page = await newSpecPage({
        components: [Router, Menu],
        template: () => (h("phn-router", Object.assign({}, defaultProps, { activeRoutingKey: constructRoutingKey(RoutingKeys.SHOP, shopContent.children[0].id) })))
      });
      expect(page.root).toMatchInlineSnapshot(`
        <phn-router>
          <phn-menu role="list">
            <ul></ul>
          </phn-menu>
        </phn-router>
      `);
    });
    it('emit login event when clicking on menu item with login id', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const page = await getPage();
      await page.waitForChanges();
      const loginButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item[data-id="login"]'));
      const loginEventSpy = jest.spyOn(page.rootInstance.loginEvent, 'emit');
      loginButton === null || loginButton === void 0 ? void 0 : loginButton.click();
      expect(loginEventSpy).toHaveBeenCalledTimes(1);
    });
    it('dont emit login event when clicking on menu item without login id', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const page = await getPage();
      await page.waitForChanges();
      const loginButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item[data-id="wishlist"]'));
      const loginEventSpy = jest.spyOn(page.rootInstance.loginEvent, 'emit');
      loginButton === null || loginButton === void 0 ? void 0 : loginButton.click();
      expect(loginEventSpy).toHaveBeenCalledTimes(0);
    });
    it('should have filled wishlist icon if we have items on wishlist', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      shopStateStore.state.shopInformation.wishlistItemsNumber = 0;
      shopStateStore.state.wishlistItemsNumber = 50;
      const page = await getPage();
      await page.waitForChanges();
      const loginButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item[data-id="wishlist"]'));
      expect(loginButton === null || loginButton === void 0 ? void 0 : loginButton.getAttribute('iconleft')).toEqual('heart-filled');
    });
    it('should have unfilled wishlist icon if we dont have items on wishlist', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      shopStateStore.state.shopInformation.wishlistItemsNumber = 0;
      shopStateStore.state.wishlistItemsNumber = 0;
      const page = await getPage();
      await page.waitForChanges();
      const loginButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item[data-id="wishlist"]'));
      expect(loginButton === null || loginButton === void 0 ? void 0 : loginButton.getAttribute('iconleft')).toEqual('heart');
    });
    it('should display padding if child items have no icons', async () => {
      var _a;
      navContentStore.state.shop = mockShopContent;
      const page = await getPage();
      const itemsWithNoIcon = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.no-icon'));
      expect(itemsWithNoIcon).toHaveLength(7);
    });
  });
});
//# sourceMappingURL=router.spec.js.map
