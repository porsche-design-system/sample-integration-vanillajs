import { breakpoint } from "@porsche-design-system/components-js/styles";
import { h, Host } from "@stencil/core";
import { findTopLevelRoutingKey, getLastRoutingSegment, RoutingKeyPointers, RoutingKeys } from "../../entities/routing-key";
import animationManager from "../../services/animations/animation-manager";
import featureToggles from "../../services/feature-toggles";
import windowService from "../../services/window-service";
import { dealerSearchResultsStore } from "../../state/dealer-search-results-store";
import { routerStore } from "../../state/router-store";
import { AnimationSequences, FEATURE_PORSCHE_75_YEARS_LOGO, NavigationMode, NavigationTheme } from "../../utility/constants";
import { Application } from "../../utility/constants/app";
import { constructThemeClass, focusOnElement, isDesktop, IsKeyboardClick, isPromise, isString } from "../../utility/helper";
import { isShopAvailable } from "../../utility/helpers/shop-helper";
import { componentsOnReady } from "../../utility/ready";
import { Timeout } from "../../utility/timeout";
import { isPlayingDoubleDrawerAnimation } from "../double-drawer/double-drawer-animation-sequences";
import { isPlayingSingleDrawerAnimation } from "../single-drawer/single-drawer-animation-sequences";
export class Level0 {
  constructor() {
    this.operationPipeline = [];
    this.logoLoaded = false;
    this.drawerTimeout = new Timeout(20000);
    this.locale = undefined;
    this.breakpoint = undefined;
    this.loadingContent = false;
    this.receivedContent = false;
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.app = Application.default;
    this.displayLogoOnly = false;
    this.limitedWidth = false;
    this.usingKeyboard = false;
    this.drawerClosed = true;
    this.scrolledPastHeader = false;
    this.showBackdrop = false;
    this.routingKeyHistory = [];
    this.routingKeyPointer = RoutingKeyPointers.LEVEL_ZERO;
    this.isNavigationLoaded = false;
    this.isLoading = false;
    this.isMyPorscheHoveredOn = false;
  }
  loadingContentWatcher() {
    this.setNavigationLoaded();
  }
  breakpointWatcher() {
    this.updateRoutingKeyPointerOfMobileLevel1();
    this.setNavigationLoaded();
    this.handleResizeAnimation();
  }
  handleResizeAnimation() {
    if (!isDesktop(this.breakpoint) && !this.drawerClosed) {
      this.operationPipeline.push(() => {
        animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);
      });
    }
  }
  receivedContentWatcher() {
    this.setNavigationLoaded();
  }
  logoLoadedHandler() {
    this.logoLoaded = true;
    this.setNavigationLoaded();
  }
  scrollHandler() {
    this.scrolledPastHeader = this.el.getBoundingClientRect().bottom <= 0;
  }
  handleKeyDown(e) {
    if (e.key === 'Escape' && !this.drawerClosed) {
      this.usingKeyboard = true;
      this.handleClickDrawerHeaderClose();
      return;
    }
  }
  handleClick(e) {
    this.usingKeyboard = IsKeyboardClick(e);
  }
  handleMobileMenuItemClick({ detail: newRoutingKeys }) {
    this.routingKeyHistory = [...this.routingKeyHistory.slice(0, this.routingKeyPointer + 1), ...newRoutingKeys];
    this.routingKeyPointer = this.routingKeyPointer + newRoutingKeys.length;
    this.updateRouterStore();
  }
  handleSideDrawerItemClick({ detail: routingKeys }) {
    this.routingKeyHistory = [...this.routingKeyHistory.slice(0, this.routingKeyPointer), ...routingKeys];
    if (routingKeys.length > 0) {
      this.routingKeyPointer = this.routingKeyPointer + routingKeys.length - 1;
    }
    this.updateRouterStore();
  }
  handleClickDrawerHeaderBack() {
    this.routingKeyPointer = this.routingKeyPointer - 1;
    this.updateRouterStore();
  }
  handleClickDrawerHeaderClose() {
    if (isPlayingSingleDrawerAnimation() || isPlayingDoubleDrawerAnimation()) {
      return;
    }
    this.routingKeyPointer = -1;
    this.updateRouterStore();
    if (isDesktop(this.breakpoint)) {
      animationManager.play(AnimationSequences.CLOSE_DOUBLE_DRAWER).then(() => {
        this.operationPipeline.push(() => {
          this.handleDrawerClosed();
        });
      });
    }
    else {
      this.operationPipeline.push(() => {
        animationManager.play(AnimationSequences.CLOSE_SINGLE_DRAWER).then(() => {
          this.operationPipeline.push(() => {
            this.handleDrawerClosed();
          });
        });
      });
    }
  }
  handleBackdropClosed() {
    this.showBackdrop = false;
  }
  handleDrawerChanged({ detail: isNavigatingBackwards }) {
    const activeRoutingKey = isNavigatingBackwards
      ? this.routingKeyHistory[this.routingKeyPointer + 1]
      : this.routingKeyHistory[this.routingKeyPointer];
    const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey !== null && activeRoutingKey !== void 0 ? activeRoutingKey : '');
    if (topLevelRoutingKey !== RoutingKeys.DEALER_SEARCH || topLevelRoutingKey === activeRoutingKey) {
      return;
    }
    if (isNavigatingBackwards) {
      dealerSearchResultsStore.state.savedDealerCookie = null;
      return;
    }
    const dealerId = getLastRoutingSegment(activeRoutingKey);
    const { ppnDealer: savedDealer } = dealerSearchResultsStore.state.ppnDealers[dealerId] || {};
    if (savedDealer !== undefined) {
      dealerSearchResultsStore.state.savedDealerCookie = {
        id: savedDealer.id,
        latitude: savedDealer.coordinates.latitude,
        longitude: savedDealer.coordinates.longitude
      };
    }
  }
  async handleOpenDrawer(event) {
    await this.openDrawer(event.detail);
  }
  updateRouterStore() {
    routerStore.state.routingKeyHistory = this.routingKeyHistory;
    routerStore.state.routingKeyPointer = this.routingKeyPointer;
  }
  handleDrawerClosed() {
    this.drawerClosed = true;
    if (this.usingKeyboard) {
      focusOnElement(this.el.querySelector('phn-burger-button phn-p-button-pure'));
    }
  }
  updateRoutingKeyPointerOfMobileLevel1() {
    if (this.routingKeyPointer === RoutingKeyPointers.LEVEL_ONE) {
      this.routingKeyPointer = isDesktop(this.breakpoint) ? RoutingKeyPointers.LEVEL_TWO : RoutingKeyPointers.LEVEL_ONE;
    }
  }
  setNavigationLoaded() {
    this.isNavigationLoaded = !this.loadingContent && this.logoLoaded;
    this.navigationLoaded.emit(this.isNavigationLoaded);
  }
  setInitialRoutingProperties(initialRoutingKey) {
    if (isString(initialRoutingKey)) {
      this.setRoutingProperties([initialRoutingKey]);
    }
    else if (routerStore.state.initialRoutingKeyHistory !== null) {
      this.setRoutingProperties(routerStore.state.initialRoutingKeyHistory);
    }
    else {
      this.setRoutingProperties([RoutingKeys.MODELS]);
    }
  }
  async openDrawer(routingKeyWithClick) {
    const { initialRoutingKey, isKeyboardClick } = routingKeyWithClick;
    if (!this.drawerClosed) {
      return;
    }
    this.isLoading = true;
    this.usingKeyboard = isKeyboardClick;
    this.drawerClosed = false;
    this.showBackdrop = true;
    this.setInitialRoutingProperties(initialRoutingKey);
    await componentsOnReady(this.el, this.drawerTimeout, '.drawer', 'phn-backdrop');
    this.isLoading = false;
    if (isDesktop(this.breakpoint)) {
      animationManager.play(AnimationSequences.OPEN_DOUBLE_DRAWER);
    }
    else {
      this.operationPipeline.push(() => {
        animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);
      });
    }
  }
  isDefaultRouteOnMobile() {
    return (!isDesktop(this.breakpoint) &&
      routerStore.state.initialRoutingKeyHistory === null &&
      this.routingKeyHistory.length === 2 &&
      this.routingKeyHistory[1] === RoutingKeys.MODELS);
  }
  setRoutingProperties(initialRoutingKeys) {
    this.routingKeyHistory = [RoutingKeys.MAIN_MENU, ...initialRoutingKeys];
    this.routingKeyPointer = isDesktop(this.breakpoint) ? RoutingKeyPointers.LEVEL_TWO : RoutingKeyPointers.LEVEL_ONE;
    if (!this.isDefaultRouteOnMobile()) {
      this.routingKeyPointer = this.routingKeyHistory.length - 1;
    }
    this.updateRouterStore();
  }
  disconnectedCallback() {
    this.drawerTimeout.cancel();
  }
  async componentDidRender() {
    const promises = [];
    for (const operation of this.operationPipeline) {
      const maybePromise = operation();
      if (isPromise(maybePromise)) {
        promises.push(maybePromise);
      }
    }
    await Promise.all(promises);
    this.operationPipeline.splice(0, this.operationPipeline.length);
  }
  getLogoSize() {
    if (featureToggles.isFeatureEnabled(FEATURE_PORSCHE_75_YEARS_LOGO, windowService.location.search)) {
      return 'medium';
    }
    return this.breakpoint >= breakpoint.m ? 'medium' : 'small';
  }
  render() {
    const renderBackdrop = this.showBackdrop;
    return (h(Host, { class: `${constructThemeClass(this.mode, this.theme)}-theme themed-background` }, h("header", { class: this.limitedWidth ? 'limited-width' : '' }, renderBackdrop ? (h("phn-backdrop", { activeRoutingKey: this.routingKeyHistory[this.routingKeyPointer], style: this.isLoading ? { display: 'none' } : { backgroundColor: 'rgba(0, 0, 0, 0)', opacity: '0' } })) : null, h("div", { class: "level-0-content" }, !this.displayLogoOnly ? (h("div", { class: "level-0-content-icons" }, h("phn-level-0-icons", { locale: this.locale, theme: this.theme, mode: this.mode, app: this.app, breakpoint: this.breakpoint, isLoading: this.isLoading, isNavigationLoaded: this.isNavigationLoaded }, h("div", { class: "level-0-content-logo" }, h("phn-logo", { app: this.app, locale: this.locale, theme: this.theme, mode: this.mode, size: this.getLogoSize(), breakpoint: this.breakpoint, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? (h("div", { class: "crest-skeleton skeleton-container" }, this.breakpoint > breakpoint.xs ? h("span", { class: "label-bone" }) : h("span", { class: "crest-bone" }))) : null)), isShopAvailable(this.locale, this.app) ? (h("contextual-drawer", null, h("div", { slot: "contextual_drawer_header" }, h("slot", { name: "contextual_drawer_header" })))) : null)) : (h("div", { class: "level-0-content-logo" }, h("phn-logo", { app: this.app, locale: this.locale, theme: this.theme, mode: this.mode, size: this.getLogoSize(), breakpoint: this.breakpoint, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? (h("div", { class: "crest-skeleton skeleton-container" }, this.breakpoint > breakpoint.xs ? h("span", { class: "label-bone" }) : h("span", { class: "crest-bone" }))) : null))), !this.drawerClosed ? (isDesktop(this.breakpoint) ? (h("phn-double-drawer", { class: "drawer", style: this.isLoading ? { display: 'none' } : {}, routingKeyHistory: this.routingKeyHistory, routingKeyPointer: this.routingKeyPointer, breakpoint: this.breakpoint, initialUsingKeyboard: this.usingKeyboard, locale: this.locale, receivedContent: this.receivedContent })) : (h("phn-single-drawer", { class: "drawer", style: this.isLoading ? { display: 'none' } : {}, routingKeyHistory: this.routingKeyHistory, routingKeyPointer: this.routingKeyPointer, breakpoint: this.breakpoint, usingKeyboard: this.usingKeyboard, locale: this.locale, receivedContent: this.receivedContent }))) : null)));
  }
  static get is() { return "phn-level-0"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["level-0.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["level-0.css"]
    };
  }
  static get properties() {
    return {
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      },
      "breakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "breakpoint",
        "reflect": false
      },
      "loadingContent": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "loading-content",
        "reflect": false,
        "defaultValue": "false"
      },
      "receivedContent": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "received-content",
        "reflect": false,
        "defaultValue": "false"
      },
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationThemeType",
          "resolved": "\"dark\" | \"light\"",
          "references": {
            "NavigationThemeType": {
              "location": "import",
              "path": "../../utility/constants",
              "id": "src/utility/constants/index.ts::NavigationThemeType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "NavigationTheme.light"
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationModeType",
          "resolved": "\"hero\" | \"navbar\" | \"transparent\"",
          "references": {
            "NavigationModeType": {
              "location": "import",
              "path": "../../utility/constants",
              "id": "src/utility/constants/index.ts::NavigationModeType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "mode",
        "reflect": false,
        "defaultValue": "NavigationMode.navbar"
      },
      "app": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ApplicationType",
          "resolved": "\"default\" | \"pcom\" | \"shop\"",
          "references": {
            "ApplicationType": {
              "location": "import",
              "path": "../../utility/constants/app",
              "id": "src/utility/constants/app.ts::ApplicationType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "app",
        "reflect": false,
        "defaultValue": "Application.default"
      },
      "displayLogoOnly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "display-logo-only",
        "reflect": false,
        "defaultValue": "false"
      },
      "limitedWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "limited-width",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "usingKeyboard": {},
      "drawerClosed": {},
      "scrolledPastHeader": {},
      "showBackdrop": {},
      "routingKeyHistory": {},
      "routingKeyPointer": {},
      "isNavigationLoaded": {},
      "isLoading": {},
      "isMyPorscheHoveredOn": {}
    };
  }
  static get events() {
    return [{
        "method": "navigationLoaded",
        "name": "navigationLoaded",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "loadingContent",
        "methodName": "loadingContentWatcher"
      }, {
        "propName": "breakpoint",
        "methodName": "breakpointWatcher"
      }, {
        "propName": "receivedContent",
        "methodName": "receivedContentWatcher"
      }];
  }
  static get listeners() {
    return [{
        "name": "logoLoaded",
        "method": "logoLoadedHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "scroll",
        "method": "scrollHandler",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "keydown",
        "method": "handleKeyDown",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "click",
        "method": "handleClick",
        "target": undefined,
        "capture": false,
        "passive": true
      }, {
        "name": "mobileMenuItemClick",
        "method": "handleMobileMenuItemClick",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "sideDrawerItemClick",
        "method": "handleSideDrawerItemClick",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "clickDrawerHeaderBack",
        "method": "handleClickDrawerHeaderBack",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "clickDrawerHeaderClose",
        "method": "handleClickDrawerHeaderClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "backdropClosed",
        "method": "handleBackdropClosed",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "drawerChanged",
        "method": "handleDrawerChanged",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "openDrawer",
        "method": "handleOpenDrawer",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=level-0.js.map
