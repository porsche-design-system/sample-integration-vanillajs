import { breakpoint } from "@porsche-design-system/components-js/styles";
import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { getDealerDetailsRoutingKey, getModelsRoutingKey, RoutingKeyPointers, RoutingKeys } from "../../../entities/routing-key";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import animationManager, { makeSequence } from "../../../services/animations/animation-manager";
import featureToggles from "../../../services/feature-toggles";
import windowService from "../../../services/window-service";
import { dealerSearchResultsStore } from "../../../state/dealer-search-results-store";
import { navContentStore } from "../../../state/nav-content-store";
import { routerStore } from "../../../state/router-store";
import animationManagerMock from "../../../test/animation-manager.mock";
import * as el from "../../../test/element-helpers";
import { mockLocaleContent, mockModelsContent, mockPPNDealerSearchResultsWithLocalizedAddress } from "../../../test/test-data";
import { AnimationSequences, EventActions, NavigationMode, NavigationTheme, SAVED_DEALER_COOKIE } from "../../../utility/constants";
import { Application } from "../../../utility/constants/app";
import * as helper from "../../../utility/helper";
import { getHTMLElement } from "../../../utility/helper";
import * as ready from "../../../utility/ready";
import { Backdrop } from "../../backdrop/backdrop";
import { registerContextualDrawerOpening } from "../../contextual-drawer/contextual-drawer-animation-sequence";
import { Level0Icons } from "../../level-0-icons/level-0-icons";
import { Logo } from "../../logo/logo";
import { MyPorscheIconButton } from "../../my-porsche-icon-button/my-porsche-icon-button";
import { SingleDrawer } from "../../single-drawer/single-drawer";
import { registerCloseSingleDrawerAnimation, registerOpenSingleDrawerAnimation } from "../../single-drawer/single-drawer-animation-sequences";
import { Level0 } from "../level-0";
describe('level-0', () => {
  const defaultProps = {
    locale: 'it-CH',
    breakpoint: breakpoint.m,
    loadingContent: false,
    receivedContent: true,
    app: Application.default,
    theme: NavigationTheme.light,
    mode: NavigationMode.navbar,
    displayLogoOnly: false,
    limitedWidth: false
  };
  beforeEach(() => {
    jest.spyOn(ready, 'componentsOnReady').mockRestore();
    animationManager.register('closeDoubleDrawer', makeSequence([]));
    animationManager.register('openDoubleDrawer', makeSequence([]));
    registerOpenSingleDrawerAnimation({ onAnimationStarts: jest.fn(), onAnimationEnds: jest.fn() });
    registerCloseSingleDrawerAnimation({ onAnimationStarts: jest.fn(), onAnimationEnds: jest.fn() });
    navContentStore.state.crest = mockLocaleContent.crest;
  });
  afterEach(() => {
    jest.clearAllMocks();
  });
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async function getPage(props = defaultProps, loadLogo = true, additionalComponents = []) {
    const page = await newSpecPage({
      components: [Level0, Backdrop, MyPorscheIconButton, Level0Icons, ...additionalComponents],
      template: () => h("phn-level-0", Object.assign({}, props))
    });
    animationManager.initialize(page.root);
    jest.spyOn(page.rootInstance.drawerTimeout, 'set').mockImplementation(async (cb) => {
      if (typeof cb === 'function') {
        await cb();
      }
    });
    if (loadLogo) {
      page.rootInstance.logoLoadedHandler();
      await page.waitForChanges();
    }
    return page;
  }
  describe('snapshots', () => {
    it('should render skeletons if navigation has not yet loaded', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), false);
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0 class="navbar-theme themed-background">
          <!---->
          <header>
            <div class="level-0-content">
              <div class="level-0-content-icons">
                <phn-level-0-icons>
                  <!---->
                  <div class="contextual-icons">
                    <div class="left-icons">
                      <phn-burger-button alignlabel="right" mode="navbar" theme="light" style="display: none;"></phn-burger-button>
                      <div class="skeleton-container">
                        <div class="burger-button-skeleton"></div>
                      </div>
                    </div>
                    <div class="level-0-content-logo">
                      <phn-logo app="default" breakpoint="480" locale="it-CH" mode="navbar" size="small" theme="light" style="display: none;"></phn-logo>
                      <div class="crest-skeleton skeleton-container">
                        <span class="crest-bone"></span>
                      </div>
                    </div>
                    <div class="right-icons">
                      <div class="icon">
                        <phn-my-porsche-icon-button style="display: none;">
                          <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                        </phn-my-porsche-icon-button>
                        <div class="skeleton-container">
                          <div class="pure-button-skeleton"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </phn-level-0-icons>
              </div>
            </div>
          </header>
        </phn-level-0>
      `);
    });
    it('should render level0', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), true);
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0 class="navbar-theme themed-background">
          <!---->
          <header>
            <div class="level-0-content">
              <div class="level-0-content-icons">
                <phn-level-0-icons>
                  <!---->
                  <div class="contextual-icons">
                    <div class="left-icons">
                      <phn-burger-button alignlabel="right" mode="navbar" theme="light"></phn-burger-button>
                    </div>
                    <div class="level-0-content-logo">
                      <phn-logo app="default" breakpoint="480" locale="it-CH" mode="navbar" size="small" theme="light"></phn-logo>
                    </div>
                    <div class="right-icons">
                      <div class="icon">
                        <phn-my-porsche-icon-button>
                          <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                        </phn-my-porsche-icon-button>
                      </div>
                    </div>
                  </div>
                </phn-level-0-icons>
              </div>
            </div>
          </header>
        </phn-level-0>
      `);
    });
    it('should render level0', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), true);
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0 class="navbar-theme themed-background">
          <!---->
          <header>
            <div class="level-0-content">
              <div class="level-0-content-icons">
                <phn-level-0-icons>
                  <!---->
                  <div class="contextual-icons">
                    <div class="left-icons">
                      <phn-burger-button alignlabel="right" mode="navbar" theme="light"></phn-burger-button>
                    </div>
                    <div class="level-0-content-logo">
                      <phn-logo app="default" breakpoint="480" locale="it-CH" mode="navbar" size="small" theme="light"></phn-logo>
                    </div>
                    <div class="right-icons">
                      <div class="icon">
                        <phn-my-porsche-icon-button>
                          <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                        </phn-my-porsche-icon-button>
                      </div>
                    </div>
                  </div>
                </phn-level-0-icons>
              </div>
            </div>
          </header>
        </phn-level-0>
      `);
    });
    it('should render level0 with header with class limited-width', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs, displayLogoOnly: true, limitedWidth: true }), true);
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0 class="navbar-theme themed-background">
          <!---->
          <header class="limited-width">
            <div class="level-0-content">
              <div class="level-0-content-logo">
                <phn-logo app="default" breakpoint="480" locale="it-CH" mode="navbar" size="small" theme="light"></phn-logo>
              </div>
            </div>
          </header>
        </phn-level-0>
      `);
    });
    it('should render level0 with level0 icons when displaylLogoOnly is false', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs, displayLogoOnly: false }), true);
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0 class="navbar-theme themed-background">
          <!---->
          <header>
            <div class="level-0-content">
              <div class="level-0-content-icons">
                <phn-level-0-icons>
                  <!---->
                  <div class="contextual-icons">
                    <div class="left-icons">
                      <phn-burger-button alignlabel="right" mode="navbar" theme="light"></phn-burger-button>
                    </div>
                    <div class="level-0-content-logo">
                      <phn-logo app="default" breakpoint="480" locale="it-CH" mode="navbar" size="small" theme="light"></phn-logo>
                    </div>
                    <div class="right-icons">
                      <div class="icon">
                        <phn-my-porsche-icon-button>
                          <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                        </phn-my-porsche-icon-button>
                      </div>
                    </div>
                  </div>
                </phn-level-0-icons>
              </div>
            </div>
          </header>
        </phn-level-0>
      `);
    });
    it('should render double drawer for desktop', async () => {
      var _a, _b, _c;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.l }), true);
      const burgerButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button');
      burgerButton === null || burgerButton === void 0 ? void 0 : burgerButton.click();
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-double-drawer')).not.toBeNull();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-single-drawer')).toBeNull();
    });
    it('should render single drawer for mobile', async () => {
      var _a, _b, _c;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), true);
      const burgerButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button');
      burgerButton === null || burgerButton === void 0 ? void 0 : burgerButton.click();
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-single-drawer')).not.toBeNull();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-double-drawer')).toBeNull();
    });
  });
  describe('navigation loaded', () => {
    it('sets isNavigationLoaded to true on logoLoaded event', async () => {
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.l }), false);
      expect(page.rootInstance.isNavigationLoaded).toBeFalsy();
      page.rootInstance.logoLoadedHandler();
      await page.waitForChanges();
      expect(page.rootInstance.isNavigationLoaded).toBeTruthy();
    });
    it('should render only phn-single-drawer for mobile', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.s }));
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')).not.toBeNull();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-menu-desktop-level-1')).toBeNull();
    });
  });
  describe('Navigation on mobile view', () => {
    let page;
    beforeEach(async () => {
      var _a;
      page = await getPage(defaultProps);
      (_a = page.root) === null || _a === void 0 ? void 0 : _a.setAttribute('breakpoint', `${breakpoint.xs}`);
    });
    it('closes the menu when the key escape is pressed', async () => {
      var _a, _b, _c, _d, _e, _f;
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await animationManager.play('openSingleDrawer');
      await page.waitForChanges();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-single-drawer')).toEqualAttribute('routingKeyPointer', 0);
      el.keyDown((_d = page.root) !== null && _d !== void 0 ? _d : null, 'Escape');
      await page.waitForChanges();
      // then
      expect((_e = page.root) === null || _e === void 0 ? void 0 : _e.querySelector('phn-single-drawer')).toEqualAttribute('routingKeyPointer', -1);
      page.rootInstance.handleDrawerClosed();
      expect(helper.focusOnElement).toBeCalledWith((_f = page.root) === null || _f === void 0 ? void 0 : _f.querySelector('phn-burger-button phn-p-button-pure'));
    });
    it('nothing happens when a random key is pressed', async () => {
      var _a, _b, _c, _d, _e;
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-single-drawer')).toEqualAttribute('routingKeyPointer', 0);
      el.keyDown((_d = page.root) !== null && _d !== void 0 ? _d : null, 'Space');
      await page.waitForChanges();
      // then
      expect((_e = page.root) === null || _e === void 0 ? void 0 : _e.querySelector('phn-single-drawer')).toEqualAttribute('routingKeyPointer', 0);
    });
  });
  describe('drawer', () => {
    it('closes drawer when onDrawerClosed is emitted', async () => {
      var _a, _b, _c, _d, _e;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }));
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      await animationManager.play('openSingleDrawer');
      await page.waitForChanges();
      el.keyDown((_c = page.root) !== null && _c !== void 0 ? _c : null, 'Escape');
      await page.waitForChanges();
      // then
      expect((_d = page.root) === null || _d === void 0 ? void 0 : _d.querySelector('phn-single-drawer')).toEqualAttribute('routingKeyPointer', -1);
      page.rootInstance.handleDrawerClosed();
      await page.waitForChanges();
      expect((_e = page.root) === null || _e === void 0 ? void 0 : _e.querySelector('phn-single-drawer')).toBeNull();
    });
    describe('routing', () => {
      let page;
      beforeEach(async () => {
        page = await getPage(defaultProps);
        page.rootInstance.openDrawer({ initialRoutingKey: RoutingKeys.MODELS, isKeyboardClick: false });
        await page.waitForChanges();
      });
      it('should have empty routingKeyHistory by default', async () => {
        const page = await getPage(defaultProps);
        expect(page.rootInstance.routingKeyHistory).toEqual([]);
      });
      it('should open models when given no initial routing key', async () => {
        const page = await getPage(defaultProps);
        page.rootInstance.openDrawer({ initialRoutingKey: '', isKeyboardClick: false });
        await page.waitForChanges();
        expect(page.rootInstance.routingKeyHistory).toEqual([RoutingKeys.MAIN_MENU, RoutingKeys.MODELS]);
        expect(page.rootInstance.routingKeyPointer).toEqual(1);
      });
      it('should update routingKeyHistory and routingKeyPointer on mobileMenuItemClick event', async () => {
        navContentStore.state.models = mockModelsContent;
        const modelsRoutingKey = getModelsRoutingKey(mockModelsContent.series[0].id);
        expect(page.rootInstance.routingKeyHistory).toEqual([RoutingKeys.MAIN_MENU, RoutingKeys.MODELS]);
        expect(page.rootInstance.routingKeyPointer).toEqual(1);
        page.rootInstance.handleMobileMenuItemClick({ detail: [modelsRoutingKey] });
        await page.waitForChanges();
        expect(page.rootInstance.routingKeyHistory).toEqual([
          RoutingKeys.MAIN_MENU,
          RoutingKeys.MODELS,
          modelsRoutingKey
        ]);
        expect(page.rootInstance.routingKeyPointer).toEqual(2);
      });
      it('should update routingKeyPointer on clickDrawerHeaderBack', async () => {
        navContentStore.state.models = mockModelsContent;
        const modelsRoutingKey = getModelsRoutingKey(mockModelsContent.series[0].id);
        page.rootInstance.handleMobileMenuItemClick({ detail: [modelsRoutingKey] });
        await page.waitForChanges();
        expect(page.rootInstance.routingKeyHistory).toEqual([
          RoutingKeys.MAIN_MENU,
          RoutingKeys.MODELS,
          modelsRoutingKey
        ]);
        expect(page.rootInstance.routingKeyPointer).toEqual(2);
        page.rootInstance.handleClickDrawerHeaderBack();
        await page.waitForChanges();
        expect(page.rootInstance.routingKeyHistory).toEqual([
          RoutingKeys.MAIN_MENU,
          RoutingKeys.MODELS,
          modelsRoutingKey
        ]);
        expect(page.rootInstance.routingKeyPointer).toEqual(1);
      });
      it('should reset the saved dealer cookie on drawerChanged in dealer-details-drawer', async () => {
        const savedDealerId = 'abcdefgh';
        dealerSearchResultsStore.state.savedDealerCookie = { id: savedDealerId, latitude: 1, longitude: 2 };
        page.rootInstance.handleMobileMenuItemClick({
          detail: [RoutingKeys.DEALER_SEARCH, getDealerDetailsRoutingKey(savedDealerId)]
        });
        await page.waitForChanges();
        page.rootInstance.handleClickDrawerHeaderBack();
        await page.waitForChanges();
        page.rootInstance.handleDrawerChanged({ detail: true });
        await page.waitForChanges();
        expect(dealerSearchResultsStore.state.savedDealerCookie).toBeNull();
      });
      it('should set cookie and update store when a dealer result is selected', async () => {
        const cookieSpy = jest.spyOn(windowService, 'setCookie');
        const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
        const mockPPNDealer = mockDealer.ppnDealer;
        dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };
        const savedDealer = {
          id: mockPPNDealer.id,
          latitude: mockPPNDealer.coordinates.latitude,
          longitude: mockPPNDealer.coordinates.longitude
        };
        page.rootInstance.handleMobileMenuItemClick({
          detail: [RoutingKeys.DEALER_SEARCH]
        });
        await page.waitForChanges();
        page.rootInstance.handleMobileMenuItemClick({
          detail: [getDealerDetailsRoutingKey(mockPPNDealer.id)]
        });
        await page.waitForChanges();
        page.rootInstance.handleDrawerChanged({ detail: false });
        await page.waitForChanges();
        expect(cookieSpy).toBeCalledWith(SAVED_DEALER_COOKIE, JSON.stringify(savedDealer));
        expect(dealerSearchResultsStore.state.savedDealerCookie).toEqual(savedDealer);
      });
      it('should reset routingKeyHistory on clickDrawerHeaderClose', async () => {
        page.rootInstance.handleClickDrawerHeaderClose();
        await page.waitForChanges();
        expect(page.rootInstance.routingKeyHistory).toEqual([RoutingKeys.MAIN_MENU, RoutingKeys.MODELS]);
        expect(page.rootInstance.routingKeyPointer).toEqual(-1);
      });
      it('should not close the menu when some animation is playing', async () => {
        page.rootInstance.handleSideDrawerItemClick({ detail: [RoutingKeys.SHOP] });
        await page.waitForChanges();
        let resolver = () => {
          // default
        };
        animationManagerMock.register(AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER, makeSequence([
          [
            {
              onStart: async () => new Promise((resolve) => (resolver = resolve)),
              animation: { name: 'fadeIn' },
              elementSelector: ''
            }
          ]
        ]));
        const promise = animationManagerMock.play(AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER);
        page.rootInstance.handleClickDrawerHeaderClose();
        await page.waitForChanges();
        resolver();
        await promise;
        expect(page.rootInstance.routingKeyHistory).toEqual([RoutingKeys.MAIN_MENU, RoutingKeys.SHOP]);
        expect(page.rootInstance.routingKeyPointer).toEqual(1);
      });
      it('should update routingKeyHistory and change main drawer content on side-drawer-item click', async () => {
        page.rootInstance.handleSideDrawerItemClick({ detail: [RoutingKeys.EXPERIENCE] });
        expect(page.rootInstance.routingKeyHistory).toEqual([RoutingKeys.MAIN_MENU, RoutingKeys.EXPERIENCE]);
      });
      it('should update routingKeyPointer at last element of history when dealear search is clicked in side drawer and there is a stored dealer', async () => {
        page.rootInstance.handleSideDrawerItemClick({ detail: [RoutingKeys.DEALER_SEARCH, 'dealerId'] });
        expect(page.rootInstance.routingKeyHistory).toEqual([
          RoutingKeys.MAIN_MENU,
          RoutingKeys.DEALER_SEARCH,
          'dealerId'
        ]);
        expect(page.rootInstance.routingKeyPointer).toEqual(2);
      });
      it('should redirect user to myPorsche double drawer on desktop when myPorsche button is clicked', async () => {
        var _a;
        const page = await getPage(defaultProps);
        await page.waitForChanges();
        const myPorscheButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-my-porsche-icon-button'));
        myPorscheButton === null || myPorscheButton === void 0 ? void 0 : myPorscheButton.click();
        await page.waitForChanges();
        expect(page.rootInstance.routingKeyHistory).toEqual([RoutingKeys.MAIN_MENU, RoutingKeys.MY_PORSCHE]);
        expect(page.rootInstance.drawerClosed).toBeFalsy();
        expect(page.rootInstance.showBackdrop).toBeTruthy();
        expect(page.rootInstance.routingKeyPointer).toEqual(1);
      });
      it('should redirect user to myPorsche single drawer on mobile when myPorsche button is clicked', async () => {
        var _a, _b;
        const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), true);
        await page.waitForChanges();
        const myPorscheButton = helper.getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-my-porsche-icon-button'));
        myPorscheButton === null || myPorscheButton === void 0 ? void 0 : myPorscheButton.click();
        await page.waitForChanges();
        expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-single-drawer')).not.toBeNull();
        expect(page.rootInstance.routingKeyHistory).toEqual([RoutingKeys.MAIN_MENU, RoutingKeys.MY_PORSCHE]);
        expect(page.rootInstance.drawerClosed).toBeFalsy();
        expect(page.rootInstance.showBackdrop).toBeTruthy();
        expect(page.rootInstance.routingKeyPointer).toEqual(1);
      });
      it('should deep level link user to MenuItem when initialRoutingPath is set on desktop', async () => {
        var _a;
        const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.m }), true);
        routerStore.state.initialRoutingKeyHistory = [
          'shop',
          'shop/mainmenu.shops.accessories',
          'shop/mainmenu.shops.accessories/mainmenu.shops.accessories.preownedinventory'
        ];
        const burgerButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button');
        burgerButton === null || burgerButton === void 0 ? void 0 : burgerButton.click();
        await page.waitForChanges();
        expect(page.rootInstance.routingKeyHistory).toEqual([
          'mainmenu',
          'shop',
          'shop/mainmenu.shops.accessories',
          'shop/mainmenu.shops.accessories/mainmenu.shops.accessories.preownedinventory'
        ]);
        expect(page.rootInstance.drawerClosed).toBeFalsy();
        expect(page.rootInstance.showBackdrop).toBeTruthy();
        expect(page.rootInstance.routingKeyPointer).toEqual(3);
      });
    });
    describe('scroll behaviour', () => {
      it('should set scrolledPastHeader to true when header leaves view', async () => {
        const page = await getPage(defaultProps);
        jest.spyOn(page.rootInstance.el, 'getBoundingClientRect').mockReturnValue({ bottom: 0 });
        page.win.dispatchEvent(new Event('scroll'));
        expect(page.rootInstance.scrolledPastHeader).toEqual(true);
      });
    });
  });
  describe('animation', () => {
    it('should change drawerClosed to true when doubleDrawer slide out animation finishes', async () => {
      var _a, _b, _c;
      const page = await getPage(defaultProps);
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      expect(page.rootInstance.drawerClosed).toBe(false);
      el.keyDown((_c = page.root) !== null && _c !== void 0 ? _c : null, 'Escape');
      await page.waitForChanges();
      page.rootInstance.handleDrawerClosed();
      await page.waitForChanges();
      expect(page.rootInstance.drawerClosed).toBe(true);
    });
    it('should fadeOut backdrop when drawerStartsClosing event is dispatched', async () => {
      var _a, _b, _c;
      const page = await getPage(defaultProps);
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      page.rootInstance.handleBackdropClosed();
      await page.waitForChanges();
      expect(getHTMLElement((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-backdrop'))).toBeNull();
    });
  });
  describe('slow loading', () => {
    it('should render but not display drawers until they have finished loading', async () => {
      var _a, _b, _c;
      const page = await getPage(defaultProps);
      // eslint-disable-next-line @typescript-eslint/ban-types
      let drawerLoadTimeout;
      jest.spyOn(page.rootInstance.drawerTimeout, 'set').mockImplementation(async (cb) => {
        if (typeof cb === 'function') {
          drawerLoadTimeout = cb;
        }
      });
      page.rootInstance.logoLoadedHandler();
      await page.waitForChanges();
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      const doubleDrawer = (_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-double-drawer');
      expect(doubleDrawer).toEqualAttribute('style', 'display: none;');
      drawerLoadTimeout();
      await page.waitForChanges();
      await page.waitForChanges();
      expect(doubleDrawer).toEqualAttribute('style', null);
    });
  });
  describe('resize window', () => {
    it('updates history to display second level in main drawer when resizing the window from mobile to desktop', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }));
      routerStore.state.initialRoutingKeyHistory = null;
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      await page.rootInstance.breakpointWatcher();
      expect(page.rootInstance.routingKeyPointer).toEqual(RoutingKeyPointers.LEVEL_ONE);
      expect(page.rootInstance.routingKeyHistory[0]).toEqual(RoutingKeys.MAIN_MENU);
      page.rootInstance.breakpoint = breakpoint.l;
      expect(page.rootInstance.routingKeyPointer).toEqual(RoutingKeyPointers.LEVEL_TWO);
      expect(page.rootInstance.routingKeyHistory[1]).toEqual(RoutingKeys.MODELS);
    });
    it('should play correct animation and show correct drawer when resizing from double to single drawer', async () => {
      var _a, _b, _c;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.s }), true, [SingleDrawer]);
      page.rootInstance.routingKeyHistory = [RoutingKeys.MAIN_MENU, RoutingKeys.MODELS];
      page.rootInstance.routingKeyPointer = [RoutingKeyPointers.LEVEL_TWO];
      (_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-burger-button')) === null || _b === void 0 ? void 0 : _b.click();
      await page.waitForChanges();
      page.rootInstance.breakpoint = breakpoint.xs;
      await page.waitForChanges();
      await new Promise((resolve) => {
        setTimeout(resolve, 0);
      });
      expect(animationManager.play).toHaveBeenCalledWith(AnimationSequences.OPEN_SINGLE_DRAWER);
      const activeDrawer = (_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.drawer.active');
      expect(activeDrawer).not.toBeNull();
    });
  });
  describe('in shop', () => {
    let page;
    const mockShopContent = {
      children: [],
      id: '',
      text: '',
      link: 'https://shop.porsche.com/ch/it-CH',
      cart: 'https://shop.porsche.com/ch/it-CH/cart',
      additionalContent: [],
      availableLocales: ['it-CH'],
      availableLocalesOnlyForShop: [],
      logoLinksToShopLocales: []
    };
    beforeEach(async () => {
      registerContextualDrawerOpening({
        onStartOpening: () => null,
        onFinishOpening: () => null
      });
      mockLocaleContent.crest.link = 'https://shop.porsche.com/ch/it-CH';
      navContentStore.state.crest = mockLocaleContent.crest;
      navContentStore.state.shop = mockShopContent;
      page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.m, app: 'shop' }), true);
    });
    it('renders navigation with search drawer', async () => {
      expect(page.root).toMatchInlineSnapshot(`
        <phn-level-0 class="navbar-theme themed-background">
          <!---->
          <header>
            <div class="level-0-content">
              <div class="level-0-content-icons">
                <phn-level-0-icons>
                  <!---->
                  <div class="contextual-icons">
                    <div class="left-icons">
                      <phn-burger-button alignlabel="right" mode="navbar" theme="light"></phn-burger-button>
                    </div>
                    <div class="level-0-content-logo">
                      <phn-logo app="shop" breakpoint="1000" locale="it-CH" mode="navbar" size="medium" theme="light"></phn-logo>
                    </div>
                    <div class="right-icons">
                      <div class="icon">
                        <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the shop search field' }" data-test-id="search-button" hide-label="true" icon="search" stretch="true" theme="light"></phn-p-button-pure>
                      </div>
                      <div class="icon">
                        <phn-p-link-pure class="shopping-cart-link" data-test-id="shopping-cart-link" hide-label="true" icon="none" target="_self" theme="light">
                          <a aria-label="My shopping bag, 0 items, estimated subtotal 0" href="https://shop.porsche.com/ch/it-CH/cart">
                            <div class="icon-flex">
                              <phn-p-icon data-test-id="shopping-cart-link-icon" name="shopping-bag" theme="light"></phn-p-icon>
                            </div>
                          </a>
                        </phn-p-link-pure>
                      </div>
                      <div class="icon">
                        <phn-my-porsche-icon-button>
                          <phn-p-button-pure aria="{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the my porsche menu' }" data-id="my_porsche-contextual-button" data-test-id="myporsche-button" hide-label="true" icon="user" stretch="true" theme="light"></phn-p-button-pure>
                        </phn-my-porsche-icon-button>
                      </div>
                    </div>
                  </div>
                </phn-level-0-icons>
                <contextual-drawer>
                  <div slot="contextual_drawer_header"></div>
                </contextual-drawer>
              </div>
            </div>
          </header>
        </phn-level-0>
      `);
    });
    it('should render crest with shop link when in shop application and with shop only locale', async () => {
      var _a, _b, _c;
      navContentStore.state.shop = Object.assign(Object.assign({}, mockShopContent), { availableLocales: ['sv-SE'], logoLinksToShopLocales: ['sv-SE'] });
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { locale: 'sv-SE', app: 'shop' }), true, [Logo]);
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-logo > phn-p-wordmark')) === null || _b === void 0 ? void 0 : _b.getAttribute('href')).toEqual((_c = navContentStore.state.shop) === null || _c === void 0 ? void 0 : _c.link);
    });
  });
  describe('oneUI on desktop', () => {
    it('should show menu burger button at first', async () => {
      var _a, _b;
      const page = await getPage(Object.assign({}, defaultProps), true);
      const headerFlex = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.level-0-content>.level-0-content-icons>phn-level-0-icons>.contextual-icons>.left-icons');
      expect(headerFlex === null || headerFlex === void 0 ? void 0 : headerFlex.firstElementChild).toEqual((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-burger-button'));
    });
    it('should show porsche wordmark in the middle of the page', async () => {
      var _a, _b;
      const page = await getPage(Object.assign({}, defaultProps), true);
      const headerFlex = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.level-0-content-logo');
      const logo = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-logo');
      expect(headerFlex === null || headerFlex === void 0 ? void 0 : headerFlex.children[0]).toEqual(logo);
    });
    it('should render items in dark mode', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.dark, mode: NavigationMode.hero }), true);
      const logo = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-logo');
      const burguerButton = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-burger-button');
      expect(logo === null || logo === void 0 ? void 0 : logo.getAttribute('theme')).toEqual('dark');
      expect(burguerButton === null || burguerButton === void 0 ? void 0 : burguerButton.getAttribute('theme')).toEqual('dark');
    });
    it('should render items in light mode', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.light, mode: NavigationMode.hero }), true);
      const logo = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-logo');
      const burgerButton = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-burger-button');
      expect(logo === null || logo === void 0 ? void 0 : logo.getAttribute('theme')).toEqual('light');
      expect(burgerButton === null || burgerButton === void 0 ? void 0 : burgerButton.getAttribute('theme')).toEqual('light');
    });
    it('should render crest with pcom link when crest menu item is defined', async () => {
      var _a, _b;
      const page = await getPage(Object.assign({}, defaultProps), true, [Logo]);
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-logo > phn-p-wordmark')) === null || _b === void 0 ? void 0 : _b.getAttribute('href')).toEqual(navContentStore.state.crest.link);
    });
  });
  describe('oneUI on mobile', () => {
    it('should show porsche logo in the middle of the page', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), true);
      const headerFlex = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.level-0-content-logo');
      const logo = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-logo');
      expect(headerFlex === null || headerFlex === void 0 ? void 0 : headerFlex.children[0]).toEqual(logo);
    });
    it('should not show porsche wordmark on the middle of the page', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), true);
      const headerFlex = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.level-0-content>.level-0-content-logo');
      const wordmark = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-p-wordmark');
      expect(headerFlex === null || headerFlex === void 0 ? void 0 : headerFlex.children[0]).not.toEqual(wordmark);
    });
    it('should render crest with pcom link when crest menu item is defined', async () => {
      var _a, _b;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { breakpoint: breakpoint.xs }), true, [Logo]);
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-logo > phn-p-crest')) === null || _b === void 0 ? void 0 : _b.getAttribute('href')).toEqual(navContentStore.state.crest.link);
    });
  });
  describe('pcom search button', () => {
    beforeEach(async () => {
      jest.spyOn(featureToggles, 'isPcomSearchToggleActive').mockReturnValue(true);
    });
    it('should show with feature toggle pcom search active and locale de-DE', async () => {
      var _a;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.dark, mode: NavigationMode.hero, locale: 'de-DE', app: 'pcom' }), true);
      const searchButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="pcom-search-button"]');
      expect(searchButton).toBeTruthy();
    });
    it('should not show with feature toggle pcom search active and locale es-MX', async () => {
      var _a;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.dark, mode: NavigationMode.hero, locale: 'es-MX' }), true);
      const searchButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="pcom-search-button"]');
      expect(searchButton).toBeFalsy();
    });
    it('should not show with feature toggle pcom search inactive and locale de-DE', async () => {
      var _a;
      jest.spyOn(featureToggles, 'isPcomSearchToggleActive').mockReturnValue(false);
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.dark, mode: NavigationMode.hero, locale: 'de-DE' }), true);
      const searchButton = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="pcom-search-button"]');
      expect(searchButton).toBeFalsy();
    });
    it('should send PCOM_SEARCH_CLICK data event on button click', async () => {
      var _a, _b, _c;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { theme: NavigationTheme.dark, mode: NavigationMode.hero, locale: 'de-DE', app: 'pcom' }), true);
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id="pcom-search-button"]'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.PCOM_SEARCH_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'mainmenu.pcom.search',
        clickElementName: 'Pcom Search',
        targetUrl: 'https://www.porsche.com/germany/search/'
      });
    });
  });
});
//# sourceMappingURL=level-0.spec.js.map
