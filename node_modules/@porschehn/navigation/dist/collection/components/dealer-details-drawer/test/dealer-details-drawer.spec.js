import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { dealerSearchResultsStore } from "../../../state/dealer-search-results-store";
import { mockDealerContent, mockDealerDetailsOpeningHours, mockErrorContent, mockPPNDealer, mockPPNDealerSearchResultsWithLocalizedAddress, mockPPNDistance } from "../../../test/test-data";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { DealerDetailsDrawer } from "../dealer-details-drawer";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { getHTMLElement } from "../../../utility/helper";
import { breakpoint } from "@porsche-design-system/components-js/styles";
import { MenuItemCard } from "../../menu-item-card/menu-item-card";
import { navContentStore } from "../../../state/nav-content-store";
import featureToggles from "../../../services/feature-toggles";
describe('dealer-details-drawer', () => {
  const defaultProps = {
    locale: 'xx-YY',
    errorContent: mockErrorContent,
    showBackButton: false,
    breakpoint: breakpoint.m
  };
  it('should show dealer details', async () => {
    jest.spyOn(featureToggles, 'isDealerSearchOpeningHoursEnabled').mockReturnValue(true);
    dealerSearchResultsStore.state.ppnDealers = {
      [mockPPNDealer.id]: mockPPNDealerSearchResultsWithLocalizedAddress[0]
    };
    navContentStore.set('dealer', mockDealerContent);
    const page = await newSpecPage({
      components: [DealerDetailsDrawer, MenuItemCard],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: mockPPNDealer.id }))
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-dealer-details-drawer>
        <phn-p-heading data-test-id="dealer-headline" size="large" tag="h3">
          localized Porsche Zentrum Stuttgart
        </phn-p-heading>
        <phn-menu-item-card data-test-id="dealer-address" tabindex="0" variant="dealer-details-variant">
          <!---->
          <a class="card-link" href="https://www.google.com/maps/search/?api=1&amp;query=localized%20Porscheplatz%209%2C70435%2Clocalized%20Stuttgart" tabindex="-1" target="_blank">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  localized Porscheplatz 9, 70435 localized Stuttgart
                </phn-p-heading>
                <phn-p-icon name="pin"></phn-p-icon>
              </div>
            </div>
          </a>
        </phn-menu-item-card>
        <phn-menu-item-card data-test-id="dealer-opening-hours" tabindex="0" variant="dealer-details-variant">
          <!---->
          <button tabindex="-1">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  Mon: 09:00 - 19:00
                </phn-p-heading>
                <phn-p-icon name="clock"></phn-p-icon>
              </div>
            </div>
          </button>
        </phn-menu-item-card>
        <phn-menu-item-card data-test-id="dealer-phonenumber" tabindex="0" variant="dealer-details-variant">
          <!---->
          <a class="card-link" href="tel:+49 711 91126220" tabindex="-1" target="_self">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  +49 711 91126220
                </phn-p-heading>
                <phn-p-icon name="phone"></phn-p-icon>
              </div>
            </div>
          </a>
        </phn-menu-item-card>
        <phn-menu-item-card data-test-id="dealer-email" tabindex="0" variant="dealer-details-variant">
          <!---->
          <a class="card-link" href="mailto:info@porsche-stuttgart.de" tabindex="-1" target="_self">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  info@porsche-stuttgart.de
                </phn-p-heading>
                <phn-p-icon name="email"></phn-p-icon>
              </div>
            </div>
          </a>
        </phn-menu-item-card>
        <phn-menu-item-card data-test-id="dealer-homepage" tabindex="0" variant="dealer-details-variant">
          <!---->
          <a class="card-link" href="https://www.iamalsoahome.page" tabindex="-1" target="_blank">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  www.iamalsoahome.page
                </phn-p-heading>
                <phn-p-icon name="globe"></phn-p-icon>
              </div>
            </div>
          </a>
        </phn-menu-item-card>
        <phn-menu-item-card data-test-id="dealer-finder-cars" tabindex="0" variant="dealer-details-variant">
          <!---->
          <a class="card-link" href="http://www.porsche.com/gb/en_GB/test-finder?dealership=12716" tabindex="-1" target="_self">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  Finder cars
                </phn-p-heading>
                <phn-p-icon name="car"></phn-p-icon>
              </div>
            </div>
          </a>
        </phn-menu-item-card>
        <phn-menu-item-card data-test-id="dealer-book-service" tabindex="0" variant="dealer-details-variant">
          <!---->
          <a class="card-link" href="http://www.porsche.com/gb/en_GB/test-service?dealer=4500248" tabindex="-1" target="_self">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  Service
                </phn-p-heading>
                <phn-p-icon name="wrench"></phn-p-icon>
              </div>
            </div>
          </a>
        </phn-menu-item-card>
        <phn-menu-item-card data-test-id="dealer-book-testdrive" tabindex="0" variant="dealer-details-variant">
          <!---->
          <a class="card-link" href="http://contact.porsche.com/china/en/test-drive/" tabindex="-1" target="_self">
            <div class="texts">
              <div class="phn-align-center phn-flex-row phn-justify-between title-container">
                <phn-p-heading size="medium" tag="h3">
                  Testdrive
                </phn-p-heading>
                <phn-p-icon name="steering-wheel"></phn-p-icon>
              </div>
            </div>
          </a>
        </phn-menu-item-card>
      </phn-dealer-details-drawer>
    `);
  });
  it('should show headline on desktop if dealer name is available', async () => {
    var _a;
    const dodgeyMockDealer = {
      ppnDealer: Object.assign({}, mockPPNDealer),
      distance: mockPPNDistance
    };
    dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => (h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { breakpoint: breakpoint.l, dealerId: dodgeyMockDealer.ppnDealer.id })))
    });
    const headline = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-heading[data-test-id=dealer-headline]');
    expect(headline === null || headline === void 0 ? void 0 : headline.textContent).toEqual('localized Porsche Zentrum Berlin');
  });
  it('should not show heading when there is no dealer name available', async () => {
    var _a;
    const dodgeyMockDealer = {
      ppnDealer: Object.assign(Object.assign({}, mockPPNDealer), { name: '', nameLocalized: '' }),
      distance: mockPPNDistance
    };
    dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: dodgeyMockDealer.ppnDealer.id }))
    });
    const heading = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-headline]');
    expect(heading).toBeNull();
  });
  it('should not show heading on mobile', async () => {
    var _a;
    const dodgeyMockDealer = {
      ppnDealer: Object.assign({}, mockPPNDealer),
      distance: mockPPNDistance
    };
    dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => (h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { breakpoint: breakpoint.base, dealerId: dodgeyMockDealer.ppnDealer.id })))
    });
    const heading = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-headline]');
    expect(heading).toBeNull();
  });
  it('should not show dealer address', async () => {
    var _a;
    const dodgeyMockDealer = {
      ppnDealer: Object.assign(Object.assign({}, mockPPNDealer), { address: {} }),
      distance: mockPPNDistance
    };
    dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: dodgeyMockDealer.ppnDealer.id }))
    });
    const address = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-address]');
    expect(address).toBeNull();
  });
  it('should not show dealer phone number', async () => {
    var _a;
    const dodgeyMockDealer = {
      ppnDealer: Object.assign(Object.assign({}, mockPPNDealer), { contactDetails: Object.assign(Object.assign({}, mockPPNDealer.contactDetails), { phoneNumber: '' }) }),
      distance: mockPPNDistance
    };
    dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: dodgeyMockDealer.ppnDealer.id }))
    });
    const phoneNumber = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-phonenumber]');
    expect(phoneNumber).toBeNull();
  });
  it('should not show dealer email', async () => {
    var _a;
    const dodgeyMockDealer = {
      ppnDealer: Object.assign(Object.assign({}, mockPPNDealer), { contactDetails: Object.assign(Object.assign({}, mockPPNDealer.contactDetails), { emailAddress: '' }) }),
      distance: mockPPNDistance
    };
    dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: dodgeyMockDealer.ppnDealer.id }))
    });
    const email = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-email]');
    expect(email).toBeNull();
  });
  it('should not show dealer homepage', async () => {
    var _a;
    const dodgeyMockDealer = {
      ppnDealer: Object.assign(Object.assign({}, mockPPNDealer), { contactDetails: Object.assign(Object.assign({}, mockPPNDealer.contactDetails), { homepage: '' }) }),
      distance: mockPPNDistance
    };
    dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: dodgeyMockDealer.ppnDealer.id }))
    });
    const email = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-homepage]');
    expect(email).toBeNull();
  });
  it('should not show finderCars', async () => {
    var _a;
    dealerSearchResultsStore.state.ppnDealers = {
      [mockPPNDealer.id]: mockPPNDealerSearchResultsWithLocalizedAddress[0]
    };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => (h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer.id })))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-finder-cars]')).toBeNull();
  });
  it('should not show bookService', async () => {
    var _a, _b;
    dealerSearchResultsStore.state.ppnDealers = {
      [mockPPNDealer.id]: mockPPNDealerSearchResultsWithLocalizedAddress[0]
    };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: mockPPNDealer.id }))
    });
    expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-book-service]')) === null || _b === void 0 ? void 0 : _b.getAttribute('text')).toBe('');
  });
  it('should show book a test drive in China', async () => {
    var _a;
    dealerSearchResultsStore.set('ppnDealers', {
      [mockPPNDealer.id]: mockPPNDealerSearchResultsWithLocalizedAddress[0]
    });
    navContentStore.set('dealer', mockDealerContent);
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { locale: "en-CN", dealerId: mockPPNDealer.id }))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-book-testdrive]')).toBeTruthy();
  });
  it('should not show book a test drive', async () => {
    var _a;
    dealerSearchResultsStore.state.ppnDealers = {
      [mockPPNDealer.id]: mockPPNDealerSearchResultsWithLocalizedAddress[0]
    };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: mockPPNDealer.id }))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('[data-test-id=dealer-book-testdrive]')).toBeNull();
  });
  it('should call global data layer service after component did load ', async () => {
    var _a;
    const searchTerm = 'Montpellier';
    dealerSearchResultsStore.state.searchTerm = searchTerm;
    const mockPPNDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer;
    dealerSearchResultsStore.state.ppnDealers = {
      [mockPPNDealer.id]: mockPPNDealerSearchResultsWithLocalizedAddress[0]
    };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer],
      template: () => (h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer.id })))
    });
    await page.waitForChanges();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.DEALER_DETAILS_SCREEN_LOAD);
    expect(event.componentSearch).toEqual({ searchTerm });
    expect(event.partner).toEqual({
      companyName: mockPPNDealer.name,
      companyId: mockPPNDealer.porschePartnerNo
    });
  });
  it('should call data layer service with custom data layer properties if menu item is clicked', async () => {
    var _a, _b, _c;
    const searchTerm = 'Montpellier';
    const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
    const { ppnDealer: mockPPNDealer } = mockDealer;
    dealerSearchResultsStore.state.searchTerm = searchTerm;
    dealerSearchResultsStore.state.ppnDealers = {
      [mockPPNDealer.id]: mockPPNDealerSearchResultsWithLocalizedAddress[0]
    };
    const page = await newSpecPage({
      components: [DealerDetailsDrawer, MenuItemCard],
      template: () => (h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer.id })))
    });
    (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('a.card-link'))) === null || _b === void 0 ? void 0 : _b.click();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[1];
    expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.DEALER_CONTACT_CLICK);
    expect(event.componentSearch).toEqual({ searchTerm });
    expect(event.partner).toEqual({
      companyName: mockPPNDealer.nameLocalized,
      companyId: mockPPNDealer.porschePartnerNo
    });
    expect(event.componentClick).toEqual({
      clickElementId: 'mainmenu.finddealer.map',
      clickElementName: `${mockPPNDealer.addressLocalized.street}, ${mockPPNDealer.address.postalCode} ${mockPPNDealer.addressLocalized.city}`,
      clickElementType: ClickElementTypes.Link,
      targetUrl: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${mockPPNDealer.addressLocalized.street},${mockPPNDealer.address.postalCode},${mockPPNDealer.addressLocalized.city}`)}`
    });
  });
  describe('Opening hours', () => {
    const { monday, tuesday, wednesday, thursday, friday } = mockDealerDetailsOpeningHours;
    const getPage = async () => {
      navContentStore.set('dealer', mockDealerContent);
      return await newSpecPage({
        components: [DealerDetailsDrawer, MenuItemCard],
        template: () => h("phn-dealer-details-drawer", Object.assign({}, defaultProps, { dealerId: mockPPNDealer.id }))
      });
    };
    beforeEach(() => {
      jest.spyOn(featureToggles, 'isDealerSearchOpeningHoursEnabled').mockReturnValue(true);
      navContentStore.set('dealer', mockDealerContent);
    });
    it('should should opening hours', async () => {
      var _a;
      const contactOpeningHours = [monday, tuesday, wednesday, thursday, friday];
      const dealerInfo = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      dealerInfo.ppnDealer.contactDetails.contactOpeningHours = contactOpeningHours;
      dealerSearchResultsStore.state.ppnDealers = {
        [mockPPNDealer.id]: dealerInfo
      };
      const page = await getPage();
      const openingHoursText = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item-card[data-test-id=dealer-opening-hours]');
      expect(openingHoursText === null || openingHoursText === void 0 ? void 0 : openingHoursText.textContent).toEqual('Mon - Fri: 09:00 - 19:00');
    });
    it('should not show opening hours if dealers doesnt has this information', async () => {
      var _a;
      const dealerInfo = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      dealerInfo.ppnDealer.contactDetails.contactOpeningHours = [];
      dealerSearchResultsStore.state.ppnDealers = {
        [mockPPNDealer.id]: dealerInfo
      };
      const page = await getPage();
      const openingHoursText = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item-card[data-test-id=dealer-opening-hours]');
      expect(openingHoursText).toBeFalsy();
    });
  });
});
//# sourceMappingURL=dealer-details-drawer.spec.js.map
