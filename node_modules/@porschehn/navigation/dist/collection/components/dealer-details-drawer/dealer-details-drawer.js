import { Fragment, h, Host } from "@stencil/core";
import { splitLocale } from "../../entities/locale";
import { getDealerDetailsRoutingKey } from "../../entities/routing-key";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import { dealerSearchResultsStore } from "../../state/dealer-search-results-store";
import { DEALER_SEARCH_DISPLAY_ELEMENT_ID, EventActions, MenuItemVariant } from "../../utility/constants";
import { addQueryParamsToUrl, isDesktop, isString } from "../../utility/helper";
import { componentsOnReady } from "../../utility/ready";
import { Timeout } from "../../utility/timeout";
import analyticsManager from "../../services/analytics/analytics-manager";
import { navContentStore } from "../../state/nav-content-store";
import { getOpeningHours, sanitizeDealerHomepage } from "../../utility/helpers/dealer-search-helper";
import featureToggles from "../../services/feature-toggles";
export class DealerDetailsDrawer {
  constructor() {
    this.dealerId = undefined;
    this.locale = undefined;
    this.breakpoint = undefined;
    this.errorMessage = '';
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  componentDidLoad() {
    const dealer = this.getDealer();
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_DETAILS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_DISPLAY_ELEMENT_ID),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer === null || dealer === void 0 ? void 0 : dealer.name
      },
      componentSearch: {
        searchTerm: dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: dealer === null || dealer === void 0 ? void 0 : dealer.name,
        companyId: dealer === null || dealer === void 0 ? void 0 : dealer.porschePartnerNo
      }
    });
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = false;
  }
  getDealer() {
    const { ppnDealer: dealer } = dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};
    return dealer;
  }
  renderHeading(name) {
    return (h(Fragment, null, this.showSkeleton ? h("div", { class: "skeleton-headline" }) : null, h("phn-p-heading", { style: { display: this.showSkeleton ? 'none' : '' }, tag: "h3", size: "large", "data-test-id": "dealer-headline" }, name)));
  }
  render() {
    const ppnDealer = this.getDealer();
    if (ppnDealer === undefined) {
      return h("div", null, this.errorMessage);
    }
    const language = splitLocale(this.locale).language;
    const { testDrive, finder, bookService } = navContentStore.state.dealer.details;
    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
    const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
    const name = language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
    // postalCode is currently not available in addressLocalized
    const hasAddress = isString(address.street) || isString(ppnDealer.address.postalCode) || isString(address.city);
    const hasPhoneNumber = isString(ppnDealer.contactDetails.phoneNumber);
    const hasEmail = isString(ppnDealer.contactDetails.emailAddress);
    const hasHomepage = isString(ppnDealer.contactDetails.homepage);
    const hasTestdrive = testDrive && isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.text) && isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.link);
    const hasName = isString(ppnDealer.nameLocalized) || isString(ppnDealer.name);
    const openingHours = getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);
    const hasOpeningHours = openingHours !== '';
    let country = '';
    try {
      country = splitLocale(this.locale).country;
    }
    catch (err) {
      // throw the error away
    }
    const dealerAddress = country === 'JP'
      ? `ã€’${ppnDealer.address.postalCode} ${address.city} ${address.street}`
      : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;
    const customDatalayerProperties = {
      componentSearch: {
        searchTerm: dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: name,
        companyId: ppnDealer.porschePartnerNo
      }
    };
    return (h(Host, null, hasName && isDesktop(this.breakpoint) ? this.renderHeading(name) : null, hasAddress ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'address'), analyticsId: "mainmenu.finddealer.map", text: dealerAddress, iconLeft: "pin", "data-test-id": "dealer-address", link: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${address.street},${ppnDealer.address.postalCode},${address.city}`)}`, target: "_blank", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'openingHours'), analyticsId: "mainmenu.finddealer.openinghours", text: openingHours, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-opening-hours", iconLeft: "clock" })) : null, hasPhoneNumber ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'number'), analyticsId: "mainmenu.finddealer.phone", text: ppnDealer.contactDetails.phoneNumber, iconLeft: "phone", "data-test-id": "dealer-phonenumber", link: `tel:${ppnDealer.contactDetails.phoneNumber}`, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, hasEmail ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'email'), analyticsId: "mainmenu.finddealer.email", text: ppnDealer.contactDetails.emailAddress, iconLeft: "email", "data-test-id": "dealer-email", link: `mailto:${ppnDealer.contactDetails.emailAddress}`, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, hasHomepage ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'homepage'), analyticsId: "mainmenu.finddealer.website", text: ppnDealer.contactDetails.homepage.replace('https://', ''), iconLeft: "globe", "data-test-id": "dealer-homepage", link: sanitizeDealerHomepage(ppnDealer.contactDetails.homepage), target: "_blank", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, finder && isString(country) ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, finder.id), analyticsId: finder.id, text: finder.text, "data-test-id": "dealer-finder-cars", link: addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId }), iconLeft: "car", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, bookService ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, bookService.text), analyticsId: bookService.id, text: bookService.text, link: addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo }), datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-service", iconLeft: 'wrench' })) : null, hasTestdrive ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, testDrive.text), analyticsId: testDrive.id, text: testDrive.text, link: testDrive.link, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-testdrive", iconLeft: 'steering-wheel' })) : null));
  }
  static get is() { return "phn-dealer-details-drawer"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["dealer-details-drawer.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dealer-details-drawer.css"]
    };
  }
  static get properties() {
    return {
      "dealerId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "dealer-id",
        "reflect": false
      },
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      },
      "breakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "breakpoint",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "errorMessage": {},
      "showSkeleton": {}
    };
  }
  static get events() {
    return [{
        "method": "clickDrawerHeaderBack",
        "name": "clickDrawerHeaderBack",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
function DealerDetailCard(props) {
  return h("phn-menu-item-card", Object.assign({ tabIndex: 0, class: `${props.showSkeleton ? 'skeleton' : ''}` }, props));
}
//# sourceMappingURL=dealer-details-drawer.js.map
