import { newSpecPage } from "@stencil/core/testing";
import { getHTMLElement } from "../../../utility/helper";
import { dealerSearchResultsStore } from "../../../state/dealer-search-results-store";
import { h } from "@stencil/core";
import { DealerSearchResults } from "../dealer-search-results";
import { navContentStore } from "../../../state/nav-content-store";
import { mockDealerContent, mockDealerContentForMarketWithOneDealer, mockPPNDealerOneSearchResults, mockPPNDealerSearchResultsWithLocalizedAddress } from "../../../test/test-data";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { ClickElementTypes, EventActions, GEOLOCATION_BUTTON_SEARCH_TERM } from "../../../utility/constants";
import * as routingManager from "../../../services/routing-manager";
jest.mock('../../../services/maps-service.ts');
describe('Dealer Search Results', () => {
  const defaultProps = {
    errorMessage: null,
    breakpoint: 0,
    locale: 'xx-XX'
  };
  async function getPage() {
    const page = await newSpecPage({
      components: [DealerSearchResults],
      template: () => h("phn-dealer-search-results", Object.assign({}, defaultProps))
    });
    return page;
  }
  beforeEach(() => {
    navContentStore.set('dealer', mockDealerContent);
  });
  describe('Results', () => {
    it('should emit menuItemClick event if dealer result is clicked', async () => {
      var _a, _b;
      navContentStore.set('dealer', mockDealerContent);
      const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      const mockPPNDealer = mockDealer.ppnDealer;
      dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await getPage();
      const routingManagerAddRouteSpy = jest.spyOn(routingManager, 'addRoute');
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.dealer-card')[0])) === null || _b === void 0 ? void 0 : _b.click();
      expect(routingManagerAddRouteSpy).toBeCalledTimes(1);
      expect(routingManagerAddRouteSpy).toHaveBeenCalledWith(['6a6d8e8c-5b04-4a4b-a119-66021b528788']);
    });
    it('should not render dealer if dealer id is in the store but not the dealer itself', async () => {
      var _a;
      const page = await getPage();
      dealerSearchResultsStore.state.results = ['abc'];
      dealerSearchResultsStore.state.ppnDealers = {};
      await page.waitForChanges();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.dealer-card')).toBeNull();
    });
    it('should render no results message', async () => {
      var _a, _b;
      const page = await getPage();
      dealerSearchResultsStore.state.results = [];
      dealerSearchResultsStore.state.ppnDealers = {};
      await page.waitForChanges();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.dealer-card')).toBeNull();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.error-message')).toBeTruthy();
    });
    it('should display distance from dealer on card if provided', async () => {
      var _a, _b, _c;
      navContentStore.set('dealer', mockDealerContent);
      const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      const mockPPNDealer = mockDealer.ppnDealer;
      dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await getPage();
      const cards = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-menu-item-card');
      if (cards) {
        expect((_c = (_b = cards[0]) === null || _b === void 0 ? void 0 : _b.querySelector('phn-p-tag')) === null || _c === void 0 ? void 0 : _c.textContent).toEqual('3km');
      }
      else {
        throw Error('It should have cards');
      }
    });
    it('should not show dealer distance if number of dealers in market is 1', async () => {
      var _a, _b;
      navContentStore.set('dealer', mockDealerContent);
      const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      const mockPPNDealer = mockDealer.ppnDealer;
      dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
      navContentStore.state.dealer.numberOfDealers = 1;
      const page = await getPage();
      const cards = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-menu-item-card');
      if (cards) {
        expect((_b = cards[0]) === null || _b === void 0 ? void 0 : _b.querySelector('phn-p-tag')).toBeNull();
      }
      else {
        throw Error('It should have cards');
      }
    });
    it('should show dealer details page if results length is 1 and number of dealers in market is 1', async () => {
      var _a, _b, _c;
      navContentStore.set('dealer', mockDealerContentForMarketWithOneDealer);
      const mockDealer = mockPPNDealerOneSearchResults[0];
      dealerSearchResultsStore.state.ppnDealers = { [mockDealer.ppnDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerOneSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await getPage();
      const dealerDetailsComponent = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-dealer-details-drawer'));
      expect(getHTMLElement((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-p-button'))).toBeNull();
      expect(getHTMLElement((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.dealer-card'))).toBeNull();
      expect(dealerDetailsComponent).not.toBeNull();
      expect(dealerDetailsComponent === null || dealerDetailsComponent === void 0 ? void 0 : dealerDetailsComponent.getAttribute('dealerId')).toEqual(mockDealer.ppnDealer.id);
    });
    it('should set dealer cookie if search result is 1', async () => {
      var _a;
      navContentStore.set('dealer', mockDealerContentForMarketWithOneDealer);
      const mockDealer = mockPPNDealerOneSearchResults[0];
      dealerSearchResultsStore.state.ppnDealers = { [mockDealer.ppnDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerOneSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await getPage();
      const dealerDetailsComponent = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-dealer-details-drawer'));
      expect(dealerDetailsComponent).not.toBeNull();
      expect(dealerSearchResultsStore.state.savedDealerCookie).toEqual({
        id: mockDealer.ppnDealer.id,
        latitude: mockDealer.ppnDealer.coordinates.latitude,
        longitude: mockDealer.ppnDealer.coordinates.longitude
      });
      expect(dealerDetailsComponent === null || dealerDetailsComponent === void 0 ? void 0 : dealerDetailsComponent.getAttribute('dealerId')).toEqual(mockDealer.ppnDealer.id);
    });
    it('should not show error message if there are results', async () => {
      var _a;
      navContentStore.set('dealer', mockDealerContentForMarketWithOneDealer);
      const mockDealer = mockPPNDealerOneSearchResults[0];
      dealerSearchResultsStore.state.ppnDealers = { [mockDealer.ppnDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerOneSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await getPage();
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.error-message')).toBeNull();
    });
    it('should show dealer cards if results is 1 and number of dealers in market is >1<=5', async () => {
      var _a, _b, _c;
      navContentStore.set('dealer', Object.assign(Object.assign({}, mockDealerContentForMarketWithOneDealer), { numberOfDealers: 3 }));
      const mockDealer = mockPPNDealerOneSearchResults[0];
      dealerSearchResultsStore.state.ppnDealers = { [mockDealer.ppnDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerOneSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await getPage();
      const dealerDetailsComponent = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-dealer-details-drawer'));
      expect(getHTMLElement((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-p-button'))).toBeNull();
      expect(getHTMLElement((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.dealer-card'))).toBeNull();
      expect(dealerDetailsComponent).toBeTruthy();
      expect(dealerDetailsComponent === null || dealerDetailsComponent === void 0 ? void 0 : dealerDetailsComponent.getAttribute('dealerId')).toEqual(mockDealer.ppnDealer.id);
    });
    it('should show opacity overlay on result cards', async () => {
      var _a, _b;
      navContentStore.set('dealer', mockDealerContent);
      const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      dealerSearchResultsStore.state.ppnDealers = { [mockDealer.ppnDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await newSpecPage({
        components: [DealerSearchResults],
        template: () => h("phn-dealer-search-results", Object.assign({}, defaultProps, { showOverlay: true }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.dealer-card')).toBeTruthy();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.dealer-card-overlay')).toBeTruthy();
    });
    it('should not show opacity overlay on result cards', async () => {
      var _a, _b;
      navContentStore.set('dealer', mockDealerContent);
      const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      dealerSearchResultsStore.state.ppnDealers = { [mockDealer.ppnDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
      const page = await newSpecPage({
        components: [DealerSearchResults],
        template: () => h("phn-dealer-search-results", Object.assign({}, defaultProps, { showOverlay: false }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.dealer-card')).toBeTruthy();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.dealer-card-overlay')).toBeNull();
    });
  });
  describe('Analytics', () => {
    beforeEach(() => {
      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = mockPPNDealerSearchResultsWithLocalizedAddress.reduce((ppnDealers, dealerSearchResult) => (Object.assign(Object.assign({}, ppnDealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), {});
    });
    it('emits DEALER_RESULT_CLICK when result is clicked', async () => {
      var _a, _b, _c;
      const page = await getPage();
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.dealer-card')[0])) === null || _b === void 0 ? void 0 : _b.click();
      const { results, searchTerm } = dealerSearchResultsStore.state;
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.DEALER_RESULT_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer.id,
        clickElementName: mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer.name,
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level2_find_a_dealer/6a6d8e8c-5b04-4a4b-a119-66021b528788'
      });
      expect(event.componentSearch).toEqual({
        numberOfResults: results === null || results === void 0 ? void 0 : results.length,
        searchTerm: searchTerm
      });
      expect(event.partner).toEqual({
        companyName: mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer.name,
        companyId: mockPPNDealerSearchResultsWithLocalizedAddress[0].ppnDealer.porschePartnerNo
      });
    });
    it('emits DEALER_MAP_CLICK when all dealers map button is clicked', async () => {
      var _a, _b, _c;
      const page = await getPage();
      (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-button'))) === null || _b === void 0 ? void 0 : _b.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.DEALER_MAP_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockDealerContent.search.map.id,
        clickElementName: mockDealerContent.search.map.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: mockDealerContent.search.map.link
      });
      expect(event.componentSearch).toEqual({
        numberOfResults: mockPPNDealerSearchResultsWithLocalizedAddress.length,
        searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM
      });
    });
  });
});
//# sourceMappingURL=dealer-search-results.spec.js.map
