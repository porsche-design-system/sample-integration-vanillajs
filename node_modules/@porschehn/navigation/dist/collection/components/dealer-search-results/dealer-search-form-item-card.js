import { h } from "@stencil/core";
import { isString } from "../../utility/helper";
import { getDealerDetailsRoutingKey, RoutingKeys } from "../../entities/routing-key";
import { dealerSearchResultsStore } from "../../state/dealer-search-results-store";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import { ClickElementTypes, DEALER_SEARCH_DISPLAY_ELEMENT_ID, ElementTypes, EventActions } from "../../utility/constants";
import analyticsManager from "../../services/analytics/analytics-manager";
import { navContentStore } from "../../state/nav-content-store";
import { splitLocale } from "../../entities/locale";
export function DealerSearchFormItemCard({ dealer, showOverlay, eventEmitter, locale }) {
  const { ppnDealer, distance } = dealer;
  const language = splitLocale(locale).language;
  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
  // postalCode is currently not available in addressLocalized
  const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
  const name = language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
  const numberOfDealers = navContentStore.state.dealer.numberOfDealers;
  let country = '';
  try {
    country = splitLocale(locale).country;
  }
  catch (err) {
    // throw the error away
  }
  const onDealerCardClick = (ppnDealer) => {
    const dealerDetailsRoutingKey = getDealerDetailsRoutingKey(ppnDealer.id);
    eventEmitter.emit([dealerDetailsRoutingKey]);
    const { dealer: dealerContent } = navContentStore.state;
    const { results, searchTerm } = dealerSearchResultsStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULT_CLICK, {
      componentClick: {
        clickElementId: ppnDealer.id,
        clickElementName: ppnDealer.name,
        clickElementType: ClickElementTypes.Button,
        targetElement: `level2_${dealerDetailsRoutingKey}`
      },
      componentDisplay: {
        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
        displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: searchTerm,
        numberOfResults: results === null || results === void 0 ? void 0 : results.length
      },
      partner: {
        companyName: ppnDealer.name,
        companyId: ppnDealer.porschePartnerNo
      }
    });
  };
  return (h("phn-menu-item-card", { tabIndex: 0, text: name, class: `animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`, onClick: () => onDealerCardClick(ppnDealer), analyticsId: ppnDealer.id }, h("div", { class: "phn-flex-row phn-justify-between phn-align-center" }, country === 'JP' ? (h("phn-p-text", { color: "primary", size: "small" }, `ã€’${ppnDealer.address.postalCode} ${address.city} ${address.street}`)) : (h("phn-p-text", { color: "primary", size: "small" }, `${address.street}, `, h("span", { class: "city" }, ppnDealer.address.postalCode, " ", address.city))), distance && distance.value >= 1 && numberOfDealers > 5 ? (h("phn-p-tag", { color: "notification-info-soft" }, `${Math.round(distance.value)}${distance.unit.toLowerCase()}`)) : null)));
}
//# sourceMappingURL=dealer-search-form-item-card.js.map
