import { breakpoint } from "@porsche-design-system/components-js/styles";
import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { Environments } from "../../../entities/environment";
import windowService from "../../../services/window-service";
import { navContentStore } from "../../../state/nav-content-store";
import { navStateStore } from "../../../state/nav-state-store";
import { mockCountryRecommenderContent } from "../../../test/test-data";
import { CountryRecommender } from "../../country-recommender/country-recommender";
import { Wrapper } from "../wrapper";
import featureToggles from "../../../services/feature-toggles";
describe('phn-wrapper', () => {
  const defaultProps = {
    locale: 'it-CH',
    loadingContent: false,
    receivedContent: true,
    breakpoint: breakpoint.l
  };
  it('renders wrapper', async () => {
    const page = await newSpecPage({
      components: [Wrapper],
      template: () => h("phn-header", { locale: "it-CH", env: Environments.TEST })
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-header
        env="test"
        locale="it-CH"
      />
    `);
  });
  it('renders wrapper with search drawer', async () => {
    const page = await newSpecPage({
      components: [Wrapper],
      template: () => h("phn-header", { locale: "it-CH", env: Environments.TEST, app: "shop" })
    });
    jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);
    expect(page.root).toMatchInlineSnapshot(`
      <phn-header
        app="shop"
        env="test"
        locale="it-CH"
      />
    `);
  });
  it('should render the preview badge only in preview', async () => {
    var _a, _b;
    navStateStore.state.env = Environments.PREVIEW;
    const page = await newSpecPage({
      components: [Wrapper],
      template: () => h("phn-wrapper", Object.assign({}, defaultProps))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.preview-badge')).not.toBeNull();
    navStateStore.state.env = Environments.PRODUCTION;
    await page.waitForChanges();
    expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.preview-badge')).toBeNull();
  });
  it('should not have Accessibility Statement if locale is not en-US', async () => {
    var _a;
    const page = await newSpecPage({
      components: [Wrapper],
      template: () => h("phn-wrapper", Object.assign({}, defaultProps))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.sr-only')).toBeFalsy();
  });
  it('should have accessibility statement if locale is en-US', async () => {
    var _a;
    const page = await newSpecPage({
      components: [Wrapper],
      template: () => h("phn-wrapper", Object.assign({}, defaultProps, { locale: "en-US" }))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.screenreader-only')).toBeTruthy();
  });
  it('show country recommender if page is redirected', async () => {
    var _a;
    jest.spyOn(windowService, 'redirected', 'get').mockReturnValue(true);
    navContentStore.state.countryRecommender = mockCountryRecommenderContent;
    const page = await newSpecPage({
      components: [Wrapper, CountryRecommender],
      template: () => h("phn-wrapper", Object.assign({}, defaultProps))
    });
    const countryRecommender = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-country-recommender');
    expect(countryRecommender).not.toBeNull();
  });
  it('does not show the country recommender if page is not redirected', async () => {
    var _a;
    jest.spyOn(windowService, 'redirected', 'get').mockReturnValue(false);
    const page = await newSpecPage({
      components: [Wrapper],
      template: () => h("phn-wrapper", Object.assign({}, defaultProps))
    });
    const countryRecommender = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-country-recommender');
    expect(countryRecommender).toBeNull();
  });
});
//# sourceMappingURL=wrapper.spec.js.map
