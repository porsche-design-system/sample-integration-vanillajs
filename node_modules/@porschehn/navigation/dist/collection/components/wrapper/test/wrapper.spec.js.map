{"version":3,"file":"wrapper.spec.js","sourceRoot":"","sources":["../../../../../src/components/wrapper/test/wrapper.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { breakpoint } from '@porsche-design-system/components-js/styles';\nimport { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { Environments } from '../../../entities/environment';\nimport windowService from '../../../services/window-service';\nimport { navContentStore } from '../../../state/nav-content-store';\nimport { navStateStore } from '../../../state/nav-state-store';\nimport { mockCountryRecommenderContent } from '../../../test/test-data';\nimport { CountryRecommender } from '../../country-recommender/country-recommender';\nimport { Wrapper } from '../wrapper';\nimport featureToggles from '../../../services/feature-toggles';\n\ndescribe('phn-wrapper', () => {\n  const defaultProps = {\n    locale: 'it-CH',\n    loadingContent: false,\n    receivedContent: true,\n    breakpoint: breakpoint.l\n  };\n\n  it('renders wrapper', async () => {\n    const page = await newSpecPage({\n      components: [Wrapper],\n      template: () => <phn-header locale=\"it-CH\" env={Environments.TEST} />\n    });\n\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-header\n        env=\"test\"\n        locale=\"it-CH\"\n      />\n    `);\n  });\n\n  it('renders wrapper with search drawer', async () => {\n    const page = await newSpecPage({\n      components: [Wrapper],\n      template: () => <phn-header locale=\"it-CH\" env={Environments.TEST} app=\"shop\" />\n    });\n    jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-header\n        app=\"shop\"\n        env=\"test\"\n        locale=\"it-CH\"\n      />\n    `);\n  });\n\n  it('should render the preview badge only in preview', async () => {\n    navStateStore.state.env = Environments.PREVIEW;\n\n    const page = await newSpecPage({\n      components: [Wrapper],\n      template: () => <phn-wrapper {...defaultProps} />\n    });\n\n    expect(page.root?.querySelector('.preview-badge')).not.toBeNull();\n    navStateStore.state.env = Environments.PRODUCTION;\n\n    await page.waitForChanges();\n\n    expect(page.root?.querySelector('.preview-badge')).toBeNull();\n  });\n\n  it('should not have Accessibility Statement if locale is not en-US', async () => {\n    const page = await newSpecPage({\n      components: [Wrapper],\n      template: () => <phn-wrapper {...defaultProps} />\n    });\n\n    expect(page.root?.querySelector('.sr-only')).toBeFalsy();\n  });\n\n  it('should have accessibility statement if locale is en-US', async () => {\n    const page = await newSpecPage({\n      components: [Wrapper],\n      template: () => <phn-wrapper {...defaultProps} locale=\"en-US\" />\n    });\n\n    expect(page.root?.querySelector('.screenreader-only')).toBeTruthy();\n  });\n\n  it('show country recommender if page is redirected', async () => {\n    jest.spyOn(windowService, 'redirected', 'get').mockReturnValue(true);\n\n    navContentStore.state.countryRecommender = mockCountryRecommenderContent;\n\n    const page = await newSpecPage({\n      components: [Wrapper, CountryRecommender],\n      template: () => <phn-wrapper {...defaultProps} />\n    });\n\n    const countryRecommender = page.root?.querySelector('phn-country-recommender');\n    expect(countryRecommender).not.toBeNull();\n  });\n\n  it('does not show the country recommender if page is not redirected', async () => {\n    jest.spyOn(windowService, 'redirected', 'get').mockReturnValue(false);\n\n    const page = await newSpecPage({\n      components: [Wrapper],\n      template: () => <phn-wrapper {...defaultProps} />\n    });\n\n    const countryRecommender = page.root?.querySelector('phn-country-recommender');\n    expect(countryRecommender).toBeNull();\n  });\n});\n"]}