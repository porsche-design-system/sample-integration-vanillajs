{"version":3,"file":"dealer-search-form-geolocation.spec.js","sourceRoot":"","sources":["../../../../../src/components/dealer-search-form-geolocation/test/dealer-search-form-geolocation.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage, SpecPage } from '@stencil/core/testing';\nimport { DealerSearchFormGeolocation } from '../dealer-search-form-geolocation';\nimport { dealerSearchResultsStore } from '../../../state/dealer-search-results-store';\nimport { getConfig, getHTMLElement, getHTMLInputElement } from '../../../utility/helper';\nimport { Environments } from '../../../entities/environment';\nimport * as el from '../../../test/element-helpers';\nimport { h } from '@stencil/core';\nimport {\n  mockDealerContent,\n  mockErrorContent,\n  mockPPNDealerSearchResultsWithLocalizedAddress,\n  mockPredictions\n} from '../../../test/test-data';\nimport * as dealerService from '../../../services/dealer-service';\nimport { navContentStore } from '../../../state/nav-content-store';\nimport mapsService from '../../../services/maps-service';\nimport { NaviError, NaviErrorTypes } from '../../../utility/navi-error';\nimport windowService from '../../../services/window-service';\nimport { AutocompleteSearchField } from '../../autocomplete-search-field/autocomplete-search-field';\nimport globalDataLayerService from '../../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  DEALER_SEARCH_TARGET_ELEMENT,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../../utility/constants';\nimport analyticsManager from '../../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../../entities/routing-key';\n\nconst defaultProps = {\n  dealer: mockDealerContent,\n  locale: 'xx-XX',\n  errorContent: mockErrorContent\n};\n\ndescribe('dealer search Geolocation', () => {\n  beforeEach(async () => {\n    dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(\n      ({ ppnDealer: dealer }) => dealer.id\n    );\n    dealerSearchResultsStore.state.ppnDealers = mockPPNDealerSearchResultsWithLocalizedAddress.reduce(\n      (ppnDealers, dealerSearchResult) => ({\n        ...ppnDealers,\n        [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n      }),\n      {}\n    );\n  });\n\n  const getPage = async (): Promise<SpecPage> => {\n    navContentStore.set('error', mockErrorContent);\n    return await newSpecPage({\n      components: [DealerSearchFormGeolocation, AutocompleteSearchField],\n      template: () => <phn-dealer-search-form-geolocation {...defaultProps} />\n    });\n  };\n\n  describe('snapshot testing', () => {\n    let page: SpecPage;\n\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [DealerSearchFormGeolocation],\n        template: () => <phn-dealer-search-form-geolocation {...defaultProps} />\n      });\n\n      jest.spyOn(page.rootInstance.debounceTimeout, 'set').mockImplementation(async (cb: unknown) => {\n        if (typeof cb === 'function') {\n          await cb();\n        }\n      });\n    });\n\n    it('should render dealer search geolocation form', async () => {\n      navContentStore.set('dealer', mockDealerContent);\n\n      expect(page.root).toMatchInlineSnapshot(`\n        <phn-dealer-search-form-geolocation class=\"skeleton\">\n          <div class=\"input-container\">\n            <div class=\"skeleton-autocomplete-search-field\"></div>\n            <phn-autocomplete-search-field errormessage=\"\" initialvalue=\"\" placeholder=\"\" style=\"display: none;\"></phn-autocomplete-search-field>\n          </div>\n        </phn-dealer-search-form-geolocation>\n      `);\n    });\n\n    it('should render dealer search geolocation form with geolocation button (with and without skeleton)', async () => {\n      navContentStore.set('dealer', mockDealerContent);\n      dealerSearchResultsStore.state.results = null;\n\n      page.rootInstance.showGeolocationButton = true;\n\n      await page.waitForChanges();\n\n      expect(page.root).toMatchInlineSnapshot(`\n        <phn-dealer-search-form-geolocation class=\"skeleton\">\n          <div class=\"input-container\">\n            <div class=\"skeleton-autocomplete-search-field\"></div>\n            <phn-autocomplete-search-field errormessage=\"\" initialvalue=\"\" placeholder=\"Location\" style=\"display: none;\"></phn-autocomplete-search-field>\n          </div>\n          <div class=\"or-container\">\n            <div class=\"skeleton-or-text\"></div>\n            <phn-p-text color=\"inherit\" data-test-id=\"dealer-search-or-label\" size=\"inherit\" tag=\"div\" style=\"display: none;\">\n              Or\n            </phn-p-text>\n            <div class=\"skeleton-geolocation-button\"></div>\n            <phn-p-button class=\"geolocation\" icon=\"locate\" variant=\"tertiary\" style=\"display: none;\">\n              Current location\n            </phn-p-button>\n          </div>\n        </phn-dealer-search-form-geolocation>\n      `);\n\n      page.rootInstance.showSkeleton = false;\n\n      await page.waitForChanges();\n\n      expect(page.root).toMatchInlineSnapshot(`\n        <phn-dealer-search-form-geolocation>\n          <div class=\"input-container\">\n            <phn-autocomplete-search-field errormessage=\"\" initialvalue=\"\" placeholder=\"Location\"></phn-autocomplete-search-field>\n          </div>\n          <div class=\"or-container\">\n            <phn-p-text color=\"inherit\" data-test-id=\"dealer-search-or-label\" size=\"inherit\" tag=\"div\">\n              Or\n            </phn-p-text>\n            <phn-p-button class=\"geolocation\" icon=\"locate\" variant=\"tertiary\">\n              Current location\n            </phn-p-button>\n          </div>\n        </phn-dealer-search-form-geolocation>\n      `);\n    });\n\n    it('should show spinner if the page is loading', async () => {\n      navContentStore.state.dealer = mockDealerContent;\n\n      page.rootInstance.isLoading = true;\n\n      await page.waitForChanges();\n\n      expect(page.root).toMatchInlineSnapshot(`\n        <phn-dealer-search-form-geolocation class=\"skeleton\">\n          <div class=\"input-container\">\n            <div class=\"skeleton-autocomplete-search-field\"></div>\n            <phn-autocomplete-search-field errormessage=\"\" initialvalue=\"\" placeholder=\"Location\" style=\"display: none;\"></phn-autocomplete-search-field>\n          </div>\n          <div class=\"spinner\">\n            <phn-p-spinner size=\"medium\"></phn-p-spinner>\n          </div>\n        </phn-dealer-search-form-geolocation>\n      `);\n    });\n  });\n\n  describe('Current location button', () => {\n    it('should call dealer service when click on geolocation button', async () => {\n      const dealerServiceSpy = jest.spyOn(dealerService, 'getPPNDealers');\n      dealerSearchResultsStore.state.results = null;\n\n      const page = await getPage();\n\n      getHTMLElement(page.root?.querySelector('.geolocation'))?.click();\n      await page.waitForChanges();\n\n      expect(dealerServiceSpy).toBeCalledTimes(1);\n      expect(dealerServiceSpy).toBeCalledWith(\n        Environments.TEST,\n        getConfig(Environments.TEST).DEALER_API_URL,\n        { latitude: 0, longitude: 0 },\n        'XX'\n      );\n    });\n\n    it('should fade out and remove geolocation button after it is clicked', async () => {\n      dealerSearchResultsStore.state.results = null;\n\n      const page = await getPage();\n\n      page.rootInstance.isLoading = true;\n      await page.waitForChanges();\n\n      const orContainer = getHTMLElement(page.root?.querySelector('.or-container'));\n\n      expect(orContainer?.className).toContain('animate-out');\n\n      el.endAnimation(orContainer, 'fadeOutToTop');\n      await page.waitForChanges();\n\n      expect(getHTMLElement(page.root?.querySelector('.or-container'))).toBeNull();\n    });\n  });\n\n  describe('Autocompletion', () => {\n    it('should clear results and show geolocation button when search input is removed', async () => {\n      navContentStore.set('dealer', mockDealerContent);\n      const page = await getPage();\n      const inputField = getHTMLInputElement(page.root?.querySelector('phn-autocomplete-search-field'));\n      inputField?.dispatchEvent(new CustomEvent('submitSearch', { detail: mockPredictions[0] }));\n\n      await page.waitForChanges();\n\n      expect(page.root?.querySelectorAll('.dealer-card')).not.toBeNull();\n\n      inputField?.dispatchEvent(new CustomEvent('clearSearch'));\n\n      await page.waitForChanges();\n\n      expect(page.root?.querySelector('.dealer-card')).toBeNull();\n      expect(page.root?.querySelector('.geolocation')).not.toBeNull();\n    });\n\n    it('should animate dealer cards when clicking on the first prediction', async () => {\n      const page = await getPage();\n\n      jest.spyOn(page.rootInstance.debounceTimeout, 'set').mockImplementation(async (cb: unknown) => {\n        if (typeof cb === 'function') {\n          await cb();\n        }\n      });\n\n      const inputField = getHTMLInputElement(page.root?.querySelector('phn-autocomplete-search-field'));\n      dealerSearchResultsStore.dispose();\n      inputField?.dispatchEvent(new CustomEvent('searchInput', { detail: 'Stu' }));\n\n      page.rootInstance.predictions = mockPredictions;\n      await page.waitForChanges();\n      await page.waitForChanges();\n\n      expect(page.rootInstance.animateResults).toBe(false);\n\n      inputField?.dispatchEvent(new CustomEvent('submitSearch', { detail: mockPredictions[0] }));\n\n      await page.waitForChanges();\n\n      expect(page.rootInstance.animateResults).toBe(true);\n    });\n  });\n\n  describe('Error handling', () => {\n    it('displays general error when maps service throws error on init', async () => {\n      jest.spyOn(mapsService, 'init').mockRejectedValue(new NaviError('maps error', NaviErrorTypes.GENERAL));\n\n      const page = await getPage();\n      await page.waitForChanges();\n\n      const validationError = page.root?.querySelector('.error-message');\n\n      expect(validationError?.innerHTML).toMatchInlineSnapshot(\n        `\"<phn-p-inline-notification state=\\\\\"error\\\\\" description=\\\\\"Wrong\\\\\"></phn-p-inline-notification>\"`\n      );\n    });\n\n    it('displays geolocation denied error when user blocks their prompt to provide their location', async () => {\n      jest\n        .spyOn(windowService, 'getNavigatorLatLong')\n        .mockRejectedValue(new NaviError('some error', NaviErrorTypes.GEOLOCATION_DENIED));\n\n      dealerSearchResultsStore.state.results = null;\n\n      const page = await getPage();\n\n      getHTMLElement(page.root?.querySelector('.geolocation'))?.click();\n      await page.waitForChanges();\n\n      const validationError = page.root?.querySelector('.error-message');\n\n      expect(validationError?.innerHTML).toMatchInlineSnapshot(\n        `\"<phn-p-inline-notification state=\\\\\"error\\\\\" description=\\\\\"Geolocation denied\\\\\"></phn-p-inline-notification>\"`\n      );\n    });\n\n    it('should clear geolocation denied error when user types in search field', async () => {\n      jest\n        .spyOn(windowService, 'getNavigatorLatLong')\n        .mockRejectedValue(new NaviError('some error', NaviErrorTypes.GEOLOCATION_DENIED));\n      jest.spyOn(mapsService, 'getPredictions').mockResolvedValue(mockPredictions);\n\n      dealerSearchResultsStore.state.results = null;\n\n      const page = await getPage();\n\n      jest.spyOn(page.rootInstance.debounceTimeout, 'set').mockImplementation(async (cb: unknown) => {\n        if (typeof cb === 'function') {\n          await cb();\n        }\n      });\n\n      getHTMLElement(page.root?.querySelector('.geolocation'))?.click();\n      await page.waitForChanges();\n\n      const autocompleteInput = getHTMLInputElement(page.root?.querySelector('phn-autocomplete-search-field'));\n      autocompleteInput?.dispatchEvent(new CustomEvent('searchInput', { detail: 'Stu' }));\n\n      await page.waitForChanges();\n\n      const validationError = page.root?.querySelector('.error-message');\n      expect(validationError).toBeNull();\n    });\n\n    it('displays retry error when there is some issue with accessing the users location', async () => {\n      jest\n        .spyOn(windowService, 'getNavigatorLatLong')\n        .mockRejectedValue(new NaviError('some error', NaviErrorTypes.RETRY));\n\n      dealerSearchResultsStore.state.results = null;\n\n      const page = await getPage();\n\n      getHTMLElement(page.root?.querySelector('.geolocation'))?.click();\n      await page.waitForChanges();\n\n      const validationError = page.root?.querySelector('.error-message');\n\n      expect(validationError?.innerHTML).toMatchInlineSnapshot(\n        `\"<phn-p-inline-notification state=\\\\\"error\\\\\" description=\\\\\"Retry\\\\\"></phn-p-inline-notification>\"`\n      );\n    });\n\n    it('displays invalid input error when there is no prediction that was submitted', async () => {\n      const page = await getPage();\n\n      jest.spyOn(page.rootInstance.debounceTimeout, 'set').mockImplementation(async (cb: unknown) => {\n        if (typeof cb === 'function') {\n          await cb();\n        }\n      });\n\n      jest.spyOn(mapsService, 'getPredictions').mockResolvedValue([]);\n\n      const autocompleteInput = getHTMLElement(page.root?.querySelector('phn-autocomplete-search-field'));\n      autocompleteInput?.dispatchEvent(new CustomEvent('searchInput', { detail: '?/**?' }));\n      autocompleteInput?.dispatchEvent(new CustomEvent('submitSearch', { detail: null }));\n\n      await page.waitForChanges();\n\n      const validationError = page.root?.querySelector('.error-message');\n\n      expect(validationError?.innerHTML).toMatchInlineSnapshot(\n        `\"<phn-p-inline-notification state=\\\\\"error\\\\\" description=\\\\\"Invalid input\\\\\"></phn-p-inline-notification>\"`\n      );\n      expect(page.rootInstance.predictions).toEqual([]);\n    });\n\n    it('displays invalid input error when the google api returns an invalid request status', async () => {\n      const page = await getPage();\n\n      jest.spyOn(page.rootInstance.debounceTimeout, 'set').mockImplementation(async (cb: unknown) => {\n        if (typeof cb === 'function') {\n          await cb();\n        }\n      });\n\n      // makes sure there are predictions to then delete when the API does not return predictions on invalid request\n      jest.spyOn(mapsService, 'getPredictions').mockResolvedValue(mockPredictions);\n\n      const autocompleteInput = getHTMLInputElement(page.root?.querySelector('phn-autocomplete-search-field'));\n      autocompleteInput?.dispatchEvent(new CustomEvent('searchInput', { detail: 'Stu' }));\n\n      jest\n        .spyOn(mapsService, 'getPredictions')\n        .mockRejectedValue(new NaviError('some error', NaviErrorTypes.INVALID_INPUT));\n\n      autocompleteInput?.dispatchEvent(new CustomEvent('searchInput', { detail: 'Stu$' }));\n\n      // It only works with 2 waitForChanges. We assume this is because of the debounceTimeout\n      await page.waitForChanges();\n      await page.waitForChanges();\n\n      const validationError = page.root?.querySelector('phn-p-text-field-wrapper')?.getAttribute('message');\n\n      expect(validationError).toEqual(mockErrorContent.invalidInput);\n      expect(page.rootInstance.predictions).toEqual([]);\n    });\n\n    it('displays no input error when the user submits search without input', async () => {\n      const page = await getPage();\n\n      jest.spyOn(page.rootInstance.debounceTimeout, 'set').mockImplementation(async (cb: unknown) => {\n        if (typeof cb === 'function') {\n          await cb();\n        }\n      });\n\n      jest.spyOn(mapsService, 'getPredictions').mockResolvedValue([]);\n\n      const autocompleteInput = getHTMLInputElement(page.root?.querySelector('phn-autocomplete-search-field'));\n      autocompleteInput?.dispatchEvent(new CustomEvent('searchInput', { detail: '' }));\n\n      autocompleteInput?.dispatchEvent(new CustomEvent('submitSearch', { detail: null }));\n\n      // It only works with 2 waitForChanges. We assume this is because of the debounceTimeout\n      await page.waitForChanges();\n      await page.waitForChanges();\n\n      const validationError = page.root?.querySelector('phn-p-text-field-wrapper')?.getAttribute('message');\n\n      expect(validationError).toEqual(mockErrorContent.noInput);\n    });\n  });\n\n  describe('Analytics', () => {\n    beforeEach(async () => {\n      jest.spyOn(dealerService, 'getPPNDealers').mockResolvedValue(mockPPNDealerSearchResultsWithLocalizedAddress);\n\n      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(\n        ({ ppnDealer: dealer }) => dealer.id\n      );\n      dealerSearchResultsStore.state.ppnDealers = mockPPNDealerSearchResultsWithLocalizedAddress.reduce(\n        (ppnDealers, dealerSearchResult) => ({\n          ...ppnDealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        {}\n      );\n\n      navContentStore.set('dealer', mockDealerContent);\n    });\n\n    it('emits DEALER_SEARCH_CLICK when autocomplete is submitted and DEALER_RESULTS_SCREEN_LOAD when results are returned', async () => {\n      const page = await getPage();\n\n      jest.spyOn(page.rootInstance.debounceTimeout, 'set').mockImplementation(async (cb: unknown) => {\n        if (typeof cb === 'function') {\n          await cb();\n        }\n      });\n\n      const inputField = getHTMLInputElement(page.root?.querySelector('phn-autocomplete-search-field'));\n      inputField?.dispatchEvent(new CustomEvent('searchInput', { detail: mockPredictions[0].text }));\n      inputField?.dispatchEvent(new CustomEvent('submitSearch', { detail: mockPredictions[0] }));\n\n      await page.waitForChanges();\n\n      const dataLayer = globalDataLayerService.gdl.DataLayerStore;\n\n      expect(dataLayer).toHaveLength(3);\n\n      const clickEvent = globalDataLayerService.gdl.DataLayerStore[1];\n\n      expect(clickEvent.context?.eventAction).toEqual(EventActions.DEALER_SEARCH_CLICK);\n      expect(clickEvent.componentClick).toEqual({\n        clickElementId: mockPredictions[0].id,\n        clickElementName: mockPredictions[0].text,\n        clickElementType: ClickElementTypes.Button,\n        targetElement: DEALER_SEARCH_TARGET_ELEMENT\n      });\n\n      expect(clickEvent.componentDisplay).toEqual({\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: mockDealerContent.text\n      });\n      expect(clickEvent.componentSearch).toEqual({\n        searchTerm: mockPredictions[0].text\n      });\n\n      const { results } = dealerSearchResultsStore.state;\n\n      const loadEvent = globalDataLayerService.gdl.DataLayerStore[2];\n\n      expect(loadEvent.context?.eventAction).toEqual(EventActions.DEALER_RESULTS_SCREEN_LOAD);\n      expect(loadEvent.componentSearch).toEqual({\n        numberOfResults: results?.length,\n        searchTerm: mockPredictions[0].text\n      });\n    });\n\n    it('emits DEALER_GEOLOCATION_CLICK when geolocation button is clicked and DEALER_RESULTS_SCREEN_LOAD when results are returned', async () => {\n      dealerSearchResultsStore.state.results = null;\n\n      const page = await getPage();\n\n      getHTMLElement(page.root?.querySelector('.geolocation'))?.click();\n      await page.waitForChanges();\n\n      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(3);\n\n      const locateEvent = globalDataLayerService.gdl.DataLayerStore[1];\n\n      expect(locateEvent.context?.eventAction).toEqual(EventActions.DEALER_GEOLOCATION_CLICK);\n      expect(locateEvent.componentClick).toEqual({\n        clickElementId: mockDealerContent.search.geolocation.id,\n        clickElementName: mockDealerContent.search.geolocation.text,\n        clickElementType: ClickElementTypes.Button,\n        targetElement: DEALER_SEARCH_TARGET_ELEMENT\n      });\n      expect(locateEvent.componentSearch).toEqual({\n        searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM\n      });\n\n      const loadEvent = globalDataLayerService.gdl.DataLayerStore[2];\n\n      expect(loadEvent.context?.eventAction).toEqual(EventActions.DEALER_RESULTS_SCREEN_LOAD);\n      expect(loadEvent.componentSearch).toEqual({\n        numberOfResults: 6,\n        searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM\n      });\n    });\n  });\n\n  it('emits DEALER_SEARCH_SCREEN_LOAD when geolocation page is loaded and there are previously loaded search results', async () => {\n    await getPage();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[0];\n\n    expect(event.context?.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);\n  });\n});\n"]}