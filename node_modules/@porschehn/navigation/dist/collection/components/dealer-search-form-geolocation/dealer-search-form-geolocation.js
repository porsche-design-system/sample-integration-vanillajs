import { Fragment, h, Host } from "@stencil/core";
import { splitLocale } from "../../entities/locale";
import { navStateStore } from "../../state/nav-state-store";
import { getPPNDealers } from "../../services/dealer-service";
import { getConfig, getString, isString } from "../../utility/helper";
import { dealerSearchResultsStore } from "../../state/dealer-search-results-store";
import logger from "../../services/logger";
import { getErrorMessage, NaviError, NaviErrorTypes } from "../../utility/navi-error";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
import { ClickElementTypes, DEALER_SEARCH_DISPLAY_ELEMENT_ID, DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER, DEALER_SEARCH_TARGET_ELEMENT, ElementTypes, EventActions, GEOLOCATION_BUTTON_SEARCH_TERM } from "../../utility/constants";
import analyticsManager from "../../services/analytics/analytics-manager";
import { RoutingKeys } from "../../entities/routing-key";
import mapsService from "../../services/maps-service";
import windowService from "../../services/window-service";
import { Timeout } from "../../utility/timeout";
import { navContentStore } from "../../state/nav-content-store";
import ErrorMessage from "../dealer-search-form/error-message";
import { componentsOnReady } from "../../utility/ready";
import { getRegionSpecificCountry } from "../../utility/helpers/dealer-search-helper";
export class DealerSearchFormGeolocation {
  constructor() {
    this.debounceTimeout = new Timeout(100);
    this.locale = undefined;
    this.predictions = [];
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.isLoading = false;
    this.showGeolocationButton = dealerSearchResultsStore.state.results === null;
    this.animateResults = false;
    this.searchTerm = dealerSearchResultsStore.state.searchTerm;
    this.showSkeleton = true;
  }
  loadedAutoCompleteListener() {
    this.showSkeleton = false;
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  disconnectedCallback() {
    dealerSearchResultsStore.state.searchTerm = this.searchTerm;
    this.debounceTimeout.cancel();
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { error: errorContent } = navContentStore.state;
      mapsService.init('GOOGLE_API_KEY').catch((err) => {
        logger.error('INIT_MAPS_SERVICE', err);
        this.formErrorMessage = getErrorMessage(errorContent, err);
        this.errorMessage = null;
      });
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm, true),
        displayElementName: dealer.text
      }
    });
  }
  emitResultsLoadEvent(searchTerm) {
    const { results } = dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.state;
    const componentSearchSearchTerm = isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM;
    const numberOfResults = (results === null || results === void 0 ? void 0 : results.length) || 0;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: componentSearchSearchTerm,
        numberOfResults: numberOfResults
      }
    });
  }
  async fetchDealers(getSearchTerms) {
    const { error: errorContent } = navContentStore.state;
    try {
      this.reset();
      this.isLoading = true;
      const [searchTerm, placeCoordinates] = await getSearchTerms();
      const { env } = navStateStore.state;
      const ppnDealerSearchResults = await getPPNDealers(env, getConfig(env).DEALER_API_URL, placeCoordinates, getRegionSpecificCountry(splitLocale(this.locale).country));
      dealerSearchResultsStore.state.searchTerm = searchTerm;
      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), dealerSearchResultsStore.state.ppnDealers);
      this.showGeolocationButton = false;
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = getErrorMessage(errorContent, err);
      this.errorMessage = null;
    }
    finally {
      this.isLoading = false;
      this.animateResults = true;
    }
  }
  async onSubmit(prediction) {
    const { dealer: dealerContent, error: errorContent } = navContentStore.state;
    if (!isString(this.searchTerm)) {
      this.errorMessage = errorContent.noInput;
      this.formErrorMessage = '';
      return;
    }
    await this.fetchDealers(async () => {
      if (prediction === null) {
        throw new NaviError('Dealer search form submitted without prediction', NaviErrorTypes.INVALID_INPUT);
      }
      this.searchTerm = prediction.text;
      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_CLICK, {
        componentClick: {
          clickElementId: prediction.id,
          clickElementName: prediction.text,
          clickElementType: ClickElementTypes.Button,
          targetElement: DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: prediction.text
        }
      });
      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);
      return [prediction.text, placeCoordinates];
    });
    this.emitResultsLoadEvent(this.searchTerm);
  }
  async getCurrentLocation() {
    const { dealer: dealerContent } = navContentStore.state;
    await this.fetchDealers(async () => {
      const placeCoordinates = await windowService.getNavigatorLatLong();
      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);
      this.searchTerm = '';
      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_GEOLOCATION_CLICK, {
        componentClick: {
          clickElementId: dealerContent.search.geolocation.id,
          clickElementName: dealerContent.search.geolocation.text,
          clickElementType: ClickElementTypes.Button,
          targetElement: DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM
        }
      });
      return [formattedAddress, placeCoordinates];
    });
    this.emitResultsLoadEvent(GEOLOCATION_BUTTON_SEARCH_TERM);
  }
  async onDealerSearchEntry(searchTerm) {
    const { error } = navContentStore.state;
    try {
      this.searchTerm = searchTerm;
      this.errorMessage = null;
      this.formErrorMessage = null;
      this.showGeolocationButton = dealerSearchResultsStore.state.results === null;
      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);
    }
    catch (err) {
      logger.error('GET_PREDICTIONS', err);
      this.errorMessage = getErrorMessage(error, err);
      this.predictions = [];
    }
  }
  reset() {
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.animateResults = false;
    this.showGeolocationButton = true;
    this.isLoading = false;
    dealerSearchResultsStore.state.results = null;
  }
  render() {
    const { dealer: dealerContent } = navContentStore.state;
    const { results } = dealerSearchResultsStore.state;
    return (h(Host, { class: this.showSkeleton ? 'skeleton' : '' }, h("div", { class: "input-container" }, this.showSkeleton ? h("div", { class: "skeleton-autocomplete-search-field" }) : null, h("phn-autocomplete-search-field", { placeholder: dealerContent.search.form.inputPlaceholder, initialValue: dealerSearchResultsStore.state.searchTerm, predictions: this.predictions, onSearchInput: (e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail)), onClearSearch: () => {
        this.predictions = [];
        dealerSearchResultsStore.state.searchTerm = '';
        this.searchTerm = '';
        this.reset();
        this.clearSearchEvent.emit();
        this.showGeolocationButton = true;
      }, onSubmitSearch: (e) => this.onSubmit(e.detail), errorMessage: getString(this.errorMessage), style: { display: this.showSkeleton ? 'none' : '' } })), this.isLoading && (h("div", { class: "spinner" }, h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } }))), this.showGeolocationButton && results === null ? (h(Fragment, null, h("div", { class: `or-container ${this.isLoading ? 'animate-out' : ''}`, onAnimationEnd: () => {
        this.showGeolocationButton = false;
      } }, this.showSkeleton ? h("div", { class: "skeleton-or-text" }) : null, h("phn-p-text", { color: "inherit", size: "inherit", tag: "div", "data-test-id": "dealer-search-or-label", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.or), this.showSkeleton ? h("div", { class: "skeleton-geolocation-button" }) : null, h("phn-p-button", { class: 'geolocation', onClick: () => this.getCurrentLocation(), variant: "tertiary", icon: "locate", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.geolocation.text)))) : null, isString(this.formErrorMessage) ? (h(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() })) : null));
  }
  static get is() { return "phn-dealer-search-form-geolocation"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["dealer-search-form-geolocation.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dealer-search-form-geolocation.css"]
    };
  }
  static get properties() {
    return {
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "predictions": {},
      "errorMessage": {},
      "formErrorMessage": {},
      "isLoading": {},
      "showGeolocationButton": {},
      "animateResults": {},
      "searchTerm": {},
      "showSkeleton": {}
    };
  }
  static get events() {
    return [{
        "method": "dealerSearchFormEvent",
        "name": "dealerSearchFormEvent",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "clearSearchEvent",
        "name": "clearSearchEvent",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "removeSkeletonOnDealerSearchForm",
        "name": "removeSkeletonOnDealerSearchForm",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get listeners() {
    return [{
        "name": "autoCompleteLoaded",
        "method": "loadedAutoCompleteListener",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=dealer-search-form-geolocation.js.map
