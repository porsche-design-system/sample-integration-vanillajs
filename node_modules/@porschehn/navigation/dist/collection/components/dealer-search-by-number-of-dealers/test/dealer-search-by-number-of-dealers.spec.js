import { newSpecPage } from "@stencil/core/testing";
import { DealerSearchByNumberOfDealers } from "../dealer-search-by-number-of-dealers";
import { navContentStore } from "../../../state/nav-content-store";
import { mockDealerContent, mockDealerContentForMarketWithOneDealer, mockErrorContent, mockPPNDealerOneSearchResults } from "../../../test/test-data";
import { dealerSearchResultsStore } from "../../../state/dealer-search-results-store";
import { h } from "@stencil/core";
import * as dealerService from "../../../services/dealer-service";
import { Environments } from "../../../entities/environment";
import { getConfig } from "../../../utility/helper";
import { NaviError, NaviErrorTypes } from "../../../utility/navi-error";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { EventActions } from "../../../utility/constants";
describe('dealer-search-by-number-of-dealers', () => {
  let dealerServiceAllDealersSpy;
  const defaultProps = {
    dealer: mockDealerContent,
    locale: 'xx-XX',
    errorContent: mockErrorContent
  };
  beforeEach(async () => {
    dealerServiceAllDealersSpy = jest
      .spyOn(dealerService, 'getAllPPNDealersForMarket')
      .mockResolvedValue(mockPPNDealerOneSearchResults);
    navContentStore.state.dealer.numberOfDealers = 6;
  });
  const getPage = async () => {
    navContentStore.set('error', mockErrorContent);
    navContentStore.set('dealer', Object.assign(Object.assign({}, mockDealerContent), { numberOfDealers: 5 }));
    dealerSearchResultsStore.state.results = [];
    return await newSpecPage({
      components: [DealerSearchByNumberOfDealers],
      template: () => h("phn-dealer-search-by-number-of-dealers", Object.assign({}, defaultProps))
    });
  };
  it('should show spinner if the page is loading', async () => {
    navContentStore.state.dealer = mockDealerContent;
    dealerSearchResultsStore.state.results = [];
    const page = await getPage();
    page.rootInstance.isLoading = true;
    await page.waitForChanges();
    expect(page.root).toMatchInlineSnapshot(`
      <phn-dealer-search-by-number-of-dealers>
        <div class="spinner">
          <phn-p-spinner size="medium"></phn-p-spinner>
        </div>
      </phn-dealer-search-by-number-of-dealers>
    `);
  });
  it('should show spinner if the page is loading', async () => {
    navContentStore.state.dealer = mockDealerContent;
    dealerSearchResultsStore.state.results = [];
    const page = await getPage();
    page.rootInstance.isLoading = true;
    await page.waitForChanges();
    expect(page.root).toMatchInlineSnapshot(`
      <phn-dealer-search-by-number-of-dealers>
        <div class="spinner">
          <phn-p-spinner size="medium"></phn-p-spinner>
        </div>
      </phn-dealer-search-by-number-of-dealers>
    `);
  });
  it('should show spinner if the page is loading', async () => {
    const page = await getPage();
    page.rootInstance.isLoading = true;
    await page.waitForChanges();
    expect(page.root).toMatchInlineSnapshot(`
      <phn-dealer-search-by-number-of-dealers>
        <div class="spinner">
          <phn-p-spinner size="medium"></phn-p-spinner>
        </div>
      </phn-dealer-search-by-number-of-dealers>
    `);
  });
  // it('should display no distance from dealer on card for countries with <= 5 dealers', async () => {
  //   navContentStore.state.dealer.numberOfDealers = 1;
  //
  //   const page = await getPage();
  //   const cards = page.root?.querySelectorAll('phn-menu-item-card');
  //   if (cards) {
  //     expect(cards[0]?.querySelector('phn-p-tag')).toBeNull();
  //   } else {
  //     throw Error('It should have cards');
  //   }
  // });
  it('should request dealer results directly for countries with <= 5 dealers', async () => {
    dealerSearchResultsStore.state.results = [];
    navContentStore.state.dealer.numberOfDealers = 1;
    const page = await getPage();
    await page.waitForChanges();
    expect(dealerServiceAllDealersSpy).toBeCalledTimes(1);
    expect(dealerServiceAllDealersSpy).toBeCalledWith(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL_ALL_DEALERS, 'XX');
  });
  describe('error handling', () => {
    it('displays general error when fetch dealers request thrown error', async () => {
      var _a;
      jest
        .spyOn(dealerService, 'getAllPPNDealersForMarket')
        .mockRejectedValue(new NaviError('maps error', NaviErrorTypes.GENERAL));
      const page = await getPage();
      const validationError = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.error-message');
      expect(validationError === null || validationError === void 0 ? void 0 : validationError.innerHTML).toMatchInlineSnapshot(`"<phn-p-inline-notification state=\\"error\\" description=\\"Wrong\\"></phn-p-inline-notification>"`);
    });
  });
  it('emits DEALER_RESULTS_SCREEN_LOAD when page is loaded and there are less than 5 dealers available', async () => {
    var _a;
    navContentStore.state.dealer = mockDealerContentForMarketWithOneDealer;
    dealerSearchResultsStore.state.results = ['123'];
    await newSpecPage({
      components: [DealerSearchByNumberOfDealers],
      template: () => h("phn-dealer-search-by-number-of-dealers", Object.assign({}, defaultProps))
    });
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);
    expect(event.componentSearch).toEqual({
      numberOfResults: 1,
      searchTerm: 'by market'
    });
  });
  it('emits DEALER_SEARCH_SCREEN_LOAD when number of dealers page is loaded and there are previously loaded search results', async () => {
    var _a;
    await getPage();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);
    expect(event.componentSearch).toEqual({
      numberOfResults: 5,
      searchTerm: 'by market'
    });
  });
});
//# sourceMappingURL=dealer-search-by-number-of-dealers.spec.js.map
