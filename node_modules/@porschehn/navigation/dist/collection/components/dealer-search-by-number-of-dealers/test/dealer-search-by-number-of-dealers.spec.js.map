{"version":3,"file":"dealer-search-by-number-of-dealers.spec.js","sourceRoot":"","sources":["../../../../../src/components/dealer-search-by-number-of-dealers/test/dealer-search-by-number-of-dealers.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { DealerSearchByNumberOfDealers } from '../dealer-search-by-number-of-dealers';\nimport { navContentStore } from '../../../state/nav-content-store';\nimport {\n  mockDealerContent,\n  mockDealerContentForMarketWithOneDealer,\n  mockErrorContent,\n  mockPPNDealerOneSearchResults\n} from '../../../test/test-data';\nimport { dealerSearchResultsStore } from '../../../state/dealer-search-results-store';\nimport { h } from '@stencil/core';\nimport * as dealerService from '../../../services/dealer-service';\nimport { Environments } from '../../../entities/environment';\nimport { getConfig } from '../../../utility/helper';\nimport { NaviError, NaviErrorTypes } from '../../../utility/navi-error';\nimport globalDataLayerService from '../../../services/analytics/global-data-layer-service';\nimport { EventActions } from '../../../utility/constants';\n\ndescribe('dealer-search-by-number-of-dealers', () => {\n  let dealerServiceAllDealersSpy: jest.SpyInstance;\n\n  const defaultProps = {\n    dealer: mockDealerContent,\n    locale: 'xx-XX',\n    errorContent: mockErrorContent\n  };\n\n  beforeEach(async () => {\n    dealerServiceAllDealersSpy = jest\n      .spyOn(dealerService, 'getAllPPNDealersForMarket')\n      .mockResolvedValue(mockPPNDealerOneSearchResults);\n\n    navContentStore.state.dealer.numberOfDealers = 6;\n  });\n  const getPage = async () => {\n    navContentStore.set('error', mockErrorContent);\n    navContentStore.set('dealer', { ...mockDealerContent, numberOfDealers: 5 });\n    dealerSearchResultsStore.state.results = [];\n\n    return await newSpecPage({\n      components: [DealerSearchByNumberOfDealers],\n      template: () => <phn-dealer-search-by-number-of-dealers {...defaultProps} />\n    });\n  };\n\n  it('should show spinner if the page is loading', async () => {\n    navContentStore.state.dealer = mockDealerContent;\n    dealerSearchResultsStore.state.results = [];\n\n    const page = await getPage();\n\n    page.rootInstance.isLoading = true;\n\n    await page.waitForChanges();\n\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-dealer-search-by-number-of-dealers>\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\"></phn-p-spinner>\n        </div>\n      </phn-dealer-search-by-number-of-dealers>\n    `);\n  });\n\n  it('should show spinner if the page is loading', async () => {\n    const page = await getPage();\n\n    page.rootInstance.isLoading = true;\n    await page.waitForChanges();\n\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-dealer-search-by-number-of-dealers>\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\"></phn-p-spinner>\n        </div>\n      </phn-dealer-search-by-number-of-dealers>\n    `);\n  });\n\n  it('should request dealer results directly for countries with <= 5 dealers', async () => {\n    dealerSearchResultsStore.state.results = [];\n    navContentStore.state.dealer.numberOfDealers = 1;\n\n    const page = await getPage();\n\n    await page.waitForChanges();\n\n    expect(dealerServiceAllDealersSpy).toBeCalledTimes(1);\n    expect(dealerServiceAllDealersSpy).toBeCalledWith(\n      Environments.TEST,\n      getConfig(Environments.TEST).DEALER_API_URL_ALL_DEALERS,\n      'XX'\n    );\n  });\n\n  describe('error handling', () => {\n    it('displays general error when fetch dealers request thrown error', async () => {\n      jest\n        .spyOn(dealerService, 'getAllPPNDealersForMarket')\n        .mockRejectedValue(new NaviError('maps error', NaviErrorTypes.GENERAL));\n\n      const page = await getPage();\n\n      const validationError = page.root?.querySelector('.error-message');\n\n      expect(validationError?.innerHTML).toMatchInlineSnapshot(\n        `\"<phn-p-inline-notification state=\\\\\"error\\\\\" description=\\\\\"Wrong\\\\\"></phn-p-inline-notification>\"`\n      );\n    });\n  });\n\n  it('emits DEALER_RESULTS_SCREEN_LOAD when page is loaded and there are less than 5 dealers available', async () => {\n    navContentStore.state.dealer = mockDealerContentForMarketWithOneDealer;\n    dealerSearchResultsStore.state.results = ['123'];\n\n    await newSpecPage({\n      components: [DealerSearchByNumberOfDealers],\n      template: () => <phn-dealer-search-by-number-of-dealers {...defaultProps} />\n    });\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[0];\n\n    expect(event.context?.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);\n    expect(event.componentSearch).toEqual({\n      numberOfResults: 1,\n      searchTerm: 'by market'\n    });\n  });\n\n  it('emits DEALER_SEARCH_SCREEN_LOAD when number of dealers page is loaded and there are previously loaded search results', async () => {\n    await getPage();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[0];\n\n    expect(event.context?.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);\n    expect(event.componentSearch).toEqual({\n      numberOfResults: 5,\n      searchTerm: 'by market'\n    });\n  });\n});\n"]}