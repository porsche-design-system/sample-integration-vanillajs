import { h } from "@stencil/core";
import { splitLocale } from "../../entities/locale";
import { dealerSearchResultsStore } from "../../state/dealer-search-results-store";
import { navStateStore } from "../../state/nav-state-store";
import { getAllPPNDealersForMarket } from "../../services/dealer-service";
import { getConfig, isString } from "../../utility/helper";
import logger from "../../services/logger";
import { navContentStore } from "../../state/nav-content-store";
import { getErrorMessage } from "../../utility/navi-error";
import ErrorMessage from "../dealer-search-form/error-message";
import { componentsOnReady } from "../../utility/ready";
import { Timeout } from "../../utility/timeout";
import analyticsManager from "../../services/analytics/analytics-manager";
import { DEALER_MARKET_SEARCH_TERM, DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER, ElementTypes, EventActions } from "../../utility/constants";
import globalDataLayerService from "../../services/analytics/global-data-layer-service";
export class DealerSearchByNumberOfDealers {
  constructor() {
    this.isLoading = false;
    this.formErrorMessage = null;
    this.locale = undefined;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { dealer } = navContentStore.state;
      if (dealer.numberOfDealers <= 5) {
        this.fetchAllDealersForMarket();
      }
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  async fetchAllDealersForMarket() {
    const { error: errorContent } = navContentStore.state;
    try {
      this.isLoading = true;
      const { country } = splitLocale(this.locale);
      const { env } = navStateStore.state;
      const ppnDealerSearchResults = await getAllPPNDealersForMarket(env, getConfig(env).DEALER_API_URL_ALL_DEALERS, country);
      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), dealerSearchResultsStore.state.ppnDealers);
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = getErrorMessage(errorContent, err);
    }
    finally {
      this.isLoading = false;
      this.emitResultsLoadEvent();
    }
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  emitResultsLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  reset() {
    this.formErrorMessage = null;
    this.isLoading = false;
    dealerSearchResultsStore.state.results = null;
  }
  render() {
    if (this.isLoading) {
      return (h("div", { class: "spinner" }, h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } })));
    }
    if (isString(this.formErrorMessage))
      return h(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() });
  }
  static get is() { return "phn-dealer-search-by-number-of-dealers"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["dealer-search-by-number-of-dealers.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dealer-search-by-number-of-dealers.css"]
    };
  }
  static get properties() {
    return {
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "locale",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "isLoading": {},
      "formErrorMessage": {}
    };
  }
  static get events() {
    return [{
        "method": "removeSkeletonOnDealerSearchForm",
        "name": "removeSkeletonOnDealerSearchForm",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
//# sourceMappingURL=dealer-search-by-number-of-dealers.js.map
