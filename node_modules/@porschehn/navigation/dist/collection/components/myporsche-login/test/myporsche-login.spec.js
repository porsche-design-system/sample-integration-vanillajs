import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { mockMyPorscheContent } from "../../../test/test-data";
import { getHTMLElement } from "../../../utility/helper";
import { MyPorscheLogin } from "../myporsche-login";
import { routerStore } from "../../../state/router-store";
import { RoutingKeys } from "../../../entities/routing-key";
import { goTo } from "../../../services/routing-manager";
describe('myporsche-login', () => {
  beforeEach(() => {
    goTo(RoutingKeys.MY_PORSCHE);
  });
  it('renders', async () => {
    const page = await newSpecPage({
      components: [MyPorscheLogin],
      template: () => h("phn-myporsche-login", Object.assign({}, mockMyPorscheContent))
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-myporsche-login id="mainmenu.myporsche" link="https://my.porsche.com/core/gb/en_GB/home" loggedinfallback="Logged in" logintext="Login / Register" text="My Porsche">
        <div class="button-container">
          <phn-p-button class="login" variant="primary">
            Log in
          </phn-p-button>
          <phn-p-link class="more" href="https://www.porsche.com/uk/accessoriesandservice/myporsche/" variant="tertiary">
            Discover more
          </phn-p-link>
        </div>
        <div>
          <phn-p-link-pure icon="none">
            <a href="https://signup.porsche.com/gb/en_GB/register">
              Register now
            </a>
          </phn-p-link-pure>
          <phn-p-text>
            to discover the digital world of Porsche.
          </phn-p-text>
        </div>
      </phn-myporsche-login>
    `);
  });
  it('should not render more button if more link content is not provided', async () => {
    var _a;
    const page = await newSpecPage({
      components: [MyPorscheLogin],
      template: () => h("phn-myporsche-login", Object.assign({}, mockMyPorscheContent, { more: null }))
    });
    expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link.more')).toBeNull();
  });
  it('should emit loginEvent when clicked', async () => {
    var _a, _b;
    const page = await newSpecPage({
      components: [MyPorscheLogin],
      template: () => h("phn-myporsche-login", Object.assign({}, mockMyPorscheContent))
    });
    const loginEventSpy = jest.spyOn(page.rootInstance.loginEvent, 'emit');
    (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.login'))) === null || _b === void 0 ? void 0 : _b.click();
    expect(loginEventSpy).toHaveBeenCalled();
  });
  describe('data analytics', () => {
    let page;
    beforeEach(async () => {
      page = await newSpecPage({
        components: [MyPorscheLogin],
        template: () => h("phn-myporsche-login", Object.assign({}, mockMyPorscheContent))
      });
    });
    it('should send NAVIGATION_LINK_CLICK data event after login link is clicked', async () => {
      var _a, _b;
      const myPorscheLogin = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.login'));
      routerStore.state.routingKeyHistory = ['mainmenu', 'my_porsche'];
      routerStore.state.routingKeyPointer = 1;
      myPorscheLogin === null || myPorscheLogin === void 0 ? void 0 : myPorscheLogin.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockMyPorscheContent.login.id,
        clickElementName: mockMyPorscheContent.login.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: mockMyPorscheContent.login.link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level2-my_porsche',
        displayElementType: 'level2_my-porsche-drawer',
        displayElementName: mockMyPorscheContent.login.text
      });
    });
    it('should send NAVIGATION_LINK_CLICK data event after more link is clicked', async () => {
      var _a, _b, _c, _d, _e, _f;
      const myPorscheMore = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.more'));
      myPorscheMore === null || myPorscheMore === void 0 ? void 0 : myPorscheMore.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: (_c = mockMyPorscheContent.more) === null || _c === void 0 ? void 0 : _c.id,
        clickElementName: (_d = mockMyPorscheContent.more) === null || _d === void 0 ? void 0 : _d.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: (_e = mockMyPorscheContent.more) === null || _e === void 0 ? void 0 : _e.link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level2-my_porsche',
        displayElementType: 'level2_my-porsche-drawer',
        displayElementName: (_f = mockMyPorscheContent.more) === null || _f === void 0 ? void 0 : _f.text
      });
    });
    it('should send NAVIGATION_LINK_CLICK data event after sign up link is clicked', async () => {
      var _a, _b;
      const myPorscheSignup = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-link-pure'));
      myPorscheSignup === null || myPorscheSignup === void 0 ? void 0 : myPorscheSignup.click();
      expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: mockMyPorscheContent.signup.id,
        clickElementName: mockMyPorscheContent.signup.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: mockMyPorscheContent.signup.link
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level2-my_porsche',
        displayElementType: 'level2_my-porsche-drawer',
        displayElementName: mockMyPorscheContent.signup.text
      });
    });
  });
});
//# sourceMappingURL=myporsche-login.spec.js.map
