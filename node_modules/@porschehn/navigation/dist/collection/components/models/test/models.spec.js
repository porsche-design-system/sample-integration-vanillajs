import { breakpoint } from "@porsche-design-system/components-js/styles";
import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { navContentStore } from "../../../state/nav-content-store";
import { mockModelsContent } from "../../../test/test-data";
import { getHTMLElement } from "../../../utility/helper";
import { MenuItem } from "../../menu-item/menu-item";
import { Models } from "../models";
describe('models', () => {
  const defaultProps = {
    breakpoint: breakpoint.s
  };
  let page;
  beforeEach(async () => {
    navContentStore.state.models = mockModelsContent;
  });
  describe('in main drawer', () => {
    beforeEach(async () => {
      page = await newSpecPage({
        components: [Models, MenuItem],
        template: () => h("phn-models", Object.assign({}, defaultProps))
      });
    });
    it('should render', async () => {
      expect(page.root).toMatchInlineSnapshot(`
        <phn-models>
          <ul>
            <phn-menu-item class="model-variant series skeleton" role="listitem">
              <!---->
              <phn-p-button-pure align-label="left" data-id="models/mainmenu.718" icon="none" size="inherit" stretch="false">
                <div class="phn-align-center phn-flex-row">
                  <div class="media-container skeleton-item">
                    <img alt="718 Frontshot" class="image" slot="media" srcset="http://assets/url/series-assets/760/718.webp, http://assets/url/series-assets/760/718@2x.webp 2x">
                  </div>
                </div>
              </phn-p-button-pure>
            </phn-menu-item>
            <phn-menu-item class="model-variant series skeleton" role="listitem">
              <!---->
              <phn-p-button-pure align-label="left" data-id="models/mainmenu.911" icon="none" size="inherit" stretch="false">
                <div class="phn-align-center phn-flex-row">
                  <div class="media-container skeleton-item">
                    <img alt="911 Frontshot" class="image" slot="media" srcset="http://assets/url/series-assets/760/911.webp, http://assets/url/series-assets/760/911@2x.webp 2x">
                  </div>
                </div>
              </phn-p-button-pure>
            </phn-menu-item>
            <phn-menu-item class="model-variant series skeleton" role="listitem">
              <!---->
              <phn-p-button-pure align-label="left" data-id="models/mainmenu.taycan" icon="none" size="inherit" stretch="false">
                <div class="phn-align-center phn-flex-row">
                  <div class="media-container skeleton-item">
                    <img alt="Taycan Frontshot" class="image" slot="media" srcset="http://assets/url/series-assets/760/taycan.webp, http://assets/url/series-assets/760/taycan@2x.webp 2x">
                  </div>
                </div>
              </phn-p-button-pure>
            </phn-menu-item>
            <phn-menu-item class="model-variant series skeleton" role="listitem">
              <!---->
              <phn-p-button-pure align-label="left" data-id="models/mainmenu.panamera" icon="none" size="inherit" stretch="false">
                <div class="phn-align-center phn-flex-row">
                  <div class="media-container skeleton-item">
                    <img alt="Panamera Frontshot" class="image" slot="media" srcset="http://assets/url/series-assets/760/panamera.webp, http://assets/url/series-assets/760/panamera@2x.webp 2x">
                  </div>
                </div>
              </phn-p-button-pure>
            </phn-menu-item>
            <phn-menu-item class="model-variant series skeleton" role="listitem">
              <!---->
              <phn-p-button-pure align-label="left" data-id="models/mainmenu.macan" icon="none" size="inherit" stretch="false">
                <div class="phn-align-center phn-flex-row">
                  <div class="media-container skeleton-item">
                    <img alt="Macan Frontshot" class="image" slot="media" srcset="http://assets/url/series-assets/760/macan.webp, http://assets/url/series-assets/760/macan@2x.webp 2x">
                  </div>
                </div>
              </phn-p-button-pure>
            </phn-menu-item>
            <phn-menu-item class="model-variant series skeleton" role="listitem">
              <!---->
              <phn-p-button-pure align-label="left" data-id="models/mainmenu.cayenne" icon="none" size="inherit" stretch="false">
                <div class="phn-align-center phn-flex-row">
                  <div class="media-container skeleton-item">
                    <img alt="Cayenne Frontshot" class="image" slot="media" srcset="http://assets/url/series-assets/760/cayenne.webp, http://assets/url/series-assets/760/cayenne@2x.webp 2x">
                  </div>
                </div>
              </phn-p-button-pure>
            </phn-menu-item>
          </ul>
        </phn-models>
      `);
    });
  });
  describe('skeleton', () => {
    it('should render skeleton when images not loaded yet', async () => {
      var _a;
      page = await newSpecPage({
        components: [Models, MenuItem],
        template: () => h("phn-models", Object.assign({}, defaultProps, { breakpoint: breakpoint.xs, showHeadline: true }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.skeleton')).not.toBeNull();
    });
    it('should release skeleton when images loaded', async () => {
      var _a, _b, _c;
      page = await newSpecPage({
        components: [Models, MenuItem],
        template: () => h("phn-models", Object.assign({}, defaultProps, { breakpoint: breakpoint.xs, showHeadline: true }))
      });
      const imgs = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('img');
      if (imgs === undefined) {
        return;
      }
      imgs.forEach(async (img) => {
        img.dispatchEvent(new Event('load'));
      });
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.skeleton-headline')).toBeNull();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.skeleton')).toBeNull();
    });
    it('should show skeleton when image load throws error', async () => {
      var _a, _b;
      page = await newSpecPage({
        components: [Models, MenuItem],
        template: () => h("phn-models", Object.assign({}, defaultProps, { breakpoint: breakpoint.xs, showHeadline: true }))
      });
      const imgs = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('img');
      if (imgs === undefined) {
        return;
      }
      imgs.forEach(async (img) => {
        img.dispatchEvent(new Event('error'));
      });
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.skeleton')).not.toBeNull();
    });
  });
  it('should emit mainDrawerItemClick event', async () => {
    var _a, _b;
    const page = await newSpecPage({
      components: [Models, MenuItem],
      template: () => h("phn-models", Object.assign({}, defaultProps))
    });
    const mobileMenuItemClickSpy = jest.spyOn(page.rootInstance.mobileMenuItemClick, 'emit');
    (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-menu-item'))) === null || _b === void 0 ? void 0 : _b.click();
    expect(mobileMenuItemClickSpy).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=models.spec.js.map
