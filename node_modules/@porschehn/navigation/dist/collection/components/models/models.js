import { getAssetPath, h, Host } from "@stencil/core";
import { getModelsRoutingKey } from "../../entities/routing-key";
import { navContentStore } from "../../state/nav-content-store";
import { navStateStore } from "../../state/nav-state-store";
import { EventActions, MenuItemVariant } from "../../utility/constants";
import { getConfig, getImageSize } from "../../utility/helper";
export class Models {
  constructor() {
    this.seriesImagesLoaded = new Set();
    this.seriesImagesNotLoaded = new Set();
    this.breakpoint = undefined;
    this.showHeadline = false;
    this.showSkeleton = true;
  }
  showMenuWithModels(series) {
    const modelsSeriesRoutingKey = getModelsRoutingKey(series.id);
    this.mobileMenuItemClick.emit([modelsSeriesRoutingKey]);
  }
  handleImageLoad(seriesId) {
    const { models } = navContentStore.state;
    this.seriesImagesLoaded.add(seriesId);
    if (models.series.every(({ id }) => this.seriesImagesLoaded.has(id))) {
      this.showSkeleton = false;
    }
  }
  handleImageLoadError(seriesId) {
    this.handleImageLoad(seriesId);
    this.seriesImagesNotLoaded.add(seriesId);
  }
  getImageSource(image) {
    const assetPath = getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/series-assets`);
    const imageSize = getImageSize(this.breakpoint);
    const imagePath = `${assetPath}/${imageSize}`;
    return `${imagePath}/${image}.webp, ${imagePath}/${image}@2x.webp 2x`;
  }
  render() {
    const { models } = navContentStore.state;
    return (h(Host, null, h("ul", null, models.series.map((modelsSeries) => (h("phn-menu-item", { key: modelsSeries.id, class: `series ${this.seriesImagesNotLoaded.has(modelsSeries.id) || this.showSkeleton ? 'skeleton' : ''}`, elementId: getModelsRoutingKey(modelsSeries.id), analyticsId: modelsSeries.id, text: modelsSeries.name, subtext: modelsSeries.tags.map((tag) => tag.text).join(' | '), onClick: () => this.showMenuWithModels(modelsSeries), variant: MenuItemVariant.Model, isModels: true, datalayerEventAction: EventActions.MODEL_RANGE_CLICK, role: "listitem" }, h("img", { slot: "media", class: "image", srcSet: this.getImageSource(modelsSeries.image), alt: `${modelsSeries.name} Frontshot`, onLoad: () => this.handleImageLoad(modelsSeries.id), onError: () => this.handleImageLoadError(modelsSeries.id) })))))));
  }
  static get is() { return "phn-models"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["models.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["models.css"]
    };
  }
  static get assetsDirs() { return ["series-assets"]; }
  static get properties() {
    return {
      "breakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "breakpoint",
        "reflect": false
      },
      "showHeadline": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "show-headline",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "showSkeleton": {}
    };
  }
  static get events() {
    return [{
        "method": "mobileMenuItemClick",
        "name": "mobileMenuItemClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "string[]",
          "resolved": "string[]",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
//# sourceMappingURL=models.js.map
