{"version":3,"file":"burger-button.spec.js","sourceRoot":"","sources":["../../../../../src/components/burger-button/test/burger-button.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage, SpecPage } from '@stencil/core/testing';\nimport globalDataLayerService from '../../../services/analytics/global-data-layer-service';\nimport { navContentStore } from '../../../state/nav-content-store';\nimport { ClickElementTypes, EventActions } from '../../../utility/constants';\nimport { getHTMLElement } from '../../../utility/helper';\nimport { BurgerButton } from '../burger-button';\n\ndescribe('burger-button', () => {\n  let page: SpecPage;\n  const menu = {\n    id: 'mainmenu.menu',\n    text: 'Menü',\n    description: ''\n  };\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      components: [BurgerButton],\n      template: () => <phn-burger-button hideLabel={false} alignLabel=\"left\" />\n    });\n  });\n\n  it('without props it renders with default menu text as empty', async () => {\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-burger-button class=\"navbar-theme\">\n        <phn-p-button-pure align-label=\"left\" icon=\"menu-lines\" size=\"inherit\" theme=\"light\"></phn-p-button-pure>\n      </phn-burger-button>\n    `);\n  });\n\n  it('with props renders text from props', async () => {\n    navContentStore.state.menu = menu;\n    await page.waitForChanges();\n\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-burger-button class=\"navbar-theme\">\n        <phn-p-button-pure align-label=\"left\" icon=\"menu-lines\" size=\"inherit\" theme=\"light\">\n          Menü\n        </phn-p-button-pure>\n      </phn-burger-button>\n    `);\n  });\n\n  it('should send MORE_CLICK data event after burger button is clicked', async () => {\n    navContentStore.state.menu = menu;\n    await page.waitForChanges();\n\n    getHTMLElement(page.root?.querySelector('phn-p-button-pure'))?.click();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[0];\n\n    expect(event.context?.eventAction).toEqual(EventActions.MORE_CLICK);\n    expect(event.componentClick).toEqual({\n      clickElementId: menu.id,\n      clickElementName: menu.text,\n      targetElement: 'level1_drawer',\n      clickElementType: ClickElementTypes.Button\n    });\n  });\n\n  it('should render burger-button with hidden label', async () => {\n    const page = await newSpecPage({\n      components: [BurgerButton],\n      template: () => <phn-burger-button hideLabel alignLabel=\"right\" />\n    });\n\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-burger-button class=\"navbar-theme\">\n        <phn-p-button-pure align-label=\"right\" hidelabel=\"\" icon=\"menu-lines\" size=\"inherit\" theme=\"light\"></phn-p-button-pure>\n      </phn-burger-button>\n    `);\n  });\n\n  it('should align lable to the right', async () => {\n    const page = await newSpecPage({\n      components: [BurgerButton],\n      template: () => <phn-burger-button hideLabel={false} alignLabel=\"right\" />\n    });\n\n    expect(page.root).toMatchInlineSnapshot(`\n      <phn-burger-button class=\"navbar-theme\">\n        <phn-p-button-pure align-label=\"right\" icon=\"menu-lines\" size=\"inherit\" theme=\"light\"></phn-p-button-pure>\n      </phn-burger-button>\n    `);\n  });\n});\n"]}