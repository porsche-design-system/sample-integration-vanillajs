import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { navContentStore } from "../../../state/nav-content-store";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { getHTMLElement } from "../../../utility/helper";
import { BurgerButton } from "../burger-button";
describe('burger-button', () => {
  let page;
  const menu = {
    id: 'mainmenu.menu',
    text: 'Menü',
    description: ''
  };
  beforeEach(async () => {
    page = await newSpecPage({
      components: [BurgerButton],
      template: () => h("phn-burger-button", { hideLabel: false, alignLabel: "left" })
    });
  });
  it('without props it renders with default menu text as empty', async () => {
    expect(page.root).toMatchInlineSnapshot(`
      <phn-burger-button class="navbar-theme">
        <phn-p-button-pure align-label="left" icon="menu-lines" size="inherit" theme="light"></phn-p-button-pure>
      </phn-burger-button>
    `);
  });
  it('with props renders text from props', async () => {
    navContentStore.state.menu = menu;
    await page.waitForChanges();
    expect(page.root).toMatchInlineSnapshot(`
      <phn-burger-button class="navbar-theme">
        <phn-p-button-pure align-label="left" icon="menu-lines" size="inherit" theme="light">
          Menü
        </phn-p-button-pure>
      </phn-burger-button>
    `);
  });
  it('should send MORE_CLICK data event after burger button is clicked', async () => {
    var _a, _b, _c;
    navContentStore.state.menu = menu;
    await page.waitForChanges();
    (_b = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-button-pure'))) === null || _b === void 0 ? void 0 : _b.click();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(1);
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.MORE_CLICK);
    expect(event.componentClick).toEqual({
      clickElementId: menu.id,
      clickElementName: menu.text,
      targetElement: 'level1_drawer',
      clickElementType: ClickElementTypes.Button
    });
  });
  it('should render burger-button with hidden label', async () => {
    const page = await newSpecPage({
      components: [BurgerButton],
      template: () => h("phn-burger-button", { hideLabel: true, alignLabel: "right" })
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-burger-button class="navbar-theme">
        <phn-p-button-pure align-label="right" hidelabel="" icon="menu-lines" size="inherit" theme="light"></phn-p-button-pure>
      </phn-burger-button>
    `);
  });
  it('should align lable to the right', async () => {
    const page = await newSpecPage({
      components: [BurgerButton],
      template: () => h("phn-burger-button", { hideLabel: false, alignLabel: "right" })
    });
    expect(page.root).toMatchInlineSnapshot(`
      <phn-burger-button class="navbar-theme">
        <phn-p-button-pure align-label="right" icon="menu-lines" size="inherit" theme="light"></phn-p-button-pure>
      </phn-burger-button>
    `);
  });
});
//# sourceMappingURL=burger-button.spec.js.map
