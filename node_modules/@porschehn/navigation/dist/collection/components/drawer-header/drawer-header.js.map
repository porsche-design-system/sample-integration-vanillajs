{"version":3,"file":"drawer-header.js","sourceRoot":"","sources":["../../../../src/components/drawer-header/drawer-header.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Fragment, h, Prop, State } from '@stencil/core';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { ClickElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { isDesktop, isString } from '../../utility/helper';\nimport { getHeadlineText, getSubtext } from '../../services/menu-items-service';\nimport { findTopLevelRoutingKey } from '../../entities/routing-key';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\n\n@Component({\n  tag: 'phn-drawer-header',\n  styleUrl: 'drawer-header.scss',\n  scoped: true\n})\nexport class DrawerHeader {\n  @Prop() backButtonText = '';\n  @Prop() backButtonAnalyticsId!: string;\n  @Prop() showBackButton = false;\n  @Prop() activeRoutingKey!: string;\n  @Prop() breakpoint!: number;\n  @Prop() receivedContent = false;\n  @Prop() locale?: string;\n\n  @State() showSkeleton = true;\n\n  @Event() clickDrawerHeaderBack!: EventEmitter<void>;\n  @Event() clickDrawerHeaderClose!: EventEmitter<void>;\n\n  @Element() el!: HTMLPhnDrawerHeaderElement;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.showSkeleton = !this.receivedContent;\n  }\n\n  private sendDataLayerEvent() {\n    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {\n      componentClick: {\n        clickElementId: 'mainmenu.drawer.close',\n        clickElementName: 'X',\n        clickElementType: ClickElementTypes.Button,\n        targetElement: 'level-0'\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          this.activeRoutingKey,\n          ElementTypes.closeButton\n        ),\n        displayElementName: 'X'\n      }\n    });\n  }\n\n  render(): HTMLPhnDrawerHeaderElement {\n    const topLevelRoutingKey = findTopLevelRoutingKey(this.activeRoutingKey);\n    const isMobile = !isDesktop(this.breakpoint);\n    const displayHeadlineContent =\n      topLevelRoutingKey !== undefined\n        ? getHeadlineText(navContentStore.state, this.activeRoutingKey, topLevelRoutingKey)\n        : '';\n\n    const modelType = displayHeadlineContent.includes('mainmenu.') ? displayHeadlineContent.split('mainmenu.')[1] : '';\n    const subtext = getSubtext(topLevelRoutingKey, this.activeRoutingKey, this.locale);\n    return (\n      <div class=\"drawer-header\">\n        {this.showBackButton ? (\n          <Fragment>\n            <phn-back-button\n              class=\"back-button\"\n              onClick={() => {\n                this.clickDrawerHeaderBack.emit();\n              }}\n              analyticsId={this.backButtonAnalyticsId}\n              text={isMobile ? '' : this.backButtonText}\n              activeRoutingKey={this.activeRoutingKey}\n              style={!this.showSkeleton ? {} : { display: 'none' }}\n            />\n            {this.showSkeleton ? <div class=\"button-skeleton\" /> : null}\n          </Fragment>\n        ) : (\n          <div class=\"spacer\" />\n        )}\n\n        {isMobile ? (\n          modelType === '' ? (\n            <Fragment>\n              {this.showSkeleton && this.showBackButton ? <div class=\"skeleton-headline\"></div> : null}\n              <phn-heading\n                text={displayHeadlineContent}\n                style={this.showSkeleton || !isString(displayHeadlineContent) ? { display: 'none' } : {}}\n                class=\"heading-items\"\n                subtext={subtext}\n              />\n            </Fragment>\n          ) : (\n            <Fragment>\n              {this.showSkeleton ? <div class=\"skeleton-headline\"></div> : null}\n              <phn-signature-heading text={modelType} subtext={subtext} />\n            </Fragment>\n          )\n        ) : null}\n\n        <Fragment>\n          <phn-p-button-pure\n            class=\"close-button\"\n            icon=\"close\"\n            hideLabel=\"true\"\n            aria={{ 'aria-label': 'close dialog' }}\n            size=\"small\"\n            style={!this.showSkeleton ? {} : { display: 'none' }}\n            data-test-id=\"close-button\"\n            onClick={() => {\n              this.sendDataLayerEvent();\n              this.clickDrawerHeaderClose.emit();\n            }}\n          >\n            Close Dialog\n          </phn-p-button-pure>\n          {this.showSkeleton ? <div class=\"button-skeleton\" /> : null}\n        </Fragment>\n      </div>\n    );\n  }\n}\n"]}