import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { navContentStore } from "../../../state/nav-content-store";
import * as el from "../../../test/element-helpers";
import { ClickElementTypes, EventActions } from "../../../utility/constants";
import { getHTMLElement } from "../../../utility/helper";
import { DrawerHeader } from "../drawer-header";
import { routerStore } from "../../../state/router-store";
import { mockModelsContent } from "../../../test/test-data";
import { breakpoint } from "@porsche-design-system/components-js/styles";
import { RoutingKeys } from "../../../entities/routing-key";
import { goTo } from "../../../services/routing-manager";
import * as routingManager from "../../../services/routing-manager";
describe('Drawer Header', () => {
  beforeEach(() => {
    navContentStore.state.menu = { id: 'menu', text: 'Menu', description: '' };
  });
  describe('snapshot tests', () => {
    describe('mobile snapshot tests', () => {
      it('hides heading & backButton in level1 menu', async () => {
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { backButtonAnalyticsId: "menu", route: "mainmenu", breakpoint: breakpoint.xs, receivedContent: true }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <div class="spacer"></div>
              <phn-heading class="heading-items" subtext="" text="" style="display: none;"></phn-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small">
                Close Dialog
              </phn-p-button-pure>
            </div>
          </phn-drawer-header>
        `);
      });
      it('shows models heading text in models overview', async () => {
        navContentStore.state.models = mockModelsContent;
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "models", breakpoint: breakpoint.xs, receivedContent: true }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <phn-back-button analyticsid="menu" class="back-button" text=""></phn-back-button>
              <phn-heading class="heading-items" subtext="" text="Models"></phn-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small">
                Close Dialog
              </phn-p-button-pure>
            </div>
          </phn-drawer-header>
        `);
      });
      it('model signature of 911 is shown for the 911 model', async () => {
        navContentStore.state.models = mockModelsContent;
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "models/mainmenu.911", breakpoint: breakpoint.xs, receivedContent: true }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <phn-back-button analyticsid="menu" class="back-button" text=""></phn-back-button>
              <phn-signature-heading subtext="Gasoline" text="911"></phn-signature-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small">
                Close Dialog
              </phn-p-button-pure>
            </div>
          </phn-drawer-header>
        `);
      });
      it('displays skeleton for the close button', async () => {
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { backButtonAnalyticsId: "menu", route: "mainmenu", breakpoint: breakpoint.xs, receivedContent: false }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <div class="spacer"></div>
              <phn-heading class="heading-items" subtext="" text="" style="display: none;"></phn-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small" style="display: none;">
                Close Dialog
              </phn-p-button-pure>
              <div class="button-skeleton"></div>
            </div>
          </phn-drawer-header>
        `);
      });
      it('displays skeleton for models menu drawer header, back & close button', async () => {
        navContentStore.state.models = mockModelsContent;
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "models", breakpoint: breakpoint.xs, receivedContent: false }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <phn-back-button analyticsid="menu" class="back-button" text="" style="display: none;"></phn-back-button>
              <div class="button-skeleton"></div>
              <div class="skeleton-headline"></div>
              <phn-heading class="heading-items" subtext="" text="Models" style="display: none;"></phn-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small" style="display: none;">
                Close Dialog
              </phn-p-button-pure>
              <div class="button-skeleton"></div>
            </div>
          </phn-drawer-header>
        `);
      });
      it('displays skeleton for model-signature, back & close button', async () => {
        navContentStore.state.models = mockModelsContent;
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "models/mainmenu.911", breakpoint: breakpoint.xs, receivedContent: false }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <phn-back-button analyticsid="menu" class="back-button" text="" style="display: none;"></phn-back-button>
              <div class="button-skeleton"></div>
              <div class="skeleton-headline"></div>
              <phn-signature-heading subtext="Gasoline" text="911"></phn-signature-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small" style="display: none;">
                Close Dialog
              </phn-p-button-pure>
              <div class="button-skeleton"></div>
            </div>
          </phn-drawer-header>
        `);
      });
    });
    describe('desktop snapshot tests', () => {
      it('hides back button when showBackButton prop not passed', async () => {
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { backButtonAnalyticsId: "menu", route: "mainmenu", breakpoint: 0, receivedContent: true }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <div class="spacer"></div>
              <phn-heading class="heading-items" subtext="" text="" style="display: none;"></phn-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small">
                Close Dialog
              </phn-p-button-pure>
            </div>
          </phn-drawer-header>
        `);
      });
      it('uses default text for back button when backButtonText prop not passed', async () => {
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "mainmenu", breakpoint: 0, receivedContent: true }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <phn-back-button analyticsid="menu" class="back-button" text=""></phn-back-button>
              <phn-heading class="heading-items" subtext="" text="" style="display: none;"></phn-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small">
                Close Dialog
              </phn-p-button-pure>
            </div>
          </phn-drawer-header>
        `);
      });
      it('uses custom text for back button when backButtonText prop is passed', async () => {
        const page = await newSpecPage({
          components: [DrawerHeader],
          template: () => (h("phn-drawer-header", { showBackButton: true, backButtonText: "Back", backButtonAnalyticsId: "menu", route: "series/mainmenu.718", breakpoint: 0, receivedContent: true }))
        });
        expect(page.root).toMatchInlineSnapshot(`
          <phn-drawer-header>
            <div class="drawer-header">
              <phn-back-button analyticsid="menu" class="back-button" text=""></phn-back-button>
              <phn-heading class="heading-items" subtext="" text="" style="display: none;"></phn-heading>
              <phn-p-button-pure class="close-button" data-test-id="close-button" hidelabel="true" icon="close" size="small">
                Close Dialog
              </phn-p-button-pure>
            </div>
          </phn-drawer-header>
        `);
      });
    });
  });
  describe('button is clicked', () => {
    it('call back function when back button is clicked', async () => {
      var _a;
      goTo(RoutingKeys.MODELS, 'series/mainmenu.718');
      const page = await newSpecPage({
        components: [DrawerHeader],
        template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "series/mainmenu.718", breakpoint: 0 }))
      });
      const routingManagerBackSpy = jest.spyOn(routingManager, 'back');
      el.mouseClick(getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-back-button')));
      expect(routingManagerBackSpy).toHaveBeenCalledTimes(1);
    });
    it('emits clickDrawerHeaderClose event when close button is clicked', async () => {
      var _a;
      const page = await newSpecPage({
        components: [DrawerHeader],
        template: () => h("phn-drawer-header", { backButtonAnalyticsId: "menu", route: "series/mainmenu.718", breakpoint: 0 })
      });
      page.rootInstance.clickDrawerHeaderClose.emit = jest.fn();
      el.mouseClick(getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.close-button')));
      expect(page.rootInstance.clickDrawerHeaderClose.emit).toHaveBeenCalled();
    });
    it('sends MENU_CLOSE_CLICK data event after close button is clicked', async () => {
      var _a, _b;
      const page = await newSpecPage({
        components: [DrawerHeader],
        template: () => h("phn-drawer-header", { backButtonAnalyticsId: "menu", route: "series/mainmenu.718", breakpoint: 0 })
      });
      routerStore.state.routingKeyHistory = ['mainmenu', 'series', 'series/mainmenu.718'];
      routerStore.state.routingKeyPointer = 2;
      el.mouseClick(getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.close-button')));
      const event = globalDataLayerService.gdl.DataLayerStore[0];
      expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.MENU_CLOSE_CLICK);
      expect(event.componentClick).toEqual({
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'X',
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level-0'
      });
      expect(event.componentDisplay).toEqual({
        displayElementId: 'level3-mainmenu.718',
        displayElementType: 'level3_close-button',
        displayElementName: 'X'
      });
    });
  });
  describe('mobile headings', () => {
    it('displays drawer header without heading', async () => {
      var _a, _b;
      const page = await newSpecPage({
        components: [DrawerHeader],
        template: () => h("phn-drawer-header", { backButtonAnalyticsId: "menu", route: "mainmenu", breakpoint: breakpoint.xs })
      });
      expect((_b = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-heading')) === null || _b === void 0 ? void 0 : _b.getAttribute('text')).toBe('');
    });
    it('displays models drawer header with heading', async () => {
      var _a, _b, _c;
      navContentStore.state.models = mockModelsContent;
      const page = await newSpecPage({
        components: [DrawerHeader],
        template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "models", breakpoint: breakpoint.xs }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-heading')).toBeTruthy();
      expect((_c = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-heading')) === null || _c === void 0 ? void 0 : _c.getAttribute('text')).toEqual('Models');
    });
    it('displays signature-heading for 911', async () => {
      var _a, _b, _c;
      navContentStore.state.models = mockModelsContent;
      const page = await newSpecPage({
        components: [DrawerHeader],
        template: () => (h("phn-drawer-header", { showBackButton: true, backButtonAnalyticsId: "menu", route: "models/mainmenu.911", breakpoint: breakpoint.xs }))
      });
      expect((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-heading')).toBeFalsy();
      expect((_c = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-signature-heading')) === null || _c === void 0 ? void 0 : _c.getAttribute('text')).toEqual('911');
    });
  });
});
//# sourceMappingURL=drawer-header.spec.js.map
