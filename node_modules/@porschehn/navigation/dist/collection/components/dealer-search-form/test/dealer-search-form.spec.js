import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { dealerSearchResultsStore } from "../../../state/dealer-search-results-store";
import { navContentStore } from "../../../state/nav-content-store";
import { mockDealerContent, mockPPNDealerOneSearchResults, mockPPNDealerSearchResultsWithLocalizedAddress, mockPredictions } from "../../../test/test-data";
import { getHTMLElement, getHTMLInputElement } from "../../../utility/helper";
import { DealerSearchForm } from "../dealer-search-form";
import { DealerSearchFormGeolocation } from "../../dealer-search-form-geolocation/dealer-search-form-geolocation";
import { DealerSearchResults } from "../../dealer-search-results/dealer-search-results";
import { DealerSearchByNumberOfDealers } from "../../dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers";
import { DealerSearchFormDropdown } from "../../dealer-search-form-dropdown/dealer-search-form-dropdown";
jest.mock('../../../services/maps-service.ts');
describe('Dealer Search Form', () => {
  const defaultProps = {
    dealer: mockDealerContent,
    locale: 'xx-XX',
    breakpoint: 0
  };
  beforeEach(async () => {
    dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
    dealerSearchResultsStore.state.ppnDealers = mockPPNDealerSearchResultsWithLocalizedAddress.reduce((ppnDealers, dealerSearchResult) => (Object.assign(Object.assign({}, ppnDealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), {});
    navContentStore.state.dealer.numberOfDealers = 6;
  });
  const getPage = async (props = defaultProps) => {
    return await newSpecPage({
      components: [
        DealerSearchForm,
        DealerSearchResults,
        DealerSearchFormGeolocation,
        DealerSearchByNumberOfDealers,
        DealerSearchFormDropdown
      ],
      template: () => h("phn-dealer-search-form", Object.assign({}, props))
    });
  };
  describe('form strategy', () => {
    it('should render geolocation strategy', async () => {
      var _a;
      const page = await getPage();
      const element = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-dealer-search-form-geolocation'));
      expect(element).not.toBeUndefined();
    });
    it('should render dropdown strategy', async () => {
      var _a;
      const page = await getPage(Object.assign(Object.assign({}, defaultProps), { locale: 'zh-CN' }));
      const element = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-dealer-search-form-dropdown'));
      expect(element).not.toBeUndefined();
    });
    it('should render by number of dealers strategy', async () => {
      var _a;
      navContentStore.set('dealer', Object.assign(Object.assign({}, navContentStore.state.dealer), { numberOfDealers: 5 }));
      const page = await getPage();
      const element = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-dealer-search-by-number-of-dealers'));
      expect(element).not.toBeUndefined();
    });
  });
  describe('snapshot testing', () => {
    it('should render dealer search without heading on desktop', async () => {
      dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = mockPPNDealerSearchResultsWithLocalizedAddress.reduce((ppnDealers, dealerSearchResult) => (Object.assign(Object.assign({}, ppnDealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), {});
      navContentStore.set('dealer', mockDealerContent);
      const page = await getPage();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-dealer-search-form>
          <phn-dealer-search-form-geolocation class="skeleton">
            <div class="input-container">
              <div class="skeleton-autocomplete-search-field"></div>
              <phn-autocomplete-search-field errormessage="" initialvalue="" placeholder="Location" style="display: none;"></phn-autocomplete-search-field>
            </div>
          </phn-dealer-search-form-geolocation>
          <phn-dealer-search-results>
            <phn-menu-item-card analyticsid="6a6d8e8c-5b04-4a4b-a119-66021b528788" class="animated dealer-card" tabindex="0" text="localized Porsche Zentrum Stuttgart">
              <div class="phn-align-center phn-flex-row phn-justify-between">
                <phn-p-text color="primary" size="small">
                  localized Porscheplatz 9,
                  <span class="city">
                    70435 localized Stuttgart
                  </span>
                </phn-p-text>
                <phn-p-tag color="notification-info-soft">
                  3km
                </phn-p-tag>
              </div>
            </phn-menu-item-card>
            <phn-menu-item-card analyticsid="14f3b8a2-b78d-4f96-b7b5-123124" class="animated dealer-card" tabindex="0" text="localized Porsche Zentrum Stuttgart-Flughafen">
              <div class="phn-align-center phn-flex-row phn-justify-between">
                <phn-p-text color="primary" size="small">
                  localized Porscheplatz 9,
                  <span class="city">
                    70794 localized Stuttgart
                  </span>
                </phn-p-text>
                <phn-p-tag color="notification-info-soft">
                  2km
                </phn-p-tag>
              </div>
            </phn-menu-item-card>
            <phn-menu-item-card analyticsid="14f3b8a2-b78d-4f96-b7b5-7b1b4723323542" class="animated dealer-card" tabindex="0" text="localized Porsche Zentrum Böblingen">
              <div class="phn-align-center phn-flex-row phn-justify-between">
                <phn-p-text color="primary" size="small">
                  localized Porscheplatz 9,
                  <span class="city">
                    71034 localized Stuttgart
                  </span>
                </phn-p-text>
                <phn-p-tag color="notification-info-soft">
                  4km
                </phn-p-tag>
              </div>
            </phn-menu-item-card>
            <phn-menu-item-card analyticsid="14f3b8a2-b78d-4f96-b7b5-7b1b453b23542" class="animated dealer-card" tabindex="0" text="localized Porsche Zentrum Reutlingen">
              <div class="phn-align-center phn-flex-row phn-justify-between">
                <phn-p-text color="primary" size="small">
                  localized Porscheplatz 9,
                  <span class="city">
                    72770 localized Stuttgart
                  </span>
                </phn-p-text>
                <phn-p-tag color="notification-info-soft">
                  2km
                </phn-p-tag>
              </div>
            </phn-menu-item-card>
            <phn-menu-item-card analyticsid="14f3b8a2-b78d-4f96-b7b5-7b11b23542" class="animated dealer-card" tabindex="0" text="localized Porsche Zentrum Göppingen">
              <div class="phn-align-center phn-flex-row phn-justify-between">
                <phn-p-text color="primary" size="small">
                  localized Porscheplatz 9,
                  <span class="city">
                    73037 localized Stuttgart
                  </span>
                </phn-p-text>
                <phn-p-tag color="notification-info-soft">
                  1km
                </phn-p-tag>
              </div>
            </phn-menu-item-card>
            <phn-menu-item-card analyticsid="36e8fba0-e931-11dc-ada3-c822588bbdee" class="animated dealer-card" tabindex="0" text="localized Porsche Zentrum Stuttgart">
              <div class="phn-align-center phn-flex-row phn-justify-between">
                <phn-p-text color="primary" size="small">
                  localized Porscheplatz 9,
                  <span class="city">
                    70435 localized Stuttgart
                  </span>
                </phn-p-text>
              </div>
            </phn-menu-item-card>
            <a aria-label="" class="animated" href="http://www.porsche.com/all-dealers-map">
              <phn-p-button variant="tertiary">
                All Dealers Map
              </phn-p-button>
            </a>
          </phn-dealer-search-results>
        </phn-dealer-search-form>
      `);
    });
    it('should render dealer search form with 1 dealer available', async () => {
      dealerSearchResultsStore.state.results = mockPPNDealerOneSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = mockPPNDealerOneSearchResults.reduce((ppnDealers, dealerSearchResult) => (Object.assign(Object.assign({}, ppnDealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), {});
      navContentStore.set('dealer', mockDealerContent);
      const page = await getPage();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-dealer-search-form>
          <phn-dealer-search-form-geolocation class="skeleton">
            <div class="input-container">
              <div class="skeleton-autocomplete-search-field"></div>
              <phn-autocomplete-search-field errormessage="" initialvalue="" placeholder="Location" style="display: none;"></phn-autocomplete-search-field>
            </div>
          </phn-dealer-search-form-geolocation>
          <phn-dealer-search-results>
            <phn-dealer-details-drawer breakpoint="0" dealerid="6a6d8e8c-5b04-4a4b-a119-66021b528788" locale="xx-XX"></phn-dealer-details-drawer>
          </phn-dealer-search-results>
        </phn-dealer-search-form>
      `);
    });
    it('should render dealer search form without results if dealers result is empty', async () => {
      navContentStore.set('dealer', mockDealerContent);
      dealerSearchResultsStore.state.results = null;
      const page = await getPage();
      expect(page.root).toMatchInlineSnapshot(`
        <phn-dealer-search-form>
          <phn-dealer-search-form-geolocation class="skeleton">
            <div class="input-container">
              <div class="skeleton-autocomplete-search-field"></div>
              <phn-autocomplete-search-field errormessage="" initialvalue="" placeholder="Location" style="display: none;"></phn-autocomplete-search-field>
            </div>
            <div class="or-container">
              <div class="skeleton-or-text"></div>
              <phn-p-text color="inherit" data-test-id="dealer-search-or-label" size="inherit" tag="div" style="display: none;">
                Or
              </phn-p-text>
              <div class="skeleton-geolocation-button"></div>
              <phn-p-button class="geolocation" icon="locate" variant="tertiary" style="display: none;">
                Current location
              </phn-p-button>
            </div>
          </phn-dealer-search-form-geolocation>
          <phn-dealer-search-results></phn-dealer-search-results>
        </phn-dealer-search-form>
      `);
    });
  });
  describe('Autocompletion', () => {
    it('should show opacity overlay on result cards, if autocomplete predictions and results are shown', async () => {
      var _a, _b, _c, _d, _e;
      const page = await getPage();
      const inputField = getHTMLInputElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-autocomplete-search-field'));
      inputField === null || inputField === void 0 ? void 0 : inputField.dispatchEvent(new CustomEvent('submitSearch', { detail: mockPredictions[0] }));
      await page.waitForChanges();
      expect((_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('.dealer-card')).not.toBeNull();
      expect((_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('.dealer-card-overlay')).toBeNull();
      (_d = page.root) === null || _d === void 0 ? void 0 : _d.dispatchEvent(new CustomEvent('predictionsToggle', { detail: true }));
      await page.waitForChanges();
      expect((_e = page.root) === null || _e === void 0 ? void 0 : _e.querySelector('.dealer-card-overlay')).not.toBeNull();
    });
  });
});
//# sourceMappingURL=dealer-search-form.spec.js.map
