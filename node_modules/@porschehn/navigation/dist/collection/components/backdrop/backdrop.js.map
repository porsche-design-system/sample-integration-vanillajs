{"version":3,"file":"backdrop.js","sourceRoot":"","sources":["../../../../src/components/backdrop/backdrop.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACzF,OAAO,gBAAgB,MAAM,4CAA4C,CAAC;AAC1E,OAAO,sBAAsB,MAAM,oDAAoD,CAAC;AACxF,OAAO,aAAa,MAAM,+BAA+B,CAAC;AAC1D,OAAO,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAC7G,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,gCAAgC,CAAC;AAOxE,MAAM,OAAO,QAAQ;EAOnB,WAAW;IACT,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAC9B,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;IACnC,KAAK,EAAE,CAAC;EACV,CAAC;EAEO,sBAAsB;IAC5B,gBAAgB,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IACjE,sBAAsB,CAAC,kBAAkB,CAAC,YAAY,CAAC,gBAAgB,EAAE;MACvE,cAAc,EAAE;QACd,cAAc,EAAE,uBAAuB;QACvC,gBAAgB,EAAE,UAAU;QAC5B,gBAAgB,EAAE,iBAAiB,CAAC,MAAM;QAC1C,aAAa,EAAE,SAAS;OACzB;MACD,gBAAgB,EAAE;QAChB,kBAAkB,EAAE,gBAAgB,CAAC,2BAA2B,CAAC,eAAe,EAAE,EAAE,YAAY,CAAC,QAAQ,CAAC;QAC1G,gBAAgB,EAAE,gBAAgB,CAAC,yBAAyB,EAAE;QAC9D,kBAAkB,EAAE,eAAe;OACpC;KACF,CAAC,CAAC;EACL,CAAC;EAED,iBAAiB;IACf,IAAI,aAAa,CAAC,YAAY,EAAE,EAAE;MAChC,aAAa,CAAC,UAAU,EAAE,CAAC;KAC5B;EACH,CAAC;EAED,oBAAoB;IAClB,IAAI,aAAa,CAAC,YAAY,EAAE,EAAE;MAChC,aAAa,CAAC,YAAY,EAAE,CAAC;KAC9B;EACH,CAAC;EAED,MAAM;IACJ,OAAO,EAAC,IAAI,OAAG,CAAC;EAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Host, Listen } from '@stencil/core';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport windowService from '../../services/window-service';\nimport { ClickElementTypes, DisplayElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport { getCurrentRoute, reset } from '../../services/routing-manager';\n\n@Component({\n  tag: 'phn-backdrop',\n  styleUrl: 'backdrop.scss',\n  scoped: true\n})\nexport class Backdrop {\n  @Element() el!: HTMLPhnBackdropElement;\n\n  @Event() clickDrawerHeaderClose!: EventEmitter<void>;\n  @Event() backdropClosed!: EventEmitter<void>;\n\n  @Listen('click', { passive: true })\n  handleClick(): void {\n    this.sendDataAnalyticsEvent();\n    this.clickDrawerHeaderClose.emit();\n    reset();\n  }\n\n  private sendDataAnalyticsEvent() {\n    analyticsManager.setDrawerType(DisplayElementTypes.DoubleDrawer);\n    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {\n      componentClick: {\n        clickElementId: 'mainmenu.drawer.close',\n        clickElementName: 'backdrop',\n        clickElementType: ClickElementTypes.Button,\n        targetElement: 'level-0'\n      },\n      componentDisplay: {\n        displayElementType: analyticsManager.calculateDisplayElementType(getCurrentRoute(), ElementTypes.backdrop),\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementName: 'Double Drawer'\n      }\n    });\n  }\n\n  componentWillLoad(): void {\n    if (windowService.hasScrollbar()) {\n      windowService.lockScroll();\n    }\n  }\n\n  disconnectedCallback(): void {\n    if (windowService.hasScrollbar()) {\n      windowService.unlockScroll();\n    }\n  }\n\n  render(): HTMLPhnBackdropElement {\n    return <Host />;\n  }\n}\n"]}