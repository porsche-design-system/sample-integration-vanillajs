import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { Backdrop } from "../backdrop";
import windowService from "../../../services/window-service";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { EventActions } from "../../../utility/constants";
import { routerStore } from "../../../state/router-store";
describe('backdrop', () => {
  it('should render with darken class by default', async () => {
    const page = await newSpecPage({
      components: [Backdrop],
      template: () => h("phn-backdrop", { activeRoutingKey: "mainmenu" })
    });
    expect(page.root).toMatchInlineSnapshot(`<phn-backdrop></phn-backdrop>`);
  });
  it('should emit clickDrawerHeaderClose event on click', async () => {
    var _a;
    const page = await newSpecPage({
      components: [Backdrop],
      template: () => h("phn-backdrop", { activeRoutingKey: "mainmenu" })
    });
    const eventSpy = jest.spyOn(page.rootInstance.clickDrawerHeaderClose, 'emit');
    (_a = page.root) === null || _a === void 0 ? void 0 : _a.click();
    expect(eventSpy).toHaveBeenCalledTimes(1);
  });
  it('should unlock scrolling when disconnected', async () => {
    const page = await newSpecPage({
      components: [Backdrop],
      template: () => h("phn-backdrop", { activeRoutingKey: "mainmenu" })
    });
    jest.spyOn(windowService, 'hasScrollbar').mockReturnValue(true);
    const unlockScrollSpy = jest.spyOn(windowService, 'unlockScroll');
    page.rootInstance.disconnectedCallback();
    expect(unlockScrollSpy).toHaveBeenCalled();
  });
  it('should send data event MENU_CLOSE_CLICK after backdrop is clicked', async () => {
    var _a, _b;
    routerStore.state.routingKeyHistory = ['mainmenu', 'models'];
    routerStore.state.routingKeyPointer = 1;
    const page = await newSpecPage({
      components: [Backdrop],
      template: () => h("phn-backdrop", { activeRoutingKey: "models" })
    });
    (_a = page.root) === null || _a === void 0 ? void 0 : _a.click();
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_b = event.context) === null || _b === void 0 ? void 0 : _b.eventAction).toEqual(EventActions.MENU_CLOSE_CLICK);
    expect(event.componentDisplay).toEqual({
      displayElementType: 'level2_backdrop',
      displayElementId: 'level1-mainmenu_level2-models',
      displayElementName: 'Double Drawer'
    });
  });
});
//# sourceMappingURL=backdrop.spec.js.map
