{"version":3,"file":"dealer-search-form-dropdown.spec.js","sourceRoot":"","sources":["../../../../../src/components/dealer-search-form-dropdown/test/dealer-search-form-dropdown.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage, SpecPage } from '@stencil/core/testing';\nimport { h } from '@stencil/core';\nimport { DealerSearchFormDropdown } from '../dealer-search-form-dropdown';\nimport * as dealerService from '../../../services/dealer-service';\nimport {\n  mockDealerContent,\n  mockDealerSearchRegionResponse,\n  mockPPNDealerSearchResultsWithLocalizedAddress,\n  mockPredictions\n} from '../../../test/test-data';\nimport { getHTMLElement } from '../../../utility/helper';\nimport { NaviError, NaviErrorTypes } from '../../../utility/navi-error';\nimport { dealerSearchResultsStore } from '../../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../../services/analytics/global-data-layer-service';\nimport { EventActions } from '../../../utility/constants';\nimport { navContentStore } from '../../../state/nav-content-store';\nimport SpyInstance = jest.SpyInstance;\nimport { breakpoint } from '@porsche-design-system/components-js/styles';\n\ndescribe('dealer-search-form-dropdown', () => {\n  const getPage = async () => {\n    return newSpecPage({\n      components: [DealerSearchFormDropdown],\n      template: () => <phn-dealer-search-form-dropdown locale=\"zh-CN\" breakpoint={breakpoint.s} />\n    });\n  };\n  beforeEach(() => {\n    navContentStore.state.dealer = mockDealerContent;\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders the dropdown for the provinces and cities', async () => {\n    //given\n    const page = await getPage();\n    const dropDowns = page.root?.querySelectorAll('phn-p-select-wrapper');\n    expect(dropDowns).toHaveLength(2);\n    expect(dropDowns && dropDowns[0]).toEqualAttribute('label', navContentStore.state.dealer.search.dropdown.province);\n    expect(dropDowns && dropDowns[1]).toEqualAttribute('label', navContentStore.state.dealer.search.dropdown.city);\n  });\n\n  it('fetches the dealers by region from service', async () => {\n    jest.spyOn(dealerService, 'getPPNDealersByRegion');\n    await getPage();\n    expect(dealerService.getPPNDealersByRegion).toHaveBeenCalled();\n  });\n\n  it('populates the province list in the province dropdown', async () => {\n    jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);\n    const page = await getPage();\n    navContentStore.state.dealer = mockDealerContent;\n    // const provinceDropDown = page.root?.querySelector('phn-p-select-wrapper>.select>.option');\n    const provinceDropDown = page.root?.querySelectorAll('phn-p-select-wrapper[label=Province] > select > option');\n\n    expect(provinceDropDown && provinceDropDown[1].textContent).toEqual('安徽');\n    expect(provinceDropDown && provinceDropDown[2].textContent).toEqual('Beijing');\n  });\n\n  it('populates the city list in the city dropdown based on the selected province', async () => {\n    jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);\n    const page = await getPage();\n\n    const provinceDropDown = getHTMLElement(\n      page.root?.querySelector('phn-p-select-wrapper[label=Province] > select')\n    ) as HTMLSelectElement;\n\n    provinceDropDown.value = '安徽';\n\n    provinceDropDown?.dispatchEvent(new Event('change'));\n    await page.waitForChanges();\n\n    const cityDropDown = page.root?.querySelectorAll('phn-p-select-wrapper[label=City] > select > option');\n\n    expect(cityDropDown && cityDropDown[1]?.textContent).toEqual('合肥');\n    expect(cityDropDown && cityDropDown[2]?.textContent).toEqual('Wuhu');\n  });\n\n  it('should set dealerSearchResultsStore values correctly when choosing a city', async () => {\n    const provinceName = '安徽';\n    const cityName = 'Wuhu';\n\n    jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);\n    const page = await getPage();\n\n    const provinceDropDown = getHTMLElement(\n      page.root?.querySelector('phn-p-select-wrapper[label=Province] > select')\n    ) as HTMLSelectElement;\n\n    provinceDropDown.value = provinceName;\n\n    provinceDropDown?.dispatchEvent(new Event('change'));\n    await page.waitForChanges();\n\n    const cityDropDown = page.root?.querySelector('phn-p-select-wrapper[label=City] > select') as HTMLSelectElement;\n\n    cityDropDown.value = cityName;\n    cityDropDown?.dispatchEvent(new Event('change'));\n\n    await page.waitForChanges();\n\n    dealerSearchResultsStore.state.ppnDealers =\n      mockDealerSearchRegionResponse.regions\n        .find(({ regionNameLocalized }) => regionNameLocalized === provinceName)\n        ?.cities.find(({ cityName }) => cityName === cityName)?.dealers || {};\n    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);\n    dealerSearchResultsStore.state.searchTerm = `${provinceName}, ${cityName}`;\n  });\n\n  it('should display the selected province and city in search text based on viewport', async () => {\n    const provinceName = '安徽';\n    const city = 'Wuhu';\n\n    //   jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);\n\n    dealerSearchResultsStore.state.ppnDealers =\n      mockDealerSearchRegionResponse.regions\n        .find(({ regionNameLocalized }) => regionNameLocalized === provinceName)\n        ?.cities.find(({ cityName }) => cityName === city)?.dealers || {};\n    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);\n    dealerSearchResultsStore.state.searchTerm = `${provinceName}, ${city}`;\n    const page = await getPage();\n    expect(page.root?.querySelector('phn-p-text')?.textContent).toEqual('安徽, Wuhu');\n  });\n\n  it('should show spinner if the page is loading', async () => {\n    const page = await getPage();\n\n    page.rootInstance.isLoading = true;\n\n    await page.waitForChanges();\n\n    const spinner = page.root?.querySelector('phn-p-spinner');\n    expect(spinner).toBeTruthy();\n  });\n\n  it('should show error message if there is some', async () => {\n    jest\n      .spyOn(dealerService, 'getPPNDealersByRegion')\n      .mockRejectedValue(new NaviError('some error', NaviErrorTypes.GEOLOCATION_DENIED));\n\n    const page = await getPage();\n\n    page.rootInstance.errorMessage = 'Some Error';\n    await page.waitForChanges();\n\n    const errorMessageElement = page.root?.querySelector('.error-message');\n    expect(errorMessageElement).not.toBeNull();\n  });\n\n  it('should not show error message if there is none', async () => {\n    const page = await getPage();\n\n    await page.waitForChanges();\n\n    const errorMessageElement = page.root?.querySelector('.error-message');\n    expect(errorMessageElement).toBeNull();\n  });\n\n  it(\"should prevent form's default action\", async () => {\n    dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(\n      ({ ppnDealer: dealer }) => dealer.id\n    );\n    const page = await getPage();\n\n    await page.waitForChanges();\n\n    const formElement = page.root?.querySelector('form');\n    expect(formElement).not.toBeNull();\n\n    const submitEvent = new Event('submit');\n    const preventDefaultSpy = jest.spyOn(submitEvent, 'preventDefault');\n\n    formElement?.dispatchEvent(submitEvent);\n    expect(preventDefaultSpy).toBeCalledTimes(1);\n  });\n\n  describe('When there is results', () => {\n    const storeResults = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);\n\n    let page: SpecPage;\n    let clearSearchEventSpy: SpyInstance;\n\n    beforeEach(async () => {\n      // dealerSearchResultsStore.state.results = storeResults;\n\n      page = await getPage();\n      clearSearchEventSpy = jest.spyOn(page.rootInstance.clearSearchEvent, 'emit');\n    });\n\n    const assertActionsAfterReset = () => {\n      expect(page.rootInstance.errorMessage).toBe('');\n      expect(page.rootInstance.isLoading).toBeFalsy();\n      expect(page.rootInstance.selectedProvince).toEqual('');\n      expect(page.rootInstance.selectedCity).toEqual('');\n      //expect(clearSearchEventSpy).toHaveBeenCalled();\n      expect(dealerSearchResultsStore.state.results).toEqual(null);\n    };\n\n    it('Should reset dropdown if there is results and user clicks on the input field', async () => {\n      const inputComponent = getHTMLElement(page.root?.querySelector('phn-p-text-field-wrapper > input'));\n      inputComponent?.click();\n\n      await page.waitForChanges();\n\n      assertActionsAfterReset();\n    });\n\n    it('Should reset dropdown if there is results and user presses a key on the input field', async () => {\n      const inputComponent = getHTMLElement(page.root?.querySelector('phn-p-text-field-wrapper > input'));\n      const keyboardEvent = new KeyboardEvent('keydown', {\n        key: 'downarrow'\n      });\n      inputComponent?.dispatchEvent(keyboardEvent);\n\n      await page.waitForChanges();\n\n      assertActionsAfterReset();\n    });\n\n    it('Should reset dropdown if there is results and user type on the input field', async () => {\n      const inputComponent = getHTMLElement(page.root?.querySelector('phn-p-text-field-wrapper > input'));\n      const inputEvent = new Event('input');\n      inputComponent?.dispatchEvent(inputEvent);\n\n      await page.waitForChanges();\n\n      assertActionsAfterReset();\n    });\n\n    it('Should not reset dropdown if there is results and user type Tab on the input field', async () => {\n      dealerSearchResultsStore.state.results = storeResults;\n      const inputComponent = getHTMLElement(page.root?.querySelector('phn-p-text-field-wrapper > input'));\n      const keyEvent = new KeyboardEvent('keydown', {\n        key: 'Tab'\n      });\n      inputComponent?.dispatchEvent(keyEvent);\n\n      await page.waitForChanges();\n\n      expect(page.rootInstance.errorMessage).toEqual('');\n      expect(page.rootInstance.isLoading).toBeFalsy();\n      expect(page.rootInstance.selectedProvince).toEqual('');\n      expect(page.rootInstance.selectedCity).toEqual('');\n      expect(clearSearchEventSpy).not.toHaveBeenCalled();\n      expect(dealerSearchResultsStore.state.results).toEqual(storeResults);\n    });\n  });\n\n  it('emits DEALER_SEARCH_SCREEN_LOAD when dropdown page is loaded and results', async () => {\n    const provinceName = '安徽';\n    const cityName = 'Wuhu';\n    dealerSearchResultsStore.state.ppnDealers =\n      mockDealerSearchRegionResponse.regions\n        .find(({ regionNameLocalized }) => regionNameLocalized === provinceName)\n        ?.cities.find(({ cityName }) => cityName === cityName)?.dealers || {};\n    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);\n    dealerSearchResultsStore.state.searchTerm = `${provinceName}, ${cityName}`;\n\n    const { results } = dealerSearchResultsStore.state;\n\n    await getPage();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[0];\n\n    expect(event.context?.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);\n    expect(event.componentSearch).toEqual({\n      numberOfResults: results?.length,\n      searchTerm: '安徽, Wuhu'\n    });\n  });\n\n  it('emits DEALER_SEARCH_SCREEN_LOAD when dropdown page is loaded and there are no results', async () => {\n    dealerSearchResultsStore.state.searchTerm = mockPredictions[0].text;\n    dealerSearchResultsStore.state.results = null;\n\n    await getPage();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[0];\n\n    expect(event.context?.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);\n    expect(event.componentSearch).toEqual({\n      numberOfResults: 0,\n      searchTerm: mockPredictions[0].text\n    });\n  });\n\n  it('emits DEALER_RESULTS_SCREEN_LOAD when dropdown page is loaded and numberOfResults is 0 if there are no results', async () => {\n    dealerSearchResultsStore.state.searchTerm = mockPredictions[0].text;\n    dealerSearchResultsStore.state.results = null;\n\n    await getPage();\n\n    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);\n\n    const event = globalDataLayerService.gdl.DataLayerStore[1];\n\n    expect(event.context?.eventAction).toEqual(EventActions.DEALER_RESULTS_SCREEN_LOAD);\n    expect(event.componentSearch).toEqual({\n      numberOfResults: 0,\n      searchTerm: mockPredictions[0].text\n    });\n  });\n});\n"]}