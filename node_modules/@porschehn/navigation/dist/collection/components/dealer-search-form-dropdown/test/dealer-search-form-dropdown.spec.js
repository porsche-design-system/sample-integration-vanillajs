import { newSpecPage } from "@stencil/core/testing";
import { h } from "@stencil/core";
import { DealerSearchFormDropdown } from "../dealer-search-form-dropdown";
import * as dealerService from "../../../services/dealer-service";
import { mockDealerContent, mockDealerSearchRegionResponse, mockPPNDealerSearchResultsWithLocalizedAddress, mockPredictions } from "../../../test/test-data";
import { getHTMLElement } from "../../../utility/helper";
import { NaviError, NaviErrorTypes } from "../../../utility/navi-error";
import { dealerSearchResultsStore } from "../../../state/dealer-search-results-store";
import globalDataLayerService from "../../../services/analytics/global-data-layer-service";
import { EventActions } from "../../../utility/constants";
import { navContentStore } from "../../../state/nav-content-store";
import { breakpoint } from "@porsche-design-system/components-js/styles";
describe('dealer-search-form-dropdown', () => {
  const getPage = async () => {
    return newSpecPage({
      components: [DealerSearchFormDropdown],
      template: () => h("phn-dealer-search-form-dropdown", { locale: "zh-CN", breakpoint: breakpoint.s })
    });
  };
  beforeEach(() => {
    navContentStore.state.dealer = mockDealerContent;
  });
  afterEach(() => {
    jest.clearAllMocks();
  });
  it('renders the dropdown for the provinces and cities', async () => {
    var _a;
    //given
    const page = await getPage();
    const dropDowns = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-p-select-wrapper');
    expect(dropDowns).toHaveLength(2);
    expect(dropDowns && dropDowns[0]).toEqualAttribute('label', navContentStore.state.dealer.search.dropdown.province);
    expect(dropDowns && dropDowns[1]).toEqualAttribute('label', navContentStore.state.dealer.search.dropdown.city);
  });
  it('fetches the dealers by region from service', async () => {
    jest.spyOn(dealerService, 'getPPNDealersByRegion');
    await getPage();
    expect(dealerService.getPPNDealersByRegion).toHaveBeenCalled();
  });
  it('populates the province list in the province dropdown', async () => {
    var _a;
    jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);
    const page = await getPage();
    navContentStore.state.dealer = mockDealerContent;
    // const provinceDropDown = page.root?.querySelector('phn-p-select-wrapper>.select>.option');
    const provinceDropDown = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelectorAll('phn-p-select-wrapper[label=Province] > select > option');
    expect(provinceDropDown && provinceDropDown[1].textContent).toEqual('安徽');
    expect(provinceDropDown && provinceDropDown[2].textContent).toEqual('Beijing');
  });
  it('populates the city list in the city dropdown based on the selected province', async () => {
    var _a, _b, _c, _d;
    jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);
    const page = await getPage();
    const provinceDropDown = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-select-wrapper[label=Province] > select'));
    provinceDropDown.value = '安徽';
    provinceDropDown === null || provinceDropDown === void 0 ? void 0 : provinceDropDown.dispatchEvent(new Event('change'));
    await page.waitForChanges();
    const cityDropDown = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelectorAll('phn-p-select-wrapper[label=City] > select > option');
    expect(cityDropDown && ((_c = cityDropDown[1]) === null || _c === void 0 ? void 0 : _c.textContent)).toEqual('合肥');
    expect(cityDropDown && ((_d = cityDropDown[2]) === null || _d === void 0 ? void 0 : _d.textContent)).toEqual('Wuhu');
  });
  it('should set dealerSearchResultsStore values correctly when choosing a city', async () => {
    var _a, _b, _c, _d;
    const provinceName = '安徽';
    const cityName = 'Wuhu';
    jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);
    const page = await getPage();
    const provinceDropDown = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-select-wrapper[label=Province] > select'));
    provinceDropDown.value = provinceName;
    provinceDropDown === null || provinceDropDown === void 0 ? void 0 : provinceDropDown.dispatchEvent(new Event('change'));
    await page.waitForChanges();
    const cityDropDown = (_b = page.root) === null || _b === void 0 ? void 0 : _b.querySelector('phn-p-select-wrapper[label=City] > select');
    cityDropDown.value = cityName;
    cityDropDown === null || cityDropDown === void 0 ? void 0 : cityDropDown.dispatchEvent(new Event('change'));
    await page.waitForChanges();
    dealerSearchResultsStore.state.ppnDealers =
      ((_d = (_c = mockDealerSearchRegionResponse.regions
        .find(({ regionNameLocalized }) => regionNameLocalized === provinceName)) === null || _c === void 0 ? void 0 : _c.cities.find(({ cityName }) => cityName === cityName)) === null || _d === void 0 ? void 0 : _d.dealers) || {};
    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);
    dealerSearchResultsStore.state.searchTerm = `${provinceName}, ${cityName}`;
  });
  it('should display the selected province and city in search text based on viewport', async () => {
    var _a, _b, _c, _d;
    const provinceName = '安徽';
    const city = 'Wuhu';
    //   jest.spyOn(dealerService, 'getPPNDealersByRegion').mockResolvedValue(mockDealerSearchRegionResponse);
    dealerSearchResultsStore.state.ppnDealers =
      ((_b = (_a = mockDealerSearchRegionResponse.regions
        .find(({ regionNameLocalized }) => regionNameLocalized === provinceName)) === null || _a === void 0 ? void 0 : _a.cities.find(({ cityName }) => cityName === city)) === null || _b === void 0 ? void 0 : _b.dealers) || {};
    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);
    dealerSearchResultsStore.state.searchTerm = `${provinceName}, ${city}`;
    const page = await getPage();
    expect((_d = (_c = page.root) === null || _c === void 0 ? void 0 : _c.querySelector('phn-p-text')) === null || _d === void 0 ? void 0 : _d.textContent).toEqual('安徽, Wuhu');
  });
  it('should show spinner if the page is loading', async () => {
    var _a;
    const page = await getPage();
    page.rootInstance.isLoading = true;
    await page.waitForChanges();
    const spinner = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-spinner');
    expect(spinner).toBeTruthy();
  });
  it('should show error message if there is some', async () => {
    var _a;
    jest
      .spyOn(dealerService, 'getPPNDealersByRegion')
      .mockRejectedValue(new NaviError('some error', NaviErrorTypes.GEOLOCATION_DENIED));
    const page = await getPage();
    page.rootInstance.errorMessage = 'Some Error';
    await page.waitForChanges();
    const errorMessageElement = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.error-message');
    expect(errorMessageElement).not.toBeNull();
  });
  it('should not show error message if there is none', async () => {
    var _a;
    const page = await getPage();
    await page.waitForChanges();
    const errorMessageElement = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('.error-message');
    expect(errorMessageElement).toBeNull();
  });
  it("should prevent form's default action", async () => {
    var _a;
    dealerSearchResultsStore.state.results = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
    const page = await getPage();
    await page.waitForChanges();
    const formElement = (_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('form');
    expect(formElement).not.toBeNull();
    const submitEvent = new Event('submit');
    const preventDefaultSpy = jest.spyOn(submitEvent, 'preventDefault');
    formElement === null || formElement === void 0 ? void 0 : formElement.dispatchEvent(submitEvent);
    expect(preventDefaultSpy).toBeCalledTimes(1);
  });
  describe('When there is results', () => {
    const storeResults = mockPPNDealerSearchResultsWithLocalizedAddress.map(({ ppnDealer: dealer }) => dealer.id);
    let page;
    let clearSearchEventSpy;
    beforeEach(async () => {
      // dealerSearchResultsStore.state.results = storeResults;
      page = await getPage();
      clearSearchEventSpy = jest.spyOn(page.rootInstance.clearSearchEvent, 'emit');
    });
    const assertActionsAfterReset = () => {
      expect(page.rootInstance.errorMessage).toBe('');
      expect(page.rootInstance.isLoading).toBeFalsy();
      expect(page.rootInstance.selectedProvince).toEqual('');
      expect(page.rootInstance.selectedCity).toEqual('');
      //expect(clearSearchEventSpy).toHaveBeenCalled();
      expect(dealerSearchResultsStore.state.results).toEqual(null);
    };
    it('Should reset dropdown if there is results and user clicks on the input field', async () => {
      var _a;
      const inputComponent = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text-field-wrapper > input'));
      inputComponent === null || inputComponent === void 0 ? void 0 : inputComponent.click();
      await page.waitForChanges();
      assertActionsAfterReset();
    });
    it('Should reset dropdown if there is results and user presses a key on the input field', async () => {
      var _a;
      const inputComponent = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text-field-wrapper > input'));
      const keyboardEvent = new KeyboardEvent('keydown', {
        key: 'downarrow'
      });
      inputComponent === null || inputComponent === void 0 ? void 0 : inputComponent.dispatchEvent(keyboardEvent);
      await page.waitForChanges();
      assertActionsAfterReset();
    });
    it('Should reset dropdown if there is results and user type on the input field', async () => {
      var _a;
      const inputComponent = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text-field-wrapper > input'));
      const inputEvent = new Event('input');
      inputComponent === null || inputComponent === void 0 ? void 0 : inputComponent.dispatchEvent(inputEvent);
      await page.waitForChanges();
      assertActionsAfterReset();
    });
    it('Should not reset dropdown if there is results and user type Tab on the input field', async () => {
      var _a;
      dealerSearchResultsStore.state.results = storeResults;
      const inputComponent = getHTMLElement((_a = page.root) === null || _a === void 0 ? void 0 : _a.querySelector('phn-p-text-field-wrapper > input'));
      const keyEvent = new KeyboardEvent('keydown', {
        key: 'Tab'
      });
      inputComponent === null || inputComponent === void 0 ? void 0 : inputComponent.dispatchEvent(keyEvent);
      await page.waitForChanges();
      expect(page.rootInstance.errorMessage).toEqual('');
      expect(page.rootInstance.isLoading).toBeFalsy();
      expect(page.rootInstance.selectedProvince).toEqual('');
      expect(page.rootInstance.selectedCity).toEqual('');
      expect(clearSearchEventSpy).not.toHaveBeenCalled();
      expect(dealerSearchResultsStore.state.results).toEqual(storeResults);
    });
  });
  it('emits DEALER_SEARCH_SCREEN_LOAD when dropdown page is loaded and results', async () => {
    var _a, _b, _c;
    const provinceName = '安徽';
    const cityName = 'Wuhu';
    dealerSearchResultsStore.state.ppnDealers =
      ((_b = (_a = mockDealerSearchRegionResponse.regions
        .find(({ regionNameLocalized }) => regionNameLocalized === provinceName)) === null || _a === void 0 ? void 0 : _a.cities.find(({ cityName }) => cityName === cityName)) === null || _b === void 0 ? void 0 : _b.dealers) || {};
    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);
    dealerSearchResultsStore.state.searchTerm = `${provinceName}, ${cityName}`;
    const { results } = dealerSearchResultsStore.state;
    await getPage();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_c = event.context) === null || _c === void 0 ? void 0 : _c.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);
    expect(event.componentSearch).toEqual({
      numberOfResults: results === null || results === void 0 ? void 0 : results.length,
      searchTerm: '安徽, Wuhu'
    });
  });
  it('emits DEALER_SEARCH_SCREEN_LOAD when dropdown page is loaded and there are no results', async () => {
    var _a;
    dealerSearchResultsStore.state.searchTerm = mockPredictions[0].text;
    dealerSearchResultsStore.state.results = null;
    await getPage();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[0];
    expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.DEALER_SEARCH_SCREEN_LOAD);
    expect(event.componentSearch).toEqual({
      numberOfResults: 0,
      searchTerm: mockPredictions[0].text
    });
  });
  it('emits DEALER_RESULTS_SCREEN_LOAD when dropdown page is loaded and numberOfResults is 0 if there are no results', async () => {
    var _a;
    dealerSearchResultsStore.state.searchTerm = mockPredictions[0].text;
    dealerSearchResultsStore.state.results = null;
    await getPage();
    expect(globalDataLayerService.gdl.DataLayerStore).toHaveLength(2);
    const event = globalDataLayerService.gdl.DataLayerStore[1];
    expect((_a = event.context) === null || _a === void 0 ? void 0 : _a.eventAction).toEqual(EventActions.DEALER_RESULTS_SCREEN_LOAD);
    expect(event.componentSearch).toEqual({
      numberOfResults: 0,
      searchTerm: mockPredictions[0].text
    });
  });
});
//# sourceMappingURL=dealer-search-form-dropdown.spec.js.map
