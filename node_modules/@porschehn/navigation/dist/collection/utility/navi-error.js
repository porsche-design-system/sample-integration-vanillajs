export class NaviError extends Error {
  constructor(message, type) {
    super(message);
    this.type = type;
    // This line fixes a bug/feature in typescript to do with extending built-in classes.
    // Do not touch.
    // Link: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
    Object.setPrototypeOf(this, NaviError.prototype);
  }
}
export const NaviErrorTypes = {
  NO_INPUT: 'NO_INPUT',
  INVALID_INPUT: 'INVALID_INPUT',
  NO_RESULTS: 'NO_RESULTS',
  GENERAL: 'GENERAL',
  RETRY: 'RETRY',
  GEOLOCATION_DENIED: 'GEOLOCATION_DENIED',
  UNAUTHORIZED: 'UNAUTHORIZED'
};
export function getErrorMessage(errorContent, err) {
  if (!(err instanceof NaviError)) {
    return errorContent.wrong;
  }
  switch (err.type) {
    case NaviErrorTypes.NO_INPUT:
      return errorContent.noInput;
    case NaviErrorTypes.INVALID_INPUT:
      return errorContent.invalidInput;
    case NaviErrorTypes.NO_RESULTS:
      return errorContent.noResults;
    case NaviErrorTypes.GENERAL:
      return errorContent.wrong;
    case NaviErrorTypes.RETRY:
      return errorContent.retry;
    case NaviErrorTypes.GEOLOCATION_DENIED:
      return errorContent.geolocationDenied;
    default:
      return errorContent.wrong;
  }
}
//# sourceMappingURL=navi-error.js.map
