import featureToggles from "../../services/feature-toggles";
import { getSearchLink, isPcomSearchAvailable } from "../pcom-search-helper";
describe('pcom search helper', () => {
  beforeEach(async () => {
    jest.spyOn(featureToggles, 'isPcomSearchToggleActive').mockReturnValue(true);
  });
  it('pcom search should be available in de-DE', async () => {
    const pcomAvailable = isPcomSearchAvailable('de-DE', 'pcom');
    expect(pcomAvailable).toEqual(true);
  });
  it('pcom search should not be available in de-DE outside pcom', async () => {
    const pcomAvailable = isPcomSearchAvailable('de-DE', 'shop');
    expect(pcomAvailable).toEqual(false);
  });
  it('pcom search should be available in en-US', async () => {
    const pcomAvailable = isPcomSearchAvailable('en-US', 'pcom');
    expect(pcomAvailable).toEqual(true);
  });
  it('pcom search should be available in en-CN', async () => {
    const pcomAvailable = isPcomSearchAvailable('en-CN', 'pcom');
    expect(pcomAvailable).toEqual(true);
  });
  it('pcom search should be available in zh-CN', async () => {
    const pcomAvailable = isPcomSearchAvailable('zh-CN', 'pcom');
    expect(pcomAvailable).toEqual(true);
  });
  it('pcom search should not be available in es-MX', async () => {
    const pcomAvailable = isPcomSearchAvailable('es-MX', 'pcom');
    expect(pcomAvailable).toEqual(false);
  });
  it('should return correct redirect url for de-DE', () => {
    const url = getSearchLink('de-DE');
    expect(url).toEqual('https://www.porsche.com/germany/search/');
  });
  it('should return correct redirect url for en-US', () => {
    const url = getSearchLink('en-US');
    expect(url).toEqual('https://www.porsche.com/usa/search/');
  });
  it('should return correct redirect url for en-CN', () => {
    const url = getSearchLink('en-CN');
    expect(url).toEqual('https://www.porsche.com/china/en/search/');
  });
  it('should return correct redirect url for zh-CN', () => {
    const url = getSearchLink('zh-CN');
    expect(url).toEqual('https://www.porsche.com/china/zh/search/');
  });
  it('should return empty search link for unregistered locale', () => {
    const url = getSearchLink('xx-XX');
    expect(url).toEqual('');
  });
});
//# sourceMappingURL=pcom-search-helper.spec.js.map
