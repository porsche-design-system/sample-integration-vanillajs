import { breakpoint } from "@porsche-design-system/components-js/styles";
import { mockLocaleContent, mockNewContent, mockShopContent } from "../../test/test-data";
import { NavigationMode, NavigationTheme } from "../constants";
import { addQueryParamsToUrl, buildRoutingKeyHistoryFromContentPath, constructThemeClass, getRightTheme, getRootMenuItem, getValidContentPathSegments } from "../helper";
import { getImageSize } from "../helper";
describe('helper', () => {
  const navbarClass = 'navbar';
  const heroLightClass = 'hero_light';
  const heroDarkClass = 'hero_dark';
  const transparentLightClass = 'transparent_light';
  const transparentDarkClass = 'transparent_dark';
  describe('constructThemeClass', () => {
    describe('mode navbar', () => {
      it('should return navbar when no mode is given', () => {
        const themeClass = constructThemeClass(undefined, NavigationTheme.light);
        expect(themeClass).toEqual(navbarClass);
      });
      it('should return navbar when invalid mode is given', () => {
        const themeClass = constructThemeClass('abdefgh', NavigationTheme.light);
        expect(themeClass).toEqual(navbarClass);
      });
      it('should return navbar when mode is navbar', () => {
        const lightThemeClass = constructThemeClass(NavigationMode.navbar, NavigationTheme.light);
        expect(lightThemeClass).toEqual(navbarClass);
        const darkThemeClass = constructThemeClass(NavigationMode.navbar, NavigationTheme.dark);
        expect(darkThemeClass).toEqual(navbarClass);
      });
      it('should return transparent mode', () => {
        const lightThemeClass = constructThemeClass(NavigationMode.transparent, NavigationTheme.light);
        expect(lightThemeClass).toEqual(transparentLightClass);
        const lightThemeClassWithoutTheme = constructThemeClass(NavigationMode.transparent, undefined);
        expect(lightThemeClassWithoutTheme).toEqual(transparentLightClass);
        const darkThemeClass = constructThemeClass(NavigationMode.transparent, NavigationTheme.dark);
        expect(darkThemeClass).toEqual(transparentDarkClass);
      });
    });
    describe('mode hero', () => {
      it('should return hero light when no theme is given', () => {
        const themeClass = constructThemeClass(NavigationMode.hero, undefined);
        expect(themeClass).toEqual(heroLightClass);
      });
      it('should return hero light when invalid theme is given', () => {
        const themeClass = constructThemeClass(NavigationMode.hero, 'abcdefgh');
        expect(themeClass).toEqual(heroLightClass);
      });
      it('should return hero light when light theme is given', () => {
        const themeClass = constructThemeClass(NavigationMode.hero, NavigationTheme.light);
        expect(themeClass).toEqual(heroLightClass);
      });
      it('should return hero dark when dark theme is given', () => {
        const themeClass = constructThemeClass(NavigationMode.hero, NavigationTheme.dark);
        expect(themeClass).toEqual(heroDarkClass);
      });
    });
  });
  describe('get right theme', () => {
    it('getRightTheme returns "dark" when theme is dark and mode is hero', () => {
      const theme = NavigationTheme.dark;
      const mode = NavigationMode.hero;
      const result = getRightTheme(theme, mode);
      expect(result).toBe('dark');
    });
    it('getRightTheme returns "light" when theme is dark and mode is not hero', () => {
      const theme = NavigationTheme.dark;
      const mode = NavigationMode.navbar;
      const result = getRightTheme(theme, mode);
      expect(result).toBe('light');
    });
    it('getRightTheme returns "light" when theme is light and mode is hero', () => {
      const theme = NavigationTheme.light;
      const mode = NavigationMode.hero;
      const result = getRightTheme(theme, mode);
      expect(result).toBe('light');
    });
    it('getRightTheme returns "light" when theme is light and mode is not hero', () => {
      const theme = NavigationTheme.light;
      const mode = NavigationMode.transparent;
      const result = getRightTheme(theme, mode);
      expect(result).toBe('light');
    });
    it('getRightTheme returns "light" when theme is light and mode is not hero', () => {
      const theme = NavigationTheme.dark;
      const mode = NavigationMode.transparent;
      const result = getRightTheme(theme, mode);
      expect(result).toBe('dark');
    });
  });
  describe('addQueryParamsToUrl', () => {
    it('should return correctly formatted url when given a URL which contains a ?', () => {
      const urlWithQuestionMark = 'https://a.b.com/test?othertest=differenttest';
      const actual = addQueryParamsToUrl(urlWithQuestionMark, { yetanothertest: 'yetadifferenttest' });
      expect(actual).toEqual('https://a.b.com/test?othertest=differenttest&yetanothertest=yetadifferenttest');
    });
    it('should return correctly formatted url when given a URL that does not contain a question mark', () => {
      const urlWithoutQuestionmark = 'https://a.b.com/test';
      const actual = addQueryParamsToUrl(urlWithoutQuestionmark, { test: 'anothertest' });
      expect(actual).toEqual('https://a.b.com/test?test=anothertest');
    });
  });
  describe('getValidContentPathSegments', () => {
    const testContent = { mockLocaleContent, shop: mockShopContent };
    it('should return an empty array if no segments are given', () => {
      const shopRootLevelMenuItem = testContent.shop;
      const actual = getValidContentPathSegments(shopRootLevelMenuItem, []);
      expect(actual).toEqual([]);
    });
    it("should return an empty array if the first segment isn't valid", () => {
      const shopRootLevelMenuItem = testContent.shop;
      const actual = getValidContentPathSegments(shopRootLevelMenuItem, [
        'incorrectContentId',
        'unimportantSecondContentId'
      ]);
      expect(actual).toEqual([]);
    });
    it('should return an array containing all segments if all segments are valid', () => {
      const segments = ['mainmenu.services.accessories', 'mainmenu.service.tequipment'];
      const shopRootLevelMenuItem = testContent.shop;
      const actual = getValidContentPathSegments(shopRootLevelMenuItem, segments);
      expect(actual).toEqual(segments);
    });
    it('should return an array containing only valid segments if the last segment is invalid', () => {
      const segments = ['mainmenu.services.accessories', 'invalidContentId'];
      const shopRootLevelMenuItem = testContent.shop;
      const actual = getValidContentPathSegments(shopRootLevelMenuItem, segments);
      expect(actual).toEqual([segments[0]]);
    });
  });
  describe('getRootMenuItem', () => {
    it('should return the menuItem Services if the topLevelRoutingKey is services', () => {
      const topLevelRoutingKey = 'services';
      const content = mockNewContent['de-CH'];
      const rootContentItem = getRootMenuItem(content, topLevelRoutingKey);
      expect(rootContentItem).toEqual({
        children: [
          {
            children: [],
            id: 'mainmenu.vehiclepurchase.eperformance',
            link: 'https://www.porsche.com/uk/aboutporsche/e-performance/',
            text: 'E-Mobility & E-Performance'
          },
          {
            children: [],
            id: 'mainmenu.services.tequipment',
            link: 'https://www.porsche.com/uk/accessoriesandservice/tequipment/',
            text: 'Tequipment – Genuine Accessories'
          },
          {
            children: [],
            id: 'mainmenu.services.exclusivemanufaktur',
            link: 'https://www.porsche.com/uk/accessoriesandservice/exclusive-manufaktur/',
            text: 'Exclusive Manufaktur – Individual Vehicles'
          },
          {
            children: [],
            id: 'mainmenu.services.financialservices',
            link: 'https://www.porsche.com/uk/accessoriesandservice/financialservices/',
            text: 'Financial Services – Leasing & Financing'
          },
          {
            children: [],
            id: 'mainmenu.services.approved',
            link: 'https://www.porsche.com/uk/approvedused/porscheapproved/',
            text: 'Approved – Pre-Owned Cars & Warranty'
          },
          {
            children: [],
            id: 'mainmenu.services.garageservice',
            link: 'https://www.porsche.com/uk/accessoriesandservice/porscheservice/',
            text: 'Service & Maintenance'
          },
          {
            children: [],
            id: 'mainmenu.services.classic',
            link: 'https://www.porsche.com/uk/accessoriesandservice/classic/',
            text: 'Classic – Service & Parts'
          },
          {
            children: [],
            id: 'mainmenu.services.buyingowning',
            link: 'https://www.porsche.com/uk/accessoriesandservice/owningyourporsche/',
            text: 'Buying & Owning'
          },
          {
            children: [],
            id: 'mainmenu.services.autoinsurance',
            link: 'https://www.insurewithporsche.co.uk',
            text: 'Vehicle Insurance'
          },
          {
            children: [],
            id: 'mainmenu.services.serviceforbusinesses',
            link: 'https://www.porsche.com/uk/accessoriesandservice/financialservices-contacthire/',
            text: 'Contract hire for business'
          },
          {
            children: [],
            id: 'mainmenu.services.sellyourporsche',
            link: 'https://www.porsche.com/uk/approvedused/sellyourporsche/',
            text: 'Sell your Porsche'
          },
          {
            children: [],
            id: 'mainmenu.services.recallsearch',
            link: 'https://recall.porsche.com/prod/pag/vinrecalllookup_V3.nsf/VIN?ReadForm&c=greatbritain',
            text: 'Recall Search'
          }
        ],
        id: 'mainmenu.services',
        link: '',
        text: 'Services'
      });
    });
    it('should return the menuItem VehiclePurschase if topLevelRoutingKeyis vehiclePurchase', () => {
      const topLevelRoutingKey = 'vehiclePurchase';
      const content = mockNewContent['de-CH'];
      const rootContentItem = getRootMenuItem(content, topLevelRoutingKey);
      expect(rootContentItem).toEqual({
        children: [
          {
            children: [],
            id: 'mainmenu.vehiclepurchase.newusedinventory',
            link: 'http://www.porsche.com/gb/en-GB/test-shop',
            text: 'New & Used Inventory'
          },
          {
            children: [],
            id: 'mainmenu.vehiclepurchase.configure',
            link: 'http://www.porsche.com/gb/en-GB/test-shop',
            text: 'Configure'
          },
          {
            children: [],
            id: 'mainmenu.vehiclepurchase.compare',
            link: 'http://www.porsche.com/gb/en-GB/test-shop',
            text: 'Compare'
          },
          {
            children: [],
            id: 'mainmenu.vehiclepurchase.approved',
            link: 'http://www.porsche.com/gb/en-GB/test-shop',
            text: 'Approved - Pre-owned Cars & Warranty'
          },
          {
            children: [],
            id: 'mainmenu.vehiclepurchase.onlinepayment',
            link: 'http://www.porsche.com/gb/en-GB/test-shop',
            text: 'Online Bill Payment'
          },
          {
            children: [],
            id: 'mainmenu.vehiclepurchase.exclusive',
            link: 'http://www.porsche.com/gb/en-GB/test-shop',
            text: 'Exclusive Manufactur - Individual Vehicles'
          }
        ],
        id: 'mainmenu.vehiclepurchase',
        link: '',
        text: 'Vehicle Purchase'
      });
    });
    it('should return the menuItem Shop if the topLevelRoutingKey is shop', () => {
      const topLevelRoutingKey = 'shop';
      const content = mockNewContent['de-CH'];
      const rootContentItem = getRootMenuItem(content, topLevelRoutingKey);
      expect(rootContentItem).toEqual(mockNewContent['de-CH'].shop);
    });
    it('should return the menuItem Experience if the topLevelRoutingKey is experience', () => {
      const topLevelRoutingKey = 'experience';
      const content = mockNewContent['de-CH'];
      const rootContentItem = getRootMenuItem(content, topLevelRoutingKey);
      expect(rootContentItem).toEqual({
        children: [
          {
            children: [],
            id: 'mainmenu.experience.silverstone',
            link: 'https://www.porsche.com/silverstone/en/',
            text: 'Experience Centre Silverstone'
          },
          {
            children: [],
            id: 'mainmenu.experience.events',
            link: 'https://www.porsche.com/uk/motorsportandevents/events-and-partnerships/',
            text: 'Events & Partnerships'
          },
          {
            children: [],
            id: 'mainmenu.experience.experience',
            link: 'https://www.porsche.com/uk/motorsportandevents/experience/',
            text: 'Porsche Experience – Driving & Track Experiences'
          },
          {
            children: [],
            id: 'mainmenu.experience.carreracup',
            link: 'https://www.porsche.com/uk/motorsportandevents/porschecarreracupgreatbritain/',
            text: 'Carrera Cup GB'
          },
          {
            children: [],
            id: 'mainmenu.experience.sprintchallenge',
            link: 'https://www.porsche.com/uk/motorsportandevents/porschesprintchallengegb/',
            text: 'Cayman Islands Sprint Challenge GB'
          },
          {
            children: [],
            id: 'mainmenu.experience.motorsport',
            link: 'https://www.porsche.com/uk/motorsportandevents/motorsport/',
            text: 'Motorsport'
          },
          {
            children: [],
            id: 'mainmenu.experience.porscheclubs',
            link: 'https://www.porsche.com/uk/motorsportandevents/porscheclubs/',
            text: 'Porsche Clubs'
          },
          {
            children: [],
            id: 'mainmenu.experience.golfsport',
            link: 'https://www.porsche.com/international/motorsportandevents/golf/',
            text: 'Golf Sports'
          },
          {
            children: [],
            id: 'mainmenu.experience.christophorus',
            link: 'https://www.porsche.com/uk/aboutporsche/christophorusmagazine/',
            text: 'Christophorus – The Porsche Magazine'
          },
          {
            children: [],
            id: 'mainmenu.experience.visitmuseum',
            link: 'https://www.porsche.com/uk/aboutporsche/porschemuseum/',
            text: 'Visit the Porsche Museum'
          }
        ],
        id: 'mainmenu.experience',
        link: '',
        text: 'Experience'
      });
    });
    it('should return null if the topLevelRoutingKey is not experience, shop, vehiclePurchase, srevices', () => {
      const topLevelRoutingKey = 'NoneOfTheAbove';
      const content = mockNewContent['de-CH'];
      const rootContentItem = getRootMenuItem(content, topLevelRoutingKey);
      expect(rootContentItem).toEqual(null);
    });
  });
  describe('buildRoutingKeyHistoryFromContentPath', () => {
    it('should return routing history for shop>mainmenu.shops.accessories>mainmenu.shops.accessories.preownedinventory', () => {
      const topLevelRoutingKey = 'shop';
      const validSegments = ['mainmenu.shops.accessories', 'mainmenu.shops.accessories.preownedinventory'];
      const routingKeyHistory = buildRoutingKeyHistoryFromContentPath([topLevelRoutingKey, ...validSegments]);
      expect(routingKeyHistory).toEqual([
        'shop',
        'shop/mainmenu.shops.accessories',
        'shop/mainmenu.shops.accessories/mainmenu.shops.accessories.preownedinventory'
      ]);
    });
  });
  describe('getImageSize', () => {
    it('should return correct image sizes', () => {
      const expected = [
        { breakpoint: breakpoint.xxl, size: 1920 },
        { breakpoint: breakpoint.xl, size: 1920 },
        { breakpoint: breakpoint.l, size: 1360 },
        { breakpoint: breakpoint.m, size: 1024 },
        { breakpoint: breakpoint.s, size: 760 },
        { breakpoint: breakpoint.xs, size: 390 },
        { breakpoint: breakpoint.base, size: 320 }
      ];
      for (const { breakpoint, size } of expected) {
        const actual = getImageSize(breakpoint);
        expect(actual).toEqual(size);
      }
    });
  });
});
//# sourceMappingURL=helper.spec.js.map
