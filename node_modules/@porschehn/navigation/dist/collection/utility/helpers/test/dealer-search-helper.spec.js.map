{"version":3,"file":"dealer-search-helper.spec.js","sourceRoot":"","sources":["../../../../../src/utility/helpers/test/dealer-search-helper.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { getOpeningHours } from '../dealer-search-helper';\nimport { OpenHours } from '../../../entities/dealer-response';\nimport { navContentStore } from '../../../state/nav-content-store';\n\nconst openingHoursContent = {\n  monday: 'Mon',\n  tuesday: 'Tue',\n  wednesday: 'Wed',\n  thursday: 'Thur',\n  friday: 'Fri',\n  saturday: 'Sat',\n  sunday: 'Sun',\n  daily_lunch: 'Daily Lunch'\n};\n\ndescribe('dealer search helper', () => {\n  beforeEach(() => {\n    navContentStore.state.dealer.openingHours = openingHoursContent;\n  });\n\n  describe('getOpeningHours', () => {\n    it('Monday to Friday have the same hours and Saturday has different hours', async () => {\n      const openingHoursData = [\n        { day: 'MONDAY', open: '08:00', close: '18:00' },\n        { day: 'TUESDAY', open: '08:00', close: '18:00' },\n        { day: 'WEDNESDAY', open: '08:00', close: '18:00' },\n        { day: 'THURSDAY', open: '08:00', close: '18:00' },\n        { day: 'FRIDAY', open: '08:00', close: '18:00' },\n        { day: 'SATURDAY', open: '03:00', close: '13:00' }\n      ];\n\n      const openingHours = getOpeningHours(openingHoursData);\n      expect(openingHours).toEqual('Mon - Fri: 08:00 - 18:00\\n' + 'Sat: 03:00 - 13:00');\n    });\n\n    it('openingHours content is not available for locale, return empty string', async () => {\n      navContentStore.state.dealer.openingHours = null;\n\n      const openingHoursData = [{ day: 'MONDAY', open: '08:00', close: '18:00' }];\n\n      const openingHours = getOpeningHours(openingHoursData);\n      expect(openingHours).toEqual('');\n    });\n\n    it('Daily Lunch available, Monday to Friday have the same hours and Saturday has different hours', async () => {\n      const openingHoursData = [\n        { day: 'DAILY_LUNCH', open: '12:00', close: '13:00' },\n        { day: 'MONDAY', open: '08:00', close: '18:00' },\n        { day: 'TUESDAY', open: '08:00', close: '18:00' },\n        { day: 'WEDNESDAY', open: '08:00', close: '18:00' },\n        { day: 'THURSDAY', open: '08:00', close: '18:00' },\n        { day: 'FRIDAY', open: '08:00', close: '18:00' },\n        { day: 'SATURDAY', open: '03:00', close: '13:00' }\n      ];\n\n      const openingHours = getOpeningHours(openingHoursData);\n      expect(openingHours).toEqual('Mon - Fri: 08:00 - 18:00\\nSat: 03:00 - 13:00\\nDaily Lunch: 12:00 - 13:00');\n    });\n\n    it('Monday to Friday have the same hours', () => {\n      const openingHoursData = [\n        { day: 'MONDAY', open: '08:00', close: '05:00' },\n        { day: 'TUESDAY', open: '08:00', close: '05:00' },\n        { day: 'WEDNESDAY', open: '08:00', close: '05:00' },\n        { day: 'THURSDAY', open: '08:00', close: '05:00' },\n        { day: 'FRIDAY', open: '08:00', close: '05:00' }\n      ];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual('Mon - Fri: 08:00 - 05:00');\n    });\n\n    it('all days are closed, faulty behavior (empty open & close)', () => {\n      const openingHoursData = [{ day: 'MONDAY', open: '', close: '' }];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual('');\n    });\n\n    it('all days are closed', () => {\n      const openingHoursData: OpenHours[] = [];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual('');\n    });\n\n    it('only Monday is open, Sunday with wrong data', () => {\n      const openingHoursData = [\n        { day: 'MONDAY', open: '08:00', close: '05:00' },\n        { day: 'SUNDAY', open: '', close: '18:00' }\n      ];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual('Mon: 08:00 - 05:00');\n    });\n\n    it('Monday - Saturday with different times', () => {\n      const openingHoursData = [\n        { day: 'MONDAY', open: '08:00', close: '15:00' },\n        { day: 'TUESDAY', open: '09:00', close: '16:00' },\n        { day: 'WEDNESDAY', open: '07:00', close: '15:00' },\n        { day: 'THURSDAY', open: '09:00', close: '16:00' },\n        { day: 'FRIDAY', open: '09:30', close: '16:00' },\n        { day: 'SATURDAY', open: '09:00', close: '16:00' }\n      ];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual(\n        'Mon: 08:00 - 15:00\\nTue: 09:00 - 16:00\\nWed: 07:00 - 15:00\\nThur: 09:00 - 16:00\\nFri: 09:30 - 16:00\\nSat: 09:00 - 16:00'\n      );\n    });\n\n    it('Monday - Saturday with different times, and different order received from api', () => {\n      const openingHoursData = [\n        { day: 'MONDAY', open: '08:00', close: '15:00' },\n        { day: 'DAILY_LUNCH', open: '12:00', close: '13:00' },\n        { day: 'FRIDAY', open: '09:30', close: '16:00' },\n        { day: 'WEDNESDAY', open: '07:00', close: '15:00' }\n      ];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual('Mon: 08:00 - 15:00\\nWed: 07:00 - 15:00\\nFri: 09:30 - 16:00\\nDaily Lunch: 12:00 - 13:00');\n    });\n\n    it('Saturday & Daily Lunch with same times but not summarized together', () => {\n      const openingHoursData = [\n        { day: 'DAILY_LUNCH', open: '12:00', close: '13:00' },\n        { day: 'SATURDAY', open: '12:00', close: '13:00' }\n      ];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual('Sat: 12:00 - 13:00\\nDaily Lunch: 12:00 - 13:00');\n    });\n\n    it('Monday - Saturday with different times and US locale for 12 hour time format', () => {\n      navContentStore.state.dealer.openingHours = { ...openingHoursContent, timeFormat: 12 };\n\n      const openingHoursData = [\n        { day: 'MONDAY', open: '08:00', close: '15:00' },\n        { day: 'TUESDAY', open: '09:00', close: '16:00' },\n        { day: 'WEDNESDAY', open: '07:00', close: '15:00' },\n        { day: 'THURSDAY', open: '09:00', close: '16:00' },\n        { day: 'FRIDAY', open: '09:30', close: '16:00' },\n        { day: 'SATURDAY', open: '09:00', close: '16:00' }\n      ];\n\n      const summary = getOpeningHours(openingHoursData);\n\n      expect(summary).toEqual(\n        'Mon: 8:00 AM - 3:00 PM\\nTue: 9:00 AM - 4:00 PM\\nWed: 7:00 AM - 3:00 PM\\nThur: 9:00 AM - 4:00 PM\\nFri: 9:30 AM - 4:00 PM\\nSat: 9:00 AM - 4:00 PM'\n      );\n    });\n\n    it('Should not summarize if day in between is missing', () => {\n      const openingHoursData = [\n        { day: 'MONDAY', open: '08:00', close: '18:00' },\n        { day: 'TUESDAY', open: '08:00', close: '18:00' },\n        { day: 'THURSDAY', open: '08:00', close: '18:00' },\n        { day: 'FRIDAY', open: '08:00', close: '18:00' },\n        { day: 'SATURDAY', open: '03:00', close: '13:00' }\n      ];\n\n      const openingHours = getOpeningHours(openingHoursData);\n      expect(openingHours).toEqual('Mon - Tue: 08:00 - 18:00\\n' + 'Thur - Fri: 08:00 - 18:00\\n' + 'Sat: 03:00 - 13:00');\n    });\n  });\n});\n"]}