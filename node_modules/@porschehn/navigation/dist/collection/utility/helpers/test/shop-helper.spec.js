import { navContentStore } from "../../../state/nav-content-store";
import { navStateStore } from "../../../state/nav-state-store";
import { shopStateStore } from "../../../state/shop-state-store";
import { mockExternalShop, mockLocaleContent, mockNewContent, mockShopContent } from "../../../test/test-data";
import { Application } from "../../constants/app";
import { filterWishlistItemsByAuthStatus, getAvailableShopVariables, getIconNameByMenuItemId, isShopAvailable, isShopAvailableAndLogoLinksToShop, loadsShopPropsOnStore, modifyShopItemDependingOnMarket } from "../shop-helper";
describe('shop helper', () => {
  beforeEach(async () => {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    navContentStore.state.shop.availableLocales = ['de-DE'];
  });
  it('shop should be available in de-DE', async () => {
    const shopAvailable = isShopAvailable('de-DE', Application.shop);
    expect(shopAvailable).toEqual(true);
  });
  it('shop should not be available if app parameter shop is not provided', () => {
    const shopAvailable = isShopAvailable('de-DE', Application.default);
    expect(shopAvailable).toEqual(false);
  });
  it('shop should not be available for not listed locale', () => {
    const shopAvailable = isShopAvailable('es-MX', Application.shop);
    expect(shopAvailable).toEqual(false);
  });
  it('logo should link to shop', () => {
    navContentStore.state.shop.availableLocales = ['de-DE'];
    navContentStore.state.shop.logoLinksToShopLocales = ['de-DE'];
    const menu = {
      id: '1',
      text: 'text',
      link: 'link',
      children: [],
      additionalContent: [],
      availableLocales: ['de-DE'],
      availableLocalesOnlyForShop: [],
      logoLinksToShopLocales: ['de-DE']
    };
    const shouldLinkToShop = isShopAvailableAndLogoLinksToShop('de-DE', 'shop', menu);
    expect(shouldLinkToShop).toEqual(true);
  });
  it('logo should not link to shop', () => {
    navContentStore.state.shop.availableLocales = ['de-DE'];
    navContentStore.state.shop.logoLinksToShopLocales = ['en-MX'];
    const menu = {
      id: '1',
      text: 'text',
      link: 'link',
      children: [],
      additionalContent: [],
      availableLocales: ['de-DE'],
      availableLocalesOnlyForShop: [],
      logoLinksToShopLocales: ['de-DE']
    };
    const shouldLinkToShop = isShopAvailableAndLogoLinksToShop('de-DE', 'shop', menu);
    expect(shouldLinkToShop).toEqual(false);
  });
  it('logo should not link to shop', () => {
    navContentStore.state.shop.availableLocales = ['en-MX'];
    navContentStore.state.shop.logoLinksToShopLocales = ['de-DE'];
    const menu = {
      id: '1',
      text: 'text',
      link: 'link',
      children: [],
      additionalContent: [],
      availableLocales: ['de-DE'],
      availableLocalesOnlyForShop: [],
      logoLinksToShopLocales: ['en-MX']
    };
    const shouldLinkToShop = isShopAvailableAndLogoLinksToShop('de-DE', 'shop', menu);
    expect(shouldLinkToShop).toEqual(false);
  });
  it('should no thrown if logoLinksToShopLocales is undefined ', () => {
    navContentStore.state.shop.availableLocales = ['en-MX'];
    navContentStore.state.shop.logoLinksToShopLocales = undefined;
    const menu = {
      id: '1',
      text: 'text',
      link: 'link',
      children: [],
      additionalContent: [],
      availableLocales: ['de-DE'],
      availableLocalesOnlyForShop: [],
      logoLinksToShopLocales: []
    };
    const shouldLinkToShop = isShopAvailableAndLogoLinksToShop('en-MX', 'shop', menu);
    expect(shouldLinkToShop).toEqual(false);
  });
  describe('Filter Wishlist By AuthStatus', () => {
    it('should get menu items for logged in user', () => {
      const items = filterWishlistItemsByAuthStatus(mockShopContent.additionalContent, ['loggedIn', null]);
      expect(items).toHaveLength(9);
    });
    it('should get menu items for logged out user', () => {
      const items = filterWishlistItemsByAuthStatus(mockShopContent.additionalContent, ['loggedOut', null]);
      expect(items).toHaveLength(4);
    });
    it('should not get menu items for logged out or logged in ', () => {
      const items = filterWishlistItemsByAuthStatus(mockShopContent.additionalContent, [null]);
      expect(items).toHaveLength(3);
    });
  });
  describe('Available Shop Variables', () => {
    it('should have username with logged in user data', () => {
      navStateStore.state.loggedInState = 'Miranda Doe';
      const variables = getAvailableShopVariables();
      expect(variables.username).toEqual('Miranda Doe');
    });
    it('should have username with fallback text for not logged in information', () => {
      const variables = getAvailableShopVariables();
      expect(variables.username).toEqual('loginOrRegister');
    });
    it('should have wishlist Items Number for wishlist prop', () => {
      shopStateStore.state.wishlistItemsNumber = 50;
      const variables = getAvailableShopVariables();
      expect(variables.wishlistItemsNumber).toEqual(50);
    });
    it('should have wishlist Items Number ', () => {
      shopStateStore.state.wishlistItemsNumber = 50;
      shopStateStore.state.shopInformation.wishlistItemsNumber = 50;
      const variables = getAvailableShopVariables();
      expect(variables.wishlistItemsNumber).toEqual(50);
    });
  });
  describe('Shop store', () => {
    it('should load shop variables on store', () => {
      const receivedShopProps = {
        wishlistItemsNumber: 50,
        numberOfShoppingItems: 10,
        shopInformation: { wishlistItemsNumber: 50, numberOfShoppingItems: 10, subTotal: '100€' }
      };
      loadsShopPropsOnStore(receivedShopProps);
      expect(shopStateStore.state.wishlistItemsNumber).toEqual(50);
      expect(shopStateStore.state.numberOfShoppingItems).toEqual(10);
      expect(shopStateStore.state.shopInformation.wishlistItemsNumber).toEqual(50);
      expect(shopStateStore.state.shopInformation.numberOfShoppingItems).toEqual(10);
      expect(shopStateStore.state.shopInformation.subTotal).toEqual('100€');
    });
  });
  describe('Icon Url', () => {
    it('should get filled wishlist icon if there is items on wishlist', () => {
      shopStateStore.state.shopInformation.wishlistItemsNumber = 0;
      shopStateStore.state.wishlistItemsNumber = 50;
      const icon = getIconNameByMenuItemId('wishlist');
      expect(icon).toEqual('heart-filled');
    });
    it('should get unfilled wishlist icon if there is no items on wishlist', () => {
      shopStateStore.state.shopInformation.wishlistItemsNumber = 0;
      shopStateStore.state.wishlistItemsNumber = 0;
      const icon = getIconNameByMenuItemId('wishlist');
      expect(icon).toEqual('heart');
    });
    it('should get no icons if there is as unknown icon id', () => {
      const icon = getIconNameByMenuItemId('anyId');
      expect(icon).toEqual(null);
    });
    it('should get no icons if there is no icon id', () => {
      const icon = getIconNameByMenuItemId(null);
      expect(icon).toEqual(null);
    });
  });
  describe('Shop section', () => {
    describe('Have no external shop and have internal shop for every page', () => {
      it('should have no external shop and have internal shop for every application when externalShop equals null and locale in available shop locales', () => {
        const content = modifyShopItemDependingOnMarket('de-DE', 'default', Object.assign(Object.assign({}, mockLocaleContent), { shop: Object.assign({}, mockLocaleContent.shop), externalShop: null }));
        expect(content).toEqual(mockLocaleContent);
      });
      it('should have no external shop and have no internal shop for every application when externalShop equals null and locale not in available shop locales', () => {
        const content = modifyShopItemDependingOnMarket('sv-SE', 'default', Object.assign(Object.assign({}, mockLocaleContent), { shop: Object.assign({}, mockLocaleContent.shop), externalShop: null }));
        expect(content).toEqual(Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, mockLocaleContent.shop), { text: '' }) }));
      });
    });
    describe('Have no external shop and have internal shop only when on shop page', () => {
      it('should have no external shop and have internal shop on shop page when externalShop equals null and locale in available shop locales', () => {
        const content = modifyShopItemDependingOnMarket('de-DE', 'shop', Object.assign(Object.assign({}, mockLocaleContent), { shop: Object.assign({}, mockLocaleContent.shop), externalShop: null }));
        expect(content).toEqual(mockLocaleContent);
      });
      it('should have no external shop and have no internal shop on shop page when externalShop equals null and locale not in available shop locales', () => {
        const content = modifyShopItemDependingOnMarket('sv-SE', 'shop', Object.assign(Object.assign({}, mockLocaleContent), { shop: Object.assign({}, mockLocaleContent.shop), externalShop: null }));
        expect(content).toEqual(Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, mockLocaleContent.shop), { text: '' }) }));
      });
      it('should have no external shop and have internal shop on shop page when externalShop equals null and locale in available locales only for shop', () => {
        const content = modifyShopItemDependingOnMarket('en-GB', 'shop', Object.assign(Object.assign({}, mockLocaleContent), { shop: Object.assign({}, mockLocaleContent.shop), externalShop: null }));
        expect(content).toEqual(mockLocaleContent);
      });
    });
    describe('Have external shop and not internal shop (links to external everywhere)', () => {
      it('should have external shop and have no internal shop for every application', () => {
        const content = modifyShopItemDependingOnMarket('xx-XX', 'default', Object.assign(Object.assign({}, mockLocaleContent), { shop: mockLocaleContent.shop, externalShop: mockExternalShop }));
        expect(content).toEqual(Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, mockLocaleContent.shop), mockExternalShop) }));
      });
    });
    describe('Have external shop and internal shop', () => {
      it('should have external shop and have internal and link to external shop for every application', () => {
        const content = modifyShopItemDependingOnMarket('de-DE', 'default', Object.assign(Object.assign({}, mockLocaleContent), { shop: mockLocaleContent.shop, externalShop: mockExternalShop }));
        expect(content).toEqual(Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, mockLocaleContent.shop), mockExternalShop) }));
      });
      it('should have external shop and have internal shop and link to internal shop for shop page', () => {
        const content = modifyShopItemDependingOnMarket('de-DE', 'shop', Object.assign(Object.assign({}, mockLocaleContent), { shop: mockLocaleContent.shop, externalShop: mockExternalShop }));
        expect(content).toEqual(Object.assign(Object.assign({}, content), { shop: Object.assign({}, mockLocaleContent.shop) }));
      });
    });
    describe('Have no external shop and no internal shop', () => {
      it('should return content when there is no external shop and have no internal shop for every application', () => {
        const content = modifyShopItemDependingOnMarket('de-DE', 'default', Object.assign(Object.assign({}, mockLocaleContent), { shop: {
            id: '',
            text: '',
            link: '',
            children: [],
            additionalContent: [],
            availableLocales: ['de-DE', 'de-CH', 'it-CH', 'en-GB', 'en-RO'],
            availableLocalesOnlyForShop: ['en-GB', 'en-RO'],
            logoLinksToShopLocales: ['en-GB', 'en-RO']
          }, externalShop: null }));
        expect(content).toEqual(Object.assign(Object.assign({}, mockLocaleContent), { shop: {
            id: '',
            text: '',
            link: '',
            children: [],
            additionalContent: [],
            availableLocales: ['de-DE', 'de-CH', 'it-CH', 'en-GB', 'en-RO'],
            availableLocalesOnlyForShop: ['en-GB', 'en-RO'],
            logoLinksToShopLocales: ['en-GB', 'en-RO']
          } }));
      });
      it('should not link to shop when there is no external shop and there is an internal shop but on default page', () => {
        const content = modifyShopItemDependingOnMarket('en-GB', 'default', Object.assign(Object.assign({}, mockLocaleContent), { shop: {
            id: '',
            text: 'TEXT',
            link: '',
            children: [],
            additionalContent: [],
            availableLocales: ['de-DE', 'de-CH', 'it-CH', 'en-GB', 'en-RO'],
            availableLocalesOnlyForShop: ['en-GB', 'en-RO'],
            logoLinksToShopLocales: ['en-GB', 'en-RO']
          }, externalShop: null }));
        expect(content).toEqual(Object.assign(Object.assign({}, mockLocaleContent), { shop: {
            id: '',
            text: '',
            link: '',
            children: [],
            additionalContent: [],
            availableLocales: ['de-DE', 'de-CH', 'it-CH', 'en-GB', 'en-RO'],
            availableLocalesOnlyForShop: ['en-GB', 'en-RO'],
            logoLinksToShopLocales: ['en-GB', 'en-RO']
          } }));
      });
      it('should return content when there is no external shop and have no internal shop for shop page', () => {
        const content = modifyShopItemDependingOnMarket('en-GB', 'shop', Object.assign(Object.assign({}, mockLocaleContent), { shop: {
            id: '',
            text: '',
            link: '',
            children: [],
            additionalContent: [],
            availableLocales: ['de-DE', 'de-CH', 'it-CH', 'en-GB', 'en-RO'],
            availableLocalesOnlyForShop: ['en-GB', 'en-RO'],
            logoLinksToShopLocales: ['en-GB', 'en-RO']
          }, externalShop: null }));
        expect(content).toEqual(Object.assign(Object.assign({}, mockLocaleContent), { shop: {
            id: '',
            text: '',
            link: '',
            children: [],
            additionalContent: [],
            availableLocales: ['de-DE', 'de-CH', 'it-CH', 'en-GB', 'en-RO'],
            availableLocalesOnlyForShop: ['en-GB', 'en-RO'],
            logoLinksToShopLocales: ['en-GB', 'en-RO']
          } }));
      });
      it('Should return content if shop is null', () => {
        const content = modifyShopItemDependingOnMarket('sv-SE', 'shop', Object.assign(Object.assign({}, mockNewContent['sv-SE']), { shop: null }));
        expect(content).toEqual(Object.assign(Object.assign({}, mockNewContent['sv-SE']), { shop: null }));
      });
    });
  });
});
//# sourceMappingURL=shop-helper.spec.js.map
