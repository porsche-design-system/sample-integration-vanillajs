import { replaceVariables } from "../string-helper";
describe('String helper', () => {
  const data = { username: 'Miranda Doe', numberOfItems: 50 };
  it('should replace variables when there if variables binding on it', () => {
    const template = 'Hello {username}';
    const result = replaceVariables(template, data);
    expect(result).toEqual('Hello Miranda Doe');
  });
  it('should replace not localed variables by empty space', () => {
    const template = 'Hello {unlocated}';
    const result = replaceVariables(template, data);
    expect(result).toEqual('Hello ');
  });
  it('should replace number variables', () => {
    const template = 'You have {numberOfItems} items';
    const result = replaceVariables(template, data);
    expect(result).toEqual('You have 50 items');
  });
  it('should replace number variable even if its 0', () => {
    const template = 'You have {zeroNumber} items';
    const result = replaceVariables(template, { zeroNumber: 0 });
    expect(result).toEqual('You have 0 items');
  });
  it('should not replace any data', () => {
    const template = 'Hello, I dont have Variables';
    const result = replaceVariables(template, data);
    expect(result).toEqual(template);
  });
  it('should not replace variables if there is no data', () => {
    const template = 'Hello, I dont have Variables';
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = replaceVariables(template, null);
    expect(result).toEqual(template);
  });
  it('should return empty if there no templace', () => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = replaceVariables(null, data);
    expect(result).toEqual('');
  });
});
//# sourceMappingURL=string-helper.spec.js.map
