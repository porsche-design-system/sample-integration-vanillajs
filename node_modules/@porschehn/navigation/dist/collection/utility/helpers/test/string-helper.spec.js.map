{"version":3,"file":"string-helper.spec.js","sourceRoot":"","sources":["../../../../../src/utility/helpers/test/string-helper.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAEpD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;EAC7B,MAAM,IAAI,GAAG,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC;EAE5D,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;IACxE,MAAM,QAAQ,GAAG,kBAAkB,CAAC;IAEpC,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAEhD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;EAC9C,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;IAC7D,MAAM,QAAQ,GAAG,mBAAmB,CAAC;IAErC,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAEhD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;EACnC,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;IACzC,MAAM,QAAQ,GAAG,gCAAgC,CAAC;IAElD,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAEhD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;EAC9C,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;IACtD,MAAM,QAAQ,GAAG,6BAA6B,CAAC;IAE/C,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;IAE7D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;EAC7C,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;IACrC,MAAM,QAAQ,GAAG,8BAA8B,CAAC;IAEhD,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAEhD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;EACnC,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;IAC1D,MAAM,QAAQ,GAAG,8BAA8B,CAAC;IAEhD,8DAA8D;IAC9D,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,EAAE,IAAW,CAAC,CAAC;IAEvD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;EACnC,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;IAClD,8DAA8D;IAC9D,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAW,EAAE,IAAI,CAAC,CAAC;IAEnD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;EAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { replaceVariables } from '../string-helper';\n\ndescribe('String helper', () => {\n  const data = { username: 'Miranda Doe', numberOfItems: 50 };\n\n  it('should replace variables when there if variables binding on it', () => {\n    const template = 'Hello {username}';\n\n    const result = replaceVariables(template, data);\n\n    expect(result).toEqual('Hello Miranda Doe');\n  });\n\n  it('should replace not localed variables by empty space', () => {\n    const template = 'Hello {unlocated}';\n\n    const result = replaceVariables(template, data);\n\n    expect(result).toEqual('Hello ');\n  });\n\n  it('should replace number variables', () => {\n    const template = 'You have {numberOfItems} items';\n\n    const result = replaceVariables(template, data);\n\n    expect(result).toEqual('You have 50 items');\n  });\n\n  it('should replace number variable even if its 0', () => {\n    const template = 'You have {zeroNumber} items';\n\n    const result = replaceVariables(template, { zeroNumber: 0 });\n\n    expect(result).toEqual('You have 0 items');\n  });\n\n  it('should not replace any data', () => {\n    const template = 'Hello, I dont have Variables';\n\n    const result = replaceVariables(template, data);\n\n    expect(result).toEqual(template);\n  });\n\n  it('should not replace variables if there is no data', () => {\n    const template = 'Hello, I dont have Variables';\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const result = replaceVariables(template, null as any);\n\n    expect(result).toEqual(template);\n  });\n\n  it('should return empty if there no templace', () => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const result = replaceVariables(null as any, data);\n\n    expect(result).toEqual('');\n  });\n});\n"]}