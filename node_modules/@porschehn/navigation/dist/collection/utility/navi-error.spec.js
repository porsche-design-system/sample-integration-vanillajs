import { mockErrorContent } from "../test/test-data";
import { getErrorMessage, NaviError, NaviErrorTypes } from "./navi-error";
describe('getErrorMessage', () => {
  it('should return correct error message for GEOLOCATION_DENIED', () => {
    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.geolocationDenied, NaviErrorTypes.GEOLOCATION_DENIED))).toEqual(mockErrorContent.geolocationDenied);
  });
  it('should return correct error message for INVALID_INPUT', () => {
    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.invalidInput, NaviErrorTypes.INVALID_INPUT))).toEqual(mockErrorContent.invalidInput);
  });
  it('should return correct error message for NO_INPUT', () => {
    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noInput, NaviErrorTypes.NO_INPUT))).toEqual(mockErrorContent.noInput);
  });
  it('should return correct error message for RETRY', () => {
    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, NaviErrorTypes.RETRY))).toEqual(mockErrorContent.retry);
  });
  it('should return correct error message for GEOLOCATION_DENIED', () => {
    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, NaviErrorTypes.GENERAL))).toEqual(mockErrorContent.wrong);
  });
  it('should return correct error message for GEOLOCATION_DENIED', () => {
    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, NaviErrorTypes.NO_RESULTS))).toEqual(mockErrorContent.noResults);
  });
  it('should return `wrong` error message for unknown error', () => {
    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, 'error'))).toEqual(mockErrorContent.wrong);
  });
  it('should return `wrong` error message for non-navi error', () => {
    expect(getErrorMessage(mockErrorContent, new Error('error'))).toEqual(mockErrorContent.wrong);
  });
});
//# sourceMappingURL=navi-error.spec.js.map
