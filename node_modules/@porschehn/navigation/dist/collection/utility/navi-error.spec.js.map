{"version":3,"file":"navi-error.spec.js","sourceRoot":"","sources":["../../../src/utility/navi-error.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,EAAE,eAAe,EAAE,SAAS,EAAiB,cAAc,EAAE,MAAM,cAAc,CAAC;AAEzF,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;EAC/B,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;IACpE,MAAM,CACJ,eAAe,CACb,gBAAgB,EAChB,IAAI,SAAS,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,CAAC,kBAAkB,CAAC,CACrF,CACF,CAAC,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;EAChD,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;IAC/D,MAAM,CACJ,eAAe,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,gBAAgB,CAAC,YAAY,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC,CAC9G,CAAC,OAAO,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;EAC3C,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;IAC1D,MAAM,CAAC,eAAe,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CACjH,gBAAgB,CAAC,OAAO,CACzB,CAAC;EACJ,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;IACvD,MAAM,CAAC,eAAe,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAChH,gBAAgB,CAAC,KAAK,CACvB,CAAC;EACJ,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;IACpE,MAAM,CACJ,eAAe,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CACrG,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;EACpC,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;IACpE,MAAM,CACJ,eAAe,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC,CACxG,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;EACxC,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;IAC/D,MAAM,CACJ,eAAe,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAwB,CAAC,CAAC,CACvG,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;EACpC,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;IAChE,MAAM,CAAC,eAAe,CAAC,gBAAgB,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;EAChG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { mockErrorContent } from '../test/test-data';\nimport { getErrorMessage, NaviError, NaviErrorType, NaviErrorTypes } from './navi-error';\n\ndescribe('getErrorMessage', () => {\n  it('should return correct error message for GEOLOCATION_DENIED', () => {\n    expect(\n      getErrorMessage(\n        mockErrorContent,\n        new NaviError(mockErrorContent.geolocationDenied, NaviErrorTypes.GEOLOCATION_DENIED)\n      )\n    ).toEqual(mockErrorContent.geolocationDenied);\n  });\n\n  it('should return correct error message for INVALID_INPUT', () => {\n    expect(\n      getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.invalidInput, NaviErrorTypes.INVALID_INPUT))\n    ).toEqual(mockErrorContent.invalidInput);\n  });\n\n  it('should return correct error message for NO_INPUT', () => {\n    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noInput, NaviErrorTypes.NO_INPUT))).toEqual(\n      mockErrorContent.noInput\n    );\n  });\n\n  it('should return correct error message for RETRY', () => {\n    expect(getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, NaviErrorTypes.RETRY))).toEqual(\n      mockErrorContent.retry\n    );\n  });\n\n  it('should return correct error message for GEOLOCATION_DENIED', () => {\n    expect(\n      getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, NaviErrorTypes.GENERAL))\n    ).toEqual(mockErrorContent.wrong);\n  });\n\n  it('should return correct error message for GEOLOCATION_DENIED', () => {\n    expect(\n      getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, NaviErrorTypes.NO_RESULTS))\n    ).toEqual(mockErrorContent.noResults);\n  });\n\n  it('should return `wrong` error message for unknown error', () => {\n    expect(\n      getErrorMessage(mockErrorContent, new NaviError(mockErrorContent.noResults, 'error' as NaviErrorType))\n    ).toEqual(mockErrorContent.wrong);\n  });\n\n  it('should return `wrong` error message for non-navi error', () => {\n    expect(getErrorMessage(mockErrorContent, new Error('error'))).toEqual(mockErrorContent.wrong);\n  });\n});\n"]}