import { breakpoint } from "@porsche-design-system/components-js/styles";
import configJSON from "../config.json";
import { LOADING_STATUS, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS, NavigationMode, NavigationTheme } from "./constants";
import { Application } from "./constants/app";
let rootElement = null;
export function getRootElement() {
  if (rootElement === null) {
    throw new Error('No root element present');
  }
  return rootElement;
}
export function loadRootElement(element) {
  rootElement = element;
}
export function getHTMLElementFromRoot(selector) {
  return getRootElement().querySelector(selector);
}
export function getConfig(env) {
  return configJSON[env];
}
export function hasKey(obj, key) {
  return obj && typeof obj === 'object' && key in obj;
}
export function isString(test) {
  return typeof test === 'string' && test.length > 0;
}
export function getString(test) {
  return typeof test === 'string' ? test : '';
}
/* istanbul ignore next */
export function getHTMLElement(el) {
  return el instanceof HTMLElement ? el : null;
}
/* istanbul ignore next */
export function focusOnElement(el) {
  var _a;
  (_a = getHTMLElement(el)) === null || _a === void 0 ? void 0 : _a.focus();
}
/* istanbul ignore next */
export function getHTMLInputElement(el) {
  return el instanceof HTMLInputElement ? el : null;
}
export function IsKeyboardClick(e) {
  return e.x === 0 && e.y === 0;
}
export function IsLoading(loggedInState) {
  return loggedInState === LOADING_STATUS;
}
export function IsLoggedOut(loggedInState) {
  return loggedInState === LOGGED_OUT_USER_STATUS;
}
export function IsLoggedIn(loggedInState) {
  return !IsLoading(loggedInState) && !IsLoggedOut(loggedInState);
}
export function getUsername(loggedInState, loggedInText) {
  return loggedInState === LOGGED_IN_USER_NO_NAME_STATUS ? loggedInText : loggedInState;
}
export function getQueryString(params) {
  return Object.entries(params)
    .filter((entry) => entry[1] !== undefined)
    .map(([name, value]) => [name, isString(value) ? value : value.toString()])
    .map(([name, value]) => `${encodeURIComponent(name)}=${encodeURIComponent(value)}`)
    .join('&');
}
export function constructCacheKey(...args) {
  return args.join('---');
}
export function isDesktop(currentBreakpoint) {
  return currentBreakpoint >= breakpoint.s;
}
export function getImageSize(currentBreakpoint) {
  switch (currentBreakpoint) {
    case breakpoint.xxl:
    case breakpoint.xl:
      return 1920;
    case breakpoint.l:
      return 1360;
    case breakpoint.m:
      return 1024;
    case breakpoint.s:
      return 760;
    case breakpoint.xs:
      return 390;
    default:
      return 320;
  }
}
export function sanitizeMode(mode) {
  if (!Object.keys(NavigationMode).includes(mode)) {
    return NavigationMode.navbar;
  }
  return mode;
}
export function sanitizeTheme(theme) {
  if (!Object.keys(NavigationTheme).includes(theme)) {
    return NavigationTheme.light;
  }
  return theme;
}
export function sanitizeApp(app) {
  if (!Object.keys(Application).includes(app)) {
    return Application.default;
  }
  return app;
}
export function constructThemeClass(mode, theme) {
  const sanitizedMode = sanitizeMode(mode);
  if (sanitizedMode === NavigationMode.navbar) {
    return NavigationMode.navbar;
  }
  const sanitizedTheme = sanitizeTheme(theme);
  return `${mode}_${sanitizedTheme}`;
}
export function isPromise(value) {
  return (Boolean(value) &&
    typeof value.then === 'function' &&
    value[Symbol.toStringTag] === 'Promise');
}
export function addQueryParamsToUrl(url, params) {
  return `${url}${url.includes('?') ? '&' : '?'}${getQueryString(params)}`;
}
export function getValidContentPathSegments(rootContentItem, segments) {
  let currentContentItem = rootContentItem;
  const validSegments = [];
  for (const segment of segments) {
    currentContentItem = currentContentItem.children.find((child) => child.id === segment);
    if (currentContentItem === undefined || currentContentItem === null) {
      break;
    }
    validSegments.push(segment);
  }
  return validSegments;
}
export function getRootMenuItem(content, key) {
  if (!['vehiclePurchase', 'shop', 'experience', 'services'].includes(key) || content[key] === undefined) {
    return null;
  }
  return content[key];
}
export function buildRoutingKeyHistoryFromContentPath(segments) {
  const routingKeyHistory = [segments[0]];
  for (let i = 1; i < segments.length; i++) {
    routingKeyHistory.push(`${routingKeyHistory[i - 1]}/${segments[i]}`);
  }
  return routingKeyHistory;
}
export function isModelName(text) {
  return ['718', '911', 'Taycan', 'Macan', 'Panamera', 'Cayenne'].includes(text);
}
export function isModelFuelTypeGasoline(model) {
  const lowerCase = model.toLowerCase();
  return ['718', '911', 'macan'].includes(lowerCase);
}
export const getRightTheme = (theme, mode) => {
  if (mode === NavigationMode.transparent || mode === NavigationMode.hero) {
    return theme;
  }
  return 'light';
};
export function camelToKebapCase(camelString) {
  return camelString.replace(/([A-Z])/g, (g) => `-${g[0].toLowerCase()}`);
}
export function shallowCopySpecifiedAttributesWithDefault(sourceObject, copyObject, accessor = (object, key) => object[key]) {
  return Object.entries(copyObject).reduce((values, [key, value]) => {
    const valueFromSource = accessor(sourceObject, key);
    if (typeof valueFromSource === 'string') {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      values[key] = valueFromSource;
    }
    else {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      values[key] = value;
    }
    return values;
  }, {});
}
export const dispatchEvent = (from, eventName, { bubbles, detail, composed, cancelable }) => {
  const event = new CustomEvent(eventName, { detail, bubbles, cancelable, composed });
  const element = getHTMLElementFromRoot(from);
  element === null || element === void 0 ? void 0 : element.dispatchEvent(event);
};
//# sourceMappingURL=helper.js.map
