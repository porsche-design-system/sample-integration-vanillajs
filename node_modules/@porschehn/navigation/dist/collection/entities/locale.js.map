{"version":3,"file":"locale.js","sourceRoot":"","sources":["../../../src/entities/locale.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAElE,MAAM,CAAC,MAAM,aAAa,GAAG;EAC3B,YAAY,EAAE,cAAc;EAC5B,cAAc,EAAE,gBAAgB;EAChC,WAAW,EAAE,aAAa;EAC1B,aAAa,EAAE,eAAe;EAC9B,aAAa,EAAE,eAAe,CAAC,0DAA0D;CACjF,CAAC;AAIX,MAAM,CAAC,MAAM,eAAe,GAAG;EAC7B,EAAE,EAAE,aAAa,CAAC,YAAY;EAC9B,EAAE,EAAE,aAAa,CAAC,cAAc;EAChC,EAAE,EAAE,aAAa,CAAC,aAAa;EAC/B,EAAE,EAAE,aAAa,CAAC,aAAa;CACvB,CAAC;AAEX,MAAM,UAAU,uBAAuB,CAAC,OAAe;EACrD,OAAO,MAAM,CAAC,MAAM,CAAS,aAAa,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,SAAiB;EAC3C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;IACxB,MAAM,IAAI,SAAS,CAAC,qBAAqB,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;GACrE;EAED,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;EAC9E,IAAI,OAAO,GAAG,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;EAE5E,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE;IACrC,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;GACjC;EAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;IAC7C,MAAM,IAAI,SAAS,CAAC,kBAAkB,SAAS,SAAS,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;GACzF;EAED,OAAO;IACL,QAAQ;IACR,OAAO,EAAE,MAAM,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO;GAC/E,CAAC;AACJ,CAAC","sourcesContent":["import { hasKey, isString } from '../utility/helper';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\n\nexport const RegionLocales = {\n  ASIA_PACIFIC: 'asia-pacific', // https://www.porsche.com/pap/\n  EASTERN_EUROPE: 'eastern-europe', // https://www.porsche.com/central-eastern-europe/ru/ https://www.porsche.com/central-eastern-europe/en/\n  MIDDLE_EAST: 'middle-east', // https://www.porsche.com/middle-east/ https://www.porsche.com/middle-east/fr/\n  LATIN_AMERICA: 'latin-america', // https://www.porsche.com/latin-america-en/ https://www.porsche.com/latin-america-es/\n  INTERNATIONAL: 'international' // https://www.porsche.com/international/ -> has myporsche\n} as const;\n\nexport type RegionLocale = (typeof RegionLocales)[keyof typeof RegionLocales];\n\nexport const RegionLocaleMap = {\n  AP: RegionLocales.ASIA_PACIFIC,\n  CE: RegionLocales.EASTERN_EUROPE,\n  LL: RegionLocales.LATIN_AMERICA,\n  WW: RegionLocales.INTERNATIONAL\n} as const;\n\nexport function isCountryInOneOfRegions(country: string): boolean {\n  return Object.values<string>(RegionLocales).includes(country);\n}\n\nexport function splitLocale(localeStr: string): { language: string; country: string } {\n  if (!isString(localeStr)) {\n    throw new NaviError('empty locale passed', NaviErrorTypes.NO_INPUT);\n  }\n\n  const language = localeStr.substring(0, localeStr.indexOf('-')).toLowerCase();\n  let country = localeStr.substring(localeStr.indexOf('-') + 1).toLowerCase();\n\n  if (!isCountryInOneOfRegions(country)) {\n    country = country.toUpperCase();\n  }\n\n  if (!isString(language) || !isString(country)) {\n    throw new NaviError(`invalid locale ${localeStr} passed`, NaviErrorTypes.INVALID_INPUT);\n  }\n\n  return {\n    language,\n    country: hasKey(RegionLocaleMap, country) ? RegionLocaleMap[country] : country\n  };\n}\n"]}