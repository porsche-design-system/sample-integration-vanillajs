import { getString, isString } from "../utility/helper";
export const RoutingKeys = {
  MAIN_MENU: 'mainmenu',
  DEALER_SEARCH: 'find_a_dealer',
  MORE: 'more',
  SHOP: 'shop',
  SERIES: 'series',
  MY_PORSCHE: 'my_porsche',
  VEHICLE_PURCHASE: 'vehicle_purchase',
  EXPERIENCE: 'experience',
  SERVICES: 'services',
  MODELS: 'models'
};
export var RoutingKeyPointers;
(function (RoutingKeyPointers) {
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_ZERO"] = -1] = "LEVEL_ZERO";
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_ONE"] = 0] = "LEVEL_ONE";
  RoutingKeyPointers[RoutingKeyPointers["LEVEL_TWO"] = 1] = "LEVEL_TWO";
})(RoutingKeyPointers || (RoutingKeyPointers = {}));
export function constructRoutingKey(...args) {
  return args
    .reduce((segments, arg) => [...segments, ...getString(arg).split('/')], [])
    .filter(Boolean)
    .join('/');
}
export function findTopLevelRoutingKey(activeRoutingKey) {
  if (isString(activeRoutingKey)) {
    return Object.values(RoutingKeys).find((routingKey) => activeRoutingKey.startsWith(routingKey));
  }
}
export function getSeriesRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.SERIES, ...args);
}
export function getModelsRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.MODELS, ...args);
}
export function getDealerDetailsRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.DEALER_SEARCH, ...args);
}
export function getMyPorscheRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.MY_PORSCHE, ...args);
}
export function getVehiclePurchaseRoutingKey(...args) {
  return constructRoutingKey(RoutingKeys.VEHICLE_PURCHASE, ...args);
}
export function getLastRoutingSegment(routingKey) {
  return routingKey.split('/').slice(-1)[0];
}
export function removeLastRoutingSegment(routingKey) {
  return routingKey.split('/').slice(0, -1).join('/');
}
export function determineMainDrawerLevel(activeRoutingKey) {
  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case RoutingKeys.MAIN_MENU: {
      return 1;
    }
    case activeRoutingKey: {
      return 2;
    }
    default: {
      return activeRoutingKey.split('/').length + 1;
    }
  }
}
export function getPreviousRoutingKey(routingKey) {
  const previousRoutingKey = removeLastRoutingSegment(routingKey);
  if (!isString(previousRoutingKey)) {
    return RoutingKeys.MAIN_MENU;
  }
  return previousRoutingKey;
}
//# sourceMappingURL=routing-key.js.map
