import { hasKey, isString } from "../utility/helper";
import { NaviError, NaviErrorTypes } from "../utility/navi-error";
export const RegionLocales = {
  ASIA_PACIFIC: 'asia-pacific',
  EASTERN_EUROPE: 'eastern-europe',
  MIDDLE_EAST: 'middle-east',
  LATIN_AMERICA: 'latin-america',
  INTERNATIONAL: 'international' // https://www.porsche.com/international/ -> has myporsche
};
export const RegionLocaleMap = {
  AP: RegionLocales.ASIA_PACIFIC,
  CE: RegionLocales.EASTERN_EUROPE,
  LL: RegionLocales.LATIN_AMERICA,
  WW: RegionLocales.INTERNATIONAL
};
export function isCountryInOneOfRegions(country) {
  return Object.values(RegionLocales).includes(country);
}
export function splitLocale(localeStr) {
  if (!isString(localeStr)) {
    throw new NaviError('empty locale passed', NaviErrorTypes.NO_INPUT);
  }
  const language = localeStr.substring(0, localeStr.indexOf('-')).toLowerCase();
  let country = localeStr.substring(localeStr.indexOf('-') + 1).toLowerCase();
  if (!isCountryInOneOfRegions(country)) {
    country = country.toUpperCase();
  }
  if (!isString(language) || !isString(country)) {
    throw new NaviError(`invalid locale ${localeStr} passed`, NaviErrorTypes.INVALID_INPUT);
  }
  return {
    language,
    country: hasKey(RegionLocaleMap, country) ? RegionLocaleMap[country] : country
  };
}
//# sourceMappingURL=locale.js.map
