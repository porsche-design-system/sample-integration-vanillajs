import { navStateStore } from "../state/nav-state-store";
import { DEFAULT_UNREAD_MESSAGES_COUNT, IFRAME_ID, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS } from "../utility/constants";
import { getQueryString, getString, IsLoggedIn, isString } from "../utility/helper";
import { NaviError, NaviErrorTypes } from "../utility/navi-error";
import globalDataLayerService from "./analytics/global-data-layer-service";
import windowService from "./window-service";
import { getUserInformation } from "./user-information-service";
import { finderStateStore } from "../state/finder-state-store";
export function getUserNameFromUserData(userData) {
  let status = '';
  const firstName = getString(userData.firstName);
  const lastName = getString(userData.lastName);
  if (isString(firstName)) {
    status = firstName;
    if (isString(lastName)) {
      status += ` ${lastName}`;
    }
  }
  else {
    if (isString(lastName)) {
      status = lastName;
    }
  }
  return status;
}
export async function initializeUserData(accessToken, locale) {
  let loggedInState = LOGGED_OUT_USER_STATUS;
  let userId;
  try {
    const bffData = await getUserInformation(accessToken, locale);
    if (bffData === undefined || bffData === null) {
      throw new NaviError(`Invalid user data object extracted from user profile response`, NaviErrorTypes.NO_RESULTS);
    }
    finderStateStore.state.savedSearchesCount = bffData.savedSearches;
    finderStateStore.state.savedVehiclesCount = bffData.savedVehicles;
    navStateStore.state.unreadMessagesCount = bffData.unreadMessages;
    const userData = bffData.userData;
    loggedInState = getUserNameFromUserData(userData) || LOGGED_IN_USER_NO_NAME_STATUS;
    userId = bffData.userData.userId || '';
  }
  catch (err) {
    if (!(err instanceof NaviError) || err.type !== NaviErrorTypes.UNAUTHORIZED) {
      loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
    }
    navStateStore.state.unreadMessagesCount = DEFAULT_UNREAD_MESSAGES_COUNT;
    navStateStore.state.loggedInState = loggedInState;
    throw err;
  }
  navStateStore.state.loggedInState = loggedInState;
  globalDataLayerService.setUser(userId, IsLoggedIn(loggedInState));
}
export function initAuthIframe(config) {
  const queryString = getQueryString({
    domain: config.IDENTITY_PROVIDER_URL,
    clientId: config.IDENTITY_CLIENT_ID,
    redirect_uri: config.LOGIN_REDIRECT_URL,
    audience: config.IDENTITY_AUDIENCE,
    scope: config.IDENTITY_USER_SCOPES
  });
  windowService.removeElement(IFRAME_ID);
  windowService.createIframe(IFRAME_ID, `${config.LOGIN_REDIRECT_URL}?${queryString}`);
}
//# sourceMappingURL=user-service.js.map
