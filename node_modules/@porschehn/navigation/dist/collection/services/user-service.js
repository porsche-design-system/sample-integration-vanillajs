import { v4 as uuidv4 } from "uuid";
import { RegionLocales, splitLocale } from "../entities/locale";
import { navStateStore } from "../state/nav-state-store";
import { DEFAULT_UNREAD_MESSAGES_COUNT, IFRAME_ID, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS } from "../utility/constants";
import { constructCacheKey, IsLoggedIn, getQueryString, getString, isString } from "../utility/helper";
import { NaviError, NaviErrorTypes } from "../utility/navi-error";
import globalDataLayerService from "./analytics/global-data-layer-service";
import windowService from "./window-service";
import { getUserInformation } from "./user-information-service";
import { finderStateStore } from "../state/finder-state-store";
export function getUserNameFromUserData(userData) {
  let status = '';
  const firstName = getString(userData.firstName);
  const lastName = getString(userData.lastName);
  if (isString(firstName)) {
    status = firstName;
    if (isString(lastName)) {
      status += ` ${lastName}`;
    }
  }
  else {
    if (isString(lastName)) {
      status = lastName;
    }
  }
  return status;
}
export async function getUserIdFromUserData(userData) {
  return await windowService.hashString(getString(userData.porscheId));
}
export const userDataCache = new Map();
async function getUserData(accessToken, locale, config) {
  const cacheKey = constructCacheKey(accessToken, locale, config.PROFILE_API_URL);
  const cachedUserData = userDataCache.get(cacheKey);
  if (cachedUserData !== undefined) {
    return cachedUserData;
  }
  let userProfileResponse;
  const { language, country } = splitLocale(locale);
  const init = {
    method: 'GET',
    headers: {
      'Accept-Language': `${language}_${country}`,
      'x-trace-id': uuidv4(),
      apikey: getString(config.CLIENT_ID),
      Authorization: `Bearer ${accessToken}`,
      Accept: 'application/json'
    }
  };
  const query = country !== RegionLocales.INTERNATIONAL ? `?country=${country}` : '';
  try {
    userProfileResponse = await fetch(`${getString(config.PROFILE_API_URL)}${query}`, init);
  }
  catch (err) {
    const errorMessage = `Exception occurred while fetching user info: ${JSON.stringify(err.message)}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  if (userProfileResponse.status === 401) {
    throw new NaviError('AccessToken has expired', NaviErrorTypes.UNAUTHORIZED);
  }
  if (!userProfileResponse.ok) {
    const errorMessage = `Error occurred: ${userProfileResponse.status} ${userProfileResponse.statusText}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  let userData;
  try {
    userData = await userProfileResponse.json();
  }
  catch (err) {
    throw new NaviError(`Could not extract json from user profile response: ${err}`, NaviErrorTypes.GENERAL);
  }
  if (typeof userData !== 'object' || userData === null) {
    throw new NaviError('Invalid user data object extracted from user profile response', NaviErrorTypes.NO_RESULTS);
  }
  userDataCache.set(cacheKey, userData);
  return userData;
}
export async function initializeUserData(accessToken, locale, config) {
  let loggedInState = LOGGED_OUT_USER_STATUS;
  let userId;
  try {
    const userData = await getUserData(accessToken, locale, config);
    loggedInState = getUserNameFromUserData(userData) || LOGGED_IN_USER_NO_NAME_STATUS;
    userId = await getUserIdFromUserData(userData);
  }
  catch (err) {
    if (!(err instanceof NaviError) || err.type !== NaviErrorTypes.UNAUTHORIZED) {
      loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
    }
    navStateStore.state.unreadMessagesCount = DEFAULT_UNREAD_MESSAGES_COUNT;
    navStateStore.state.loggedInState = loggedInState;
    throw err;
  }
  navStateStore.state.loggedInState = loggedInState;
  globalDataLayerService.setUser(userId, IsLoggedIn(loggedInState));
  const { savedSearches, savedVehicles, unreadMessages } = await getUserInformation(accessToken, locale);
  finderStateStore.state.savedSearchesCount = savedSearches;
  finderStateStore.state.savedVehiclesCount = savedVehicles;
  navStateStore.state.unreadMessagesCount = unreadMessages;
}
export function initAuthIframe(config) {
  const queryString = getQueryString({
    domain: config.IDENTITY_PROVIDER_URL,
    clientId: config.IDENTITY_CLIENT_ID,
    redirect_uri: config.LOGIN_REDIRECT_URL,
    audience: config.IDENTITY_AUDIENCE
  });
  windowService.removeElement(IFRAME_ID);
  windowService.createIframe(IFRAME_ID, `${config.LOGIN_REDIRECT_URL}?${queryString}`);
}
//# sourceMappingURL=user-service.js.map
