{"version":3,"file":"menu-items-service.spec.js","sourceRoot":"","sources":["../../../src/services/menu-items-service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { constructRoutingKey, getDealerDetailsRoutingKey, RoutingKeys } from '../entities/routing-key';\nimport { dealerSearchResultsStore } from '../state/dealer-search-results-store';\nimport { navContentStore } from '../state/nav-content-store';\nimport { navStateStore } from '../state/nav-state-store';\nimport {\n  mockContentWithoutShopMyporsche,\n  mockCoordinates,\n  mockDealerContent,\n  mockLevel1Items,\n  mockLevel1ItemsWithMissingItems,\n  mockLocaleContent,\n  mockLocaleContentWithoutShop,\n  mockModelsContent,\n  mockMyPorscheContent,\n  mockPPNDealer,\n  mockPPNDealerOneSearchResults,\n  mockPPNDealerSearchResultsWithLocalizedAddress,\n  mockPPNDistance,\n  mockShopContent,\n  mockShopLinkContent\n} from '../test/test-data';\nimport { EventActions, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS } from '../utility/constants';\nimport {\n  isDealerSearchEnabled,\n  getLevel1Items,\n  getSideDrawerItems,\n  getBackButtonText,\n  getMenuContent,\n  getHeadlineText,\n  getSubtext\n} from './menu-items-service';\nimport abTestingService from './ab-testing/ab-testing-constructor-service';\n\ndescribe('Menu Items Service', () => {\n  const locale = 'xx-XX';\n  const loggedInState = 'Mirinda Doe.';\n  const unreadMessagesCount = 0;\n  const userConsentGiven = true;\n\n  describe('getLevel1Items', () => {\n    it('should include all level1 items for Singapore with external dealer link', () => {\n      const locale = 'en-SG';\n      navContentStore.state = {\n        ...mockLocaleContent,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        shop: { ...mockLocaleContent.shop!, link: 'https://shop.porsche.com' },\n        dealer: { ...mockDealerContent }\n      };\n      navContentStore.state.shop?.availableLocales.push(locale);\n\n      const expectedLevel1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      expect(expectedLevel1Items).toEqual(mockLevel1Items);\n    });\n\n    it('should include all level1 items for GB', () => {\n      const locale = 'en-GB';\n      navContentStore.state = {\n        ...mockLocaleContent,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        shop: { ...mockLocaleContent.shop!, link: 'https://shop.porsche.com' },\n        dealer: { ...mockDealerContent }\n      };\n      navContentStore.state.shop?.availableLocales.push(locale);\n\n      const expectedLevel1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      mockLevel1Items[5].link = undefined;\n      mockLevel1Items[5].iconRight = 'arrow-head-right';\n      expect(expectedLevel1Items).toEqual(mockLevel1Items);\n    });\n\n    it('should include all level1 items except of shop, new dealer search and my porsche', () => {\n      navContentStore.state = mockContentWithoutShopMyporsche;\n      const localeWithoutDealerSearch = 'en-CN';\n\n      const expectedLevel1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        localeWithoutDealerSearch,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      expect(expectedLevel1Items).toEqual(mockLevel1ItemsWithMissingItems);\n    });\n\n    it('should return the user name of my porsche as subtext', () => {\n      navContentStore.state = mockLocaleContent;\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      const myPorscheItem = level1Items.find((item) =>\n        item.routingKeys.find((child) => child === RoutingKeys.MY_PORSCHE)\n      );\n\n      expect(myPorscheItem?.subtext).toEqual(loggedInState);\n    });\n\n    it('should set a saved dealer as subtext and routing key', () => {\n      const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];\n      const { ppnDealer: mockPPNDealer } = mockDealer;\n      dealerSearchResultsStore.state.savedDealerCookie = { id: mockPPNDealer.id, latitude: 0, longitude: 0 };\n      dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };\n      const userConsent = true;\n\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsent\n      );\n\n      const dealerSearchItem = level1Items.find((item) =>\n        item.routingKeys.find((child) => child.startsWith(RoutingKeys.DEALER_SEARCH))\n      );\n\n      expect(dealerSearchItem?.routingKeys).toEqual([\n        RoutingKeys.DEALER_SEARCH,\n        getDealerDetailsRoutingKey(mockPPNDealer.id)\n      ]);\n      expect(dealerSearchItem?.subtext).toEqual(mockPPNDealer.nameLocalized);\n    });\n\n    it('should not set dealerid routingkey if dealer results is 1, but still set the saved dealer as subtext', () => {\n      const mockDealer = mockPPNDealerOneSearchResults[0];\n      const { ppnDealer: mockPPNDealer } = mockDealer;\n      dealerSearchResultsStore.state.savedDealerCookie = { id: mockPPNDealer.id, latitude: 0, longitude: 0 };\n      dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };\n      dealerSearchResultsStore.state.results = mockPPNDealerOneSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n\n      const userConsent = true;\n\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsent\n      );\n\n      const dealerSearchItem = level1Items.find((item) =>\n        item.routingKeys.find((child) => child.startsWith(RoutingKeys.DEALER_SEARCH))\n      );\n\n      expect(dealerSearchItem?.routingKeys).toEqual([RoutingKeys.DEALER_SEARCH]);\n      expect(dealerSearchItem?.subtext).toEqual(mockPPNDealer.nameLocalized);\n    });\n\n    it('should include icon representing an external link for the shop menu item', () => {\n      navContentStore.state.shop = mockShopLinkContent;\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      const shopMenuItemProps = level1Items.find((props) => props.elementId === RoutingKeys.SHOP);\n\n      expect(shopMenuItemProps).not.toBeUndefined();\n      expect(shopMenuItemProps?.iconRight).toEqual('none');\n      expect(shopMenuItemProps?.datalayerEventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);\n    });\n\n    it('should not include shop menu item when shop text does not exist in content', () => {\n      navContentStore.state.shop = {\n        id: '',\n        text: '',\n        link: '',\n        children: [],\n        additionalContent: [],\n        availableLocalesOnlyForShop: [],\n        availableLocales: [],\n        logoLinksToShopLocales: []\n      };\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      const shopMenuItemProps = level1Items.find((props) => props.elementId === RoutingKeys.SHOP);\n\n      expect(shopMenuItemProps).toBeUndefined();\n    });\n\n    it('should not include shop menu item when shop does not exist in content entirely', () => {\n      navContentStore.state = mockLocaleContentWithoutShop;\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      const shopMenuItemProps = level1Items.find((props) => props.elementId === RoutingKeys.SHOP);\n\n      expect(shopMenuItemProps).toBeUndefined();\n    });\n  });\n\n  describe('getSideDrawerItems', () => {\n    it('produces level 1 main menu items for the side drawer', () => {\n      navContentStore.state.models = mockModelsContent;\n\n      const sideDrawerItems = getSideDrawerItems(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        RoutingKeys.MODELS,\n        userConsentGiven\n      );\n\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      expect(sideDrawerItems).toHaveLength(level1Items.length);\n    });\n\n    it('produces a list of models when a models series is active', () => {\n      navContentStore.state.models = mockModelsContent;\n\n      const sideDrawerItems = getSideDrawerItems(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        constructRoutingKey(RoutingKeys.MODELS, mockModelsContent.series[0].id),\n        userConsentGiven\n      );\n\n      expect(sideDrawerItems).toHaveLength(navContentStore.state.models.series.length);\n    });\n\n    it('produces a list of menu items when a shop route is active', () => {\n      navContentStore.state.shop = mockShopContent;\n\n      const sideDrawerItems = getSideDrawerItems(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        constructRoutingKey(RoutingKeys.SHOP, mockShopContent.children[0].id),\n        userConsentGiven\n      );\n\n      expect(sideDrawerItems).toHaveLength(navContentStore.state.shop.children.length);\n    });\n\n    it('produces a list of menu items when a deep shop route is active', () => {\n      navContentStore.state.shop = mockShopContent;\n\n      const sideDrawerItems = getSideDrawerItems(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        constructRoutingKey(\n          RoutingKeys.SHOP,\n          navContentStore.state.shop.children[0].id,\n          navContentStore.state.shop.children[0].children[0].id\n        ),\n        userConsentGiven\n      );\n\n      expect(sideDrawerItems).toHaveLength(navContentStore.state.shop.children[0].children.length);\n    });\n\n    it('returns an empty array if child of a menu drawer is not found', () => {\n      navContentStore.state.shop = mockShopContent;\n\n      const sideDrawerItems = getSideDrawerItems(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        constructRoutingKey(RoutingKeys.SHOP, 'invalid-key'),\n        userConsentGiven\n      );\n\n      expect(sideDrawerItems).toHaveLength(navContentStore.state.shop.children.length);\n    });\n\n    it('returns level1 menu if unrecognised routingKey is passed', () => {\n      navContentStore.state.shop = mockShopContent;\n\n      const sideDrawerItems = getSideDrawerItems(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        RoutingKeys.MY_PORSCHE,\n        userConsentGiven\n      );\n\n      const level1Items = getLevel1Items(\n        navContentStore.state,\n        dealerSearchResultsStore.state,\n        locale,\n        loggedInState,\n        unreadMessagesCount,\n        userConsentGiven\n      );\n\n      expect(sideDrawerItems).toEqual(level1Items);\n    });\n  });\n\n  describe('isDealerSearchEnabled', () => {\n    it('enables dealer search if marketing cookie consent is given', () => {\n      navStateStore.state.userConsent = true;\n      expect(isDealerSearchEnabled('en-GB', true)).toBeTruthy();\n    });\n\n    it('enables dealer search if invalid locale is passed', () => {\n      expect(isDealerSearchEnabled('broken locale', true)).toBeTruthy();\n    });\n\n    it('does not enable dealer search if navigation is open in China', () => {\n      expect(isDealerSearchEnabled('en-CN', true)).toBeFalsy();\n    });\n\n    it('does not enable dealer search if navigation is open in en-asia-pacific', () => {\n      expect(isDealerSearchEnabled('en-asia-pacific', true)).toBeFalsy();\n    });\n\n    it('does not enable dealer search if consent is not given', () => {\n      expect(isDealerSearchEnabled('en-GB', false)).toBeFalsy();\n    });\n  });\n\n  describe('getBackButtonText', () => {\n    navContentStore.state = mockLocaleContent;\n\n    it('return correct back button text for models', () => {\n      const backButtonText: string = getBackButtonText(navContentStore.state, 'models');\n\n      expect(backButtonText).toEqual('Models');\n    });\n\n    it('return correct back button text for dealer search', () => {\n      const backButtonText: string = getBackButtonText(navContentStore.state, 'find_a_dealer');\n\n      expect(backButtonText).toEqual('Back to search');\n    });\n\n    it('return correct back button text for shop', () => {\n      const backButtonText: string = getBackButtonText(navContentStore.state, 'shop');\n\n      expect(backButtonText).toEqual('Shop');\n    });\n\n    it('return correct back button text for vehicle purchase', () => {\n      const backButtonText: string = getBackButtonText(navContentStore.state, 'vehicle_purchase');\n\n      expect(backButtonText).toEqual('Vehicle Purchase');\n    });\n\n    it('return correct back button text for experience', () => {\n      const backButtonText: string = getBackButtonText(navContentStore.state, 'experience');\n\n      expect(backButtonText).toEqual('Experience');\n    });\n\n    it('return empty string when there is invalid routing key', () => {\n      const backButtonText: string = getBackButtonText(navContentStore.state, 'invalid routing key');\n\n      expect(backButtonText).toEqual('');\n    });\n\n    it('return empty back button text for dealer search if numberOfDealers is 1', () => {\n      navContentStore.state.dealer.numberOfDealers = 1;\n      const backButtonText: string = getBackButtonText(navContentStore.state, 'find_a_dealer');\n\n      expect(backButtonText).toEqual('');\n    });\n  });\n\n  describe('getMenuContent', () => {\n    navContentStore.state = mockLocaleContent;\n    navContentStore.state.shop = mockShopContent;\n    it('return correct content for vehicle purchase', () => {\n      const menuContent = getMenuContent(navContentStore.state, 'vehicle_purchase', 'vehicle_purchase');\n\n      expect(menuContent).toEqual(mockLocaleContent.vehiclePurchase);\n    });\n\n    it('return correct content for experience', () => {\n      const menuContent = getMenuContent(navContentStore.state, 'experience', 'experience');\n\n      expect(menuContent).toEqual(mockLocaleContent.experience);\n    });\n\n    it('return correct content for shop', () => {\n      navContentStore.state = mockLocaleContent;\n      navContentStore.state.shop = mockShopContent;\n      const menuContent = getMenuContent(navContentStore.state, 'shop', 'shop');\n\n      expect(menuContent).toEqual(mockLocaleContent.shop);\n    });\n\n    it('return correct content for services', () => {\n      const menuContent = getMenuContent(navContentStore.state, 'services', 'services');\n\n      expect(menuContent).toEqual(mockLocaleContent.services);\n    });\n\n    it('return undefined for routing key that does not exist', () => {\n      const menuContent = getMenuContent(navContentStore.state, 'routing key', 'routing key');\n\n      expect(menuContent).toEqual(null);\n    });\n\n    it('return null when active routing key and top level routing key differ', () => {\n      const menuContent = getMenuContent(navContentStore.state, 'experience', 'shop');\n\n      expect(menuContent).toEqual(null);\n    });\n\n    describe('getMenuContent AB testing', () => {\n      it('return correct content for vehicle purchase', () => {\n        navContentStore.state = JSON.parse(JSON.stringify(mockLocaleContent));\n        navContentStore.state.vehiclePurchase.experienceName = 'experiment1';\n        const abTestingSpy = jest.spyOn(abTestingService(), 'executeContentChange').mockReturnValue([]);\n        const menuContent = getMenuContent({ ...navContentStore.state }, 'vehicle_purchase', 'vehicle_purchase');\n        expect(menuContent?.children).toEqual([]);\n        expect(abTestingSpy).toHaveBeenCalledTimes(1);\n      });\n    });\n  });\n\n  describe('getHeadlineText', () => {\n    navContentStore.state.shop = mockShopContent;\n    it('return correct headline for shop subitem', () => {\n      const headlineText = getHeadlineText(navContentStore.state, 'mainmenu.services.accessories', 'shop');\n      expect(headlineText).toEqual('Accessories, Services & Fashion');\n    });\n    it('return correct headline for shop subitem', () => {\n      const headlineText = getHeadlineText(navContentStore.state, 'mainmenu.shops', 'shop');\n      expect(headlineText).toEqual('Shop');\n    });\n    it('returns nothing if the topRoutingKey is not available or invalid', () => {\n      const headlineText = getHeadlineText(navContentStore.state, 'menu', 'menu');\n      expect(headlineText).toEqual('');\n    });\n    it('returns nothing if the RoutingKey is models', () => {\n      const headlineText = getHeadlineText(navContentStore.state, 'models', 'models');\n      expect(headlineText).toEqual('Models');\n    });\n    it('returns series name if the RoutingKey is models.', () => {\n      const headlineText = getHeadlineText(navContentStore.state, 'mainmenu.718', 'models');\n      expect(headlineText).toEqual('mainmenu.718');\n    });\n  });\n\n  describe('getSubtext', () => {\n    beforeEach(() => {\n      navContentStore.state.myPorsche = mockMyPorscheContent;\n      navStateStore.state.loggedInState = 'Mirinda Doe';\n    });\n\n    it('return empty string if not my_porsche', () => {\n      const headlineSubtext = getSubtext('shop');\n      expect(headlineSubtext).toEqual('');\n    });\n\n    it('return logged in user name if on my_porsche', () => {\n      const headlineSubtext = getSubtext('my_porsche');\n      expect(headlineSubtext).toEqual('Mirinda Doe');\n    });\n\n    it('return empty string if on my_porsche but logged out', () => {\n      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;\n\n      const headlineSubtext = getSubtext('my_porsche');\n      expect(headlineSubtext).toEqual('');\n    });\n\n    it('return logged in if on my_porsche and logged in', () => {\n      navStateStore.state.loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;\n\n      const headlineSubtext = getSubtext('my_porsche');\n      expect(headlineSubtext).toEqual('Logged in');\n    });\n\n    it('should return dealer search name', () => {\n      const dodgeyMockDealer = {\n        ppnDealer: mockPPNDealer,\n        distance: mockPPNDistance\n      };\n\n      dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };\n      dealerSearchResultsStore.state.savedDealerCookie = { id: mockPPNDealer.id, ...mockCoordinates };\n\n      const headlineSubtext = getSubtext('find_a_dealer');\n      expect(headlineSubtext).toEqual('localized Porsche Zentrum Berlin');\n    });\n\n    it('should return fuel types if in models', () => {\n      const headlineSubtext = getSubtext('models', 'mainmenu.panamera');\n\n      expect(headlineSubtext).toEqual('Gasoline | Hybrid');\n    });\n\n    it('should return no fuel types if no active routing key is provided for models', () => {\n      const headlineSubtext = getSubtext('models');\n\n      expect(headlineSubtext).toEqual('');\n    });\n\n    it('should return empty if no topLevelRoutingKey is provided', () => {\n      navStateStore.state.loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;\n\n      const headlineSubtext = getSubtext();\n      expect(headlineSubtext).toEqual('');\n    });\n  });\n});\n"]}