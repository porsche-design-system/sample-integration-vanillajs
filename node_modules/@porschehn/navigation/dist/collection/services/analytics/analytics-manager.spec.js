import { mockSeriesContent } from "../../test/test-data";
import analyticsManager from "./analytics-manager";
import { routerStore } from "../../state/router-store";
import { DEALER_SEARCH_ELEMENT_TYPE, DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER } from "../../utility/constants";
describe('analytics manager', () => {
  describe('calculateDisplayElementId', () => {
    describe('double drawer', () => {
      beforeEach(() => {
        analyticsManager.setDrawerType('doubleDrawer');
        routerStore.dispose();
      });
      it('should return correct displayElementId for models', () => {
        routerStore.state.routingKeyHistory = ['mainmenu', 'models'];
        routerStore.state.routingKeyPointer = 1;
        const displayElementId = analyticsManager.calculateDisplayElementId();
        expect(displayElementId).toEqual('level1-mainmenu_level2-models');
      });
      it('should return correct displayElementId for 911', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('models/mainmenu.911');
        expect(displayElementId).toEqual('level1-mainmenu_level2-models');
      });
      it('should return correct displayElementId for selected dealer', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('find_a_dealer/abcde-1234');
        expect(displayElementId).toEqual('level1-mainmenu_level2-find_a_dealer');
      });
      it('should return correct displayElementId if activeRoutingKey is empty string', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('');
        expect(displayElementId).toEqual('level0');
      });
      it('should return correct displayElementId for dealer results loaded event', () => {
        const displayElementId = analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER);
        expect(displayElementId).toEqual(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER);
      });
    });
    describe('single drawer', () => {
      beforeEach(() => {
        analyticsManager.setDrawerType('singleDrawer');
      });
      it('should return correct displayElementId for mainmenu', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('mainmenu');
        expect(displayElementId).toEqual('level1-mainmenu');
      });
      it('should return correct displayElementId for models', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('models');
        expect(displayElementId).toEqual('level1-mainmenu');
      });
      it('should return correct displayElementId for 911', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('models/mainmenu.911');
        expect(displayElementId).toEqual('level2-models');
      });
      it('should return correct displayElementId for selected dealer', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('find_a_dealer/abcde-1234');
        expect(displayElementId).toEqual('level2-find_a_dealer');
      });
      it('should return correct displayElementId if activeRoutingKey is empty string', () => {
        const displayElementId = analyticsManager.calculateDisplayElementId('');
        expect(displayElementId).toEqual('level0');
      });
      // it('should return correct displayElementId for dealer results loaded event', () => {
      //   const displayElementId = analyticsManager.getDealerResultsLoadDisplayElementId('');
      //
      //   expect(displayElementId).toEqual('level0');
      // });
    });
  });
  describe('calculateDisplayElementType', () => {
    describe('double drawer', () => {
      beforeEach(() => {
        analyticsManager.setDrawerType('doubleDrawer');
      });
      it('should return correct displayElementType after clicking on close button in double drawer with models', () => {
        const elementType = 'close-button';
        const displayElementId = analyticsManager.calculateDisplayElementType('models', elementType);
        expect(displayElementId).toEqual(`level2_${elementType}`);
      });
      it('should return correct displayElementType after clicking on close button in double drawer with car series', () => {
        const elementType = 'close-button';
        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);
        expect(displayElementId).toEqual(`level3_${elementType}`);
      });
      it('should return correct displayElementType after clicking on menu item in double drawer with car series', () => {
        const elementType = 'menu-item';
        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);
        expect(displayElementId).toEqual(`level3_${elementType}`);
      });
      it('should return correct displayElementType activeRoutingKey is empty string', () => {
        const elementType = 'menu-item';
        const displayElementId = analyticsManager.calculateDisplayElementType('', elementType);
        expect(displayElementId).toEqual(`level2_${elementType}`);
      });
      it('should return correct displayElementType for dealer results loaded event', () => {
        const displayElementType = analyticsManager.getDealerResultsLoadDisplayElementType();
        expect(displayElementType).toEqual(DEALER_SEARCH_ELEMENT_TYPE);
      });
    });
    describe('single drawer', () => {
      beforeEach(() => {
        analyticsManager.setDrawerType('singleDrawer');
      });
      it('should return correct displayElementType after clicking on close button in single drawer with mainmenu', () => {
        const elementType = 'close-button';
        const displayElementId = analyticsManager.calculateDisplayElementType('mainmenu', elementType);
        expect(displayElementId).toEqual(`level1_${elementType}`);
      });
      it('should return correct displayElementType after clicking on close button in single drawer with models', () => {
        const elementType = 'close-button';
        const displayElementId = analyticsManager.calculateDisplayElementType('models', elementType);
        expect(displayElementId).toEqual(`level2_${elementType}`);
      });
      it('should return correct displayElementType after clicking on close button in single drawer with car series', () => {
        const elementType = 'close-button';
        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);
        expect(displayElementId).toEqual(`level3_${elementType}`);
      });
      it('should return correct displayElementType after clicking on side drawer item in double drawer with car series', () => {
        const elementType = 'side-drawer-item';
        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);
        expect(displayElementId).toEqual(`level3_${elementType}`);
      });
      it('should return correct displayElementType if activeRoutingKey is empty', () => {
        const elementType = 'side-drawer-item';
        const displayElementId = analyticsManager.calculateDisplayElementType('', elementType);
        expect(displayElementId).toEqual(`level1_${elementType}`);
      });
      it('should return correct displayElementType for dealer results loaded event', () => {
        const displayElementType = analyticsManager.getDealerResultsLoadDisplayElementType();
        expect(displayElementType).toEqual('level1_dealer-search-form');
      });
    });
  });
  describe('getModelName', () => {
    it('should return model name if full url in body type content is provided', () => {
      const modelName = analyticsManager.getModelName(mockSeriesContent.bodyTypes[2]);
      expect(modelName).toEqual('718 cayman gt4');
    });
    it('should return empty string if no url is in body type content', () => {
      const bodyTypeWithMissingUrl = {
        id: 'mainmenu.718.caymangt4rs.models',
        description: '',
        name: 'Cayman GT4 RS',
        image: '718-cayman-gt4-rs',
        link: ''
      };
      const modelName = analyticsManager.getModelName(bodyTypeWithMissingUrl);
      expect(modelName).toEqual('');
    });
  });
});
//# sourceMappingURL=analytics-manager.spec.js.map
