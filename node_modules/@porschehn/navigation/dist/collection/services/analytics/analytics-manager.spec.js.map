{"version":3,"file":"analytics-manager.spec.js","sourceRoot":"","sources":["../../../../src/services/analytics/analytics-manager.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { BodyType } from '../../entities/content';\nimport { mockSeriesContent } from '../../test/test-data';\nimport analyticsManager from './analytics-manager';\nimport { routerStore } from '../../state/router-store';\nimport {\n  DEALER_SEARCH_ELEMENT_TYPE,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n} from '../../utility/constants';\n\ndescribe('analytics manager', () => {\n  describe('calculateDisplayElementId', () => {\n    describe('double drawer', () => {\n      beforeEach(() => {\n        analyticsManager.setDrawerType('doubleDrawer');\n        routerStore.dispose();\n      });\n\n      it('should return correct displayElementId for models', () => {\n        routerStore.state.routingKeyHistory = ['mainmenu', 'models'];\n        routerStore.state.routingKeyPointer = 1;\n        const displayElementId = analyticsManager.calculateDisplayElementId();\n\n        expect(displayElementId).toEqual('level1-mainmenu_level2-models');\n      });\n\n      it('should return correct displayElementId for 911', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('models/mainmenu.911');\n\n        expect(displayElementId).toEqual('level1-mainmenu_level2-models');\n      });\n\n      it('should return correct displayElementId for selected dealer', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('find_a_dealer/abcde-1234');\n\n        expect(displayElementId).toEqual('level1-mainmenu_level2-find_a_dealer');\n      });\n\n      it('should return correct displayElementId if activeRoutingKey is empty string', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('');\n\n        expect(displayElementId).toEqual('level0');\n      });\n\n      it('should return correct displayElementId for dealer results loaded event', () => {\n        const displayElementId = analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        );\n\n        expect(displayElementId).toEqual(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER);\n      });\n    });\n\n    describe('single drawer', () => {\n      beforeEach(() => {\n        analyticsManager.setDrawerType('singleDrawer');\n      });\n\n      it('should return correct displayElementId for mainmenu', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('mainmenu');\n\n        expect(displayElementId).toEqual('level1-mainmenu');\n      });\n\n      it('should return correct displayElementId for models', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('models');\n\n        expect(displayElementId).toEqual('level1-mainmenu');\n      });\n\n      it('should return correct displayElementId for 911', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('models/mainmenu.911');\n\n        expect(displayElementId).toEqual('level2-models');\n      });\n\n      it('should return correct displayElementId for selected dealer', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('find_a_dealer/abcde-1234');\n\n        expect(displayElementId).toEqual('level2-find_a_dealer');\n      });\n\n      it('should return correct displayElementId if activeRoutingKey is empty string', () => {\n        const displayElementId = analyticsManager.calculateDisplayElementId('');\n\n        expect(displayElementId).toEqual('level0');\n      });\n\n      // it('should return correct displayElementId for dealer results loaded event', () => {\n      //   const displayElementId = analyticsManager.getDealerResultsLoadDisplayElementId('');\n      //\n      //   expect(displayElementId).toEqual('level0');\n      // });\n    });\n  });\n\n  describe('calculateDisplayElementType', () => {\n    describe('double drawer', () => {\n      beforeEach(() => {\n        analyticsManager.setDrawerType('doubleDrawer');\n      });\n\n      it('should return correct displayElementType after clicking on close button in double drawer with models', () => {\n        const elementType = 'close-button';\n        const displayElementId = analyticsManager.calculateDisplayElementType('models', elementType);\n\n        expect(displayElementId).toEqual(`level2_${elementType}`);\n      });\n\n      it('should return correct displayElementType after clicking on close button in double drawer with car series', () => {\n        const elementType = 'close-button';\n        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);\n\n        expect(displayElementId).toEqual(`level3_${elementType}`);\n      });\n\n      it('should return correct displayElementType after clicking on menu item in double drawer with car series', () => {\n        const elementType = 'menu-item';\n        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);\n\n        expect(displayElementId).toEqual(`level3_${elementType}`);\n      });\n\n      it('should return correct displayElementType activeRoutingKey is empty string', () => {\n        const elementType = 'menu-item';\n        const displayElementId = analyticsManager.calculateDisplayElementType('', elementType);\n\n        expect(displayElementId).toEqual(`level2_${elementType}`);\n      });\n\n      it('should return correct displayElementType for dealer results loaded event', () => {\n        const displayElementType = analyticsManager.getDealerResultsLoadDisplayElementType();\n\n        expect(displayElementType).toEqual(DEALER_SEARCH_ELEMENT_TYPE);\n      });\n    });\n\n    describe('single drawer', () => {\n      beforeEach(() => {\n        analyticsManager.setDrawerType('singleDrawer');\n      });\n\n      it('should return correct displayElementType after clicking on close button in single drawer with mainmenu', () => {\n        const elementType = 'close-button';\n        const displayElementId = analyticsManager.calculateDisplayElementType('mainmenu', elementType);\n\n        expect(displayElementId).toEqual(`level1_${elementType}`);\n      });\n\n      it('should return correct displayElementType after clicking on close button in single drawer with models', () => {\n        const elementType = 'close-button';\n        const displayElementId = analyticsManager.calculateDisplayElementType('models', elementType);\n\n        expect(displayElementId).toEqual(`level2_${elementType}`);\n      });\n\n      it('should return correct displayElementType after clicking on close button in single drawer with car series', () => {\n        const elementType = 'close-button';\n        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);\n\n        expect(displayElementId).toEqual(`level3_${elementType}`);\n      });\n\n      it('should return correct displayElementType after clicking on side drawer item in double drawer with car series', () => {\n        const elementType = 'side-drawer-item';\n        const displayElementId = analyticsManager.calculateDisplayElementType('models/mainmenu.911', elementType);\n\n        expect(displayElementId).toEqual(`level3_${elementType}`);\n      });\n\n      it('should return correct displayElementType if activeRoutingKey is empty', () => {\n        const elementType = 'side-drawer-item';\n        const displayElementId = analyticsManager.calculateDisplayElementType('', elementType);\n\n        expect(displayElementId).toEqual(`level1_${elementType}`);\n      });\n\n      it('should return correct displayElementType for dealer results loaded event', () => {\n        const displayElementType = analyticsManager.getDealerResultsLoadDisplayElementType();\n\n        expect(displayElementType).toEqual('level1_dealer-search-form');\n      });\n    });\n  });\n\n  describe('getModelName', () => {\n    it('should return model name if full url in body type content is provided', () => {\n      const modelName = analyticsManager.getModelName(mockSeriesContent.bodyTypes[2]);\n\n      expect(modelName).toEqual('718 cayman gt4');\n    });\n\n    it('should return empty string if no url is in body type content', () => {\n      const bodyTypeWithMissingUrl: BodyType = {\n        id: 'mainmenu.718.caymangt4rs.models',\n        description: '',\n        name: 'Cayman GT4 RS',\n        image: '718-cayman-gt4-rs',\n        link: ''\n      };\n\n      const modelName = analyticsManager.getModelName(bodyTypeWithMissingUrl);\n      expect(modelName).toEqual('');\n    });\n  });\n});\n"]}