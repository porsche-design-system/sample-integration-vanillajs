{"version":3,"file":"dealer-service.spec.js","sourceRoot":"","sources":["../../../src/services/dealer-service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Environments } from '../entities/environment';\nimport {\n  mockCoordinates,\n  mockCoordinatesWithInvalidJson,\n  mockDealerSearchRegionResponse,\n  mockFailFetchCoordinates,\n  mockInvalidCoordinates,\n  mockInvalidCountryCode,\n  mockInvalidResponseCoordinates,\n  mockPPNDealerSearchResultsWithLocalizedAddress\n} from '../test/test-data';\nimport { getConfig } from '../utility/helper';\nimport * as dealerService from './dealer-service';\n\ndescribe('dealer service', () => {\n  describe('get multiple dealers', () => {\n    it('should return dealers', async () => {\n      const result = await dealerService.getPPNDealers(\n        Environments.TEST,\n        getConfig(Environments.TEST).DEALER_API_URL,\n        mockCoordinates,\n        'DE'\n      );\n\n      expect(result.length).toEqual(mockPPNDealerSearchResultsWithLocalizedAddress.length);\n      expect(result[0]).toEqual(mockPPNDealerSearchResultsWithLocalizedAddress[0]);\n    });\n\n    it('should throw general error when fetch fails', async () => {\n      await expect(\n        dealerService.getPPNDealers(\n          Environments.TEST,\n          getConfig(Environments.TEST).DEALER_API_URL,\n          mockFailFetchCoordinates,\n          'DE'\n        )\n      ).rejects.toThrowError('Unable to fetch dealers');\n    });\n\n    it('should throw invalid input error when response status 400', async () => {\n      await expect(\n        dealerService.getPPNDealers(\n          Environments.TEST,\n          getConfig(Environments.TEST).DEALER_API_URL,\n          mockInvalidCoordinates,\n          'DE'\n        )\n      ).rejects.toThrowError('dealerService.getPPNDealers failed with invalid coordinates');\n    });\n\n    it('should throw no results error when response status 404', async () => {\n      await expect(\n        dealerService.getPPNDealers(\n          Environments.TEST,\n          getConfig(Environments.TEST).DEALER_API_URL,\n          mockCoordinates,\n          mockInvalidCountryCode\n        )\n      ).rejects.toThrowError(\n        'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results'\n      );\n    });\n\n    it('should throw general error when response status is not 200', async () => {\n      await expect(\n        dealerService.getPPNDealers(\n          Environments.TEST,\n          getConfig(Environments.TEST).DEALER_API_URL,\n          mockInvalidResponseCoordinates,\n          'DE'\n        )\n      ).rejects.toThrowError('dealerService.getPPNDealers failed with invalid response');\n    });\n\n    it('should throw general error when response has invalid json', async () => {\n      await expect(\n        dealerService.getPPNDealers(\n          Environments.TEST,\n          getConfig(Environments.TEST).DEALER_API_URL,\n          mockCoordinatesWithInvalidJson,\n          'DE'\n        )\n      ).rejects.toThrowError('dealerService.getPPNDealers could not parse response into json format');\n    });\n  });\n\n  describe('get single dealer', () => {\n    it('should return single dealer', async () => {\n      const dealerId = mockPPNDealerSearchResultsWithLocalizedAddress[2].ppnDealer.id;\n      const dealerCoordinates = mockPPNDealerSearchResultsWithLocalizedAddress[2].ppnDealer.coordinates;\n      const result = await dealerService.getPPNDealer(\n        Environments.TEST,\n        getConfig(Environments.TEST).DEALER_API_URL,\n        dealerId,\n        dealerCoordinates,\n        'DE'\n      );\n\n      expect(result).not.toBeNull();\n      expect(result).toEqual(mockPPNDealerSearchResultsWithLocalizedAddress[2]);\n    });\n\n    it('should throw general error when request to dealer search api fails', async () => {\n      const dealerId = mockPPNDealerSearchResultsWithLocalizedAddress[2].ppnDealer.id;\n      const nonExistentCounty = 'WW';\n      await expect(\n        dealerService.getPPNDealer(\n          Environments.TEST,\n          getConfig(Environments.TEST).DEALER_API_URL,\n          dealerId,\n          mockCoordinates,\n          nonExistentCounty\n        )\n      ).rejects.toThrowError('Unable to fetch a dealer');\n    });\n\n    it('should throw NO_RESULTS error when no dealer is found based on dealerId', async () => {\n      const nonExistentDealerId = 'non-existent dealer id';\n      await expect(\n        dealerService.getPPNDealer(\n          Environments.TEST,\n          getConfig(Environments.TEST).DEALER_API_URL,\n          nonExistentDealerId,\n          mockCoordinates,\n          'DE'\n        )\n      ).rejects.toThrowError(`Requested dealer ${nonExistentDealerId} could not be found`);\n    });\n  });\n\n  describe('get dealers by region', () => {\n    it('should get dealers by country and filter for dealer id', async () => {\n      const fetchMock = jest.fn().mockResolvedValue({\n        json: () => mockDealerSearchRegionResponse\n      });\n      global.fetch = fetchMock;\n\n      await dealerService.getPPNDealerByRegion('0f7cf750-4eb5-11e0-afb2-ca213412ec80', 'CN');\n\n      expect(fetchMock).toHaveBeenCalledWith(\n        'https://resources-preview-nav.porsche.services/dealers/region/CN?env=test',\n        {\n          headers: { _values: [['Accept', '*/*']] },\n          method: 'GET'\n        }\n      );\n    });\n  });\n});\n"]}