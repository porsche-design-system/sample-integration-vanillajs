{"version":3,"file":"user-service.spec.js","sourceRoot":"","sources":["../../../src/services/user-service.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AACzD,OAAO,KAAK,WAAW,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACzD,OAAO,EAAE,6BAA6B,EAAE,6BAA6B,EAAE,MAAM,sBAAsB,CAAC;AAEpG,MAAM,EAAE,uBAAuB,EAAE,kBAAkB,EAAE,GAAG,WAAW,CAAC;AAEpE,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;EAC5B,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,EAAE,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;MACzF,MAAM,cAAc,mCACf,oBAAoB,KACvB,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,SAAS,GACpB,CAAC;MACF,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;MACvF,MAAM,cAAc,mCAAQ,oBAAoB,KAAE,QAAQ,EAAE,SAAS,GAAE,CAAC;MACxE,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sFAAsF,EAAE,KAAK,IAAI,EAAE;MACpG,MAAM,cAAc,qBAAQ,oBAAoB,CAAE,CAAC;MACnD,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;MACzF,MAAM,cAAc,mCAAQ,oBAAoB,KAAE,SAAS,EAAE,SAAS,GAAE,CAAC;MACzE,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;MAC3F,MAAM,cAAc,mCAAQ,oBAAoB,KAAE,QAAQ,EAAE,SAAS,GAAE,CAAC;MACxE,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;MACjF,MAAM,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;MAC/D,MAAM,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,MAAM,WAAW,GAAG,mBAAmB,CAAC;IACxC,MAAM,MAAM,GAAG,OAAO,CAAC;IAEvB,MAAM,kBAAkB,GAAG,CAAC,MAAc,EAAE,EAAE;MAC5C,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,sBAAsB,CAAC,GAAG,EAAE;QACtD,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;MAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;MAC1C,MAAM,WAAW,GAAG,qBAAqB,CAAC;MAC1C,MAAM,aAAa,GAAG,IAAI,SAAS,CACjC,gEAAgE,WAAW,GAAG,EAC9E,cAAc,CAAC,OAAO,CACvB,CAAC;MAEF,kBAAkB,CAAC,WAAW,CAAC,CAAC;MAEhC,IAAI;QACF,MAAM,kBAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;OAC/C;MAAC,OAAO,GAAG,EAAE;QACZ,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QACvF,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QACjF,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;OACpC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;MAClD,MAAM,KAAK,GAAG,IAAI,SAAS,CACzB,+DAA+D,EAC/D,cAAc,CAAC,UAAU,CAC1B,CAAC;MAEF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,qBAAqB,CAAC;QAChD,EAAE,EAAE,IAAI;QACR,MAAM,EAAE,GAAG;QACX,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI;OACX,CAAC,CAAC;MAEf,IAAI;QACF,MAAM,kBAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;OAC/C;MAAC,OAAO,GAAG,EAAE;QACZ,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QACvF,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QACjF,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;OAC5B;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;MACtE,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,gCAAgC,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;MAEtF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,qBAAqB,CAAC;QAChD,EAAE,EAAE,IAAI;QACR,MAAM,EAAE,GAAG;QACX,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;OACjB,CAAC,CAAC;MAE1B,IAAI;QACF,MAAM,kBAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;OAC/C;MAAC,OAAO,GAAG,EAAE;QACZ,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QACvF,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QACjF,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;OAC5B;IACH,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { firstUserProfileData } from '../test/test-data';\nimport * as userService from './user-service';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport { navStateStore } from '../state/nav-state-store';\nimport { DEFAULT_UNREAD_MESSAGES_COUNT, LOGGED_IN_USER_NO_NAME_STATUS } from '../utility/constants';\n\nconst { getUserNameFromUserData, initializeUserData } = userService;\n\ndescribe('User Service', () => {\n  describe('getUserNameFromUserData', () => {\n    it('should return default value if no name parameters are present in userData', async () => {\n      const userDataNoName = {\n        ...firstUserProfileData,\n        firstName: undefined,\n        lastName: undefined\n      };\n      expect(getUserNameFromUserData(userDataNoName)).toBe('');\n    });\n\n    it('should return name if only firstName parameters are present in userData', async () => {\n      const userDataNoName = { ...firstUserProfileData, lastName: undefined };\n      expect(getUserNameFromUserData(userDataNoName)).toBe('Mirinda');\n    });\n\n    it('should return name if only firstName and lastName parameters are present in userData', async () => {\n      const userDataNoName = { ...firstUserProfileData };\n      expect(getUserNameFromUserData(userDataNoName)).toBe('Mirinda Doe');\n    });\n\n    it('should return last name if only lastName parameter is present in userData', async () => {\n      const userDataNoName = { ...firstUserProfileData, firstName: undefined };\n      expect(getUserNameFromUserData(userDataNoName)).toBe('Doe');\n    });\n\n    it('should return first name if only firstName parameter is present in userData', async () => {\n      const userDataNoName = { ...firstUserProfileData, lastName: undefined };\n      expect(getUserNameFromUserData(userDataNoName)).toBe('Mirinda');\n    });\n\n    it('should return name if all name parameters are present in userData', async () => {\n      expect(getUserNameFromUserData(firstUserProfileData)).toBe('Mirinda Doe');\n    });\n\n    it('should return empty string empty profile passed', async () => {\n      expect(getUserNameFromUserData({})).toBe('');\n    });\n  });\n\n  describe('initialize user data', () => {\n    const accessToken = 'fake-access-token';\n    const locale = 'en-US';\n\n    const throwOnMockedFetch = (reason: string) => {\n      jest.spyOn(global, 'fetch').mockImplementationOnce(() => {\n        throw new Error(reason);\n      });\n    };\n\n    it('should throw general error', async () => {\n      const errorReason = 'Error fetching user';\n      const expectedError = new NaviError(\n        `Get User information request failed in Frontend with error: \"${errorReason}\"`,\n        NaviErrorTypes.GENERAL\n      );\n\n      throwOnMockedFetch(errorReason);\n\n      try {\n        await initializeUserData(accessToken, locale);\n      } catch (err) {\n        expect(navStateStore.state.unreadMessagesCount).toEqual(DEFAULT_UNREAD_MESSAGES_COUNT);\n        expect(navStateStore.state.loggedInState).toEqual(LOGGED_IN_USER_NO_NAME_STATUS);\n        expect(err).toEqual(expectedError);\n      }\n    });\n\n    it('should throw error if user is null', async () => {\n      const error = new NaviError(\n        'Invalid user data object extracted from user profile response',\n        NaviErrorTypes.NO_RESULTS\n      );\n\n      jest.spyOn(global, 'fetch').mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => null\n      } as Response);\n\n      try {\n        await initializeUserData(accessToken, locale);\n      } catch (err) {\n        expect(navStateStore.state.unreadMessagesCount).toEqual(DEFAULT_UNREAD_MESSAGES_COUNT);\n        expect(navStateStore.state.loggedInState).toEqual(LOGGED_IN_USER_NO_NAME_STATUS);\n        expect(err).toEqual(error);\n      }\n    });\n\n    it('should throw error if results returns a malformed json', async () => {\n      const error = new NaviError('Error on user profile response', NaviErrorTypes.GENERAL);\n\n      jest.spyOn(global, 'fetch').mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => Promise.reject(error)\n      } as unknown as Response);\n\n      try {\n        await initializeUserData(accessToken, locale);\n      } catch (err) {\n        expect(navStateStore.state.unreadMessagesCount).toEqual(DEFAULT_UNREAD_MESSAGES_COUNT);\n        expect(navStateStore.state.loggedInState).toEqual(LOGGED_IN_USER_NO_NAME_STATUS);\n        expect(err).toEqual(error);\n      }\n    });\n  });\n});\n"]}