import { Environments } from "../entities/environment";
import { mockNewContent, mockShopContent, notFoundLocale, validLocale } from "../test/test-data";
import { getConfig } from "../utility/helper";
import { constructFlagURL, fetchContent, getFlagURL } from "./content-service";
import featureToggles from "./feature-toggles";
describe('Content Service', () => {
  describe('fetchContent', () => {
    it('should return content for locale', async () => {
      const content = await fetchContent(validLocale);
      expect(content).toEqual(mockNewContent[validLocale]);
    });
    it('should throw an error for 404 response', async () => {
      await expect(fetchContent(notFoundLocale)).rejects.toThrowError(`No content for locale ${notFoundLocale} found`);
    });
    it('should throw for non ok response', async () => {
      jest.spyOn(global, 'fetch').mockResolvedValueOnce({
        ok: false,
        status: 200
      });
      await expect(fetchContent(validLocale)).rejects.toThrowError('Could not get content for locale de-CH');
    });
    it('should return content including shop content for locale', async () => {
      jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);
      const content = await fetchContent(validLocale, 'shop');
      const expected = Object.assign(Object.assign({}, mockNewContent[validLocale]), { shop: Object.assign(Object.assign({}, mockNewContent[validLocale].shop), { children: mockShopContent.children, additionalContent: mockShopContent.additionalContent }) });
      expect(content).toEqual(expected);
    });
    it('should return content including shop content for sweden if page is on sweden context', async () => {
      jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);
      const content = await fetchContent('sv-SE', 'shop');
      const expected = Object.assign(Object.assign({}, mockNewContent['sv-SE']), { shop: Object.assign(Object.assign({}, mockNewContent['sv-SE'].shop), { children: mockShopContent.children, additionalContent: mockShopContent.additionalContent }) });
      expect(content).toEqual(expected);
    });
    it('should not return shop with content that doesnt have shop on pages other than shop', async () => {
      const content = await fetchContent('sv-SE', 'default');
      const expected = Object.assign(Object.assign({}, mockNewContent['sv-SE']), { shop: Object.assign(Object.assign({}, mockNewContent['sv-SE'].shop), { text: '' }) });
      expect(content).toEqual(expected);
    });
  });
  describe('getFlagURL', () => {
    const footerAssetsURL = getConfig(Environments.TEST).FOOTER_ASSETS_URL;
    it('should return the url of a flag if the locale is in a country that has one', async () => {
      const flagURL = await getFlagURL(footerAssetsURL, 'en-YY');
      expect(flagURL).toEqual('http://footer/assets/flags/YY.svg');
    });
    it('should return an empty string if no flag is found', async () => {
      const flagURL = await getFlagURL(footerAssetsURL, 'no-flag');
      expect(flagURL).toEqual('');
    });
    describe('constructFlagURL', () => {
      const footerAssetsURL = getConfig(Environments.TEST).FOOTER_ASSETS_URL;
      it('return the full country name for a region', () => {
        const flagURL = constructFlagURL(footerAssetsURL, 'en-middle-east');
        expect(flagURL).toEqual('http://footer/assets/flags/middle-east.svg');
      });
      it('should return only the country code for a UAE region', () => {
        const flagURL = constructFlagURL(footerAssetsURL, 'en-AE-DB');
        expect(flagURL).toEqual('http://footer/assets/flags/AE.svg');
      });
    });
  });
});
//# sourceMappingURL=content-service.spec.js.map
