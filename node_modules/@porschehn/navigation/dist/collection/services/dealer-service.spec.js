import { Environments } from "../entities/environment";
import { mockCoordinates, mockCoordinatesWithInvalidJson, mockDealerSearchRegionResponse, mockFailFetchCoordinates, mockInvalidCoordinates, mockInvalidCountryCode, mockInvalidResponseCoordinates, mockPPNDealerSearchResultsWithLocalizedAddress } from "../test/test-data";
import { getConfig } from "../utility/helper";
import * as dealerService from "./dealer-service";
describe('dealer service', () => {
  describe('get multiple dealers', () => {
    it('should return dealers', async () => {
      const result = await dealerService.getPPNDealers(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, mockCoordinates, 'DE');
      expect(result.length).toEqual(mockPPNDealerSearchResultsWithLocalizedAddress.length);
      expect(result[0]).toEqual(mockPPNDealerSearchResultsWithLocalizedAddress[0]);
    });
    it('should throw general error when fetch fails', async () => {
      await expect(dealerService.getPPNDealers(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, mockFailFetchCoordinates, 'DE')).rejects.toThrowError('Unable to fetch dealers');
    });
    it('should throw invalid input error when response status 400', async () => {
      await expect(dealerService.getPPNDealers(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, mockInvalidCoordinates, 'DE')).rejects.toThrowError('dealerService.getPPNDealers failed with invalid coordinates');
    });
    it('should throw no results error when response status 404', async () => {
      await expect(dealerService.getPPNDealers(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, mockCoordinates, mockInvalidCountryCode)).rejects.toThrowError('dealerService.getPPNDealers failed with invalid country code and therefore responded with no results');
    });
    it('should throw general error when response status is not 200', async () => {
      await expect(dealerService.getPPNDealers(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, mockInvalidResponseCoordinates, 'DE')).rejects.toThrowError('dealerService.getPPNDealers failed with invalid response');
    });
    it('should throw general error when response has invalid json', async () => {
      await expect(dealerService.getPPNDealers(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, mockCoordinatesWithInvalidJson, 'DE')).rejects.toThrowError('dealerService.getPPNDealers could not parse response into json format');
    });
  });
  describe('get single dealer', () => {
    it('should return single dealer', async () => {
      const dealerId = mockPPNDealerSearchResultsWithLocalizedAddress[2].ppnDealer.id;
      const dealerCoordinates = mockPPNDealerSearchResultsWithLocalizedAddress[2].ppnDealer.coordinates;
      const result = await dealerService.getPPNDealer(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, dealerId, dealerCoordinates, 'DE');
      expect(result).not.toBeNull();
      expect(result).toEqual(mockPPNDealerSearchResultsWithLocalizedAddress[2]);
    });
    it('should throw general error when request to dealer search api fails', async () => {
      const dealerId = mockPPNDealerSearchResultsWithLocalizedAddress[2].ppnDealer.id;
      const nonExistentCounty = 'WW';
      await expect(dealerService.getPPNDealer(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, dealerId, mockCoordinates, nonExistentCounty)).rejects.toThrowError('Unable to fetch a dealer');
    });
    it('should throw NO_RESULTS error when no dealer is found based on dealerId', async () => {
      const nonExistentDealerId = 'non-existent dealer id';
      await expect(dealerService.getPPNDealer(Environments.TEST, getConfig(Environments.TEST).DEALER_API_URL, nonExistentDealerId, mockCoordinates, 'DE')).rejects.toThrowError(`Requested dealer ${nonExistentDealerId} could not be found`);
    });
  });
  describe('get dealers by region', () => {
    it('should get dealers by country', async () => {
      const fetchMock = jest.fn().mockResolvedValue({
        json: () => mockDealerSearchRegionResponse
      });
      global.fetch = fetchMock;
      await dealerService.getPPNDealersByRegion('CN');
      expect(fetchMock).toHaveBeenCalledWith('https://resources-preview-nav.porsche.services/dealers/region/CN?env=test', {
        headers: { _values: [['Accept', '*/*']] },
        method: 'GET'
      });
    });
  });
});
//# sourceMappingURL=dealer-service.spec.js.map
