{"version":3,"file":"user-information-service.spec.js","sourceRoot":"","sources":["../../../src/services/user-information-service.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AAChE,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACzD,OAAO,EAAE,6BAA6B,EAAE,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AAE7F,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;EACxC,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;IACpD,MAAM,aAAa,GAAG,OAAO,CAAC;IAC9B,MAAM,WAAW,GAAG,MAAM,CAAC;IAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,qBAAqB,CAAC;MAChD,EAAE,EAAE,KAAK;MACT,MAAM,EAAE,GAAG;MACX,UAAU,EAAE,qBAAqB;KACtB,CAAC,CAAC;IAEf,MAAM,qBAAqB,GAAG,kBAAkB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IAE7E,MAAM,MAAM,CAAC,qBAAqB,CAAC,CAAC,OAAO,CAAC,YAAY,CACtD,qFAAqF,CACtF,CAAC;EACJ,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;IAC9C,MAAM,MAAM,GAAG,OAAO,CAAC;IACvB,MAAM,WAAW,GAAG,oBAAoB,CAAC;IAEzC,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAC9B,kBAAgC,GAAG,YAAY,CAAC;IAEjD,YAAY,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;IAEpD,MAAM,sBAAsB,GAAG,MAAM,kBAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAE7E,MAAM,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;EAC9D,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;IAC9C,MAAM,MAAM,GAAG,OAAO,CAAC;IACvB,MAAM,WAAW,GAAG,oBAAoB,CAAC;IACzC,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,yBAAyB,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;IAEpF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,qBAAqB,CAAC;MAChD,MAAM,EAAE,GAAG;KACA,CAAC,CAAC;IAEf,IAAI;MACF,MAAM,kBAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;KAC/C;IAAC,OAAO,GAAG,EAAE;MACZ,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;MACvF,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;MAC1E,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAC5B;EACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { getUserInformation } from './user-information-service';\nimport { mockUserInformation } from '../test/test-data';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport { navStateStore } from '../state/nav-state-store';\nimport { DEFAULT_UNREAD_MESSAGES_COUNT, LOGGED_OUT_USER_STATUS } from '../utility/constants';\n\ndescribe('user information service', () => {\n  it('should return error for wrong locale', async () => {\n    const invalidLocale = 'de-CN';\n    const accessToken = 'abcd';\n    jest.spyOn(global, 'fetch').mockResolvedValueOnce({\n      ok: false,\n      status: 400,\n      statusText: 'Some error occurred'\n    } as Response);\n\n    const userInformationFailed = getUserInformation(accessToken, invalidLocale);\n\n    await expect(userInformationFailed).rejects.toThrowError(\n      'Get User information request failed in Frontend with error: 400 Some error occurred'\n    );\n  });\n\n  it('should return user information', async () => {\n    const locale = 'de-DE';\n    const accessToken = 'first-access-token';\n\n    const mockUserInfo = jest.fn();\n    (getUserInformation as jest.Mock) = mockUserInfo;\n\n    mockUserInfo.mockResolvedValue(mockUserInformation);\n\n    const userInformationSuccess = await getUserInformation(accessToken, locale);\n\n    expect(userInformationSuccess).toEqual(mockUserInformation);\n  });\n\n  it('should throw unauthorized user', async () => {\n    const locale = 'de-DE';\n    const accessToken = 'first-access-token';\n    const error = new NaviError('AccessToken has expired', NaviErrorTypes.UNAUTHORIZED);\n\n    jest.spyOn(global, 'fetch').mockResolvedValueOnce({\n      status: 401\n    } as Response);\n\n    try {\n      await getUserInformation(accessToken, locale);\n    } catch (err) {\n      expect(navStateStore.state.unreadMessagesCount).toEqual(DEFAULT_UNREAD_MESSAGES_COUNT);\n      expect(navStateStore.state.loggedInState).toEqual(LOGGED_OUT_USER_STATUS);\n      expect(err).toEqual(error);\n    }\n  });\n});\n"]}