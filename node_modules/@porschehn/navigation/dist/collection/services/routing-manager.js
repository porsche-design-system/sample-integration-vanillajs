import { routerStore } from "../state/router-store";
import { constructRoutingKey, findTopLevelRoutingKey, RoutingKeyPointers, RoutingKeys } from "../entities/routing-key";
import { dispatchEvent, isDesktop } from "../utility/helper";
import windowService from "./window-service";
import { dealerSearchResultsStore } from "../state/dealer-search-results-store";
import { isPlayingSingleDrawerAnimation } from "../components/single-drawer/animations/animations-controller";
export const getCurrentRoute = () => {
  const { routingKeyHistory, routingKeyPointer } = routerStore.state;
  return routingKeyHistory[routingKeyPointer] || '';
};
export const getAnimatedRoute = () => {
  const { routingKeyHistory, animatingPointer } = routerStore.state;
  return routingKeyHistory[animatingPointer] || '';
};
export const goTo = (...routes) => {
  const newHistory = [RoutingKeys.MAIN_MENU, ...routes];
  routerStore.state.routingKeyPointer = routes.length;
  routerStore.state.routingKeyHistory = newHistory;
};
export const back = () => {
  if (!isPlayingSingleDrawerAnimation()) {
    if (findTopLevelRoutingKey(getCurrentRoute()) === RoutingKeys.DEALER_SEARCH) {
      dealerSearchResultsStore.state.savedDealerCookie = null;
    }
    routerStore.state.routingKeyPointer = routerStore.state.routingKeyPointer - 1;
  }
};
export const pop = () => {
  if (isNavigatingBackwards())
    routerStore.state.routingKeyHistory.pop();
};
export const addRoute = (newRoute) => {
  if (isDesktop(windowService.getBreakpoint())) {
    dispatchEvent('phn-router', 'mobileMenuItemClick', {
      bubbles: true,
      cancelable: false,
      detail: [constructRoutingKey(getCurrentRoute(), ...newRoute)]
    });
  }
  else {
    const newHistory = [...routerStore.state.routingKeyHistory, constructRoutingKey(getCurrentRoute(), ...newRoute)];
    routerStore.state.routingKeyPointer = newHistory.length - 1;
    routerStore.state.routingKeyHistory = newHistory;
  }
};
export const reset = () => {
  routerStore.state.routingKeyPointer = -1;
};
export const isNavigatingBackwards = () => {
  return routerStore.state.routingKeyPointer < routerStore.state.routingKeyHistory.length - 1;
};
export const isAnimating = () => {
  const { routingKeyPointer, animatingPointer } = routerStore.state;
  return routingKeyPointer !== animatingPointer;
};
//____________ANIMATIONS______________//
export const isAnimatingForward = () => {
  return routerStore.state.routingKeyPointer > routerStore.state.animatingPointer;
};
export const isAnimatingBackward = () => {
  return routerStore.state.routingKeyPointer < routerStore.state.animatingPointer;
};
export const isOpening = () => {
  return (routerStore.state.animatingPointer === RoutingKeyPointers.LEVEL_ZERO && routerStore.state.routingKeyPointer >= 0);
};
export const isOpened = () => {
  return !isClosed();
};
export const isClosed = () => {
  return (routerStore.state.routingKeyPointer === RoutingKeyPointers.LEVEL_ZERO &&
    routerStore.state.animatingPointer === RoutingKeyPointers.LEVEL_ZERO);
};
export const isClosing = () => {
  return routerStore.state.routingKeyPointer === -1 && routerStore.state.animatingPointer >= 0;
};
export const syncAnimation = () => {
  routerStore.state.animatingPointer = routerStore.state.routingKeyPointer;
};
export const showBackButton = (section) => {
  const sectionKey = routerStore.state.routingKeyHistory.indexOf(section);
  return sectionKey >= RoutingKeyPointers.LEVEL_TWO;
};
//# sourceMappingURL=routing-manager.js.map
