{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/services/logger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAe,MAAM,yBAAyB,CAAC;AACpE,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAiB,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACjF,OAAO,aAAa,MAAM,kBAAkB,CAAC;AAE7C,MAAM,CAAC,MAAM,gBAAgB,GAAG,8BAA8B,CAAC;AAQ/D,MAAM,MAAM;EAAZ;IACU,QAAG,GAAuB,IAAI,CAAC;IAC/B,YAAO,GAAG,OAAO,CAAC;IAClB,eAAU,GAAG,CAAC,CAAC;IACf,WAAM,GAAkB,IAAI,CAAC;EAqDvC,CAAC;EAnDC,IAAI,CAAC,GAAgB,EAAE,UAAkB,EAAE,MAAc;IACvD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACvB,CAAC;EAEO,GAAG,CAAC,OAAe,EAAE,KAAe,EAAE,EAAU,EAAE,OAAe,EAAE,SAAyB;IAClG,IAAI,IAAI,CAAC,GAAG,KAAK,YAAY,CAAC,IAAI,EAAE;MAClC,OAAO;KACR;IAED,IAAI;MACF,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QACzB,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,KAAK;QACZ,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,UAAU,EAAE,IAAI,CAAC,UAAU;QAC3B,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ;QACzC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ;QACzC,EAAE;QACF,SAAS,EAAE,SAAS,IAAI,EAAE;QAC1B,OAAO;OACR,CAAC,CAAC;MAEH,IAAI,IAAI,CAAC,GAAG,KAAK,YAAY,CAAC,UAAU,EAAE;QACxC,IAAI,KAAK,iCAAmB,EAAE;UAC5B,KAAK,CAAC,gBAAgB,EAAE;YACtB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,SAAS;WAChB,CAAC,CAAC;SACJ;OACF;WAAM;QACL,sCAAsC;QACtC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;OACrB;KACF;IAAC,OAAO,GAAG,EAAE;MACZ,uBAAuB;KACxB;EACH,CAAC;EAED,IAAI,CAAC,EAAU,EAAE,OAAO,GAAG,EAAE;IAC3B,IAAI,CAAC,GAAG,CAAC,sBAAsB,8BAAiB,EAAE,EAAE,OAAO,CAAC,CAAC;EAC/D,CAAC;EAED,KAAK,CAAC,EAAU,EAAE,GAAU;IAC1B,MAAM,SAAS,GAAG,GAAG,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC;IAC/E,IAAI,CAAC,GAAG,CAAC,sBAAsB,gCAAkB,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;EAC/E,CAAC;CACF;AAED,eAAe,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import { Environments, Environment } from '../entities/environment';\nimport { VERSION } from '../utility/constants';\nimport { NaviError, NaviErrorType, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\n\nexport const LOGGING_ENDPOINT = 'https://logs.nav.porsche.com';\n\nconst enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  ERROR = 'error'\n}\n\nclass Logger {\n  private env: Environment | null = null;\n  private version = VERSION;\n  private breakpoint = 0;\n  private locale: string | null = null;\n\n  init(env: Environment, breakpoint: number, locale: string) {\n    this.env = env;\n    this.breakpoint = breakpoint;\n    this.locale = locale;\n  }\n\n  private log(logName: string, level: LogLevel, id: string, message: string, errorType?: NaviErrorType) {\n    if (this.env === Environments.TEST) {\n      return;\n    }\n\n    try {\n      const log = JSON.stringify({\n        name: logName,\n        level: level,\n        env: this.env,\n        breakpoint: this.breakpoint,\n        locale: this.locale,\n        version: this.version,\n        hostname: windowService.location.hostname,\n        pathname: windowService.location.pathname,\n        id,\n        errorType: errorType || '',\n        message\n      });\n\n      if (this.env === Environments.PRODUCTION) {\n        if (level !== LogLevel.DEBUG) {\n          fetch(LOGGING_ENDPOINT, {\n            method: 'POST',\n            body: log,\n            mode: 'no-cors'\n          });\n        }\n      } else {\n        // eslint-disable-next-line no-console\n        console[level](log);\n      }\n    } catch (err) {\n      // throw the error away\n    }\n  }\n\n  info(id: string, message = '') {\n    this.log('PHN_HEADER_LOG_ENTRY', LogLevel.INFO, id, message);\n  }\n\n  error(id: string, err: Error) {\n    const errorType = err instanceof NaviError ? err.type : NaviErrorTypes.GENERAL;\n    this.log('PHN_HEADER_LOG_ENTRY', LogLevel.ERROR, id, err.message, errorType);\n  }\n}\n\nexport default new Logger();\n"]}