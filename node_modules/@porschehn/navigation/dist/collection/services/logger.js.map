{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/services/logger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AACvD,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAiB,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACjF,OAAO,aAAa,MAAM,kBAAkB,CAAC;AAC7C,uDAAuD;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AAEzD,MAAM,CAAC,MAAM,gBAAgB,GAAG,8BAA8B,CAAC;AAQ/D,MAAM,MAAM;EAAZ;IACU,YAAO,GAAG,OAAO,CAAC;IAClB,eAAU,GAAG,CAAC,CAAC;IACf,WAAM,GAAkB,IAAI,CAAC;EA6CvC,CAAC;EA3CC,IAAI,CAAC,CAAS,EAAE,MAAc;IAC5B,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,aAAa,EAAE,CAAC;IAChD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACvB,CAAC;EAEO,GAAG,CAAC,OAAe,EAAE,KAAe,EAAE,EAAU,EAAE,OAAe,EAAE,SAAyB;IAClG,MAAM,EAAE,GAAG,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC;IACpC,IAAI,GAAG,KAAK,YAAY,CAAC,IAAI,EAAE;MAC7B,OAAO;KACR;IAED,IAAI;MACF,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QACzB,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,KAAK;QACZ,GAAG,EAAE,GAAG;QACR,UAAU,EAAE,IAAI,CAAC,UAAU;QAC3B,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ;QACzC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ;QACzC,EAAE;QACF,SAAS,EAAE,SAAS,IAAI,EAAE;QAC1B,OAAO;OACR,CAAC,CAAC;MAEH,IAAI,GAAG,KAAK,YAAY,CAAC,UAAU,EAAE;QACnC,sCAAsC;QACtC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;OACrB;MACD,oCAAoC;KACrC;IAAC,OAAO,GAAG,EAAE,GAAE;EAClB,CAAC;EAED,IAAI,CAAC,EAAU,EAAE,OAAO,GAAG,EAAE;IAC3B,IAAI,CAAC,GAAG,CAAC,sBAAsB,8BAAiB,EAAE,EAAE,OAAO,CAAC,CAAC;EAC/D,CAAC;EAED,KAAK,CAAC,EAAU,EAAE,GAAU;IAC1B,MAAM,SAAS,GAAG,GAAG,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC;IAC/E,IAAI,CAAC,GAAG,CAAC,sBAAsB,gCAAkB,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC7E,mFAAmF;EACrF,CAAC;CACF;AAED,eAAe,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import { Environments } from '../entities/environment';\nimport { VERSION } from '../utility/constants';\nimport { NaviError, NaviErrorType, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\n// import { captureNaviException } from './monitoring';\nimport { navStateStore } from '../state/nav-state-store';\n\nexport const LOGGING_ENDPOINT = 'https://logs.nav.porsche.com';\n\nconst enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  ERROR = 'error'\n}\n\nclass Logger {\n  private version = VERSION;\n  private breakpoint = 0;\n  private locale: string | null = null;\n\n  init(_: number, locale: string) {\n    this.breakpoint = windowService.getBreakpoint();\n    this.locale = locale;\n  }\n\n  private log(logName: string, level: LogLevel, id: string, message: string, errorType?: NaviErrorType) {\n    const { env } = navStateStore.state;\n    if (env === Environments.TEST) {\n      return;\n    }\n\n    try {\n      const log = JSON.stringify({\n        name: logName,\n        level: level,\n        env: env,\n        breakpoint: this.breakpoint,\n        locale: this.locale,\n        version: this.version,\n        hostname: windowService.location.hostname,\n        pathname: windowService.location.pathname,\n        id,\n        errorType: errorType || '',\n        message\n      });\n\n      if (env !== Environments.PRODUCTION) {\n        // eslint-disable-next-line no-console\n        console[level](log);\n      }\n      // eslint-disable-next-line no-empty\n    } catch (err) {}\n  }\n\n  info(id: string, message = '') {\n    this.log('PHN_HEADER_LOG_ENTRY', LogLevel.INFO, id, message);\n  }\n\n  error(id: string, err: Error) {\n    const errorType = err instanceof NaviError ? err.type : NaviErrorTypes.GENERAL;\n    this.log('PHN_HEADER_LOG_ENTRY', LogLevel.ERROR, id, err.message, errorType);\n    // captureNaviException(err, { breakpoint: this.breakpoint, locale: this.locale });\n  }\n}\n\nexport default new Logger();\n"]}