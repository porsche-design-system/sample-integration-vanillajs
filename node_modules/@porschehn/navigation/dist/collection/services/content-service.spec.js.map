{"version":3,"file":"content-service.spec.js","sourceRoot":"","sources":["../../../src/services/content-service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Environments } from '../entities/environment';\nimport { mockNewContent, mockShopContent, notFoundLocale, validLocale } from '../test/test-data';\nimport { getConfig } from '../utility/helper';\nimport { constructFlagURL, fetchContent, getFlagURL } from './content-service';\nimport featureToggles from './feature-toggles';\n\ndescribe('Content Service', () => {\n  describe('fetchContent', () => {\n    it('should return content for locale', async () => {\n      const content = await fetchContent(validLocale);\n\n      expect(content).toEqual(mockNewContent[validLocale]);\n    });\n\n    it('should throw an error for 404 response', async () => {\n      await expect(fetchContent(notFoundLocale)).rejects.toThrowError(`No content for locale ${notFoundLocale} found`);\n    });\n\n    it('should throw for non ok response', async () => {\n      jest.spyOn(global, 'fetch').mockResolvedValueOnce({\n        ok: false,\n        status: 200\n      } as unknown as Response);\n\n      await expect(fetchContent(validLocale)).rejects.toThrowError('Could not get content for locale de-CH');\n    });\n\n    it('should return content including shop content for locale', async () => {\n      jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);\n      const content = await fetchContent(validLocale, 'shop');\n\n      const expected = {\n        ...mockNewContent[validLocale],\n        shop: {\n          ...mockNewContent[validLocale].shop,\n          children: mockShopContent.children,\n          additionalContent: mockShopContent.additionalContent\n        }\n      };\n\n      expect(content).toEqual(expected);\n    });\n\n    it('should return content including shop content for sweden if page is on sweden context', async () => {\n      jest.spyOn(featureToggles, 'isShopToggleActive').mockReturnValue(true);\n\n      const content = await fetchContent('sv-SE', 'shop');\n\n      const expected = {\n        ...mockNewContent['sv-SE'],\n        shop: {\n          ...mockNewContent['sv-SE'].shop,\n          children: mockShopContent.children,\n          additionalContent: mockShopContent.additionalContent\n        }\n      };\n\n      expect(content).toEqual(expected);\n    });\n\n    it('should not return shop with content that doesnt have shop on pages other than shop', async () => {\n      const content = await fetchContent('sv-SE', 'default');\n\n      const expected = {\n        ...mockNewContent['sv-SE'],\n        shop: {\n          ...mockNewContent['sv-SE'].shop,\n          text: ''\n        }\n      };\n\n      expect(content).toEqual(expected);\n    });\n  });\n\n  describe('getFlagURL', () => {\n    const footerAssetsURL = getConfig(Environments.TEST).FOOTER_ASSETS_URL;\n\n    it('should return the url of a flag if the locale is in a country that has one', async () => {\n      const flagURL = await getFlagURL(footerAssetsURL, 'en-YY');\n      expect(flagURL).toEqual('http://footer/assets/flags/YY.svg');\n    });\n\n    it('should return an empty string if no flag is found', async () => {\n      const flagURL = await getFlagURL(footerAssetsURL, 'no-flag');\n      expect(flagURL).toEqual('');\n    });\n\n    describe('constructFlagURL', () => {\n      const footerAssetsURL = getConfig(Environments.TEST).FOOTER_ASSETS_URL;\n\n      it('return the full country name for a region', () => {\n        const flagURL = constructFlagURL(footerAssetsURL, 'en-middle-east');\n        expect(flagURL).toEqual('http://footer/assets/flags/middle-east.svg');\n      });\n\n      it('should return only the country code for a UAE region', () => {\n        const flagURL = constructFlagURL(footerAssetsURL, 'en-AE-DB');\n        expect(flagURL).toEqual('http://footer/assets/flags/AE.svg');\n      });\n    });\n  });\n});\n"]}