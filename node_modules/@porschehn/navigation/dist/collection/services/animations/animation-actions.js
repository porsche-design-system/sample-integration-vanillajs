/* istanbul ignore file */
const shrinkElement = (el, progress, { to = 100 }) => {
  el.style.width = `${(1 - progress) * to}%`;
};
const growElement = (el, progress, { to = 100 }) => {
  el.style.width = `${progress * to}%`;
};
const slideOutToRightRelative = (el, progress, { from = 0, to = -100 }) => {
  el.style.right = `calc(${progress * to + from}%)`;
  el.style.position = 'relative';
};
const slideOutToLeftRelative = (el, progress, { from = 0, to = -100 }) => {
  el.style.left = `calc(${progress * to + from}%)`;
  el.style.position = 'relative';
};
const slideInFromLeftRelative = (el, progress, { from = -100, to = 0 }) => {
  el.style.left = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'relative';
};
const slideInFromRightRelative = (el, progress, { from = -100, to = 0 }) => {
  el.style.right = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'relative';
};
const slideInFromRight = (el, progress, { from = -100, to = 0 }) => {
  el.style.right = `${(1 - progress) * from + to}px`;
};
const slideInFromLeft = (el, progress, { from = -100, to = 0 }) => {
  el.style.left = `${(1 - progress) * from + to}px`;
};
const slideOutToRight = (el, progress, { from = 0, to = -100 }) => {
  el.style.right = `${progress * to + from}px`;
};
const slideOutToLeft = (el, progress, { from = 0, to = -100 }) => {
  el.style.left = `${progress * to + from}px`;
};
const slideInFromRightFixed = (el, progress, { from = -100, to = 0 }) => {
  el.style.right = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'fixed';
};
const slideOutToRightFixed = (el, progress, { from = 0, to = -100 }) => {
  el.style.right = `calc(${progress * to + from}%)`;
  el.style.position = 'fixed';
};
const slideInFromLeftFixed = (el, progress, { from = -100, to = 0 }) => {
  el.style.left = `calc(${(1 - progress) * from + to}%)`;
  el.style.position = 'fixed';
};
const slideOutToLeftFixed = (el, progress, { from = 0, to = -100 }) => {
  el.style.left = `calc(${progress * to + from}%)`;
  el.style.position = 'fixed';
};
const fadeOut = (el, progress, { from = 1, to = 0 }) => {
  el.style.opacity = `${(1 - progress) * from + progress * to}`;
};
const fadeIn = (el, progress, { from = 0, to = 1 }) => {
  el.style.opacity = `${progress * to + (progress - 1) * from}`;
};
const fadeOutBackdrop = (el, progress, { from = 1, to = 0 }) => {
  el.style.backgroundColor = `rgba(0, 0, 0, ${(1 - progress) * from + progress * to})`;
  el.style.opacity = `${1 - progress + progress * to}`;
};
const fadeInBackdrop = (el, progress, { from = 0, to = 1 }) => {
  el.style.backgroundColor = `rgba(0, 0, 0, ${progress * to + (progress - 1) * from})`;
  el.style.opacity = `${progress + (progress - 1) * from}`;
};
const AnimationsAction = {
  slideOutToLeftRelative,
  slideInFromRightRelative,
  slideInFromLeftRelative,
  slideOutToRightRelative,
  shrinkElement,
  growElement,
  slideInFromRight,
  slideInFromLeft,
  slideOutToRight,
  slideOutToLeft,
  fadeOut,
  fadeIn,
  fadeInBackdrop,
  fadeOutBackdrop,
  slideInFromRightFixed,
  slideOutToRightFixed,
  slideInFromLeftFixed,
  slideOutToLeftFixed
};
export default AnimationsAction;
//# sourceMappingURL=animation-actions.js.map
