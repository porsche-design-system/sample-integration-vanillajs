{"version":3,"file":"animation-manager.js","sourceRoot":"","sources":["../../../../src/services/animations/animation-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnimationSequencesType } from '../../utility/constants';\nimport { isPromise } from '../../utility/helper';\nimport { animationPromiseGenerator, AnimationGeneratorType, EffectType } from './animation-effects';\n\nexport type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };\nexport type AnimationStartsCallbacks = {\n  onAnimationStarts?: (() => Promise<unknown>) | (() => void);\n};\n\nexport type AnimationEndsCallbacks = {\n  onAnimationEnds?: (() => Promise<unknown>) | (() => void);\n};\n\nexport type AnimationStatusCallbacks = AnimationStartsCallbacks & AnimationEndsCallbacks;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type SequenceIdentifier = AnimationSequencesType | (string & {});\n\nexport interface NaviAnimation {\n  animation: EffectType & AnimationGeneratorType;\n  elementSelector: string;\n  onStart?: (() => Promise<unknown>) | (() => unknown);\n  onEnd?: (() => Promise<unknown>) | (() => unknown);\n}\n\nexport type SequenceStep = Array<NaviAnimation>;\n\nexport type AnimationSequence = {\n  steps: Array<SequenceStep>;\n  currentStepIndex: number;\n  running: boolean;\n  resolve?: (value: unknown) => void;\n  reject?: (reason?: unknown) => void;\n  promise?: Promise<void>;\n};\n\nconst sequences: {\n  [key in SequenceIdentifier]?: AnimationSequence | undefined;\n} = {};\nlet rootElement: HTMLElement | null = null;\n\nfunction initialize(element: HTMLElement): void {\n  rootElement = element;\n}\n\nfunction register(sequenceIdentifier: SequenceIdentifier, animationSequence: AnimationSequence): void {\n  sequences[sequenceIdentifier] = animationSequence;\n}\n\nfunction reset(): void {\n  Object.keys(sequences).forEach((key) => delete sequences[key]);\n}\n\nasync function play(sequenceIdentifier: SequenceIdentifier): Promise<unknown> {\n  const sequence = sequences[sequenceIdentifier];\n\n  if (sequence === undefined) {\n    return new Promise((_, reject) => reject(new Error(`Sequence ${sequenceIdentifier} has not been registered`)));\n  }\n\n  if (!sequence.running) {\n    sequence.promise = new Promise<void>((resolve, reject) => {\n      sequence.resolve = () => {\n        sequence.running = false;\n        resolve();\n      };\n\n      sequence.reject = (value: unknown) => {\n        sequence.running = false;\n        reject(value);\n      };\n\n      sequence.running = true;\n\n      applyCurrentAnimationSequenceStep(sequence);\n    });\n  }\n\n  return sequence.promise;\n}\n\nfunction finishAnimationSequence(sequence: AnimationSequence) {\n  sequence.currentStepIndex = 0;\n  sequence.resolve?.(null);\n  sequence.promise = undefined;\n}\n\nasync function applyCurrentAnimationSequenceStep(sequence: AnimationSequence) {\n  if (sequence.currentStepIndex >= sequence.steps.length) {\n    finishAnimationSequence(sequence);\n    return;\n  }\n\n  const sequenceStep = sequence.steps[sequence.currentStepIndex];\n\n  const promises = [];\n  for (const animation of sequenceStep) {\n    promises.push(executeAnimation(animation));\n  }\n\n  try {\n    await Promise.all(promises);\n  } catch (error) {\n    sequence.reject?.(error);\n    return;\n  }\n\n  sequence.currentStepIndex += 1;\n\n  setTimeout(() => applyCurrentAnimationSequenceStep(sequence), 0);\n}\n\nasync function executeAnimation({ onStart, onEnd, animation, elementSelector }: NaviAnimation): Promise<void> {\n  if (rootElement === null) {\n    throw new Error('No root element present');\n  }\n\n  if (onStart) {\n    const maybePromise = onStart();\n    if (isPromise<void>(maybePromise)) {\n      await maybePromise;\n    }\n  }\n\n  const animatedElements: HTMLElement[] = Array.from(rootElement.querySelectorAll(elementSelector));\n  const animationExecutors = [];\n\n  for (const element of animatedElements) {\n    const animationPromiseEffect = animationPromiseGenerator(element, animation);\n    animationExecutors.push(animationPromiseEffect);\n  }\n\n  await Promise.all(animationExecutors);\n\n  if (onEnd) {\n    const maybePromise = onEnd();\n    if (isPromise<void>(maybePromise)) {\n      await maybePromise;\n    }\n  }\n}\n\nfunction isPlaying(sequenceIdentifier: SequenceIdentifier): boolean {\n  const sequence = sequences[sequenceIdentifier];\n\n  if (sequence === undefined) {\n    throw new Error(`Sequence ${sequenceIdentifier} has not been registered`);\n  }\n\n  return sequence.promise !== undefined;\n}\n\nfunction makeSequence(\n  sequenceSteps: SequenceStep[],\n  animationDefaults?: Partial<Omit<AnimationGeneratorType & EffectType, 'name'>>\n): AnimationSequence {\n  return {\n    steps: sequenceSteps.map((step) => step.map((animation) => ({ ...animationDefaults, ...animation }))),\n    currentStepIndex: 0,\n    running: false\n  };\n}\n\nexport default {\n  initialize,\n  play,\n  isPlaying,\n  register,\n  reset\n};\n\nexport { makeSequence };\n"]}