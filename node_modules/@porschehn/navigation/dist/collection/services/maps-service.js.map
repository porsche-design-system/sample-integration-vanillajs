{"version":3,"file":"maps-service.js","sourceRoot":"","sources":["../../../src/services/maps-service.ts"],"names":[],"mappings":"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","sourcesContent":["/* istanbul ignore file */\nimport { splitLocale } from '../entities/locale';\nimport { LatLong, Prediction } from '../entities/places';\nimport { isString } from '../utility/helper';\nimport windowService from './window-service';\nimport { NaviErrorTypes, NaviError, NaviErrorType } from '../utility/navi-error';\nimport { getRegionSpecificCountry } from '../utility/helpers/dealer-search-helper';\n\nexport class MapsService {\n  private autocompleteService: google.maps.places.AutocompleteService | null = null;\n  private placesService: google.maps.places.PlacesService | null = null;\n  private geocoderService: google.maps.Geocoder | null = null;\n  private getLocation: ((latLong: LatLong) => google.maps.LatLng) | null = null;\n\n  async init(apiKey: string): Promise<void> {\n    try {\n      const google = await windowService.fetchGoogleMapsApi(apiKey);\n      this.autocompleteService = new google.maps.places.AutocompleteService();\n      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(windowService.createDiv()));\n      this.geocoderService = new google.maps.Geocoder();\n      this.getLocation = (latLong: LatLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);\n    } catch (err) {\n      throw new NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, NaviErrorTypes.GENERAL);\n    }\n  }\n\n  async getPredictions(input: string, locale: string): Promise<Prediction[]> {\n    if (input.length === 0) {\n      return [];\n    }\n    //ToDo: Check what todo if country is no valid iso-code\n    const predictions = await new Promise<google.maps.places.AutocompletePrediction[] | null>((resolve, reject) => {\n      if (this.autocompleteService === null) {\n        reject(new NaviError('autocompleteService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.autocompleteService.getPlacePredictions(\n        {\n          input,\n          componentRestrictions: { country: getRegionSpecificCountry(splitLocale(locale).country) }\n        },\n        (predictions, status) =>\n          status === 'OK'\n            ? resolve(predictions)\n            : reject(\n                new NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))\n              )\n      );\n    });\n\n    return (\n      predictions\n        ?.filter(({ place_id, description }) => isString(place_id) && isString(description))\n        .map(({ place_id: id, description: text }) => ({ id, text })) ?? []\n    );\n  }\n\n  async getPlaceCoordinates(placeId: string): Promise<LatLong> {\n    const response = await new Promise<google.maps.places.PlaceResult | null>((resolve, reject) => {\n      if (this.placesService === null) {\n        reject(new NaviError('placesService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.placesService.getDetails(\n        {\n          placeId\n        },\n        (response, status) =>\n          status === 'OK'\n            ? resolve(response)\n            : reject(new NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status)))\n      );\n    });\n\n    const latitude = response?.geometry?.location?.lat();\n    const longitude = response?.geometry?.location?.lng();\n\n    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n      throw new NaviError(\n        `placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`,\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return { latitude, longitude };\n  }\n\n  async getFormattedAddressFromCoordinates(latLong: LatLong): Promise<string> {\n    if (this.getLocation === null) {\n      throw new NaviError('getLocation is not initialised', NaviErrorTypes.GENERAL);\n    }\n\n    const location = this.getLocation(latLong);\n\n    const response = await new Promise<google.maps.GeocoderResult[] | null>((resolve, reject) => {\n      if (this.geocoderService === null) {\n        reject(new NaviError('geocoderService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.geocoderService.geocode({ location }, (response, status) => {\n        status === 'OK'\n          ? resolve(response)\n          : reject(new NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));\n      });\n    });\n\n    if (response === null || response.length === 0) {\n      throw new NaviError(\n        'geocoderService.geocode did not find the location based on coordinates.',\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return response[0].formatted_address;\n  }\n}\n\nexport function getErrorType(status: string): NaviErrorType {\n  switch (status) {\n    case 'INVALID_REQUEST': {\n      return NaviErrorTypes.INVALID_INPUT;\n    }\n    case 'NOT_FOUND':\n    case 'ZERO_RESULTS': {\n      return NaviErrorTypes.NO_RESULTS;\n    }\n    case 'OVER_QUERY_LIMIT':\n    case 'UNKNOWN_ERROR': {\n      return NaviErrorTypes.RETRY;\n    }\n    case 'ERROR':\n    case 'REQUEST_DENIED':\n    default: {\n      return NaviErrorTypes.GENERAL;\n    }\n  }\n}\n\nexport default new MapsService();\n"]}