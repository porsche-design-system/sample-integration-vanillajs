import { Environments } from "../entities/environment";
import { FeatureToggles } from "./feature-toggles";
import featureTogglesJson from "../feature-toggles.json";
describe('feature toggles', () => {
  const FEATURE_FEATURE1 = 'homenav_feature1';
  it('should return false if features not set', () => {
    const featureToggles = new FeatureToggles(Environments.TEST, {});
    const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '');
    expect(isEnabled).toBeFalsy();
  });
  describe('isFeatureEnabled', () => {
    it('should return true if feature feature1 is enabled in the env test', () => {
      const featureToggles = new FeatureToggles(Environments.TEST, {
        test: { homenav_feature1: { enabled: true } },
        preview: { homenav_feature1: { enabled: false } }
      });
      const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '');
      expect(isEnabled).toBeTruthy();
    });
    it('should return false if feature feature1 is disabled in the env test', () => {
      const featureToggles = new FeatureToggles(Environments.TEST, {
        test: { homenav_feature1: { enabled: false } },
        preview: { homenav_feature1: { enabled: true } }
      });
      const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '');
      expect(isEnabled).toBeFalsy();
    });
    it('should return true if feature feature1 is enabled in the env passed', () => {
      const featureToggles = new FeatureToggles(Environments.PREVIEW, {
        test: { homenav_feature1: { enabled: false } },
        preview: { homenav_feature1: { enabled: true } }
      });
      const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '');
      expect(isEnabled).toBeTruthy();
    });
    it('should return false if feature feature1 is enabled in the env passed', () => {
      const featureToggles = new FeatureToggles(Environments.PREVIEW, {
        test: { homenav_feature1: { enabled: true } },
        preview: { homenav_feature1: { enabled: false } }
      });
      const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '');
      expect(isEnabled).toBeFalsy();
    });
    it('should return false if feature doesnt exist', () => {
      const featureToggles = new FeatureToggles(Environments.PREVIEW, {
        test: { homenav_feature1: { enabled: true } },
        preview: { homenav_feature1: { enabled: true } }
      });
      const isEnabled = featureToggles.isFeatureEnabled('homenav_feature2', '');
      expect(isEnabled).toBe(false);
    });
    it('should return false if on PROD environment and feature is included on security layer', () => {
      const featureToggles = new FeatureToggles(Environments.PRODUCTION, {
        prod: { one_ui: { enabled: true } },
        preview: { one_ui: { enabled: true } }
      });
      const isEnabled = featureToggles.isFeatureEnabled('one_ui', '');
      expect(isEnabled).toBe(false);
    });
    it('should return true if on non PROD environment and feature is included on security layer', () => {
      const featureToggles = new FeatureToggles(Environments.PREVIEW, {
        prod: { one_ui: { enabled: true } },
        preview: { one_ui: { enabled: true } }
      });
      const isEnabled = featureToggles.isFeatureEnabled('one_ui', '');
      expect(isEnabled).toBe(true);
    });
    describe('overrideValue', () => {
      it('should return false override value if feature override is enabled in the env', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '?homenav_feature1=false');
        expect(isEnabled).toBeFalsy();
      });
      it('should return true override value if feature override is enabled in the env', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '?homenav_feature1=true');
        expect(isEnabled).toBeTruthy();
      });
      it('should return feature value if override is enabled and query string is not available in the env', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '');
        expect(isEnabled).toBeTruthy();
      });
      it('should return feature value if override is enabled and query string does not have feature', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '?homenav_feature2=false');
        expect(isEnabled).toBeTruthy();
      });
      it('should return feature value if override is enabled and query string feature value is not boolean', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '?homenav_feature1=notBooleanValue');
        expect(isEnabled).toBeTruthy();
      });
      it('should return feature value if feature override is disabled in the env', () => {
        const featureToggles = new FeatureToggles(Environments.PREVIEW, {
          test: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: false } }
        });
        const isEnabled = featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '?homenav_feature1=false');
        expect(isEnabled).toBeTruthy();
      });
      it('validates "production" local feature toggles', () => {
        const featureToggles = new FeatureToggles(Environments.PRODUCTION, featureTogglesJson);
        expect(featureToggles.isFeatureEnabled('navi_3', '')).toBeTruthy();
        expect(featureToggles.isFeatureEnabled('featureOverrideEnabled', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('homenav_1723', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('porsche_75_years_logo', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('shop', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('pcom_search', '')).toBeFalsy();
      });
      it('should return default values if remote toggle fails', async () => {
        jest.spyOn(global, 'fetch').mockImplementation(() => Promise.reject(null));
        const featureToggles = new FeatureToggles(Environments.LOCAL, featureTogglesJson);
        await featureToggles.setFeatures(Environments.LOCAL);
        expect(featureToggles.isFeatureEnabled('navi_3', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('featureOverrideEnabled', '')).toBeTruthy();
        expect(featureToggles.isFeatureEnabled('homenav_1723', '')).toBeTruthy();
        expect(featureToggles.isFeatureEnabled('porsche_75_years_logo', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('shop', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('pcom_search', '')).toBeFalsy();
      });
      it('should return feature toggles from lambda ', async () => {
        jest.spyOn(global, 'fetch').mockImplementation(async () => ({
          json: async () => ({
            featureOverrideEnabled: { enabled: true },
            navi_3: {
              enabled: true
            },
            porsche_75_years_logo: {
              enabled: true
            },
            shop: {
              enabled: true
            },
            pcom_search: {
              enabled: true
            }
          }),
          ok: true
        }));
        const featureToggles = new FeatureToggles(Environments.LOCAL, featureTogglesJson);
        await featureToggles.setFeatures(Environments.LOCAL);
        expect(featureToggles.isFeatureEnabled('navi_3', '')).toBe(true);
        expect(featureToggles.isFeatureEnabled('porsche_75_years_logo', '')).toBe(true);
        expect(featureToggles.isFeatureEnabled('shop', '')).toBe(true);
        expect(featureToggles.isFeatureEnabled('pcom_search', '')).toBe(true);
      });
      it('should load local env variables if remote feature response is not ok ', async () => {
        jest.spyOn(global, 'fetch').mockImplementation(async () => ({
          ok: false
        }));
        const featureToggles = new FeatureToggles(Environments.LOCAL, featureTogglesJson);
        await featureToggles.setFeatures(Environments.LOCAL);
        expect(featureToggles.isFeatureEnabled('navi_3', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('featureOverrideEnabled', '')).toBeTruthy();
        expect(featureToggles.isFeatureEnabled('homenav_1723', '')).toBeTruthy();
        expect(featureToggles.isFeatureEnabled('porsche_75_years_logo', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('shop', '')).toBeFalsy();
        expect(featureToggles.isFeatureEnabled('pcom_search', '')).toBeFalsy();
      });
      it('should return true when local storage override is set to true and featureOverride is enabled', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        localStorage.setItem(`phn.${FEATURE_FEATURE1}`, 'true');
        expect(featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '')).toBeTruthy();
      });
      it('should return correct value featureOverride is enabled', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        localStorage.setItem(`phn.${FEATURE_FEATURE1}`, 'false');
        expect(featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '')).toBeFalsy();
      });
      it('should return default feature toggle value when local storage override has invalid value and featureOverride is enabled', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        localStorage.setItem(`phn.${FEATURE_FEATURE1}`, 'iAmAnInvalidValue');
        expect(featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '')).toBeTruthy();
      });
      it('should return default feature toggle value when local storage override is set and featureOverride is disabled in the given environment', () => {
        const featureToggles = new FeatureToggles(Environments.PREVIEW, {
          test: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: true }, featureOverrideEnabled: { enabled: false } }
        });
        localStorage.setItem(`phn.${FEATURE_FEATURE1}`, 'false');
        expect(featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '')).toBeTruthy();
      });
      it('should give url override precedence over local storage override when local storage override and url override are given and featureOverride is enabled', () => {
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: true } },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        localStorage.setItem(`phn.${FEATURE_FEATURE1}`, 'false');
        expect(featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '?homenav_feature1=true')).toBeTruthy();
      });
      it('should return correct values when multiple local storage overrides are defined and featureOverride is enabled', () => {
        const FEATURE_FEATURE2 = 'homenav_feature2';
        const featureToggles = new FeatureToggles(Environments.TEST, {
          test: {
            homenav_feature1: { enabled: false },
            homenav_feature2: { enabled: true },
            featureOverrideEnabled: { enabled: true }
          },
          preview: { homenav_feature1: { enabled: false }, featureOverrideEnabled: { enabled: false } }
        });
        localStorage.setItem(`phn.${FEATURE_FEATURE1}`, 'true');
        localStorage.setItem(`phn.${FEATURE_FEATURE2}`, 'false');
        expect(featureToggles.isFeatureEnabled(FEATURE_FEATURE1, '')).toBeTruthy();
        expect(featureToggles.isFeatureEnabled(FEATURE_FEATURE2, '')).toBeFalsy();
      });
    });
  });
});
//# sourceMappingURL=feature-toggles.spec.js.map
