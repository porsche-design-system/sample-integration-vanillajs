{"version":3,"file":"user-information-service.js","sourceRoot":"","sources":["../../../src/services/user-information-service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAElE,OAAO,EAAE,EAAE,IAAI,MAAM,EAAE,MAAM,MAAM,CAAC;AAEpC,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,WAAmB,EAAE,MAAc;EAC1E,MAAM,MAAM,GAAG,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAClD,MAAM,IAAI,GAAG;IACX,MAAM,EAAE,KAAK;IACb,OAAO,EAAE;MACP,YAAY,EAAE,MAAM,EAAE;MACtB,aAAa,EAAE,GAAG,WAAW,EAAE;MAC/B,MAAM,EAAE,kBAAkB;MAC1B,GAAG,EAAE,aAAa,CAAC,KAAK,CAAC,GAAG;KAC7B;GACF,CAAC;EAEF,IAAI,QAAkB,CAAC;EAEvB,IAAI;IACF,QAAQ,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,YAAY,4BAA4B,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;GACtG;EAAC,OAAO,GAAG,EAAE;IACZ,MAAM,YAAY,GAAG,+DAA+D,IAAI,CAAC,SAAS,CAC/F,GAAa,CAAC,OAAO,CACvB,EAAE,CAAC;IACJ,MAAM,IAAI,SAAS,CAAC,YAAY,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;GAC3D;EACD,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;IAC3B,MAAM,IAAI,SAAS,CAAC,yBAAyB,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;GAC7E;EAED,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;IAChB,MAAM,YAAY,GAAG,+DAA+D,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE,CAAC;IAC7H,MAAM,IAAI,SAAS,CAAC,YAAY,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;GAC3D;EAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC/B,CAAC","sourcesContent":["import { UserInformation } from '../entities/user-information';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getString } from '../utility/helper';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nexport async function getUserInformation(accessToken: string, locale: string): Promise<UserInformation> {\n  const config = getConfig(navStateStore.state.env);\n  const init = {\n    method: 'GET',\n    headers: {\n      'X-Trace-Id': uuidv4(),\n      Authorization: `${accessToken}`,\n      Accept: 'application/json',\n      Env: navStateStore.state.env\n    }\n  };\n\n  let response: Response;\n\n  try {\n    response = await fetch(getString(`${config?.BFF_ENDPOINT}/user-information?locale=${locale}`), init);\n  } catch (err) {\n    const errorMessage = `Get User information request failed in Frontend with error: ${JSON.stringify(\n      (err as Error).message\n    )}`;\n    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);\n  }\n  if (response.status === 401) {\n    throw new NaviError('AccessToken has expired', NaviErrorTypes.UNAUTHORIZED);\n  }\n\n  if (!response.ok) {\n    const errorMessage = `Get User information request failed in Frontend with error: ${response.status} ${response.statusText}`;\n    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);\n  }\n\n  return await response.json();\n}\n"]}