import { constructRoutingKey, getDealerDetailsRoutingKey, RoutingKeys } from "../entities/routing-key";
import { dealerSearchResultsStore } from "../state/dealer-search-results-store";
import { navContentStore } from "../state/nav-content-store";
import { navStateStore } from "../state/nav-state-store";
import { mockContentWithoutShopMyporsche, mockCoordinates, mockDealerContent, mockLevel1Items, mockLevel1ItemsWithMissingItems, mockLocaleContent, mockLocaleContentWithoutShop, mockModelsContent, mockMyPorscheContent, mockPPNDealer, mockPPNDealerOneSearchResults, mockPPNDealerSearchResultsWithLocalizedAddress, mockPPNDistance, mockShopContent, mockShopLinkContent } from "../test/test-data";
import { EventActions, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS } from "../utility/constants";
import { isDealerSearchEnabled, getLevel1Items, getSideDrawerItems, getBackButtonText, getMenuContent, getHeadlineText, getSubtext } from "./menu-items-service";
import abTestingService from "./ab-testing/ab-testing-constructor-service";
describe('Menu Items Service', () => {
  const locale = 'xx-XX';
  const loggedInState = 'Mirinda Doe.';
  const unreadMessagesCount = 0;
  const userConsentGiven = true;
  describe('getLevel1Items', () => {
    it('should include all level1 items for Singapore with external dealer link', () => {
      var _a;
      const locale = 'en-SG';
      navContentStore.state = Object.assign(Object.assign({}, mockLocaleContent), {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        shop: Object.assign(Object.assign({}, mockLocaleContent.shop), { link: 'https://shop.porsche.com' }), dealer: Object.assign({}, mockDealerContent)
      });
      (_a = navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.availableLocales.push(locale);
      const expectedLevel1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      expect(expectedLevel1Items).toEqual(mockLevel1Items);
    });
    it('should include all level1 items for GB', () => {
      var _a;
      const locale = 'en-GB';
      navContentStore.state = Object.assign(Object.assign({}, mockLocaleContent), {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        shop: Object.assign(Object.assign({}, mockLocaleContent.shop), { link: 'https://shop.porsche.com' }), dealer: Object.assign({}, mockDealerContent)
      });
      (_a = navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.availableLocales.push(locale);
      const expectedLevel1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      mockLevel1Items[5].link = undefined;
      mockLevel1Items[5].iconRight = 'arrow-head-right';
      expect(expectedLevel1Items).toEqual(mockLevel1Items);
    });
    it('should include all level1 items except of shop, new dealer search and my porsche', () => {
      navContentStore.state = mockContentWithoutShopMyporsche;
      const localeWithoutDealerSearch = 'en-CN';
      const expectedLevel1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, localeWithoutDealerSearch, loggedInState, unreadMessagesCount, userConsentGiven);
      expect(expectedLevel1Items).toEqual(mockLevel1ItemsWithMissingItems);
    });
    it('should return the user name of my porsche as subtext', () => {
      navContentStore.state = mockLocaleContent;
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      const myPorscheItem = level1Items.find((item) => item.routingKeys.find((child) => child === RoutingKeys.MY_PORSCHE));
      expect(myPorscheItem === null || myPorscheItem === void 0 ? void 0 : myPorscheItem.subtext).toEqual(loggedInState);
    });
    it('should set a saved dealer as subtext and routing key', () => {
      const mockDealer = mockPPNDealerSearchResultsWithLocalizedAddress[0];
      const { ppnDealer: mockPPNDealer } = mockDealer;
      dealerSearchResultsStore.state.savedDealerCookie = { id: mockPPNDealer.id, latitude: 0, longitude: 0 };
      dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };
      const userConsent = true;
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsent);
      const dealerSearchItem = level1Items.find((item) => item.routingKeys.find((child) => child.startsWith(RoutingKeys.DEALER_SEARCH)));
      expect(dealerSearchItem === null || dealerSearchItem === void 0 ? void 0 : dealerSearchItem.routingKeys).toEqual([
        RoutingKeys.DEALER_SEARCH,
        getDealerDetailsRoutingKey(mockPPNDealer.id)
      ]);
      expect(dealerSearchItem === null || dealerSearchItem === void 0 ? void 0 : dealerSearchItem.subtext).toEqual(mockPPNDealer.nameLocalized);
    });
    it('should not set dealerid routingkey if dealer results is 1, but still set the saved dealer as subtext', () => {
      const mockDealer = mockPPNDealerOneSearchResults[0];
      const { ppnDealer: mockPPNDealer } = mockDealer;
      dealerSearchResultsStore.state.savedDealerCookie = { id: mockPPNDealer.id, latitude: 0, longitude: 0 };
      dealerSearchResultsStore.state.ppnDealers = { [mockPPNDealer.id]: mockDealer };
      dealerSearchResultsStore.state.results = mockPPNDealerOneSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      const userConsent = true;
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsent);
      const dealerSearchItem = level1Items.find((item) => item.routingKeys.find((child) => child.startsWith(RoutingKeys.DEALER_SEARCH)));
      expect(dealerSearchItem === null || dealerSearchItem === void 0 ? void 0 : dealerSearchItem.routingKeys).toEqual([RoutingKeys.DEALER_SEARCH]);
      expect(dealerSearchItem === null || dealerSearchItem === void 0 ? void 0 : dealerSearchItem.subtext).toEqual(mockPPNDealer.nameLocalized);
    });
    it('should include icon representing an external link for the shop menu item', () => {
      navContentStore.state.shop = mockShopLinkContent;
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      const shopMenuItemProps = level1Items.find((props) => props.elementId === RoutingKeys.SHOP);
      expect(shopMenuItemProps).not.toBeUndefined();
      expect(shopMenuItemProps === null || shopMenuItemProps === void 0 ? void 0 : shopMenuItemProps.iconRight).toEqual('external');
      expect(shopMenuItemProps === null || shopMenuItemProps === void 0 ? void 0 : shopMenuItemProps.datalayerEventAction).toEqual(EventActions.NAVIGATION_LINK_CLICK);
    });
    it('should not include shop menu item when shop text does not exist in content', () => {
      navContentStore.state.shop = {
        id: '',
        text: '',
        link: '',
        children: [],
        additionalContent: [],
        availableLocalesOnlyForShop: [],
        availableLocales: [],
        logoLinksToShopLocales: []
      };
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      const shopMenuItemProps = level1Items.find((props) => props.elementId === RoutingKeys.SHOP);
      expect(shopMenuItemProps).toBeUndefined();
    });
    it('should not include shop menu item when shop does not exist in content entirely', () => {
      navContentStore.state = mockLocaleContentWithoutShop;
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      const shopMenuItemProps = level1Items.find((props) => props.elementId === RoutingKeys.SHOP);
      expect(shopMenuItemProps).toBeUndefined();
    });
  });
  describe('getSideDrawerItems', () => {
    it('produces level 1 main menu items for the side drawer', () => {
      navContentStore.state.models = mockModelsContent;
      const sideDrawerItems = getSideDrawerItems(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, RoutingKeys.MODELS, userConsentGiven);
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      expect(sideDrawerItems).toHaveLength(level1Items.length);
    });
    it('produces a list of models when a models series is active', () => {
      navContentStore.state.models = mockModelsContent;
      const sideDrawerItems = getSideDrawerItems(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, constructRoutingKey(RoutingKeys.MODELS, mockModelsContent.series[0].id), userConsentGiven);
      expect(sideDrawerItems).toHaveLength(navContentStore.state.models.series.length);
    });
    it('produces a list of menu items when a shop route is active', () => {
      navContentStore.state.shop = mockShopContent;
      const sideDrawerItems = getSideDrawerItems(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, constructRoutingKey(RoutingKeys.SHOP, mockShopContent.children[0].id), userConsentGiven);
      expect(sideDrawerItems).toHaveLength(navContentStore.state.shop.children.length);
    });
    it('produces a list of menu items when a deep shop route is active', () => {
      navContentStore.state.shop = mockShopContent;
      const sideDrawerItems = getSideDrawerItems(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, constructRoutingKey(RoutingKeys.SHOP, navContentStore.state.shop.children[0].id, navContentStore.state.shop.children[0].children[0].id), userConsentGiven);
      expect(sideDrawerItems).toHaveLength(navContentStore.state.shop.children[0].children.length);
    });
    it('returns an empty array if child of a menu drawer is not found', () => {
      navContentStore.state.shop = mockShopContent;
      const sideDrawerItems = getSideDrawerItems(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, constructRoutingKey(RoutingKeys.SHOP, 'invalid-key'), userConsentGiven);
      expect(sideDrawerItems).toHaveLength(navContentStore.state.shop.children.length);
    });
    it('returns level1 menu if unrecognised routingKey is passed', () => {
      navContentStore.state.shop = mockShopContent;
      const sideDrawerItems = getSideDrawerItems(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, RoutingKeys.MY_PORSCHE, userConsentGiven);
      const level1Items = getLevel1Items(navContentStore.state, dealerSearchResultsStore.state, locale, loggedInState, unreadMessagesCount, userConsentGiven);
      expect(sideDrawerItems).toEqual(level1Items);
    });
  });
  describe('isDealerSearchEnabled', () => {
    it('enables dealer search if marketing cookie consent is given', () => {
      navStateStore.state.userConsent = true;
      expect(isDealerSearchEnabled('en-GB', true)).toBeTruthy();
    });
    it('enables dealer search if invalid locale is passed', () => {
      expect(isDealerSearchEnabled('broken locale', true)).toBeTruthy();
    });
    it('does not enable dealer search if navigation is open in China', () => {
      expect(isDealerSearchEnabled('en-CN', true)).toBeFalsy();
    });
    it('does not enable dealer search if navigation is open in en-asia-pacific', () => {
      expect(isDealerSearchEnabled('en-asia-pacific', true)).toBeFalsy();
    });
    it('does not enable dealer search if consent is not given', () => {
      expect(isDealerSearchEnabled('en-GB', false)).toBeFalsy();
    });
  });
  describe('getBackButtonText', () => {
    navContentStore.state = mockLocaleContent;
    it('return correct back button text for models', () => {
      const backButtonText = getBackButtonText(navContentStore.state, 'models');
      expect(backButtonText).toEqual('Models');
    });
    it('return correct back button text for dealer search', () => {
      const backButtonText = getBackButtonText(navContentStore.state, 'find_a_dealer');
      expect(backButtonText).toEqual('Back to search');
    });
    it('return correct back button text for shop', () => {
      const backButtonText = getBackButtonText(navContentStore.state, 'shop');
      expect(backButtonText).toEqual('Shop');
    });
    it('return correct back button text for vehicle purchase', () => {
      const backButtonText = getBackButtonText(navContentStore.state, 'vehicle_purchase');
      expect(backButtonText).toEqual('Vehicle Purchase');
    });
    it('return correct back button text for experience', () => {
      const backButtonText = getBackButtonText(navContentStore.state, 'experience');
      expect(backButtonText).toEqual('Experience');
    });
    it('return empty string when there is invalid routing key', () => {
      const backButtonText = getBackButtonText(navContentStore.state, 'invalid routing key');
      expect(backButtonText).toEqual('');
    });
    it('return empty back button text for dealer search if numberOfDealers is 1', () => {
      navContentStore.state.dealer.numberOfDealers = 1;
      const backButtonText = getBackButtonText(navContentStore.state, 'find_a_dealer');
      expect(backButtonText).toEqual('');
    });
  });
  describe('getMenuContent', () => {
    navContentStore.state = mockLocaleContent;
    navContentStore.state.shop = mockShopContent;
    it('return correct content for vehicle purchase', () => {
      const menuContent = getMenuContent(navContentStore.state, 'vehicle_purchase', 'vehicle_purchase');
      expect(menuContent).toEqual(mockLocaleContent.vehiclePurchase);
    });
    it('return correct content for experience', () => {
      const menuContent = getMenuContent(navContentStore.state, 'experience', 'experience');
      expect(menuContent).toEqual(mockLocaleContent.experience);
    });
    it('return correct content for shop', () => {
      navContentStore.state = mockLocaleContent;
      navContentStore.state.shop = mockShopContent;
      const menuContent = getMenuContent(navContentStore.state, 'shop', 'shop');
      expect(menuContent).toEqual(mockLocaleContent.shop);
    });
    it('return correct content for services', () => {
      const menuContent = getMenuContent(navContentStore.state, 'services', 'services');
      expect(menuContent).toEqual(mockLocaleContent.services);
    });
    it('return undefined for routing key that does not exist', () => {
      const menuContent = getMenuContent(navContentStore.state, 'routing key', 'routing key');
      expect(menuContent).toEqual(null);
    });
    it('return null when active routing key and top level routing key differ', () => {
      const menuContent = getMenuContent(navContentStore.state, 'experience', 'shop');
      expect(menuContent).toEqual(null);
    });
    describe('getMenuContent AB testing', () => {
      it('return correct content for vehicle purchase', () => {
        navContentStore.state = JSON.parse(JSON.stringify(mockLocaleContent));
        navContentStore.state.vehiclePurchase.experienceName = 'experiment1';
        const abTestingSpy = jest.spyOn(abTestingService(), 'executeContentChange').mockReturnValue([]);
        const menuContent = getMenuContent(Object.assign({}, navContentStore.state), 'vehicle_purchase', 'vehicle_purchase');
        expect(menuContent === null || menuContent === void 0 ? void 0 : menuContent.children).toEqual([]);
        expect(abTestingSpy).toHaveBeenCalledTimes(1);
      });
    });
  });
  describe('getHeadlineText', () => {
    navContentStore.state.shop = mockShopContent;
    it('return correct headline for shop subitem', () => {
      const headlineText = getHeadlineText(navContentStore.state, 'mainmenu.services.accessories', 'shop');
      expect(headlineText).toEqual('Accessories, Services & Fashion');
    });
    it('return correct headline for shop subitem', () => {
      const headlineText = getHeadlineText(navContentStore.state, 'mainmenu.shops', 'shop');
      expect(headlineText).toEqual('Shop');
    });
    it('returns nothing if the topRoutingKey is not available or invalid', () => {
      const headlineText = getHeadlineText(navContentStore.state, 'menu', 'menu');
      expect(headlineText).toEqual('');
    });
    it('returns nothing if the RoutingKey is models', () => {
      const headlineText = getHeadlineText(navContentStore.state, 'models', 'models');
      expect(headlineText).toEqual('Models');
    });
    it('returns series name if the RoutingKey is models.', () => {
      const headlineText = getHeadlineText(navContentStore.state, 'mainmenu.718', 'models');
      expect(headlineText).toEqual('mainmenu.718');
    });
  });
  describe('getSubtext', () => {
    beforeEach(() => {
      navContentStore.state.myPorsche = mockMyPorscheContent;
      navStateStore.state.loggedInState = 'Mirinda Doe';
    });
    it('return empty string if not my_porsche', () => {
      const headlineSubtext = getSubtext('shop');
      expect(headlineSubtext).toEqual('');
    });
    it('return logged in user name if on my_porsche', () => {
      const headlineSubtext = getSubtext('my_porsche');
      expect(headlineSubtext).toEqual('Mirinda Doe');
    });
    it('return empty string if on my_porsche but logged out', () => {
      navStateStore.state.loggedInState = LOGGED_OUT_USER_STATUS;
      const headlineSubtext = getSubtext('my_porsche');
      expect(headlineSubtext).toEqual('');
    });
    it('return logged in if on my_porsche and logged in', () => {
      navStateStore.state.loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
      const headlineSubtext = getSubtext('my_porsche');
      expect(headlineSubtext).toEqual('Logged in');
    });
    it('should return dealer search name', () => {
      const dodgeyMockDealer = {
        ppnDealer: mockPPNDealer,
        distance: mockPPNDistance
      };
      dealerSearchResultsStore.state.ppnDealers = { [dodgeyMockDealer.ppnDealer.id]: dodgeyMockDealer };
      dealerSearchResultsStore.state.savedDealerCookie = Object.assign({ id: mockPPNDealer.id }, mockCoordinates);
      const headlineSubtext = getSubtext('find_a_dealer');
      expect(headlineSubtext).toEqual('localized Porsche Zentrum Berlin');
    });
    it('should return fuel types if in models', () => {
      const headlineSubtext = getSubtext('models', 'mainmenu.panamera');
      expect(headlineSubtext).toEqual('Gasoline | Hybrid');
    });
    it('should return no fuel types if no active routing key is provided for models', () => {
      const headlineSubtext = getSubtext('models');
      expect(headlineSubtext).toEqual('');
    });
    it('should return empty if no topLevelRoutingKey is provided', () => {
      navStateStore.state.loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
      const headlineSubtext = getSubtext();
      expect(headlineSubtext).toEqual('');
    });
  });
});
//# sourceMappingURL=menu-items-service.spec.js.map
