import { navStateStore } from "../state/nav-state-store";
import { getConfig, getString } from "../utility/helper";
import { NaviError, NaviErrorTypes } from "../utility/navi-error";
import { v4 as uuidv4 } from "uuid";
export async function getUserInformation(accessToken, locale) {
  const config = getConfig(navStateStore.state.env);
  const init = {
    method: 'GET',
    headers: {
      'X-Trace-Id': uuidv4(),
      Authorization: `${accessToken}`,
      Accept: 'application/json',
      Env: navStateStore.state.env
    }
  };
  let response;
  try {
    response = await fetch(getString(`${config === null || config === void 0 ? void 0 : config.BFF_ENDPOINT}/user-information?locale=${locale}`), init);
  }
  catch (err) {
    const errorMessage = `Get User information request failed in Frontend with error: ${JSON.stringify(err.message)}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  if (response.status === 401) {
    throw new NaviError('AccessToken has expired', NaviErrorTypes.UNAUTHORIZED);
  }
  if (!response.ok) {
    const errorMessage = `Get User information request failed in Frontend with error: ${response.status} ${response.statusText}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  return await response.json();
}
//# sourceMappingURL=user-information-service.js.map
