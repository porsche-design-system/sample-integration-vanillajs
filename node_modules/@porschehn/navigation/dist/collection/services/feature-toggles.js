import { Environments, getEnvironment } from "../entities/environment";
import featureJson from "../feature-toggles.json";
import { DEFAULT_ENVIRONMENT, FEATURE_AB_TESTING, FEATURE_DEALER_SEARCH_CHINA, FEATURE_DEALER_SEARCH_OPENING_HOURS, FEATURE_OVERRIDE_ENABLED, FEATURE_PCOM_SEARCH, FEATURE_SAVED_ITEMS, FEATURE_SENTRY, FEATURE_SHOP, FEATURE_SHOP_WISHLIST } from "../utility/constants";
import { getConfig, isString } from "../utility/helper";
import { NaviError, NaviErrorTypes } from "../utility/navi-error";
import logger from "./logger";
import windowService from "./window-service";
export class FeatureToggles {
  constructor(env = getEnvironment(DEFAULT_ENVIRONMENT), featureEnvMap = featureJson) {
    this.featureEnvMap = featureEnvMap;
    this.features = {};
    this.env = 'local';
    this.isShopToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP, windowService.location.search);
    this.isPcomSearchToggleActive = () => this.isFeatureEnabled(FEATURE_PCOM_SEARCH, windowService.location.search);
    this.isSavedItemsToggleActive = () => this.isFeatureEnabled(FEATURE_SAVED_ITEMS, windowService.location.search);
    this.isABTestingToggleActive = () => this.isFeatureEnabled(FEATURE_AB_TESTING, windowService.location.search);
    this.isDealerSearchChinaEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_CHINA, windowService.location.search);
    this.isDealerSearchOpeningHoursEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_OPENING_HOURS, windowService.location.search);
    this.isSentryEnabled = () => this.isFeatureEnabled(FEATURE_SENTRY, windowService.location.search);
    this.isShopWishlistToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP_WISHLIST, windowService.location.search);
    this.env = env;
    this.features = this.featureEnvMap[env];
  }
  async loadRemoteToggles() {
    try {
      const BFFEndpoint = getConfig(this.env).BFF_ENDPOINT;
      const response = await fetch(`${BFFEndpoint}/toggles?env=${this.env}`);
      if (!response.ok) {
        const text = await response.text();
        throw new Error(text);
      }
      const result = await response.json();
      this.features = result;
    }
    catch (err) {
      throw new NaviError(`Load Feature Toggles failed with error: ${err}`, NaviErrorTypes.GENERAL);
    }
  }
  stringToBooleanStrict(value) {
    if (value === 'true') {
      return true;
    }
    if (value === 'false') {
      return false;
    }
    return null;
  }
  getUrlFeatureToggleOverride(feature, searchString) {
    var _a, _b;
    const queryValue = (_b = (_a = searchString
      .split('?')[1]) === null || _a === void 0 ? void 0 : _a.split('&').find((query) => query.includes(feature))) === null || _b === void 0 ? void 0 : _b.split('=')[1];
    return isString(queryValue) ? this.stringToBooleanStrict(queryValue || '') : null;
  }
  getLocalStorageFeatureToggleOverride(feature) {
    const localStorageValue = localStorage.getItem(`phn.${feature}`);
    return isString(localStorageValue) ? this.stringToBooleanStrict(localStorageValue) : null;
  }
  isFeatureEnabled(feature, searchString) {
    var _a;
    if (this.features === undefined) {
      return false;
    }
    if (this.env === Environments.PRODUCTION && this.isOnSecurityLayer(feature)) {
      return false;
    }
    if ((_a = this.features[FEATURE_OVERRIDE_ENABLED]) === null || _a === void 0 ? void 0 : _a.enabled) {
      const featureToggleOverrides = [
        this.getUrlFeatureToggleOverride(feature, searchString),
        this.getLocalStorageFeatureToggleOverride(feature)
      ];
      for (const featureToggleOverride of featureToggleOverrides) {
        if (featureToggleOverride !== null) {
          return featureToggleOverride;
        }
      }
    }
    if (this.features[feature] !== undefined) {
      return this.features[feature].enabled;
    }
    else {
      return false;
    }
  }
  async setFeatures(env) {
    this.env = env;
    try {
      if (env === 'test') {
        this.features = this.featureEnvMap[env];
        return;
      }
      await this.loadRemoteToggles();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (error) {
      logger.error('INIT_APP_CONFIG', error);
      this.features = this.featureEnvMap[env];
    }
  }
  isOnSecurityLayer(feature) {
    const prodDisabledToggles = [FEATURE_SENTRY, FEATURE_DEALER_SEARCH_OPENING_HOURS];
    return prodDisabledToggles.includes(feature);
  }
}
export default new FeatureToggles();
//# sourceMappingURL=feature-toggles.js.map
