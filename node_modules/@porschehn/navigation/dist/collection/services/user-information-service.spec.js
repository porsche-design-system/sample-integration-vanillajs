import { getUserInformation } from "./user-information-service";
import { mockUserInformation } from "../test/test-data";
import { NaviError, NaviErrorTypes } from "../utility/navi-error";
import { navStateStore } from "../state/nav-state-store";
import { DEFAULT_UNREAD_MESSAGES_COUNT, LOGGED_OUT_USER_STATUS } from "../utility/constants";
describe('user information service', () => {
  it('should return error for wrong locale', async () => {
    const invalidLocale = 'de-CN';
    const accessToken = 'abcd';
    jest.spyOn(global, 'fetch').mockResolvedValueOnce({
      ok: false,
      status: 400,
      statusText: 'Some error occurred'
    });
    const userInformationFailed = getUserInformation(accessToken, invalidLocale);
    await expect(userInformationFailed).rejects.toThrowError('Get User information request failed in Frontend with error: 400 Some error occurred');
  });
  it('should return user information', async () => {
    const locale = 'de-DE';
    const accessToken = 'first-access-token';
    const mockUserInfo = jest.fn();
    getUserInformation = mockUserInfo;
    mockUserInfo.mockResolvedValue(mockUserInformation);
    const userInformationSuccess = await getUserInformation(accessToken, locale);
    expect(userInformationSuccess).toEqual(mockUserInformation);
  });
  it('should throw unauthorized user', async () => {
    const locale = 'de-DE';
    const accessToken = 'first-access-token';
    const error = new NaviError('AccessToken has expired', NaviErrorTypes.UNAUTHORIZED);
    jest.spyOn(global, 'fetch').mockResolvedValueOnce({
      status: 401
    });
    try {
      await getUserInformation(accessToken, locale);
    }
    catch (err) {
      expect(navStateStore.state.unreadMessagesCount).toEqual(DEFAULT_UNREAD_MESSAGES_COUNT);
      expect(navStateStore.state.loggedInState).toEqual(LOGGED_OUT_USER_STATUS);
      expect(err).toEqual(error);
    }
  });
});
//# sourceMappingURL=user-information-service.spec.js.map
