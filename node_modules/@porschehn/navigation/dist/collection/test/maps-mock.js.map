{"version":3,"file":"maps-mock.js","sourceRoot":"","sources":["../../../src/test/maps-mock.ts"],"names":[],"mappings":"AAAA,0BAA0B;AAE1B,OAAO,EAAE,wBAAwB,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAExE,MAAM,CAAC,MAAM,WAAW,GAAG,GAAkB,EAAE,CAC7C,CAAC;EACC,IAAI,EAAE;IACJ,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;IACd,MAAM,EAAE;MACN,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QAC7C,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;OACxF,CAAC;MACF,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QACvC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CACjD,EAAE,CACA;UACE,QAAQ,EAAE;YACR,QAAQ,EAAE;cACR,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;cACZ,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;aACb;WACF;SACF,EACD,IAAI,CACL,CACF;QACD,kBAAkB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CACzD,EAAE,CACA;UACE;YACE,QAAQ,EAAE;cACR,QAAQ,EAAE;gBACR,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;gBACZ,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;eACb;aACF;WACF;SACF,EACD,IAAI,CACL,CACF;OACF,CAAC;KACH;IACD,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;MAClC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,iBAAiB,EAAE,wBAAwB,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;KAC9G,CAAC;IACF,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;GAClB;CAC2B,CAAA,CAAC","sourcesContent":["/* istanbul ignore file */\n\nimport { mockPlaceFromCoordinates, mockPredictions } from './test-data';\n\nexport const getMapsMock = (): typeof google =>\n  ({\n    maps: {\n      Map: jest.fn(),\n      places: {\n        AutocompleteService: jest.fn().mockReturnValue({\n          getPlacePredictions: jest.fn().mockImplementation((_, cb) => cb(mockPredictions, 'OK'))\n        }),\n        PlacesService: jest.fn().mockReturnValue({\n          getDetails: jest.fn().mockImplementation((_, cb) =>\n            cb(\n              {\n                geometry: {\n                  location: {\n                    lat: () => 0,\n                    lng: () => 0\n                  }\n                }\n              },\n              'OK'\n            )\n          ),\n          findPlaceFromQuery: jest.fn().mockImplementation((_, cb) =>\n            cb(\n              [\n                {\n                  geometry: {\n                    location: {\n                      lat: () => 0,\n                      lng: () => 0\n                    }\n                  }\n                }\n              ],\n              'OK'\n            )\n          )\n        })\n      },\n      Geocoder: jest.fn().mockReturnValue({\n        geocode: jest.fn().mockImplementation((_, cb) => cb([{ formatted_address: mockPlaceFromCoordinates }], 'OK'))\n      }),\n      LatLng: jest.fn()\n    }\n  } as unknown as typeof google);\n"]}