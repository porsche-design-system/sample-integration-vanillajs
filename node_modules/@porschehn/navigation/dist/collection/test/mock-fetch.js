/* istanbul ignore file */
import { Environments } from "../entities/environment";
import { LOGGING_ENDPOINT } from "../services/logger";
import { getConfig } from "../utility/helper";
import { expiredAccessToken, firstAccessToken, firstUserProfileData, mockCoordinates, mockCoordinatesWithInvalidJson, mockFailFetchCoordinates, mockInvalidCoordinates, mockInvalidCountryCode, mockInvalidResponseCoordinates, mockNewContent, mockPPNDealerSearchResultsWithLocalizedAddress, mockShopContentResponse, mockUserInformation, secondAccessToken, secondUserProfileData } from "./test-data";
function getResponse(body = {}, status = 200) {
  const headers = new Headers();
  headers.set('content-type', 'application/json');
  return {
    ok: status === 200,
    status: status,
    headers,
    json: async () => body
  };
}
function getInvalidResponse(status) {
  const headers = new Headers();
  headers.set('content-type', 'text/html');
  return {
    ok: status === 200,
    status: status,
    headers
  };
}
const testConfig = getConfig(Environments.TEST);
export default async function mockFetch(input, init) {
  var _a;
  const [origin, queryString] = input.toString().split('?');
  const originArray = origin.split(/\/|\./);
  const locale = originArray[originArray.length - 2];
  switch (origin) {
    case `${getConfig(Environments.PREVIEW).CONTENT_URL}/preprod-content.json`:
    case `${testConfig.CONTENT_URL}/content.json`:
    case `${testConfig.CONTENT_URL}/preprod-content.json`: {
      return getResponse(mockNewContent);
    }
    case `${testConfig.SHOP_CONTENT_URL}/ch/de-CH/navigation`: {
      return getResponse(mockShopContentResponse);
    }
    case `${testConfig.SHOP_CONTENT_URL}/se/sv-SE/navigation`: {
      return getResponse(mockShopContentResponse);
    }
    case `${getConfig(Environments.PREVIEW).CONTENT_URL}/${locale}.json`:
    case `${testConfig.CONTENT_URL}/${locale}.json`: {
      if (locale in mockNewContent) {
        return getResponse(mockNewContent[locale]);
      }
      return { status: 404, ok: false };
    }
    case getConfig(Environments.PREVIEW).PROFILE_API_URL:
    case testConfig.PROFILE_API_URL: {
      const Authorization = (init === null || init === void 0 ? void 0 : init.headers) ? init.headers.Authorization : '';
      switch (Authorization) {
        case `Bearer ${firstAccessToken}`:
          return getResponse(firstUserProfileData);
        case `Bearer ${secondAccessToken}`:
          return getResponse(secondUserProfileData);
        case `Bearer ${expiredAccessToken}`:
          return getResponse({}, 401);
        default:
          return getResponse({}, 400);
      }
    }
    case getConfig(Environments.PREVIEW).BFF_ENDPOINT:
    case `${testConfig.BFF_ENDPOINT}/user-information`: {
      const Authorization = (init === null || init === void 0 ? void 0 : init.headers) ? init.headers.Authorization : '';
      switch (Authorization) {
        case firstAccessToken:
          return getResponse(mockUserInformation);
        default:
          return getResponse({}, 400);
      }
    }
    case `${testConfig.LOGIN_BASE_URL}/.well-known/openid-configuration`: {
      return getResponse({ token_endpoint: `${testConfig.LOGIN_BASE_URL}/get-token` });
    }
    case `${testConfig.LOGIN_BASE_URL}/get-token`: {
      return getResponse({ access_token: firstAccessToken });
    }
    case `${getConfig(Environments.PREVIEW).LOGIN_BASE_URL}/as/revoke_token.oauth2`:
    case `${testConfig.LOGIN_BASE_URL}/as/revoke_token.oauth2`: {
      if ((_a = init === null || init === void 0 ? void 0 : init.body) === null || _a === void 0 ? void 0 : _a.toString().includes(secondAccessToken)) {
        return getResponse({}, 400);
      }
      return getResponse();
    }
    case `${testConfig.DEALER_API_URL}/DE/dealers`: {
      switch (queryString) {
        case `coordinates=${mockCoordinates.latitude},${mockCoordinates.longitude}`:
        case `coordinates=${mockCoordinates.latitude}%2C${mockCoordinates.longitude}`: {
          return getResponse(mockPPNDealerSearchResultsWithLocalizedAddress);
        }
        case `coordinates=${mockInvalidCoordinates.latitude},${mockInvalidCoordinates.longitude}`:
        case `coordinates=${mockInvalidCoordinates.latitude}%2C${mockInvalidCoordinates.longitude}`: {
          return getResponse({}, 400);
        }
        case `coordinates=${mockInvalidResponseCoordinates.latitude},${mockInvalidResponseCoordinates.longitude}`:
        case `coordinates=${mockInvalidResponseCoordinates.latitude}%2C${mockInvalidResponseCoordinates.longitude}`: {
          return getResponse({}, 500);
        }
        case `coordinates=${mockFailFetchCoordinates.latitude},${mockFailFetchCoordinates.longitude}`:
        case `coordinates=${mockFailFetchCoordinates.latitude}%2C${mockFailFetchCoordinates.longitude}`: {
          throw new Error('Failed fetch request.');
        }
        case `coordinates=${mockCoordinatesWithInvalidJson.latitude},${mockCoordinatesWithInvalidJson.longitude}`:
        case `coordinates=${mockCoordinatesWithInvalidJson.latitude}%2C${mockCoordinatesWithInvalidJson.longitude}`: {
          return getInvalidResponse(200);
        }
        default: {
          throw new Error(`Unhandled queryString: ${input}, ${queryString}`);
        }
      }
    }
    case `${testConfig.DEALER_API_URL}/${mockInvalidCountryCode}/dealers`: {
      return getResponse({}, 404);
    }
    case testConfig.IDP_MIGRATION_ENDPOINT: {
      return getResponse({ idp: 'old' }, 200);
    }
    case `${testConfig.FOOTER_ASSETS_URL}/flags/CH.svg`:
    case `${testConfig.FOOTER_ASSETS_URL}/flags/YY.svg`: {
      return getResponse();
    }
    case LOGGING_ENDPOINT:
      return getResponse();
    default: {
      throw new Error(`Unhandled request: ${input}`);
    }
  }
}
//# sourceMappingURL=mock-fetch.js.map
