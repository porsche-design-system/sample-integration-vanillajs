/* istanbul ignore file */
import { FOCUSABLE_ELEMENTS_SELECTOR } from "../utility/constants";
import { getHTMLElement } from "../utility/helper";
export function mouseEnter(el) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new MouseEvent('mouseenter', { bubbles: true }));
}
export function mouseLeave(el) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new MouseEvent('mouseleave', { bubbles: true }));
}
export function mouseClick(el) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new MouseEvent('click', { bubbles: true }));
}
export function tabKeyDown(el, shiftKey = false) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new KeyboardEvent('keydown', { bubbles: true, shiftKey, key: 'Tab' }));
}
export function keyDown(el, key) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new KeyboardEvent('keydown', { bubbles: true, key }));
}
export function getFirstFocusable(el) {
  if (el === null) {
    return null;
  }
  return getHTMLElement(el.querySelector(FOCUSABLE_ELEMENTS_SELECTOR));
}
export function getFocusableByDataId(el, elementId) {
  var _a;
  if (el === null) {
    return null;
  }
  const elements = getAllFocusables(el);
  if (elements === null) {
    return null;
  }
  return (_a = elements.find((element) => (element === null || element === void 0 ? void 0 : element.getAttribute('data-id')) === elementId)) !== null && _a !== void 0 ? _a : null;
}
export function getLastFocusable(el) {
  if (el === null) {
    return null;
  }
  const focusableElements = el.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);
  return getHTMLElement(focusableElements[focusableElements.length - 1]);
}
export function getAllFocusables(el) {
  if (el === null) {
    return null;
  }
  const focusables = el.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);
  if (focusables === null) {
    return null;
  }
  return Array.from(focusables).map((element) => getHTMLElement(element));
}
export function endAnimation(el, animationName) {
  if (el === null) {
    return false;
  }
  // this is a hacky workaround because jest doesn't have AnimationEvent implemented
  const e = new Event('animationend', { bubbles: true });
  Object.assign(e, { animationName });
  return el.dispatchEvent(e);
}
export function startAnimation(el, animationName) {
  if (el === null) {
    return false;
  }
  // this is a hacky workaround because jest doesn't have AnimationEvent implemented
  const e = new Event('animationstart', { bubbles: true });
  Object.assign(e, { animationName });
  return el.dispatchEvent(e);
}
export function focus(el) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new Event('focus'));
}
export function blur(el) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new Event('blur'));
}
export function sendInput(el, input) {
  if (el === null) {
    return false;
  }
  el.value = input;
  return el.dispatchEvent(new Event('input'));
}
export function submit(el) {
  if (el === null) {
    return false;
  }
  return el.dispatchEvent(new Event('submit', { bubbles: true }));
}
//# sourceMappingURL=element-helpers.js.map
