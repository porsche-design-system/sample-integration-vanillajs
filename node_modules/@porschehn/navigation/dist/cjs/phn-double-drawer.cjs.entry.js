'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-98b6cdb7.js');
const routingKey = require('./routing-key-7ce95adb.js');
const analyticsManager = require('./analytics-manager-fae67b2f.js');
const globalDataLayerService = require('./global-data-layer-service-6bfe4ea6.js');
const animationManager = require('./animation-manager-697ad19b.js');
const menuItemsService = require('./menu-items-service-de2bb23d.js');
const navContentStore = require('./nav-content-store-7e491673.js');
const helper = require('./helper-2e938230.js');
const doubleDrawerAnimationSequences = require('./double-drawer-animation-sequences-48f2e029.js');
const helper$1 = require('./helper-bc5fe143.js');
require('./router-store-fdfbb3ef.js');
require('./dealer-search-results-store-82b04c04.js');
require('./feature-toggles-56b31f71.js');
require('./ab-testing-constructor-service-0271deee.js');
require('./animations-34f77238.js');

const MainDrawerContent = ({ activeRoutingKey, locale, breakpoint, backButtonText, onClickBack, receivedContent }) => (index.h("div", { class: "drawer-content" },
  index.h("div", { class: "main-drawer-header" }, helper.isString(backButtonText) ? (index.h("phn-back-button", { class: "back-button", onClick: onClickBack, text: backButtonText, analyticsId: navContentStore.navContentStore.state.menu.id })) : null),
  index.h("phn-router", { activeRoutingKey: activeRoutingKey, breakpoint: breakpoint, locale: locale, receivedContent: receivedContent })));

const SideDrawerContent = ({ activeRoutingKey, locale, backButtonText, onClickBack }) => {
  return (index.h("div", { class: "drawer-content" },
    index.h("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }),
    index.h("div", { class: "side-drawer-header" }, helper.isString(backButtonText) ? (index.h("phn-back-button", { class: "back-button", onClick: onClickBack, text: backButtonText, analyticsId: navContentStore.navContentStore.state.menu.id })) : null),
    index.h("phn-side-drawer", { activeRoutingKey: activeRoutingKey, locale: locale })));
};

const doubleDrawerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-double-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-double-drawer{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-double-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-double-drawer{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-double-drawer{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-double-drawer{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-double-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-double-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-double-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-double-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-double-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-double-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-double-drawer-h{position:fixed;top:0;left:-1000px;height:100vh;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;z-index:301}@media (min-width: 1920px){.sc-phn-double-drawer-h{left:-1300px}}.opening-animation.sc-phn-double-drawer-h{left:0px;-webkit-transition:left 600ms;transition:left 600ms}.closing-animation.sc-phn-double-drawer-h{left:-1000px;-webkit-transition:left 600ms;transition:left 600ms}@media (min-width: 1920px){.closing-animation.sc-phn-double-drawer-h{left:-1300px}}.sc-phn-double-drawer-h .close-button.sc-phn-double-drawer{position:absolute;right:-4.75rem;z-index:301;width:3rem;height:3rem;margin-top:1.75rem;cursor:pointer}.sc-phn-double-drawer-h .drawer.sc-phn-double-drawer{overflow-y:auto;overflow-x:hidden;position:relative;background-color:#fff;height:100vh;-webkit-transition:left 400ms;transition:left 400ms}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{z-index:302;float:left;width:17.125rem;padding-left:1.75rem;padding-right:1.75rem}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:16.5rem;padding-left:2.25rem;padding-right:2.25rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:19.3125rem;padding-left:3rem;padding-right:3rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:27.375rem;padding-left:5.25rem;padding-right:5.25rem}}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer>div.sc-phn-double-drawer{left:0}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer phn-side-drawer.sc-phn-double-drawer{padding-bottom:6rem}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;height:5.75rem;padding-top:2.625rem}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{height:6rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{height:8rem;padding-top:3.75rem}}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer phn-back-button.sc-phn-double-drawer{margin-left:-0.5rem;height:1.5rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{z-index:301;float:right;border-radius:0 4px 4px 0;background-color:#EEEFF2;-webkit-box-sizing:border-box;box-sizing:border-box;position:static;width:20.625rem;padding-left:1.75rem;padding-right:1.75rem}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:21rem;padding-left:2.25rem;padding-right:2.25rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:25.3125rem;padding-left:3rem;padding-right:3rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:37.875rem;padding-left:5.25rem;padding-right:5.25rem}}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer>div.sc-phn-double-drawer{left:0}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer phn-router.sc-phn-double-drawer{padding-bottom:6rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;height:4.125rem;padding-top:2.5rem;margin-bottom:1.625rem}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{margin-bottom:1.875rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{height:5.25rem;margin-bottom:2.75rem;padding-top:2.5rem}}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer phn-back-button.sc-phn-double-drawer{margin-left:-0.5rem;height:1.5rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{z-index:302;height:10rem;background:-webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(#EEEFF2));background:linear-gradient(to bottom, rgba(255, 255, 255, 0), #EEEFF2);opacity:1;position:absolute;width:100%;bottom:0;margin-left:-1.5rem;pointer-events:none;width:20.625rem;margin-left:20.625rem;border-radius:0 0 4px 0}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:21rem;margin-left:21rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:25.3125rem;margin-left:25.3125rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:37.875rem;margin-left:37.875rem}}";

const DoubleDrawer = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.clickDrawerHeaderClose = index.createEvent(this, "clickDrawerHeaderClose", 7);
    this.clickDrawerHeaderBack = index.createEvent(this, "clickDrawerHeaderBack", 7);
    this.drawerClosed = index.createEvent(this, "drawerClosed", 7);
    this.drawerChanged = index.createEvent(this, "drawerChanged", 7);
    this.backdropClosed = index.createEvent(this, "backdropClosed", 7);
    this.phnDrawerStatus = index.createEvent(this, "phnDrawerStatus", 7);
    this.breakpoint = undefined;
    this.locale = undefined;
    this.initialUsingKeyboard = false;
    this.routingKeyHistory = [];
    this.routingKeyPointer = routingKey.RoutingKeyPointers.LEVEL_ZERO;
    this.receivedContent = undefined;
    this.usingKeyboard = false;
    this.animatingRoutingKeyPointer = routingKey.RoutingKeyPointers.LEVEL_ZERO;
    this.isAnimating = true;
    this.animatingRoutingKey = '';
  }
  watchRoutingKeyPointer(newPointer, oldPointer) {
    if (oldPointer < newPointer) {
      const topLevelRoutingKey = routingKey.findTopLevelRoutingKey(this.routingKeyHistory[this.routingKeyPointer]);
      if (topLevelRoutingKey === routingKey.RoutingKeys.DEALER_SEARCH) {
        animationManager.animationManager.play('transitionSameLevelDoubleDrawer').then(() => this.focusOnInitialElement());
      }
      else {
        animationManager.animationManager.play('transitionNextLevelDoubleDrawer').then(() => this.focusOnInitialElement());
      }
    }
  }
  watchRoutingKeyHistory(newHistory, oldHistory) {
    if (newHistory.length < oldHistory.length || this.animateIfSameLength(newHistory, oldHistory)) {
      animationManager.animationManager.play('transitionSameLevelDoubleDrawer').then(() => this.focusOnInitialElement());
    }
  }
  onResizeWindow() {
    if (this.animatingRoutingKeyPointer !== this.routingKeyPointer) {
      this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
      this.animatingRoutingKeyPointer = this.routingKeyPointer;
    }
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    let activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    if (activeRoutingKey.startsWith(routingKey.RoutingKeys.DEALER_SEARCH)) {
      activeRoutingKey = activeRoutingKey.split('/')[0];
    }
    const eventSourceElement = helper.getHTMLElement(e.target);
    if (eventSourceElement === null) {
      return;
    }
    const focusableSideDrawerElements = helper$1.getAllFocusableElements(this.el.querySelector('#side-drawer'));
    let focusableMainDrawerElements = helper$1.getAllFocusableElements(this.el.querySelector('#main-drawer'));
    if (focusableSideDrawerElements.length === 0 || focusableMainDrawerElements.length === 0) {
      return;
    }
    const highlightedSideDrawerElementIndex = focusableSideDrawerElements.findIndex((el) => el.getAttribute('data-id') === activeRoutingKey);
    const highlightedSideDrawerElement = focusableSideDrawerElements[highlightedSideDrawerElementIndex];
    if (activeRoutingKey === routingKey.RoutingKeys.DEALER_SEARCH) {
      focusableMainDrawerElements = focusableMainDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const lastSideDrawerElement = focusableSideDrawerElements[focusableSideDrawerElements.length - 1];
    const lastMainDrawerElement = focusableMainDrawerElements[focusableMainDrawerElements.length - 1];
    const closeButton = this.el.querySelector('.close-button');
    if (!e.shiftKey) {
      if (eventSourceElement === highlightedSideDrawerElement) {
        e.preventDefault();
        helper.focusOnElement(focusableMainDrawerElements[0]);
        return;
      }
      if (eventSourceElement === lastSideDrawerElement) {
        e.preventDefault();
        if (closeButton !== null) {
          helper.focusOnElement(closeButton);
        }
      }
      if (eventSourceElement === lastMainDrawerElement) {
        e.preventDefault();
        const nextSideDrawerElementIndex = highlightedSideDrawerElementIndex + 1 >= focusableSideDrawerElements.length
          ? 0
          : highlightedSideDrawerElementIndex + 1;
        const nextSideDrawerElement = helper.getHTMLElement(focusableSideDrawerElements[nextSideDrawerElementIndex]);
        helper.focusOnElement(nextSideDrawerElement);
      }
      if (eventSourceElement === closeButton) {
        e.preventDefault();
        helper.focusOnElement(focusableSideDrawerElements[0]);
      }
    }
    else if (e.shiftKey) {
      if (eventSourceElement === focusableMainDrawerElements[0]) {
        e.preventDefault();
        if (highlightedSideDrawerElement !== null) {
          helper.focusOnElement(highlightedSideDrawerElement);
        }
      }
      if (eventSourceElement === closeButton) {
        e.preventDefault();
        helper.focusOnElement(lastSideDrawerElement);
      }
    }
  }
  handleMobileMenuItemClick(event) {
    if (animationManager.animationManager.isPlaying('transitionNextLevelDoubleDrawer')) {
      event.stopPropagation();
    }
  }
  handleSideDrawerItemClick(event) {
    if (animationManager.animationManager.isPlaying('transitionSameLevelDoubleDrawer')) {
      event.stopPropagation();
    }
  }
  focusOnInitialElement() {
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    let focusedRoutingKey = isNavigatingBackwards
      ? this.routingKeyHistory[this.routingKeyPointer + 1]
      : this.routingKeyHistory[this.routingKeyPointer];
    if (focusedRoutingKey.startsWith(routingKey.RoutingKeys.DEALER_SEARCH)) {
      focusedRoutingKey = focusedRoutingKey.split('/')[0];
    }
    const autoFocusElement = helper.getHTMLElement(this.el.querySelector('.autofocus'));
    if (autoFocusElement !== null) {
      helper.focusOnElement(autoFocusElement);
      return;
    }
    if (this.usingKeyboard) {
      let focusableElement = null;
      if (helper.isString(focusedRoutingKey)) {
        focusableElement = helper.getHTMLElement(this.el.querySelector(`[data-id="${focusedRoutingKey}"]`));
      }
      if (focusableElement === null) {
        focusableElement = helper.getHTMLElement(this.el.querySelector(`${helper.FOCUSABLE_ELEMENTS_SELECTOR}`));
      }
      if (focusableElement !== null) {
        helper.focusOnElement(focusableElement);
      }
      return;
    }
    const firstFocus = helper.getHTMLElement(this.el.querySelector('.first-focus'));
    if (firstFocus !== null) {
      helper.focusOnElement(firstFocus);
    }
  }
  async goBackToPreviousMenu() {
    if (this.routingKeyPointer === this.animatingRoutingKeyPointer) {
      this.clickDrawerHeaderBack.emit();
      const topLevelRoutingKey = routingKey.findTopLevelRoutingKey(this.routingKeyHistory[this.routingKeyPointer]);
      if (topLevelRoutingKey === routingKey.RoutingKeys.DEALER_SEARCH) {
        animationManager.animationManager.play('transitionSameLevelDoubleDrawerReverse').then(() => this.focusOnInitialElement());
      }
      else {
        animationManager.animationManager.play('transitionPreviousLevelDoubleDrawer').then(() => this.focusOnInitialElement());
      }
    }
  }
  async updateRouting() {
    this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    this.animatingRoutingKeyPointer = this.routingKeyPointer;
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    this.drawerChanged.emit(isNavigatingBackwards);
    this.sendDoubleDrawerLoadDataEvent();
  }
  sendDoubleDrawerLoadDataEvent() {
    analyticsManager.analyticsManager.setDrawerType(navContentStore.DisplayElementTypes.DoubleDrawer);
    const activeRoutingKey = this.animatingRoutingKey || '';
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DRAWER_LOAD, {
      componentDisplay: {
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(activeRoutingKey, navContentStore.ElementTypes.doubleDrawer),
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  sendDataEventOfCloseButtonClick() {
    const activeRoutingKey = this.animatingRoutingKey || '';
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.MENU_CLOSE_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'X',
        clickElementType: navContentStore.ClickElementTypes.Button,
        targetElement: 'level-0'
      },
      componentDisplay: {
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(activeRoutingKey, navContentStore.ElementTypes.closeButton),
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  animateIfSameLength(newHistory, oldHistory) {
    return (newHistory.length === oldHistory.length &&
      this.routingKeyPointer === newHistory.length - 1 &&
      newHistory[newHistory.length - 1] !== oldHistory[oldHistory.length - 1]);
  }
  componentWillLoad() {
    this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    this.animatingRoutingKeyPointer = this.routingKeyPointer;
    this.usingKeyboard = this.initialUsingKeyboard;
  }
  componentDidLoad() {
    const routeChangeCallbacks = {
      onSlideMainDrawerOutEnd: async () => this.updateRouting()
    };
    doubleDrawerAnimationSequences.registerOpenDoubleDrawerSequence({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: helper.DrawerStatusValues.startOpening });
      },
      onAnimationEnds: () => {
        this.phnDrawerStatus.emit({ status: helper.DrawerStatusValues.finishOpening });
        this.focusOnInitialElement();
      }
    });
    doubleDrawerAnimationSequences.registerCloseDoubleDrawerSequence({
      onBackdropFadeOutEnd: async () => {
        this.backdropClosed.emit();
      },
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: helper.DrawerStatusValues.startClosing });
      },
      onAnimationEnds: () => {
        this.phnDrawerStatus.emit({ status: helper.DrawerStatusValues.finishClosing });
      }
    });
    doubleDrawerAnimationSequences.registerBackToPreviousMenuSequence(routeChangeCallbacks);
    doubleDrawerAnimationSequences.registerForwardToNextMenuSequence(routeChangeCallbacks);
    doubleDrawerAnimationSequences.registerTransitionSequence(routeChangeCallbacks);
    doubleDrawerAnimationSequences.registerTransitionSequence(routeChangeCallbacks, 'reverse');
    this.sendDoubleDrawerLoadDataEvent();
  }
  render() {
    const previousRoutingKey = this.routingKeyHistory[this.animatingRoutingKeyPointer - 1];
    const backButtonText = menuItemsService.getBackButtonText(navContentStore.navContentStore.state, previousRoutingKey);
    const topLevelRoutingKey = routingKey.findTopLevelRoutingKey(this.animatingRoutingKey);
    const wasPreviouslyOnDealerSearch = routingKey.findTopLevelRoutingKey(previousRoutingKey) === routingKey.RoutingKeys.DEALER_SEARCH;
    const isOnDealerDetails = topLevelRoutingKey === routingKey.RoutingKeys.DEALER_SEARCH && this.animatingRoutingKey !== topLevelRoutingKey;
    return (index.h(index.Host, { role: "dialog", "aria-modal": "true", "aria-label": "navigation modal dialog" }, index.h("phn-p-button", { variant: "secondary", class: "close-button", theme: "dark", "hide-label": "true", icon: 'close', aria: "{ 'aria-label': 'close modal dialog' }", "data-test-id": "close-button", onClick: () => {
        this.sendDataEventOfCloseButtonClick();
        this.clickDrawerHeaderClose.emit();
      } }), helper.isString(this.animatingRoutingKey) ? (index.h(index.Fragment, null, index.h("div", { class: "drawer", id: "side-drawer" }, index.h(SideDrawerContent, { activeRoutingKey: this.animatingRoutingKey, locale: this.locale, backButtonText: wasPreviouslyOnDealerSearch ? '' : backButtonText, onClickBack: () => this.goBackToPreviousMenu() })), index.h("div", { class: "drawer", id: "main-drawer" }, index.h(MainDrawerContent, { activeRoutingKey: this.animatingRoutingKey, breakpoint: this.breakpoint, locale: this.locale, backButtonText: isOnDealerDetails ? backButtonText : '', receivedContent: this.receivedContent, onClickBack: () => this.goBackToPreviousMenu() }), index.h("div", { class: "bottom-gradient" })))) : null));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "routingKeyPointer": ["watchRoutingKeyPointer"],
    "routingKeyHistory": ["watchRoutingKeyHistory"]
  }; }
};
DoubleDrawer.style = doubleDrawerCss;

exports.phn_double_drawer = DoubleDrawer;

//# sourceMappingURL=phn-double-drawer.cjs.entry.js.map