'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-947214e4.js');
const routingKey = require('./routing-key-39c28377.js');
const naviError = require('./navi-error-3887a972.js');
const globalDataLayerService = require('./global-data-layer-service-a697b177.js');
const navContentStore = require('./nav-content-store-792bb73e.js');
const featureToggles = require('./feature-toggles-e81741ab.js');
const shopHelper = require('./shop-helper-c61c217b.js');
const animationManager = require('./animation-manager-cd2e5425.js');
require('./window-service-c9a19f26.js');

function isPcomSearchAvailable(locale, app) {
  const countryList = ['de-DE', 'en-US', 'en-CN', 'zh-CN'];
  return featureToggles.featureToggles.isPcomSearchToggleActive() && countryList.includes(locale) && app === naviError.Application.pcom;
}
function getSearchLink(locale) {
  switch (locale) {
    case 'de-DE':
      return 'https://www.porsche.com/germany/search/';
    case 'en-US':
      return 'https://www.porsche.com/usa/search/';
    case 'en-CN':
      return 'https://www.porsche.com/china/en/search/';
    case 'zh-CN':
      return 'https://www.porsche.com/china/zh/search/';
    default:
      return '';
  }
}

function pureButtonSkeleton() {
  return (index.h("div", { class: "skeleton-container" },
    index.h("div", { class: "pure-button-skeleton" })));
}
function burgerButtonSkeleton() {
  return (index.h("div", { class: "skeleton-container" },
    index.h("div", { class: "burger-button-skeleton" })));
}

function pcomIcons({ locale, app, mode, theme, isNavigationLoaded }) {
  function sendDataLayerEvent(url) {
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.PCOM_SEARCH_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.pcom.search',
        clickElementName: 'Pcom Search',
        targetUrl: url
      }
    });
  }
  return {
    leftIcons: isPcomSearchAvailable(locale, app) ? (index.h("div", { class: "icon" },
      index.h("phn-p-link-pure", { icon: "search", "hide-label": "true", stretch: "true", aria: "{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the Porsche.com search' }", "data-test-id": "pcom-search-button", target: '_self', href: getSearchLink(locale), onClick: () => {
          sendDataLayerEvent(getSearchLink(locale));
        }, theme: naviError.getRightTheme(theme, mode), style: isNavigationLoaded ? {} : { display: 'none' } }),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null,
    rightIcons: null
  };
}

function shopIcons({ locale, app, mode, theme, isNavigationLoaded }) {
  function getShoppingCartLink() {
    var _a;
    const shopLink = (_a = navContentStore.navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.cart;
    if (shopLink !== undefined && shopLink !== '') {
      return `${shopLink}`;
    }
    return '';
  }
  function showShoppingCart() {
    const { numberOfShoppingItems, shopInformation } = shopHelper.shopStateStore.state;
    let numberOfItems = shopInformation.numberOfShoppingItems;
    if (numberOfItems === 0) {
      numberOfItems = numberOfShoppingItems;
    }
    switch (true) {
      case numberOfItems === 0:
        return 'shopping-bag';
      case numberOfItems > 0:
        return 'shopping-bag-filled';
      default:
        return 'shopping-bag';
    }
  }
  function getAriaLabelForShoppingCart() {
    const { shopInformation } = shopHelper.shopStateStore.state;
    return `My shopping bag, ${shopInformation.numberOfShoppingItems} items, estimated subtotal ${shopInformation.subTotal}`;
  }
  return {
    leftIcons: shopHelper.isShopAvailable(locale, app) ? (index.h("div", { class: "icon" },
      index.h("phn-p-button-pure", { icon: "search", "hide-label": "true", stretch: "true", aria: "{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the shop search field' }", "data-test-id": "search-button", onClick: () => {
          animationManager.animationManager.play('openContextualDrawer');
          sendDataLayerEventContextualDrawer();
        }, style: isNavigationLoaded ? {} : { display: 'none' }, theme: naviError.getRightTheme(theme, mode) }),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null,
    rightIcons: shopHelper.isShopAvailable(locale, app) ? (index.h("div", { class: "icon" },
      index.h("phn-p-link-pure", { target: '_self', "hide-label": "true", icon: "none", theme: naviError.getRightTheme(theme, mode), style: isNavigationLoaded ? {} : { display: 'none' }, class: "shopping-cart-link", "data-test-id": "shopping-cart-link", onClick: () => {
          sendDataLayerEventShoppingCart(getShoppingCartLink());
        } },
        index.h("a", { href: getShoppingCartLink(), "aria-label": getAriaLabelForShoppingCart() },
          index.h("div", { class: "icon-flex" },
            index.h(ShoppingCartCount, { styleClass: "shopping-item-count", theme: theme, mode: mode }),
            index.h("phn-p-icon", { theme: naviError.getRightTheme(theme, mode), name: showShoppingCart(), "data-test-id": "shopping-cart-link-icon" })))),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null
  };
}
const ShoppingCartCount = ({ styleClass, theme, mode }) => {
  const shoppingItemCountOver99 = '+99';
  const { numberOfShoppingItems, shopInformation } = shopHelper.shopStateStore.state;
  let numberOfItems = shopInformation.numberOfShoppingItems;
  if (numberOfItems === 0) {
    numberOfItems = numberOfShoppingItems;
  }
  const displayedCount = numberOfItems < 99 ? numberOfItems : shoppingItemCountOver99;
  if (numberOfItems <= 0)
    return '';
  return (index.h("span", { class: styleClass, style: mode === naviError.NavigationMode.hero && theme === naviError.NavigationTheme.dark ? { color: 'black' } : { color: 'white' } }, displayedCount));
};
function sendDataLayerEventContextualDrawer() {
  globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.CONTEXTUAL_BUTTON_CLICK, {
    componentClick: {
      clickElementId: 'mainmenu.shop.search',
      clickElementName: 'Shop search'
    }
  });
}
function sendDataLayerEventShoppingCart(url) {
  globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.CONTEXTUAL_BUTTON_CLICK, {
    componentClick: {
      clickElementId: 'mainmenu.shop.shoppingbag',
      clickElementName: 'Shopping cart',
      targetUrl: url
    }
  });
}

const level0IconsCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-level-0-icons{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-level-0-icons{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-level-0-icons{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-level-0-icons{-ms-flex-wrap:wrap;flex-wrap:wrap}.contextual-icons.sc-phn-level-0-icons{display:grid;grid-template-columns:1fr auto 1fr;grid-template-rows:1fr;gap:0px 0px;grid-template-areas:\"left center right\";width:100%}.contextual-icons.sc-phn-level-0-icons div.left-icons.sc-phn-level-0-icons,.contextual-icons.sc-phn-level-0-icons div.right-icons.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center}.contextual-icons.sc-phn-level-0-icons div.left-icons.sc-phn-level-0-icons{grid-area:left;justify-self:start}.contextual-icons.sc-phn-level-0-icons-s>*,.contextual-icons .sc-phn-level-0-icons-s>*{grid-area:center;justify-self:center}.contextual-icons.sc-phn-level-0-icons div.right-icons.sc-phn-level-0-icons{grid-area:right;justify-self:end}.contextual-icons.sc-phn-level-0-icons .icon-flex.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{position:relative;overflow:hidden;padding:0.375rem}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-cart-link.sc-phn-level-0-icons{position:relative;z-index:2}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-item-count.sc-phn-level-0-icons{position:absolute;z-index:12;font-size:7px;font-weight:600;line-height:28px;-ms-flex-pack:center;justify-content:center}@media (min-width: 1000px){.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{padding:0.5rem}}@media (min-width: 1760px){.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{padding:0.75rem}}.skeleton-container.sc-phn-level-0-icons{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex;height:28px}.skeleton-container.sc-phn-level-0-icons .burger-button-skeleton.sc-phn-level-0-icons{margin-right:0.375rem;width:1.5rem;height:1.5rem;border-radius:4px;background:#d8d8db}@media (min-width: 760px){.skeleton-container.sc-phn-level-0-icons .burger-button-skeleton.sc-phn-level-0-icons{width:4.75rem;height:1.5rem}}.skeleton-container.sc-phn-level-0-icons .pure-button-skeleton.sc-phn-level-0-icons{width:1.5rem;height:1.5rem;border-radius:4px;background:#d8d8db}";

const Level0Icons = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.openDrawer = index.createEvent(this, "openDrawer", 7);
    this.locale = undefined;
    this.theme = naviError.NavigationTheme.light;
    this.mode = naviError.NavigationMode.navbar;
    this.app = naviError.Application.default;
    this.breakpoint = undefined;
    this.isLoading = undefined;
    this.isNavigationLoaded = undefined;
  }
  render() {
    const contextualIconsProps = {
      locale: this.locale,
      app: this.app,
      mode: this.mode,
      theme: this.theme,
      isNavigationLoaded: this.isNavigationLoaded
    };
    const IconsStrategies = {
      pcom: () => pcomIcons(contextualIconsProps),
      shop: () => shopIcons(contextualIconsProps),
      default: () => ({ leftIcons: null, rightIcons: null })
    };
    const iconsStrategy = IconsStrategies[this.app];
    const contextualIcons = iconsStrategy();
    const hasMarketPorscheID = navContentStore.navContentStore.state.myPorsche;
    return (index.h("div", { class: "contextual-icons" }, index.h("div", { class: "left-icons" }, index.h("phn-burger-button", { theme: this.theme, mode: this.mode, hideLabel: isPcomSearchAvailable(this.locale, this.app) || shopHelper.isShopAvailable(this.locale, this.app)
        ? this.breakpoint <= naviError.breakpoint.xs
        : this.breakpoint < naviError.breakpoint.xs, alignLabel: 'right', isLoading: this.isLoading, onClick: (e) => {
        this.openDrawer.emit({ initialRoutingKey: '', isKeyboardClick: naviError.IsKeyboardClick(e) });
      }, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? burgerButtonSkeleton() : null, this.breakpoint <= naviError.breakpoint.xs ? contextualIcons.leftIcons : null), index.h("slot", null), index.h("div", { class: "right-icons" }, this.breakpoint > naviError.breakpoint.xs ? contextualIcons.leftIcons : null, contextualIcons.rightIcons, hasMarketPorscheID ? (index.h("div", { class: "icon" }, index.h("phn-my-porsche-icon-button", { mode: this.mode, theme: this.theme, onClick: (e) => {
        this.openDrawer.emit({
          initialRoutingKey: routingKey.RoutingKeys.MY_PORSCHE,
          isKeyboardClick: naviError.IsKeyboardClick(e)
        });
      }, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? pureButtonSkeleton() : null)) : null)));
  }
};
Level0Icons.style = level0IconsCss;

exports.phn_level_0_icons = Level0Icons;

//# sourceMappingURL=phn-level-0-icons.cjs.entry.js.map