'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-98b6cdb7.js');
const routingKey = require('./routing-key-7ce95adb.js');
const helper = require('./helper-2e938230.js');
const globalDataLayerService = require('./global-data-layer-service-6bfe4ea6.js');
const navContentStore = require('./nav-content-store-7e491673.js');
const featureToggles = require('./feature-toggles-56b31f71.js');
const shopHelper = require('./shop-helper-be8a945d.js');
const animationManager = require('./animation-manager-697ad19b.js');
const routingManager = require('./routing-manager-3a80705c.js');
require('./router-store-fdfbb3ef.js');
require('./dealer-search-results-store-82b04c04.js');
require('./animations-34f77238.js');

function isPcomSearchAvailable(locale, app) {
  const countryList = ['de-DE', 'en-US', 'en-CN', 'zh-CN'];
  return featureToggles.featureToggles.isPcomSearchToggleActive() && countryList.includes(locale) && app === helper.Application.pcom;
}
function getSearchLink(locale) {
  switch (locale) {
    case 'de-DE':
      return 'https://www.porsche.com/germany/search/';
    case 'en-US':
      return 'https://www.porsche.com/usa/search/';
    case 'en-CN':
      return 'https://www.porsche.com/china/en/search/';
    case 'zh-CN':
      return 'https://www.porsche.com/china/zh/search/';
    default:
      return '';
  }
}

function pureButtonSkeleton() {
  return (index.h("div", { class: "skeleton-container" },
    index.h("div", { class: "pure-button-skeleton" })));
}
function burgerButtonSkeleton() {
  return (index.h("div", { class: "skeleton-container" },
    index.h("div", { class: "burger-button-skeleton" })));
}

function pcomIcons({ locale, app, mode, theme, isNavigationLoaded }) {
  function sendDataLayerEvent(url) {
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.PCOM_SEARCH_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.pcom.search',
        clickElementName: 'Pcom Search',
        targetUrl: url
      }
    });
  }
  return {
    leftIcons: isPcomSearchAvailable(locale, app) ? (index.h("div", { class: "icon" },
      index.h("phn-p-link-pure", { icon: "search", "hide-label": "true", stretch: "true", aria: "{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the Porsche.com search' }", "data-test-id": "pcom-search-button", target: '_self', href: getSearchLink(locale), onClick: () => {
          sendDataLayerEvent(getSearchLink(locale));
        }, theme: helper.getRightTheme(theme, mode), style: isNavigationLoaded ? {} : { display: 'none' } }),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null,
    rightIcons: null
  };
}

function shopIcons({ locale, app, mode, theme, isNavigationLoaded, isDesktop }) {
  var _a, _b, _c;
  const { shopInformation } = shopHelper.shopStateStore.state;
  const shopCartLink = ((_a = navContentStore.navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.cart) || '';
  const shopWishlistLink = ((_c = (_b = navContentStore.navContentStore.state.shop) === null || _b === void 0 ? void 0 : _b.wishlist) === null || _c === void 0 ? void 0 : _c.link) || '';
  function getAriaLabelForShoppingBag() {
    return `My shopping bag, ${shopInformation.numberOfShoppingItems} items, estimated subtotal ${shopInformation.subTotal}`;
  }
  function getAriaLabelForWishlist() {
    return `My wishlist, ${shopInformation.wishlistItemsNumber} items`;
  }
  return {
    leftIcons: shopHelper.isShopAvailable(locale, app) ? (index.h("div", { class: "icon" },
      index.h("phn-p-button-pure", { icon: "search", "hide-label": "true", stretch: "true", aria: "{ 'aria-haspopup': 'dialog', 'aria-label' : 'open the shop search field' }", "data-test-id": "search-button", onClick: () => {
          animationManager.animationManager.play('openContextualDrawer');
          sendDataLayerEventContextualDrawer();
        }, style: isNavigationLoaded ? {} : { display: 'none' }, theme: helper.getRightTheme(theme, mode) }),
      !isNavigationLoaded ? pureButtonSkeleton() : null)) : null,
    rightIcons: shopHelper.isShopAvailable(locale, app) ? (index.h(index.Fragment, null,
      isDesktop ? (index.h("div", { class: "icon" },
        index.h("phn-p-link-pure", { target: '_self', "hide-label": "true", icon: "none", theme: helper.getRightTheme(theme, mode), style: isNavigationLoaded ? {} : { display: 'none' }, className: "wishlist-link", "data-test-id": "wishlist-link", onClick: () => {
            sendDataLayerEventShoppingCart(shopWishlistLink, 'mainmenu.shop.wishlist', 'Wishlist');
          } },
          index.h("a", { href: shopWishlistLink, "aria-label": getAriaLabelForWishlist() },
            index.h("div", { class: "icon-flex" },
              index.h(BadgeCount, { numberOfItems: shopInformation.wishlistItemsNumber, theme: theme, mode: mode }),
              index.h("phn-p-icon", { theme: helper.getRightTheme(theme, mode), name: shopHelper.handleFilledIcon('heart', shopInformation.wishlistItemsNumber), "data-test-id": "wishlist-link-icon" })))))) : null,
      !isNavigationLoaded && isDesktop ? pureButtonSkeleton() : null,
      index.h("div", { class: "icon" },
        index.h("phn-p-link-pure", { target: '_self', "hide-label": "true", icon: "none", theme: helper.getRightTheme(theme, mode), style: isNavigationLoaded ? {} : { display: 'none' }, class: "shopping-cart-link", "data-test-id": "shopping-cart-link", onClick: () => {
            sendDataLayerEventShoppingCart(shopCartLink, 'mainmenu.shop.shoppingbag', 'Shopping cart');
          } },
          index.h("a", { href: shopCartLink, "aria-label": getAriaLabelForShoppingBag() },
            index.h("div", { class: "icon-flex" },
              index.h(BadgeCount, { numberOfItems: shopInformation.numberOfShoppingItems, theme: theme, mode: mode }),
              index.h("phn-p-icon", { theme: helper.getRightTheme(theme, mode), name: shopHelper.handleFilledIcon('shopping-bag', shopInformation.numberOfShoppingItems), "data-test-id": "shopping-cart-link-icon" })))),
        !isNavigationLoaded ? pureButtonSkeleton() : null))) : null
  };
}
const BadgeCount = ({ numberOfItems = 0, theme, mode }) => {
  const shoppingItemCountOver99 = '99+';
  const displayedCount = numberOfItems < 99 ? numberOfItems : shoppingItemCountOver99;
  if (numberOfItems <= 0)
    return '';
  return (index.h("span", { class: `shopping-item-count ${numberOfItems < 10 ? '' : 'pill'} ${helper.getRightTheme(theme, mode)}` }, displayedCount));
};
function sendDataLayerEventContextualDrawer() {
  globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.CONTEXTUAL_BUTTON_CLICK, {
    componentClick: {
      clickElementId: 'mainmenu.shop.search',
      clickElementName: 'Shop search'
    }
  });
}
function sendDataLayerEventShoppingCart(url, elementId, elementName) {
  globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.CONTEXTUAL_BUTTON_CLICK, {
    componentClick: {
      clickElementId: elementId,
      clickElementName: elementName,
      targetUrl: url
    }
  });
}

const level0IconsCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-level-0-icons{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-level-0-icons{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-level-0-icons{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-level-0-icons{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-level-0-icons{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-level-0-icons{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-level-0-icons{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-level-0-icons{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-level-0-icons{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-level-0-icons{-ms-flex-wrap:wrap;flex-wrap:wrap}.contextual-icons.sc-phn-level-0-icons{display:grid;grid-template-columns:1fr auto 1fr;grid-template-rows:1fr;gap:0px 0px;grid-template-areas:\"left center right\";width:100%}.contextual-icons.sc-phn-level-0-icons div.left-icons.sc-phn-level-0-icons,.contextual-icons.sc-phn-level-0-icons div.right-icons.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center}.contextual-icons.sc-phn-level-0-icons div.left-icons.sc-phn-level-0-icons{grid-area:left;justify-self:start}.contextual-icons.sc-phn-level-0-icons-s>*,.contextual-icons .sc-phn-level-0-icons-s>*{grid-area:center;justify-self:center}.contextual-icons.sc-phn-level-0-icons div.right-icons.sc-phn-level-0-icons{grid-area:right;justify-self:end}.contextual-icons.sc-phn-level-0-icons .icon-flex.sc-phn-level-0-icons{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{position:relative;padding:0.375rem}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-cart-link.sc-phn-level-0-icons{position:relative;z-index:2}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-item-count.sc-phn-level-0-icons{color:white;position:absolute;margin-left:17px;margin-top:-6px;z-index:12;font-size:11px;line-height:8px;width:14px;height:8px;padding:4px 1px;text-align:center;border-radius:10px}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-item-count.pill.sc-phn-level-0-icons{margin-left:23px;font-size:10px;width:20px;height:7px}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-item-count.light.sc-phn-level-0-icons{background-color:#2762ec}.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons .shopping-item-count.dark.sc-phn-level-0-icons{background-color:#178bff}@media (min-width: 1000px){.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{padding:0.5rem}}@media (min-width: 1760px){.contextual-icons.sc-phn-level-0-icons div.icon.sc-phn-level-0-icons{padding:0.75rem}}.skeleton-container.sc-phn-level-0-icons{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex;height:28px}.skeleton-container.sc-phn-level-0-icons .burger-button-skeleton.sc-phn-level-0-icons{margin-right:0.375rem;width:1.5rem;height:1.5rem;border-radius:4px;background:#d8d8db}@media (min-width: 760px){.skeleton-container.sc-phn-level-0-icons .burger-button-skeleton.sc-phn-level-0-icons{width:4.75rem;height:1.5rem}}.skeleton-container.sc-phn-level-0-icons .pure-button-skeleton.sc-phn-level-0-icons{width:1.5rem;height:1.5rem;border-radius:4px;background:#d8d8db}";

const Level0Icons = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.openDrawer = index.createEvent(this, "openDrawer", 7);
    this.locale = undefined;
    this.theme = helper.NavigationTheme.light;
    this.mode = helper.NavigationMode.navbar;
    this.app = helper.Application.default;
    this.breakpoint = undefined;
    this.isLoading = undefined;
    this.isNavigationLoaded = undefined;
  }
  render() {
    const contextualIconsProps = {
      locale: this.locale,
      app: this.app,
      mode: this.mode,
      theme: this.theme,
      isNavigationLoaded: this.isNavigationLoaded,
      isDesktop: helper.isDesktop(this.breakpoint)
    };
    const IconsStrategies = {
      pcom: () => pcomIcons(contextualIconsProps),
      shop: () => shopIcons(contextualIconsProps),
      default: () => ({ leftIcons: null, rightIcons: null })
    };
    const iconsStrategy = IconsStrategies[this.app];
    const contextualIcons = iconsStrategy();
    const hasMarketPorscheID = navContentStore.navContentStore.state.myPorsche;
    return (index.h("div", { class: "contextual-icons" }, index.h("div", { class: "left-icons" }, index.h("phn-burger-button", { theme: this.theme, mode: this.mode, hideLabel: isPcomSearchAvailable(this.locale, this.app) || shopHelper.isShopAvailable(this.locale, this.app)
        ? this.breakpoint <= helper.breakpoint.xs
        : this.breakpoint < helper.breakpoint.xs, alignLabel: 'right', isLoading: this.isLoading, onClick: (e) => {
        this.openDrawer.emit({ initialRoutingKey: '', isKeyboardClick: helper.IsKeyboardClick(e) });
      }, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? burgerButtonSkeleton() : null, this.breakpoint <= helper.breakpoint.xs ? contextualIcons.leftIcons : null), index.h("slot", null), index.h("div", { class: "right-icons" }, this.breakpoint > helper.breakpoint.xs ? contextualIcons.leftIcons : null, contextualIcons.rightIcons, hasMarketPorscheID ? (index.h("div", { class: "icon" }, index.h("phn-my-porsche-icon-button", { mode: this.mode, theme: this.theme, onClick: (e) => {
        if (helper.isDesktop(this.breakpoint)) {
          this.openDrawer.emit({
            initialRoutingKey: routingKey.RoutingKeys.MY_PORSCHE,
            isKeyboardClick: helper.IsKeyboardClick(e)
          });
        }
        else {
          routingManager.goTo(routingKey.RoutingKeys.MY_PORSCHE);
          navContentStore.navStateStore.state.usingKeyboard = helper.IsKeyboardClick(e);
        }
      }, style: this.isNavigationLoaded ? {} : { display: 'none' } }), !this.isNavigationLoaded ? pureButtonSkeleton() : null)) : null)));
  }
};
Level0Icons.style = level0IconsCss;

exports.phn_level_0_icons = Level0Icons;

//# sourceMappingURL=phn-level-0-icons.cjs.entry.js.map