'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-947214e4.js');
const globalDataLayerService = require('./global-data-layer-service-a697b177.js');
const navContentStore = require('./nav-content-store-792bb73e.js');
const analyticsManager = require('./analytics-manager-c01a9024.js');
const naviError = require('./navi-error-3887a972.js');
const menuItemsService = require('./menu-items-service-e380c308.js');
const routingKey = require('./routing-key-39c28377.js');
const ready = require('./ready-3486a753.js');
const timeout = require('./timeout-2252a895.js');
require('./router-store-96589d10.js');
require('./ab-testing-constructor-service-c7ed262c.js');
require('./window-service-c9a19f26.js');
require('./feature-toggles-e81741ab.js');

const drawerHeaderCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-drawer-header{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-drawer-header{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-drawer-header{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-drawer-header{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-drawer-header{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-drawer-header{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-drawer-header-h{display:block}.drawer-header.sc-phn-drawer-header{height:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.heading-items.sc-phn-drawer-header{margin-bottom:0.25rem;-ms-flex-align:center;align-items:center}.skeleton-headline.sc-phn-drawer-header{width:9.375rem;height:1.5rem;background:#d8d8db;border-radius:4px}.button-skeleton.sc-phn-drawer-header{margin-left:0.5rem;border-radius:0.25rem;height:1.5rem;width:1.5rem;background:#d8d8db}";

const DrawerHeader = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.clickDrawerHeaderBack = index.createEvent(this, "clickDrawerHeaderBack", 7);
    this.clickDrawerHeaderClose = index.createEvent(this, "clickDrawerHeaderClose", 7);
    this.backButtonText = '';
    this.backButtonAnalyticsId = undefined;
    this.showBackButton = false;
    this.activeRoutingKey = undefined;
    this.breakpoint = undefined;
    this.receivedContent = false;
    this.locale = undefined;
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  async waitForComponentsToLoad() {
    await ready.componentsOnReady(this.el, new timeout.Timeout(5000));
    this.showSkeleton = !this.receivedContent;
  }
  sendDataLayerEvent() {
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.MENU_CLOSE_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'X',
        clickElementType: navContentStore.ClickElementTypes.Button,
        targetElement: 'level-0'
      },
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(this.activeRoutingKey, navContentStore.ElementTypes.closeButton),
        displayElementName: 'X'
      }
    });
  }
  render() {
    const topLevelRoutingKey = routingKey.findTopLevelRoutingKey(this.activeRoutingKey);
    const isMobile = !naviError.isDesktop(this.breakpoint);
    const displayHeadlineContent = topLevelRoutingKey !== undefined
      ? menuItemsService.getHeadlineText(navContentStore.navContentStore.state, this.activeRoutingKey, topLevelRoutingKey)
      : '';
    const modelType = displayHeadlineContent.includes('mainmenu.') ? displayHeadlineContent.split('mainmenu.')[1] : '';
    const subtext = menuItemsService.getSubtext(topLevelRoutingKey, this.activeRoutingKey, this.locale);
    return (index.h("div", { class: "drawer-header" }, this.showBackButton ? (index.h(index.Fragment, null, index.h("phn-back-button", { class: "back-button", onClick: () => {
        this.clickDrawerHeaderBack.emit();
      }, analyticsId: this.backButtonAnalyticsId, text: isMobile ? '' : this.backButtonText, activeRoutingKey: this.activeRoutingKey, style: !this.showSkeleton ? {} : { display: 'none' } }), this.showSkeleton ? index.h("div", { class: "button-skeleton" }) : null)) : (index.h("div", { class: "spacer" })), isMobile ? (modelType === '' ? (index.h(index.Fragment, null, this.showSkeleton && this.showBackButton ? index.h("div", { class: "skeleton-headline" }) : null, index.h("phn-heading", { text: displayHeadlineContent, style: this.showSkeleton || !naviError.isString(displayHeadlineContent) ? { display: 'none' } : {}, class: "heading-items", subtext: subtext }))) : (index.h(index.Fragment, null, this.showSkeleton ? index.h("div", { class: "skeleton-headline" }) : null, index.h("phn-signature-heading", { text: modelType, subtext: subtext })))) : null, index.h(index.Fragment, null, index.h("phn-p-button-pure", { class: "close-button", icon: "close", hideLabel: "true", aria: { 'aria-label': 'close dialog' }, size: "small", style: !this.showSkeleton ? {} : { display: 'none' }, "data-test-id": "close-button", onClick: () => {
        this.sendDataLayerEvent();
        this.clickDrawerHeaderClose.emit();
      } }, "Close Dialog"), this.showSkeleton ? index.h("div", { class: "button-skeleton" }) : null)));
  }
  get el() { return index.getElement(this); }
};
DrawerHeader.style = drawerHeaderCss;

exports.phn_drawer_header = DrawerHeader;

//# sourceMappingURL=phn-drawer-header.cjs.entry.js.map