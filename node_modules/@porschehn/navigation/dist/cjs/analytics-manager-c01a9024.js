'use strict';

const routingKey = require('./routing-key-39c28377.js');
const routerStore = require('./router-store-96589d10.js');
const navContentStore = require('./nav-content-store-792bb73e.js');
const naviError = require('./navi-error-3887a972.js');
const menuItemsService = require('./menu-items-service-e380c308.js');

const state = {};
function setDrawerType(drawerType) {
  state.drawerType = drawerType;
}
function calculateDisplayElementId(routingKeyForNavigatingForward) {
  const { drawerType } = state;
  const mainDrawerRoutingKey = (naviError.isString(routingKeyForNavigatingForward)
    ? routingKey.getPreviousRoutingKey(routingKeyForNavigatingForward)
    : routerStore.routerStore.state.routingKeyHistory[routerStore.routerStore.state.routingKeyPointer]) || '';
  const lastMainDrawerRoutingKey = routingKey.getLastRoutingSegment(mainDrawerRoutingKey);
  const mainDrawerLevel = routingKey.determineMainDrawerLevel(mainDrawerRoutingKey);
  const sideDrawerLevel = mainDrawerLevel - 1;
  if (!naviError.isString(mainDrawerRoutingKey)) {
    return 'level0';
  }
  const mainDrawerDisplayElementId = naviError.isString(mainDrawerRoutingKey)
    ? `level${mainDrawerLevel}-${lastMainDrawerRoutingKey}`
    : `level${mainDrawerLevel - 1}-unknown`;
  if (drawerType === 'doubleDrawer') {
    if (mainDrawerRoutingKey === '') {
      return `level${sideDrawerLevel}-unknown_level${mainDrawerLevel}-unknown`;
    }
    const sideDrawerRoutingKey = menuItemsService.getSideDrawerRoutingKey(mainDrawerRoutingKey);
    return `level${sideDrawerLevel}-${sideDrawerRoutingKey}_${mainDrawerDisplayElementId}`;
  }
  return mainDrawerDisplayElementId;
}
function calculateDisplayElementType(activeRoutingKey, elementType, isSideDrawer) {
  const { drawerType } = state;
  const mainDrawerLevel = routingKey.determineMainDrawerLevel(activeRoutingKey);
  if (drawerType === 'doubleDrawer') {
    let sideDrawerLevel = mainDrawerLevel;
    if (isSideDrawer) {
      sideDrawerLevel = sideDrawerLevel - 1;
    }
    return `level${sideDrawerLevel}_${elementType}`;
  }
  else {
    return naviError.isString(activeRoutingKey)
      ? `level${mainDrawerLevel}_${elementType}`
      : `level${mainDrawerLevel - 1}_${elementType}`;
  }
}
function getModelName(bodyType) {
  const urlSplitIntoPieces = bodyType.link.split('/');
  const lastElementInUrlSplit = urlSplitIntoPieces[urlSplitIntoPieces.length - 1];
  let modelName;
  if (lastElementInUrlSplit === '') {
    if (urlSplitIntoPieces[urlSplitIntoPieces.length - 2] === undefined) {
      modelName = '';
    }
    else {
      modelName = urlSplitIntoPieces[urlSplitIntoPieces.length - 2].split('-').join(' ');
    }
  }
  else {
    modelName = lastElementInUrlSplit.split('-').join(' ');
  }
  return modelName;
}
function getModelTargetElement(elementId, text) {
  if (elementId.includes('models')) {
    const mainDrawerLevel = routingKey.determineMainDrawerLevel(elementId);
    return `level${mainDrawerLevel}_${text.toLowerCase()}`;
  }
  return;
}
function getDrawerType() {
  return state.drawerType;
}
function getDealerResultsLoadDisplayElementId(elementId) {
  if (getDrawerType() === 'doubleDrawer') {
    return elementId;
  }
  else {
    return calculateDisplayElementId();
  }
}
function getDealerResultsLoadDisplayElementType() {
  if (getDrawerType() === 'doubleDrawer') {
    return navContentStore.DEALER_SEARCH_ELEMENT_TYPE;
  }
  else {
    return calculateDisplayElementType('', navContentStore.ElementTypes.dealerSearchForm);
  }
}
const analyticsManager = {
  setDrawerType,
  getDealerResultsLoadDisplayElementId,
  calculateDisplayElementId,
  getDealerResultsLoadDisplayElementType,
  calculateDisplayElementType,
  getModelName,
  getModelTargetElement
};

exports.analyticsManager = analyticsManager;

//# sourceMappingURL=analytics-manager-c01a9024.js.map