'use strict';

const animationManager = require('./animation-manager-feeac76f.js');
const animations = require('./animations-34f77238.js');

const registerOpenSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer',
        animation: {
          className: 'slide-in-from-left',
          cleanUpAfterAnimation: (element) => {
            element.style.left = '0px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-in-animation',
          cleanUpAfterAnimation: (element) => {
            element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
            element.style.opacity = '1';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.animationManager.register(animations.AnimationSequences.OPEN_SINGLE_DRAWER, animationManager.makeSequence(sequence));
};
const registerCloseSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer',
        animation: {
          className: 'slide-out-to-left',
          cleanUpBeforeAnimation: (element) => {
            element.style.left = '';
          },
          cleanUpAfterAnimation: (element) => {
            element.style.left = '-1000px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-out-animation',
          cleanUpBeforeAnimation: (element) => {
            element.style.backgroundColor = '';
            element.style.opacity = '';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.animationManager.register(animations.AnimationSequences.CLOSE_SINGLE_DRAWER, animationManager.makeSequence(sequence));
};
const registerTransitionNextLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.animationManager.register(animations.AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER, animationManager.makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          className: 'slide-in-from-right-fixed'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const registerTransitionPreviousLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.animationManager.register(animations.AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER, animationManager.makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          className: 'slide-out-to-right-fixed'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const isPlayingSingleDrawerAnimation = () => {
  try {
    const singleDrawerAnimationSequences = [
      animations.AnimationSequences.OPEN_SINGLE_DRAWER,
      animations.AnimationSequences.CLOSE_SINGLE_DRAWER,
      animations.AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,
      animations.AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER
    ];
    return singleDrawerAnimationSequences.some((sequence) => {
      try {
        return animationManager.animationManager.isPlaying(sequence);
      }
      catch (_a) {
        return false;
      }
    });
  }
  catch (e) {
    return false;
  }
};

exports.isPlayingSingleDrawerAnimation = isPlayingSingleDrawerAnimation;
exports.registerCloseSingleDrawerAnimation = registerCloseSingleDrawerAnimation;
exports.registerOpenSingleDrawerAnimation = registerOpenSingleDrawerAnimation;
exports.registerTransitionNextLevelSingleDrawerAnimation = registerTransitionNextLevelSingleDrawerAnimation;
exports.registerTransitionPreviousLevelSingleDrawerAnimation = registerTransitionPreviousLevelSingleDrawerAnimation;

//# sourceMappingURL=single-drawer-animation-sequences-44dcfef3.js.map