'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-98b6cdb7.js');
const navContentStore = require('./nav-content-store-ed0e79aa.js');
const helper = require('./helper-67121a1c.js');
const abTestingConstructorService = require('./ab-testing-constructor-service-30304333.js');
const routingKey = require('./routing-key-2cb3d5c5.js');
const globalDataLayerService = require('./global-data-layer-service-534dfa5c.js');
const ready = require('./ready-91c0ed30.js');
const timeout = require('./timeout-2252a895.js');
const analyticsManager = require('./analytics-manager-4e31846c.js');
const dealerSearchHelper = require('./dealer-search-helper-533d9699.js');
const featureToggles = require('./feature-toggles-bb23f232.js');
const dealerService = require('./dealer-service-f3db289b.js');
const dataLayerEventSender = require('./data-layer-event-sender-e5275043.js');
require('./router-store-1a4e63e5.js');
require('./menu-items-service-3605196c.js');

const autocompleteSearchFieldCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-autocomplete-search-field{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-autocomplete-search-field{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-autocomplete-search-field{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-autocomplete-search-field{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-autocomplete-search-field{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-autocomplete-search-field{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-autocomplete-search-field{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-autocomplete-search-field{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-autocomplete-search-field{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-autocomplete-search-field{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-autocomplete-search-field{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-autocomplete-search-field{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-autocomplete-search-field-h{display:block}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field{display:block;position:relative;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field{width:100%}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-ms-clear{display:none;width:0;height:0}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-ms-reveal{display:none;width:0;height:0}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-decoration,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-cancel-button,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-results-button,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-results-decoration{display:none}.sc-phn-autocomplete-search-field-h .form-container.inline-search-form.sc-phn-autocomplete-search-field{margin-right:1rem}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;z-index:10;width:100%;background-color:white;border:1px solid #d8d8db}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field{margin-block:0;margin-inline:0;padding-inline:0;list-style-type:none}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.sc-phn-autocomplete-search-field{padding-left:0.75rem;padding:0.5rem 0 0.5rem 0.75rem;color:#010205}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.sc-phn-autocomplete-search-field:hover{color:#2762ec;background-color:#eeeff2}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.highlighted-prediction.sc-phn-autocomplete-search-field{color:#2762ec}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field .powered-by-google.sc-phn-autocomplete-search-field{margin:0.75rem 0 0.75rem 0.75rem}";

const AutocompleteSearchField = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.searchInput = index.createEvent(this, "searchInput", 7);
    this.clearSearch = index.createEvent(this, "clearSearch", 7);
    this.submitSearch = index.createEvent(this, "submitSearch", 7);
    this.predictionsToggle = index.createEvent(this, "predictionsToggle", 7);
    this.autoCompleteLoaded = index.createEvent(this, "autoCompleteLoaded", 7);
    this.placeholder = undefined;
    this.predictions = undefined;
    this.initialValue = '';
    this.errorState = '';
    this.errorMessage = '';
    this.showPredictions = false;
    this.highlightedPredictionIndex = -1;
    this.searchterm = this.initialValue;
  }
  clickListener(e) {
    this.showPredictions =
      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;
  }
  keydownListener(e) {
    if (e.key === 'Escape' && this.showPredictions) {
      e.preventDefault();
      e.stopPropagation();
      this.showPredictions = false;
    }
  }
  watchShowPredictions(newValue) {
    this.predictionsToggle.emit(newValue);
  }
  watchInitialValue() {
    this.searchterm = this.initialValue;
  }
  componentDidRender() {
    this.autoCompleteLoaded.emit(true);
  }
  onKeyDown(pressedKey) {
    if (this.predictions.length === 0)
      return;
    switch (pressedKey) {
      case 'ArrowDown':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex === this.predictions.length - 1) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        this.highlightedPredictionIndex++;
        break;
      case 'ArrowUp':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex < 0) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        else if (this.highlightedPredictionIndex === 0) {
          this.highlightedPredictionIndex = this.predictions.length - 1;
          break;
        }
        this.highlightedPredictionIndex--;
        break;
    }
    if (this.highlightedPredictionIndex > -1) {
      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;
    }
  }
  onSubmit() {
    const prediction = this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];
    this.submitSearch.emit(prediction !== null && prediction !== void 0 ? prediction : null);
    this.showPredictions = false;
    if (prediction !== undefined)
      this.searchterm = prediction.text;
  }
  render() {
    return (index.h("form", { class: "form-container", onSubmit: (event) => {
        event.preventDefault();
        this.onSubmit();
      } }, index.h("phn-p-text-field-wrapper", { "data-test-id": "dealer-search-form-input", state: helper.isString(this.errorMessage) ? 'error' : 'none', message: this.errorMessage }, index.h("input", { class: "autofocus", "aria-label": "Find a dealer by typing a city name or zip code", type: "search", placeholder: this.placeholder, autocomplete: "off", role: "combobox", "data-validate": "required", "aria-expanded": (this.predictions.length > 0 && this.showPredictions).toString(), "aria-controls": "predictions", "aria-autocomplete": "list", "aria-activedescendant": this.showPredictions ? String(this.highlightedPredictionIndex) : undefined, value: this.searchterm, onInput: (event) => {
        var _a;
        event.preventDefault();
        this.showPredictions = true;
        this.highlightedPredictionIndex = -1;
        const value = (_a = helper.getHTMLInputElement(event.target)) === null || _a === void 0 ? void 0 : _a.value;
        if (!helper.isString(value)) {
          this.searchterm = '';
          this.showPredictions = false;
          abTestingConstructorService.dealerSearchResultsStore.state.savedDealerCookie = null;
          this.clearSearch.emit();
          return;
        }
        this.searchInput.emit(value);
      }, onKeyDown: (event) => {
        this.onKeyDown(event.key);
      } })), this.predictions.length > 0 && this.showPredictions ? (index.h("div", { class: "prediction-container" }, index.h("ul", { id: "predictions", "data-test-id": "dealer-search-autocomplete-predictions", role: "listbox", "aria-label": "List of location predictions" }, this.predictions.map((prediction, index$1) => (index.h("li", { key: prediction.id, class: index$1 === this.highlightedPredictionIndex ? 'highlighted-prediction' : '', role: "option", "aria-selected": String(index$1 === this.highlightedPredictionIndex), id: String(index$1), onClick: () => {
        this.highlightedPredictionIndex = index$1;
        this.onSubmit();
      }, onKeyDown: (event) => {
        // TODO: does this code ever get executed?
        if (event.key === 'Enter') {
          this.onSubmit();
        }
      } }, index.h("phn-p-text", { color: "inherit" }, prediction.text))))), index.h("img", { class: "powered-by-google", src: index.getAssetPath(`${helper.getConfig(navContentStore.navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`), alt: "powered by Google" }))) : null));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "showPredictions": ["watchShowPredictions"],
    "initialValue": ["watchInitialValue"]
  }; }
};
AutocompleteSearchField.style = autocompleteSearchFieldCss;

const dealerDetailsDrawerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-dealer-details-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-dealer-details-drawer{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-dealer-details-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-dealer-details-drawer{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-dealer-details-drawer{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-dealer-details-drawer{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-dealer-details-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-details-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-details-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-details-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-details-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-details-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-details-drawer-h{display:block;margin-top:1.625rem}@media (min-width: 760px){.sc-phn-dealer-details-drawer-h{margin-top:-0.125rem}}@media (min-width: 1300px){.sc-phn-dealer-details-drawer-h{margin-top:-0.1875rem}}@media (min-width: 1920px){.sc-phn-dealer-details-drawer-h{margin-top:-0.4375rem}}.sc-phn-dealer-details-drawer-h .skeleton-headline.sc-phn-dealer-details-drawer{width:auto;height:3.125rem;background:#d8d8db;margin-bottom:1.75rem;border-radius:4px}.sc-phn-dealer-details-drawer-h phn-p-heading.sc-phn-dealer-details-drawer{margin-bottom:1.5rem}.sc-phn-dealer-details-drawer-h phn-menu-item.sc-phn-dealer-details-drawer{margin-top:1.5rem}.sc-phn-dealer-details-drawer-h phn-menu-item.sc-phn-dealer-details-drawer:first-of-type{margin-top:0.875rem}.skeleton.sc-phn-dealer-details-drawer-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.skeleton-menu-item.sc-phn-dealer-details-drawer-h{width:auto;height:1.25rem;background:#d8d8db;border-radius:4px}";

const DealerDetailsDrawer = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.clickDrawerHeaderBack = index.createEvent(this, "clickDrawerHeaderBack", 7);
    this.dealerId = undefined;
    this.locale = undefined;
    this.breakpoint = undefined;
    this.errorMessage = '';
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  componentDidLoad() {
    const dealer = this.getDealer();
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_DETAILS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementId(navContentStore.DEALER_SEARCH_DISPLAY_ELEMENT_ID),
        displayElementType: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer === null || dealer === void 0 ? void 0 : dealer.name
      },
      componentSearch: {
        searchTerm: abTestingConstructorService.dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: dealer === null || dealer === void 0 ? void 0 : dealer.name,
        companyId: dealer === null || dealer === void 0 ? void 0 : dealer.porschePartnerNo
      }
    });
  }
  async waitForComponentsToLoad() {
    await ready.componentsOnReady(this.el, new timeout.Timeout(5000));
    this.showSkeleton = false;
  }
  getDealer() {
    const { ppnDealer: dealer } = abTestingConstructorService.dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};
    return dealer;
  }
  renderHeading(name) {
    return (index.h(index.Fragment, null, this.showSkeleton ? index.h("div", { class: "skeleton-headline" }) : null, index.h("phn-p-heading", { style: { display: this.showSkeleton ? 'none' : '' }, tag: "h3", size: "large", "data-test-id": "dealer-headline" }, name)));
  }
  render() {
    const ppnDealer = this.getDealer();
    if (ppnDealer === undefined) {
      return index.h("div", null, this.errorMessage);
    }
    const language = navContentStore.splitLocale(this.locale).language;
    const { testDrive, finder, bookService } = navContentStore.navContentStore.state.dealer.details;
    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
    const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
    const name = language === 'en' ? ppnDealer.name : helper.isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
    // postalCode is currently not available in addressLocalized
    const hasAddress = helper.isString(address.street) || helper.isString(ppnDealer.address.postalCode) || helper.isString(address.city);
    const hasPhoneNumber = helper.isString(ppnDealer.contactDetails.phoneNumber);
    const hasEmail = helper.isString(ppnDealer.contactDetails.emailAddress);
    const hasHomepage = helper.isString(ppnDealer.contactDetails.homepage);
    const hasTestdrive = testDrive && helper.isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.text) && helper.isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.link);
    const hasName = helper.isString(ppnDealer.nameLocalized) || helper.isString(ppnDealer.name);
    const openingHours = dealerSearchHelper.getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);
    const hasOpeningHours = openingHours !== '';
    let country = '';
    try {
      country = navContentStore.splitLocale(this.locale).country;
    }
    catch (err) {
      // throw the error away
    }
    const dealerAddress = country === 'JP'
      ? `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`
      : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;
    const customDatalayerProperties = {
      componentSearch: {
        searchTerm: abTestingConstructorService.dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: name,
        companyId: ppnDealer.porschePartnerNo
      }
    };
    return (index.h(index.Host, null, hasName && helper.isDesktop(this.breakpoint) ? this.renderHeading(name) : null, hasAddress ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, 'address'), analyticsId: "mainmenu.finddealer.map", text: dealerAddress, iconLeft: "pin", "data-test-id": "dealer-address", link: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${address.street},${ppnDealer.address.postalCode},${address.city}`)}`, target: "_blank", datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails })) : null, featureToggles.featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, 'openingHours'), analyticsId: "mainmenu.finddealer.openinghours", text: openingHours, datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails, "data-test-id": "dealer-opening-hours", iconLeft: "clock" })) : null, hasPhoneNumber ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, 'number'), analyticsId: "mainmenu.finddealer.phone", text: ppnDealer.contactDetails.phoneNumber, iconLeft: "phone", "data-test-id": "dealer-phonenumber", link: `tel:${ppnDealer.contactDetails.phoneNumber}`, datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails })) : null, hasEmail ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, 'email'), analyticsId: "mainmenu.finddealer.email", text: ppnDealer.contactDetails.emailAddress, iconLeft: "email", "data-test-id": "dealer-email", link: `mailto:${ppnDealer.contactDetails.emailAddress}`, datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails })) : null, hasHomepage ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, 'homepage'), analyticsId: "mainmenu.finddealer.website", text: ppnDealer.contactDetails.homepage.replace('https://', ''), iconLeft: "globe", "data-test-id": "dealer-homepage", link: dealerSearchHelper.sanitizeDealerHomepage(ppnDealer.contactDetails.homepage), target: "_blank", datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails })) : null, finder && helper.isString(country) ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, finder.id), analyticsId: finder.id, text: finder.text, "data-test-id": "dealer-finder-cars", link: helper.addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId }), iconLeft: "car", datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails })) : null, bookService ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, bookService.text), analyticsId: bookService.id, text: bookService.text, link: helper.addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo }), datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-service", iconLeft: 'wrench' })) : null, hasTestdrive ? (index.h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: routingKey.getDealerDetailsRoutingKey(this.dealerId, testDrive.text), analyticsId: testDrive.id, text: testDrive.text, link: testDrive.link, datalayerEventAction: navContentStore.EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: helper.MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-testdrive", iconLeft: 'steering-wheel' })) : null));
  }
  get el() { return index.getElement(this); }
};
function DealerDetailCard(props) {
  return index.h("phn-menu-item-card", Object.assign({ tabIndex: 0, class: `${props.showSkeleton ? 'skeleton' : ''}` }, props));
}
DealerDetailsDrawer.style = dealerDetailsDrawerCss;

function ErrorMessage({ errorMessage, onDismiss }) {
  return (index.h("div", { class: "error-message animated" },
    index.h("phn-p-inline-notification", { state: "error", description: errorMessage, onDismiss: onDismiss })));
}

const dealerSearchByNumberOfDealersCss = ".sc-phn-dealer-search-by-number-of-dealers-h{display:block}.sc-phn-dealer-search-by-number-of-dealers-h .spinner.sc-phn-dealer-search-by-number-of-dealers{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}";

const DealerSearchByNumberOfDealers = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.removeSkeletonOnDealerSearchForm = index.createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.isLoading = false;
    this.formErrorMessage = null;
    this.locale = undefined;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { dealer } = navContentStore.navContentStore.state;
      if (dealer.numberOfDealers <= 5) {
        this.fetchAllDealersForMarket();
      }
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  async waitForComponentsToLoad() {
    await ready.componentsOnReady(this.el, new timeout.Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  async fetchAllDealersForMarket() {
    const { error: errorContent } = navContentStore.navContentStore.state;
    try {
      this.isLoading = true;
      const { country } = navContentStore.splitLocale(this.locale);
      const { env } = navContentStore.navStateStore.state;
      const ppnDealerSearchResults = await dealerService.getAllPPNDealersForMarket(env, helper.getConfig(env).DEALER_API_URL_ALL_DEALERS, country);
      abTestingConstructorService.dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      abTestingConstructorService.dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), abTestingConstructorService.dealerSearchResultsStore.state.ppnDealers);
    }
    catch (err) {
      featureToggles.logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = navContentStore.getErrorMessage(errorContent, err);
    }
    finally {
      this.isLoading = false;
      this.emitResultsLoadEvent();
    }
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.navContentStore.state;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType('', navContentStore.ElementTypes.dealerSearchForm),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: helper.DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  emitResultsLoadEvent() {
    const { dealer } = navContentStore.navContentStore.state;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementId(navContentStore.DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: helper.DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  reset() {
    this.formErrorMessage = null;
    this.isLoading = false;
    abTestingConstructorService.dealerSearchResultsStore.state.results = null;
  }
  render() {
    if (this.isLoading) {
      return (index.h("div", { class: "spinner" }, index.h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } })));
    }
    if (helper.isString(this.formErrorMessage))
      return index.h(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() });
  }
  get el() { return index.getElement(this); }
};
DealerSearchByNumberOfDealers.style = dealerSearchByNumberOfDealersCss;

const dealerSearchFormDropdownCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-dealer-search-form-dropdown{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-dealer-search-form-dropdown{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-dealer-search-form-dropdown{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-dealer-search-form-dropdown{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-dealer-search-form-dropdown{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-dealer-search-form-dropdown{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-search-form-dropdown{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-search-form-dropdown{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-search-form-dropdown{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-search-form-dropdown{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-search-form-dropdown-h{display:block}.sc-phn-dealer-search-form-dropdown-h .spinner.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}.sc-phn-dealer-search-form-dropdown-h .city-select-form-field.sc-phn-dealer-search-form-dropdown{padding-top:1.5rem}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;border:2px solid rgb(107, 109, 112);border-radius:5px;-webkit-transition:background-color 0.24s ease;transition:background-color 0.24s ease;margin:0;min-height:3.375rem}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown phn-p-text.sc-phn-dealer-search-form-dropdown{padding-left:19px}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown phn-p-icon.sc-phn-dealer-search-form-dropdown{margin-right:1rem;padding-top:-8px;outline:0}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown div.text-limit.sc-phn-dealer-search-form-dropdown{width:80%}";

const DealerSearchFormDropdown = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.dealerSearchFormEvent = index.createEvent(this, "dealerSearchFormEvent", 7);
    this.clearSearchEvent = index.createEvent(this, "clearSearchEvent", 7);
    this.removeSkeletonOnDealerSearchForm = index.createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.locale = '';
    this.breakpoint = undefined;
    this.isLoading = false;
    this.errorMessage = null;
    this.dealersOfRegion = { regions: [] };
    this.cities = [];
    this.selectedProvince = '';
    this.selectedCity = '';
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
    this.getDealersByRegion();
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  async waitForComponentsToLoad() {
    await ready.componentsOnReady(this.el, new timeout.Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  loadedAutoCompleteListener(_event) {
    this.showSkeleton = false;
  }
  async getDealersByRegion() {
    const { error: errorContent } = navContentStore.navContentStore.state;
    const { country } = navContentStore.splitLocale(this.locale);
    try {
      this.isLoading = true;
      this.dealersOfRegion = await dealerService.getPPNDealersByRegion(country);
    }
    catch (err) {
      featureToggles.logger.error('FETCH_DEALERS', err);
      this.errorMessage = navContentStore.getErrorMessage(errorContent, err);
    }
    finally {
      this.isLoading = false;
      this.dealerSearchFormEvent.emit();
      this.emitResultsLoadEvent();
    }
  }
  onCitySelect(event) {
    var _a;
    /* istanbul ignore if */
    if (event.target === null) {
      return;
    }
    const selectedCity = event.target.value;
    this.selectedCity = selectedCity;
    abTestingConstructorService.dealerSearchResultsStore.state.ppnDealers =
      ((_a = this.cities.find((city) => {
        return [city.cityName, city.cityNameLocalized].includes(selectedCity);
      })) === null || _a === void 0 ? void 0 : _a.dealers) || {};
    abTestingConstructorService.dealerSearchResultsStore.state.results = Object.keys(abTestingConstructorService.dealerSearchResultsStore.state.ppnDealers);
    abTestingConstructorService.dealerSearchResultsStore.state.searchTerm = `${this.selectedProvince}, ${this.selectedCity}`;
  }
  onProvinceSelect(event) {
    /* istanbul ignore if */
    if (event.target === null) {
      return;
    }
    const selectedProvince = event.target.value;
    this.cities = this.getCitiesByGivenRegionName(selectedProvince);
    this.selectedProvince = selectedProvince;
  }
  getCitiesByGivenRegionName(province) {
    const regions = this.dealersOfRegion.regions;
    const selectedRegion = regions.find(({ regionName, regionNameLocalized }) => [regionName, regionNameLocalized].includes(province));
    return (selectedRegion === null || selectedRegion === void 0 ? void 0 : selectedRegion.cities) || [];
  }
  emitPageLoadEvent() {
    const { results, searchTerm } = abTestingConstructorService.dealerSearchResultsStore.state;
    const { dealer } = navContentStore.navContentStore.state;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType('', navContentStore.ElementTypes.dealerSearchForm),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: helper.isString(searchTerm) ? searchTerm : helper.GEOLOCATION_BUTTON_SEARCH_TERM,
        numberOfResults: (results === null || results === void 0 ? void 0 : results.length) || 0
      }
    });
  }
  emitResultsLoadEvent() {
    const { results, searchTerm } = abTestingConstructorService.dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.navContentStore.state;
    const numberOfResults = (results === null || results === void 0 ? void 0 : results.length) || 0;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementId(navContentStore.DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: searchTerm,
        numberOfResults: numberOfResults
      }
    });
  }
  reset() {
    this.errorMessage = null;
    this.isLoading = false;
    this.selectedProvince = '';
    this.selectedCity = '';
    abTestingConstructorService.dealerSearchResultsStore.state.results = null;
    abTestingConstructorService.dealerSearchResultsStore.state.savedDealerCookie = null;
    this.clearSearchEvent.emit();
  }
  render() {
    const { results } = abTestingConstructorService.dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.navContentStore.state;
    const searchText = abTestingConstructorService.dealerSearchResultsStore.state.searchTerm;
    if (this.isLoading) {
      return (index.h("div", { class: "spinner" }, index.h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } })));
    }
    return (index.h(index.Host, null, results && results.length > 0 ? (index.h("form", { class: "form-container", onSubmit: (event) => {
        event.preventDefault();
      } }, index.h("div", null, index.h("div", { class: "phn-flex-row phn-align-center phn-justify-between title-container" }, index.h("div", { class: "text-limit" }, index.h("phn-p-text", { weight: "regular", size: "small", tag: "div", ellipsis: "true", color: "contrast-medium", "data-test-id": "dealer-search-form-input" }, searchText)), index.h("phn-p-icon", { name: "close", class: "close-icon", style: { display: this.showSkeleton ? 'none' : '', cursor: 'pointer' }, onClick: (event) => {
        event.preventDefault();
        this.reset();
      } }))))) : (index.h(index.Fragment, null, index.h("phn-p-select-wrapper", { filter: true, label: dealerContent.search.dropdown.province, required: true, style: { display: this.showSkeleton ? 'none' : '' } }, index.h("select", { name: "dealers-province", onChange: (event) => this.onProvinceSelect(event), style: { display: this.showSkeleton ? 'none' : '' } }, index.h("option", { hidden: true, selected: true }, dealerContent.search.dropdown.selectAProvince), this.dealersOfRegion.regions.map((region) => {
      const province = navContentStore.splitLocale(this.locale).language === 'en' || region.regionNameLocalized === null
        ? region.regionName
        : region.regionNameLocalized;
      return index.h("option", { value: province }, province);
    }))), index.h("phn-p-select-wrapper", { style: { display: this.showSkeleton ? 'none' : '' }, class: "city-select-form-field", filter: "true", label: dealerContent.search.dropdown.city, required: true }, index.h("select", { disabled: !helper.isString(this.selectedProvince), style: { display: this.showSkeleton ? 'none' : '' }, name: "dealers-cities", onChange: (event) => {
        this.onCitySelect(event);
      } }, index.h("option", { hidden: true }, dealerContent.search.dropdown.selectACity), this.cities.map((city) => (index.h("option", null, navContentStore.splitLocale(this.locale).language === 'en' || city.cityNameLocalized === null
      ? city.cityName
      : city.cityNameLocalized))))), helper.isString(this.errorMessage) ? (index.h(ErrorMessage, { errorMessage: this.errorMessage, onDismiss: () => this.reset() })) : null))));
  }
  get el() { return index.getElement(this); }
};
DealerSearchFormDropdown.style = dealerSearchFormDropdownCss;

/* istanbul ignore file */
class MapsService {
  constructor() {
    this.autocompleteService = null;
    this.placesService = null;
    this.geocoderService = null;
    this.getLocation = null;
  }
  async init(apiKey) {
    try {
      const google = await featureToggles.windowService.fetchGoogleMapsApi(apiKey);
      this.autocompleteService = new google.maps.places.AutocompleteService();
      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(featureToggles.windowService.createDiv()));
      this.geocoderService = new google.maps.Geocoder();
      this.getLocation = (latLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);
    }
    catch (err) {
      throw new navContentStore.NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, navContentStore.NaviErrorTypes.GENERAL);
    }
  }
  async getPredictions(input, locale) {
    var _a;
    if (input.length === 0) {
      return [];
    }
    //ToDo: Check what todo if country is no valid iso-code
    const predictions = await new Promise((resolve, reject) => {
      if (this.autocompleteService === null) {
        reject(new navContentStore.NaviError('autocompleteService is not initialised', navContentStore.NaviErrorTypes.GENERAL));
        return;
      }
      this.autocompleteService.getPlacePredictions({
        input,
        componentRestrictions: { country: dealerSearchHelper.getRegionSpecificCountry(navContentStore.splitLocale(locale).country) }
      }, (predictions, status) => status === 'OK'
        ? resolve(predictions)
        : reject(new navContentStore.NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))));
    });
    return ((_a = predictions === null || predictions === void 0 ? void 0 : predictions.filter(({ place_id, description }) => helper.isString(place_id) && helper.isString(description)).map(({ place_id: id, description: text }) => ({ id, text }))) !== null && _a !== void 0 ? _a : []);
  }
  async getPlaceCoordinates(placeId) {
    var _a, _b, _c, _d;
    const response = await new Promise((resolve, reject) => {
      if (this.placesService === null) {
        reject(new navContentStore.NaviError('placesService is not initialised', navContentStore.NaviErrorTypes.GENERAL));
        return;
      }
      this.placesService.getDetails({
        placeId
      }, (response, status) => status === 'OK'
        ? resolve(response)
        : reject(new navContentStore.NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status))));
    });
    const latitude = (_b = (_a = response === null || response === void 0 ? void 0 : response.geometry) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.lat();
    const longitude = (_d = (_c = response === null || response === void 0 ? void 0 : response.geometry) === null || _c === void 0 ? void 0 : _c.location) === null || _d === void 0 ? void 0 : _d.lng();
    if (typeof latitude !== 'number' || typeof longitude !== 'number') {
      throw new navContentStore.NaviError(`placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`, navContentStore.NaviErrorTypes.NO_RESULTS);
    }
    return { latitude, longitude };
  }
  async getFormattedAddressFromCoordinates(latLong) {
    if (this.getLocation === null) {
      throw new navContentStore.NaviError('getLocation is not initialised', navContentStore.NaviErrorTypes.GENERAL);
    }
    const location = this.getLocation(latLong);
    const response = await new Promise((resolve, reject) => {
      if (this.geocoderService === null) {
        reject(new navContentStore.NaviError('geocoderService is not initialised', navContentStore.NaviErrorTypes.GENERAL));
        return;
      }
      this.geocoderService.geocode({ location }, (response, status) => {
        status === 'OK'
          ? resolve(response)
          : reject(new navContentStore.NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));
      });
    });
    if (response === null || response.length === 0) {
      throw new navContentStore.NaviError('geocoderService.geocode did not find the location based on coordinates.', navContentStore.NaviErrorTypes.NO_RESULTS);
    }
    return response[0].formatted_address;
  }
}
function getErrorType(status) {
  switch (status) {
    case 'INVALID_REQUEST': {
      return navContentStore.NaviErrorTypes.INVALID_INPUT;
    }
    case 'NOT_FOUND':
    case 'ZERO_RESULTS': {
      return navContentStore.NaviErrorTypes.NO_RESULTS;
    }
    case 'OVER_QUERY_LIMIT':
    case 'UNKNOWN_ERROR': {
      return navContentStore.NaviErrorTypes.RETRY;
    }
    case 'ERROR':
    case 'REQUEST_DENIED':
    default: {
      return navContentStore.NaviErrorTypes.GENERAL;
    }
  }
}
const mapsService = new MapsService();

const dealerSearchFormGeolocationCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-dealer-search-form-geolocation{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-dealer-search-form-geolocation{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-dealer-search-form-geolocation{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-dealer-search-form-geolocation{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-dealer-search-form-geolocation{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-dealer-search-form-geolocation{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-search-form-geolocation{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-search-form-geolocation{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-search-form-geolocation{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-search-form-geolocation{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-search-form-geolocation-h{display:block}.skeleton.sc-phn-dealer-search-form-geolocation-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-autocomplete-search-field.sc-phn-dealer-search-form-geolocation{width:auto;height:3.125rem;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-or-text.sc-phn-dealer-search-form-geolocation{width:auto;height:1.25rem;background:#d8d8db;border-radius:4px 4px 0 0}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-geolocation-button.sc-phn-dealer-search-form-geolocation{width:auto;height:3.125rem;background:#d8d8db;border-radius:0 0 4px 4px}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation{position:relative;width:100%;margin-top:1.25rem}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation .geolocation.sc-phn-dealer-search-form-geolocation{width:100%;padding-bottom:24px}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation phn-p-text.sc-phn-dealer-search-form-geolocation{margin-bottom:0.25rem;color:#010205}.sc-phn-dealer-search-form-geolocation-h .animate-out.sc-phn-dealer-search-form-geolocation{-webkit-animation:fadeOutToTop 0.75s ease-in-out 0s;animation:fadeOutToTop 0.75s ease-in-out 0s}.sc-phn-dealer-search-form-geolocation-h .input-container.sc-phn-dealer-search-form-geolocation{width:100%}.sc-phn-dealer-search-form-geolocation-h .spinner.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}";

const DealerSearchFormGeolocation = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.dealerSearchFormEvent = index.createEvent(this, "dealerSearchFormEvent", 7);
    this.clearSearchEvent = index.createEvent(this, "clearSearchEvent", 7);
    this.removeSkeletonOnDealerSearchForm = index.createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.debounceTimeout = new timeout.Timeout(100);
    this.locale = undefined;
    this.predictions = [];
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.isLoading = false;
    this.showGeolocationButton = abTestingConstructorService.dealerSearchResultsStore.state.results === null;
    this.animateResults = false;
    this.searchTerm = abTestingConstructorService.dealerSearchResultsStore.state.searchTerm;
    this.showSkeleton = true;
  }
  loadedAutoCompleteListener() {
    this.showSkeleton = false;
  }
  async waitForComponentsToLoad() {
    await ready.componentsOnReady(this.el, new timeout.Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  disconnectedCallback() {
    abTestingConstructorService.dealerSearchResultsStore.state.searchTerm = this.searchTerm;
    this.debounceTimeout.cancel();
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { error: errorContent } = navContentStore.navContentStore.state;
      mapsService.init('AIzaSyDCVTh9wCeBxQEIxiN28Zb2ZWCf8wbiw0E').catch((err) => {
        featureToggles.logger.error('INIT_MAPS_SERVICE', err);
        this.formErrorMessage = navContentStore.getErrorMessage(errorContent, err);
        this.errorMessage = null;
      });
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.navContentStore.state;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType('', navContentStore.ElementTypes.dealerSearchForm, true),
        displayElementName: dealer.text
      }
    });
  }
  emitResultsLoadEvent(searchTerm) {
    const { results } = abTestingConstructorService.dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.navContentStore.state;
    const componentSearchSearchTerm = helper.isString(searchTerm) ? searchTerm : helper.GEOLOCATION_BUTTON_SEARCH_TERM;
    const numberOfResults = (results === null || results === void 0 ? void 0 : results.length) || 0;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementId(navContentStore.DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: componentSearchSearchTerm,
        numberOfResults: numberOfResults
      }
    });
  }
  async fetchDealers(getSearchTerms) {
    const { error: errorContent } = navContentStore.navContentStore.state;
    try {
      this.reset();
      this.isLoading = true;
      const [searchTerm, placeCoordinates] = await getSearchTerms();
      const { env } = navContentStore.navStateStore.state;
      const ppnDealerSearchResults = await dealerService.getPPNDealers(env, helper.getConfig(env).DEALER_API_URL, placeCoordinates, dealerSearchHelper.getRegionSpecificCountry(navContentStore.splitLocale(this.locale).country));
      abTestingConstructorService.dealerSearchResultsStore.state.searchTerm = searchTerm;
      abTestingConstructorService.dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      abTestingConstructorService.dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), abTestingConstructorService.dealerSearchResultsStore.state.ppnDealers);
      this.showGeolocationButton = false;
    }
    catch (err) {
      featureToggles.logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = navContentStore.getErrorMessage(errorContent, err);
      this.errorMessage = null;
    }
    finally {
      this.isLoading = false;
      this.animateResults = true;
    }
  }
  async onSubmit(prediction) {
    const { dealer: dealerContent, error: errorContent } = navContentStore.navContentStore.state;
    if (!helper.isString(this.searchTerm)) {
      this.errorMessage = errorContent.noInput;
      this.formErrorMessage = '';
      return;
    }
    await this.fetchDealers(async () => {
      if (prediction === null) {
        throw new navContentStore.NaviError('Dealer search form submitted without prediction', navContentStore.NaviErrorTypes.INVALID_INPUT);
      }
      this.searchTerm = prediction.text;
      globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_SEARCH_CLICK, {
        componentClick: {
          clickElementId: prediction.id,
          clickElementName: prediction.text,
          clickElementType: navContentStore.ClickElementTypes.Button,
          targetElement: navContentStore.DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: navContentStore.DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(routingKey.RoutingKeys.DEALER_SEARCH, navContentStore.ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: prediction.text
        }
      });
      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);
      return [prediction.text, placeCoordinates];
    });
    this.emitResultsLoadEvent(this.searchTerm);
  }
  async getCurrentLocation() {
    const { dealer: dealerContent } = navContentStore.navContentStore.state;
    await this.fetchDealers(async () => {
      const placeCoordinates = await featureToggles.windowService.getNavigatorLatLong();
      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);
      this.searchTerm = '';
      globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_GEOLOCATION_CLICK, {
        componentClick: {
          clickElementId: dealerContent.search.geolocation.id,
          clickElementName: dealerContent.search.geolocation.text,
          clickElementType: navContentStore.ClickElementTypes.Button,
          targetElement: navContentStore.DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: navContentStore.DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(routingKey.RoutingKeys.DEALER_SEARCH, navContentStore.ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: helper.GEOLOCATION_BUTTON_SEARCH_TERM
        }
      });
      return [formattedAddress, placeCoordinates];
    });
    this.emitResultsLoadEvent(helper.GEOLOCATION_BUTTON_SEARCH_TERM);
  }
  async onDealerSearchEntry(searchTerm) {
    const { error } = navContentStore.navContentStore.state;
    try {
      this.searchTerm = searchTerm;
      this.errorMessage = null;
      this.formErrorMessage = null;
      this.showGeolocationButton = abTestingConstructorService.dealerSearchResultsStore.state.results === null;
      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);
    }
    catch (err) {
      featureToggles.logger.error('GET_PREDICTIONS', err);
      this.errorMessage = navContentStore.getErrorMessage(error, err);
      this.predictions = [];
    }
  }
  reset() {
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.animateResults = false;
    this.showGeolocationButton = true;
    this.isLoading = false;
    abTestingConstructorService.dealerSearchResultsStore.state.results = null;
  }
  render() {
    const { dealer: dealerContent } = navContentStore.navContentStore.state;
    const { results } = abTestingConstructorService.dealerSearchResultsStore.state;
    return (index.h(index.Host, { class: this.showSkeleton ? 'skeleton' : '' }, index.h("div", { class: "input-container" }, this.showSkeleton ? index.h("div", { class: "skeleton-autocomplete-search-field" }) : null, index.h("phn-autocomplete-search-field", { placeholder: dealerContent.search.form.inputPlaceholder, initialValue: abTestingConstructorService.dealerSearchResultsStore.state.searchTerm, predictions: this.predictions, onSearchInput: (e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail)), onClearSearch: () => {
        this.predictions = [];
        abTestingConstructorService.dealerSearchResultsStore.state.searchTerm = '';
        this.searchTerm = '';
        this.reset();
        this.clearSearchEvent.emit();
        this.showGeolocationButton = true;
      }, onSubmitSearch: (e) => this.onSubmit(e.detail), errorMessage: helper.getString(this.errorMessage), style: { display: this.showSkeleton ? 'none' : '' } })), this.isLoading && (index.h("div", { class: "spinner" }, index.h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } }))), this.showGeolocationButton && results === null ? (index.h(index.Fragment, null, index.h("div", { class: `or-container ${this.isLoading ? 'animate-out' : ''}`, onAnimationEnd: () => {
        this.showGeolocationButton = false;
      } }, this.showSkeleton ? index.h("div", { class: "skeleton-or-text" }) : null, index.h("phn-p-text", { color: "inherit", size: "inherit", tag: "div", "data-test-id": "dealer-search-or-label", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.or), this.showSkeleton ? index.h("div", { class: "skeleton-geolocation-button" }) : null, index.h("phn-p-button", { class: 'geolocation', onClick: () => this.getCurrentLocation(), variant: "tertiary", icon: "locate", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.geolocation.text)))) : null, helper.isString(this.formErrorMessage) ? (index.h(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() })) : null));
  }
  get el() { return index.getElement(this); }
};
DealerSearchFormGeolocation.style = dealerSearchFormGeolocationCss;

function DealerSearchFormItemCard({ dealer, showOverlay, eventEmitter, locale }) {
  const { ppnDealer, distance } = dealer;
  const language = navContentStore.splitLocale(locale).language;
  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
  // postalCode is currently not available in addressLocalized
  const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
  const name = language === 'en' ? ppnDealer.name : helper.isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
  const numberOfDealers = navContentStore.navContentStore.state.dealer.numberOfDealers;
  let country = '';
  try {
    country = navContentStore.splitLocale(locale).country;
  }
  catch (err) {
    // throw the error away
  }
  const onDealerCardClick = (ppnDealer) => {
    const dealerDetailsRoutingKey = routingKey.getDealerDetailsRoutingKey(ppnDealer.id);
    eventEmitter.emit([dealerDetailsRoutingKey]);
    const { dealer: dealerContent } = navContentStore.navContentStore.state;
    const { results, searchTerm } = abTestingConstructorService.dealerSearchResultsStore.state;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_RESULT_CLICK, {
      componentClick: {
        clickElementId: ppnDealer.id,
        clickElementName: ppnDealer.name,
        clickElementType: navContentStore.ClickElementTypes.Button,
        targetElement: `level2_${dealerDetailsRoutingKey}`
      },
      componentDisplay: {
        displayElementId: navContentStore.DEALER_SEARCH_DISPLAY_ELEMENT_ID,
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(routingKey.RoutingKeys.DEALER_SEARCH, navContentStore.ElementTypes.dealerSearchForm),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: searchTerm,
        numberOfResults: results === null || results === void 0 ? void 0 : results.length
      },
      partner: {
        companyName: ppnDealer.name,
        companyId: ppnDealer.porschePartnerNo
      }
    });
  };
  return (index.h("phn-menu-item-card", { tabIndex: 0, text: name, class: `animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`, onClick: () => onDealerCardClick(ppnDealer), analyticsId: ppnDealer.id },
    index.h("div", { class: "phn-flex-row phn-justify-between phn-align-center" },
      country === 'JP' ? (index.h("phn-p-text", { color: "primary", size: "small" }, `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`)) : (index.h("phn-p-text", { color: "primary", size: "small" },
        `${address.street}, `,
        index.h("span", { class: "city" },
          ppnDealer.address.postalCode,
          " ",
          address.city))),
      distance && distance.value >= 1 && numberOfDealers > 5 ? (index.h("phn-p-tag", { color: "notification-info-soft" }, `${Math.round(distance.value)}${distance.unit.toLowerCase()}`)) : null)));
}

function DealerSearchMapLink() {
  const { dealer: dealerContent } = navContentStore.navContentStore.state;
  function emitDealersMapEvent() {
    const map = dealerContent.search.map;
    const { results, searchTerm } = abTestingConstructorService.dealerSearchResultsStore.state;
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DEALER_MAP_CLICK, {
      componentClick: {
        clickElementId: map.id,
        clickElementName: map.text,
        clickElementType: navContentStore.ClickElementTypes.Link,
        targetUrl: map.link
      },
      componentDisplay: {
        displayElementId: navContentStore.DEALER_SEARCH_DISPLAY_ELEMENT_ID,
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(routingKey.RoutingKeys.DEALER_SEARCH, navContentStore.ElementTypes.dealerSearchForm),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: helper.isString(searchTerm) ? searchTerm : helper.GEOLOCATION_BUTTON_SEARCH_TERM,
        numberOfResults: results === null || results === void 0 ? void 0 : results.length
      }
    });
  }
  return (index.h("a", { class: 'animated', href: dealerContent.search.map.link, "aria-label": dealerContent.search.map.description },
    index.h("phn-p-button", { onClick: emitDealersMapEvent, variant: "tertiary" },
      dealerContent.search.map.text,
      ' ')));
}

const dealerSearchResultsCss = ".sc-phn-dealer-search-results-h{display:block}.sc-phn-dealer-search-results-h phn-dealer-details-drawer.sc-phn-dealer-search-results{margin-top:1.25rem}.sc-phn-dealer-search-results-h phn-menu-item-card.sc-phn-dealer-search-results>div.sc-phn-dealer-search-results{margin-top:14px}.sc-phn-dealer-search-results-h .dealer-card-overlay.sc-phn-dealer-search-results{opacity:0.3}.sc-phn-dealer-search-results-h .dealer-card.sc-phn-dealer-search-results phn-p-tag.sc-phn-dealer-search-results{margin-left:1rem}.sc-phn-dealer-search-results-h .error-message.sc-phn-dealer-search-results{position:relative;margin-top:2rem}.sc-phn-dealer-search-results-h .animated.sc-phn-dealer-search-results{-webkit-animation:fadeInFromBottom 0.75s ease-in-out 0s;animation:fadeInFromBottom 0.75s ease-in-out 0s}.sc-phn-dealer-search-results-h a.sc-phn-dealer-search-results{display:inline-block;position:relative;width:100%;-webkit-text-decoration-line:none;text-decoration-line:none;margin-top:2.25rem}.sc-phn-dealer-search-results-h a.sc-phn-dealer-search-results phn-p-button.sc-phn-dealer-search-results{width:100%}";

const DealerSearchResults = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.mobileMenuItemClick = index.createEvent(this, "mobileMenuItemClick", 6);
    this.showOverlay = false;
    this.locale = undefined;
    this.breakpoint = undefined;
  }
  render() {
    const { results, ppnDealers } = abTestingConstructorService.dealerSearchResultsStore.state;
    const { error: errorContent } = navContentStore.navContentStore.state;
    if (results === null)
      return null;
    if ((results === null || results === void 0 ? void 0 : results.length) === 0)
      return (index.h(index.Fragment, null, index.h(ErrorMessage, { errorMessage: errorContent.noResults, onDismiss: () => null })));
    const dealerId = results[0];
    if (results.length === 1 && ppnDealers[dealerId]) {
      abTestingConstructorService.dealerSearchResultsStore.state.savedDealerCookie = {
        id: dealerId,
        latitude: ppnDealers[dealerId].ppnDealer.coordinates.latitude,
        longitude: ppnDealers[dealerId].ppnDealer.coordinates.longitude
      };
      return index.h("phn-dealer-details-drawer", { breakpoint: this.breakpoint, dealerId: dealerId, locale: this.locale });
    }
    return (index.h(index.Host, null, index.h(index.Fragment, null, results.map((dealerId) => {
      const dealer = ppnDealers[dealerId];
      if (dealer === undefined || dealer.ppnDealer === undefined) {
        return null;
      }
      return (index.h(DealerSearchFormItemCard, { dealer: dealer, eventEmitter: this.mobileMenuItemClick, showOverlay: this.showOverlay, locale: this.locale }));
    }), index.h(DealerSearchMapLink, null))));
  }
};
DealerSearchResults.style = dealerSearchResultsCss;

const menuItemCardCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-menu-item-card{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-menu-item-card{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-menu-item-card{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-menu-item-card{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-menu-item-card{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-menu-item-card{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-menu-item-card{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-menu-item-card{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-menu-item-card{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-menu-item-card{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-menu-item-card{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-menu-item-card{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-menu-item-card-h{display:block;padding:1.1875rem;margin-top:1rem;border-radius:8px;background-color:rgba(148, 149, 152, 0.18);-webkit-transition:background-color 0.24s ease;transition:background-color 0.24s ease;cursor:pointer}.sc-phn-menu-item-card-h button.sc-phn-menu-item-card{all:unset;display:block;width:100%}.skeleton.sc-phn-menu-item-card-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-menu-item-card-h *.sc-phn-menu-item-card{visibility:hidden}@media (min-width: 760px){.sc-phn-menu-item-card-h{background-color:#fff}}@media (min-width: 760px){.sc-phn-menu-item-card-h:hover{background-color:rgba(148, 149, 152, 0.18)}}.sc-phn-menu-item-card-h a.sc-phn-menu-item-card{text-decoration:none}.sc-phn-menu-item-card-h .subtext.sc-phn-menu-item-card{color:#010205}.sc-phn-menu-item-card-h .dealer-card-item.sc-phn-menu-item-card{font-size:16px;font-family:\"Porsche Next\";font-style:normal;font-weight:400;line-height:24px;color:#010205;word-break:break-word;white-space:pre-line}.sc-phn-menu-item-card-h .title-container.sc-phn-menu-item-card{width:100%;margin:0}.sc-phn-menu-item-card-h .title-container.sc-phn-menu-item-card phn-p-heading.sc-phn-menu-item-card{word-break:break-word;white-space:pre-line}.sc-phn-menu-item-card-h .title-container.sc-phn-menu-item-card phn-p-icon.sc-phn-menu-item-card{margin-left:1rem}";

const MenuItemCard = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.text = undefined;
    this.analyticsId = undefined;
    this.subtext = '';
    this.elementId = '';
    this.link = '';
    this.datalayerEventAction = navContentStore.EventActions.NAVIGATION_CLICK;
    this.customDatalayerProperties = {};
    this.target = '_self';
    this.iconLeft = '';
  }
  handleKeyDown(e) {
    var _a;
    if (e.key === 'Enter') {
      const anchorElement = (_a = helper.getHTMLElement(e.target)) === null || _a === void 0 ? void 0 : _a.querySelector('a');
      const targetElement = anchorElement ? anchorElement : helper.getHTMLElement(e.target);
      if (targetElement) {
        targetElement.click();
        !anchorElement ? this.sendDataLayerEvent(navContentStore.ClickElementTypes.Button, this.elementId) : null;
      }
    }
  }
  sendDataLayerEvent(clickElementType, elementId) {
    dataLayerEventSender.sendDataLayerEvent({
      analyticsId: this.analyticsId,
      text: this.text,
      elementId,
      clickElementType,
      link: this.link,
      customDatalayerProperties: this.customDatalayerProperties,
      datalayerEventAction: this.datalayerEventAction
    });
  }
  renderTitle() {
    return (index.h("div", { class: "phn-flex-row phn-align-center phn-justify-between title-container" }, this.elementId ? (index.h("phn-p-text", { className: 'dealer-card-item' }, this.text)) : (index.h("phn-p-heading", { tag: "h3", size: "medium" }, this.text)), helper.isString(this.iconLeft) ? index.h("phn-p-icon", { name: this.iconLeft }) : null));
  }
  renderSubtitle() {
    if (!helper.isString(this.subtext)) {
      return null;
    }
    return (index.h("phn-p-text", { class: 'subtext', color: "contrast-medium", weight: "regular", size: "xx-small", tag: "div", ellipsis: "true", "data-test-id": "subtext" }, this.subtext));
  }
  render() {
    const body = (index.h(index.Fragment, null, index.h("div", { class: "texts" }, this.renderTitle(), this.renderSubtitle()), index.h("slot", null)));
    if (helper.isString(this.link))
      return (index.h("a", { tabIndex: -1, onClick: () => {
          this.sendDataLayerEvent(navContentStore.ClickElementTypes.Link, this.elementId);
        }, class: "card-link", href: this.link, target: this.target }, body));
    return (index.h(index.Host, null, index.h("button", { tabIndex: -1, onClick: () => {
        this.sendDataLayerEvent(navContentStore.ClickElementTypes.Button, this.elementId);
      } }, body)));
  }
  get el() { return index.getElement(this); }
};
MenuItemCard.style = menuItemCardCss;

const myporscheLoginCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-myporsche-login{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-myporsche-login{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-myporsche-login{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-myporsche-login{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-myporsche-login{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-myporsche-login{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-myporsche-login{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-myporsche-login{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-myporsche-login{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-myporsche-login{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-myporsche-login{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-myporsche-login{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login{display:-ms-flexbox;display:flex}@media (min-width: 0px) and (max-width: 479px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between}}@media (min-width: 760px) and (max-width: 1299px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between}}.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:2.25rem 0 1rem 0}@media (min-width: 0px) and (max-width: 759px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{width:100%;padding-top:0}}@media (min-width: 480px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:0 0.5rem 1rem 0}}@media (min-width: 760px) and (max-width: 1299px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:0 0 1rem 0}}@media (min-width: 1760px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .login.sc-phn-myporsche-login{padding:0 1rem 1.4375rem 0}}.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 0 1rem 0}@media (min-width: 0px) and (max-width: 759px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{width:100%}}@media (min-width: 480px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 0 1rem 0.5rem}}@media (min-width: 760px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 0 1.4375rem 0}}@media (min-width: 1760px){.sc-phn-myporsche-login-h .button-container.sc-phn-myporsche-login .more.sc-phn-myporsche-login{padding:0 1rem 1.4375rem 0}}.sc-phn-myporsche-login-h phn-p-text.sc-phn-myporsche-login{padding-bottom:1.5rem;border-bottom:2px solid #d8d8db;margin-bottom:0.625rem}@media (min-width: 1920px){.sc-phn-myporsche-login-h phn-p-text.sc-phn-myporsche-login{margin-bottom:1rem}}.sc-phn-myporsche-login-h phn-p-link-pure.sc-phn-myporsche-login{float:left;text-decoration:underline;color:black}";

const MyPorscheLogin = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.loginEvent = index.createEvent(this, "loginEvent", 7);
    this.login = undefined;
    this.more = null;
    this.signup = undefined;
    this.signupText = undefined;
  }
  sendDataLayerEvent(link) {
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.NAVIGATION_LINK_CLICK, {
      componentClick: {
        clickElementId: link === null || link === void 0 ? void 0 : link.id,
        clickElementName: link === null || link === void 0 ? void 0 : link.text,
        clickElementType: navContentStore.ClickElementTypes.Link,
        targetUrl: link === null || link === void 0 ? void 0 : link.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(routingKey.RoutingKeys.MY_PORSCHE, navContentStore.ElementTypes.myPorscheDrawer),
        displayElementName: link === null || link === void 0 ? void 0 : link.text
      }
    });
  }
  render() {
    return (index.h(index.Fragment, null, index.h("div", { class: "button-container" }, index.h("phn-p-button", { variant: "primary", class: "login", onClick: () => {
        this.loginEvent.emit();
        this.sendDataLayerEvent(this.login);
      } }, this.login.text), this.more && helper.isString(this.more.link) ? (index.h("phn-p-link", { variant: "tertiary", class: "more", href: this.more.link, onClick: () => {
        this.sendDataLayerEvent(this.more);
      } }, this.more.text)) : null), index.h("div", null, index.h("phn-p-link-pure", { icon: "none", onClick: () => {
        this.sendDataLayerEvent(this.signup);
      } }, index.h("a", { href: this.signup.link }, this.signup.text)), index.h("phn-p-text", null, "\u00A0", this.signupText))));
  }
};
MyPorscheLogin.style = myporscheLoginCss;

exports.phn_autocomplete_search_field = AutocompleteSearchField;
exports.phn_dealer_details_drawer = DealerDetailsDrawer;
exports.phn_dealer_search_by_number_of_dealers = DealerSearchByNumberOfDealers;
exports.phn_dealer_search_form_dropdown = DealerSearchFormDropdown;
exports.phn_dealer_search_form_geolocation = DealerSearchFormGeolocation;
exports.phn_dealer_search_results = DealerSearchResults;
exports.phn_menu_item_card = MenuItemCard;
exports.phn_myporsche_login = MyPorscheLogin;

//# sourceMappingURL=phn-autocomplete-search-field_8.cjs.entry.js.map