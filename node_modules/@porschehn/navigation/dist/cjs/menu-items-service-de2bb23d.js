'use strict';

const navContentStore = require('./nav-content-store-7e491673.js');
const routingKey = require('./routing-key-7ce95adb.js');
const dealerSearchResultsStore = require('./dealer-search-results-store-82b04c04.js');
const helper = require('./helper-2e938230.js');
const featureToggles = require('./feature-toggles-56b31f71.js');
const abTestingConstructorService = require('./ab-testing-constructor-service-0271deee.js');

function getLevel1Items(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, userConsentGiven) {
  var _a, _b;
  const { dealer, models, myPorsche, vehiclePurchase, shop, experience, services } = content;
  const { savedDealerCookie, ppnDealers } = dealerSearchResults;
  const { app } = navContentStore.navStateStore.state;
  const savedDealer = savedDealerCookie !== null ? ppnDealers[savedDealerCookie.id] : undefined;
  // outbound link needed for Singapore market
  let outboundLink;
  if (locale === 'en-SG' && dealer.search.outboundLink) {
    outboundLink = (_a = dealer.search.outboundLink) === null || _a === void 0 ? void 0 : _a.link;
  }
  const dealerRoutingKeys = [routingKey.RoutingKeys.DEALER_SEARCH];
  if (savedDealer !== undefined && ((_b = dealerSearchResultsStore.dealerSearchResultsStore.state.results) === null || _b === void 0 ? void 0 : _b.length) != 1) {
    dealerRoutingKeys.push(routingKey.getDealerDetailsRoutingKey(savedDealer.ppnDealer.id));
  }
  const menu = [
    {
      elementId: routingKey.RoutingKeys.MODELS,
      routingKeys: [routingKey.RoutingKeys.MODELS],
      analyticsId: models.id,
      text: models.text
    },
    {
      elementId: routingKey.RoutingKeys.VEHICLE_PURCHASE,
      routingKeys: [routingKey.RoutingKeys.VEHICLE_PURCHASE],
      analyticsId: vehiclePurchase.id,
      text: vehiclePurchase.text
    },
    {
      elementId: routingKey.RoutingKeys.SERVICES,
      routingKeys: [routingKey.RoutingKeys.SERVICES],
      analyticsId: services.id,
      text: services.text
    },
    {
      elementId: routingKey.RoutingKeys.EXPERIENCE,
      routingKeys: [routingKey.RoutingKeys.EXPERIENCE],
      analyticsId: experience.id,
      text: experience.text
    }
  ];
  const dealerSearch = {
    elementId: routingKey.RoutingKeys.DEALER_SEARCH,
    routingKeys: dealerRoutingKeys,
    analyticsId: dealer.id,
    text: dealer.text,
    link: outboundLink,
    iconRight: locale === 'en-SG' && dealer.search.outboundLink ? 'none' : 'arrow-head-right'
  };
  if (shop !== null && shop.text !== '') {
    const shopItem = {
      elementId: routingKey.RoutingKeys.SHOP,
      routingKeys: [routingKey.RoutingKeys.SHOP],
      analyticsId: shop.id,
      text: shop.text,
      link: app !== helper.Application.shop ? shop.link : undefined,
      datalayerEventAction: navContentStore.EventActions.NAVIGATION_LINK_CLICK,
      iconRight: 'none'
    };
    menu.splice(2, 0, shopItem);
  }
  if (isDealerSearchEnabled(locale, userConsentGiven)) {
    const savedDealerName = navContentStore.splitLocale(locale).language === 'en'
      ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name
      : helper.isString(savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized)
        ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized
        : savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name;
    if (helper.isString(savedDealerName)) {
      dealerSearch.subtext = savedDealerName;
    }
  }
  else {
    dealerSearch.link = dealer.search.map.link;
    dealerSearch.onClick = undefined;
  }
  menu.push(dealerSearch);
  if (myPorsche !== null) {
    const isLoggedIn = helper.IsLoggedIn(loggedInState);
    const username = isLoggedIn ? helper.getUsername(loggedInState, myPorsche.loggedInFallback) : undefined;
    menu.push({
      elementId: routingKey.RoutingKeys.MY_PORSCHE,
      routingKeys: [routingKey.RoutingKeys.MY_PORSCHE],
      analyticsId: myPorsche.id,
      text: myPorsche.text,
      subtext: username,
      showIconModifier: isLoggedIn && unreadMessagesCount > 0
    });
  }
  return menu;
}
function getSideDrawerItems(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, activeRoutingKey, userConsentGiven) {
  const topLevelRoutingKey = routingKey.findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case activeRoutingKey:
      break;
    case routingKey.RoutingKeys.MODELS:
      return content.models.series.map((modelsSeries) => ({
        elementId: routingKey.getModelsRoutingKey(modelsSeries.id),
        routingKeys: [routingKey.getModelsRoutingKey(modelsSeries.id)],
        analyticsId: modelsSeries.id,
        text: modelsSeries.name,
        subtext: modelsSeries.tags.map((tag) => tag.text).join(' | '),
        renderSignatures: true,
        datalayerEventAction: navContentStore.EventActions.MODEL_RANGE_CLICK
      }));
    case routingKey.RoutingKeys.SHOP:
    case routingKey.RoutingKeys.VEHICLE_PURCHASE:
    case routingKey.RoutingKeys.SERVICES:
    case routingKey.RoutingKeys.EXPERIENCE: {
      const parentRoutingKey = routingKey.removeLastRoutingSegment(activeRoutingKey);
      const menuDrawerParent = getMenuContent(content, parentRoutingKey, topLevelRoutingKey);
      if (menuDrawerParent !== null) {
        return menuDrawerParent.children.map((childItem) => ({
          elementId: routingKey.constructRoutingKey(parentRoutingKey, childItem.id),
          routingKeys: [routingKey.constructRoutingKey(parentRoutingKey, childItem.id)],
          analyticsId: childItem.id,
          text: childItem.text,
          link: childItem.link
        }));
      }
      break;
    }
  }
  return getLevel1Items(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, userConsentGiven);
}
function getSideDrawerRoutingKey(activeRoutingKey) {
  const topLevelRoutingKey = routingKey.findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case activeRoutingKey: {
      break;
    }
    case routingKey.RoutingKeys.DEALER_SEARCH: {
      return routingKey.RoutingKeys.DEALER_SEARCH;
    }
    case routingKey.RoutingKeys.MODELS: {
      return routingKey.RoutingKeys.MODELS;
    }
    case routingKey.RoutingKeys.SHOP:
    case routingKey.RoutingKeys.VEHICLE_PURCHASE:
    case routingKey.RoutingKeys.SERVICES:
    case routingKey.RoutingKeys.EXPERIENCE: {
      const parentRoutingKey = routingKey.removeLastRoutingSegment(activeRoutingKey);
      return routingKey.getLastRoutingSegment(parentRoutingKey);
    }
  }
  return routingKey.RoutingKeys.MAIN_MENU;
}
function getMenuContent(content, routingKey$1, topLevelRoutingKey) {
  const { vehiclePurchase, experience, shop, legacyMore, services } = content;
  const menuContent = {
    [routingKey.RoutingKeys.VEHICLE_PURCHASE]: vehiclePurchase,
    [routingKey.RoutingKeys.EXPERIENCE]: experience,
    [routingKey.RoutingKeys.SHOP]: shop,
    [routingKey.RoutingKeys.MORE]: legacyMore,
    [routingKey.RoutingKeys.SERVICES]: services
  }[topLevelRoutingKey];
  if (menuContent === undefined || menuContent === null) {
    return null;
  }
  if (helper.isString(menuContent.experienceName)) {
    menuContent.children = abTestingConstructorService.abTestingService().executeContentChange(menuContent);
  }
  const idOfLastRoutingSegment = routingKey.getLastRoutingSegment(routingKey$1);
  return idOfLastRoutingSegment === topLevelRoutingKey
    ? menuContent
    : navContentStore.findMenuItemById(menuContent, idOfLastRoutingSegment);
}
function isDealerSearchEnabled(locale, userConsentGiven) {
  try {
    const { country } = navContentStore.splitLocale(locale);
    const returnDealerSearch = !navContentStore.isCountryInOneOfRegions(country) && userConsentGiven;
    return (featureToggles.featureToggles.isDealerSearchChinaEnabled() || country !== 'CN') && returnDealerSearch;
  }
  catch (_a) {
    // ignore error
  }
  return true;
}
function getBackButtonText(content, previousRoutingKey) {
  if (!helper.isString(previousRoutingKey)) {
    return '';
  }
  const topLevelRoutingKey = routingKey.findTopLevelRoutingKey(previousRoutingKey);
  switch (topLevelRoutingKey) {
    case routingKey.RoutingKeys.MODELS: {
      return content.models.text;
    }
    case routingKey.RoutingKeys.DEALER_SEARCH:
      if (content.dealer.numberOfDealers === 1) {
        return '';
      }
      return content.dealer.details.backToSearch;
    case routingKey.RoutingKeys.SHOP:
    case routingKey.RoutingKeys.VEHICLE_PURCHASE:
    case routingKey.RoutingKeys.MORE:
    case routingKey.RoutingKeys.EXPERIENCE: {
      const menuContent = getMenuContent(navContentStore.navContentStore.state, previousRoutingKey, topLevelRoutingKey);
      if (menuContent !== null) {
        return menuContent.text;
      }
      break;
    }
  }
  return '';
}
function getHeadlineText(content, routingKey$1, topLevelRoutingKey) {
  var _a;
  const { dealer, myPorsche, models, vehiclePurchase, experience, shop, legacyMore, services } = content;
  let menuContent;
  switch (topLevelRoutingKey) {
    case routingKey.RoutingKeys.MORE:
    case routingKey.RoutingKeys.SHOP:
    case routingKey.RoutingKeys.EXPERIENCE:
    case routingKey.RoutingKeys.SERVICES:
    case routingKey.RoutingKeys.VEHICLE_PURCHASE: {
      menuContent = {
        [routingKey.RoutingKeys.VEHICLE_PURCHASE]: vehiclePurchase,
        [routingKey.RoutingKeys.EXPERIENCE]: experience,
        [routingKey.RoutingKeys.SHOP]: shop,
        [routingKey.RoutingKeys.MORE]: legacyMore,
        [routingKey.RoutingKeys.SERVICES]: services
      }[topLevelRoutingKey];
      if (menuContent === undefined) {
        return '';
      }
      const idOfLastRoutingSegment = routingKey.getLastRoutingSegment(routingKey$1);
      return idOfLastRoutingSegment === topLevelRoutingKey
        ? menuContent === null || menuContent === void 0 ? void 0 : menuContent.text
        : (_a = navContentStore.findMenuItemById(menuContent, idOfLastRoutingSegment)) === null || _a === void 0 ? void 0 : _a.text;
    }
    case routingKey.RoutingKeys.SERIES:
    case routingKey.RoutingKeys.MODELS: {
      const routingId = routingKey.getLastRoutingSegment(routingKey$1);
      menuContent = models.series.find((modelsSeries) => routingId === modelsSeries.id);
      return menuContent === undefined ? models.text : menuContent === null || menuContent === void 0 ? void 0 : menuContent.id;
    }
    case routingKey.RoutingKeys.DEALER_SEARCH: {
      return dealer.search.text;
    }
    case routingKey.RoutingKeys.MY_PORSCHE: {
      return myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.text;
    }
  }
  return '';
}
function getSubtext(topLevelRoutingKey, activeRoutingKey, locale) {
  const { myPorsche, models } = navContentStore.navContentStore.state;
  const { loggedInState } = navContentStore.navStateStore.state;
  if (topLevelRoutingKey === routingKey.RoutingKeys.MY_PORSCHE) {
    const isLoggedIn = helper.IsLoggedIn(loggedInState);
    return isLoggedIn ? helper.getUsername(loggedInState, (myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.loggedInFallback) || '') : '';
  }
  if (topLevelRoutingKey === routingKey.RoutingKeys.DEALER_SEARCH) {
    const { savedDealerCookie, ppnDealers } = dealerSearchResultsStore.dealerSearchResultsStore.state;
    const savedDealer = savedDealerCookie !== null ? ppnDealers[savedDealerCookie.id] : undefined;
    const savedDealerName = locale && navContentStore.splitLocale(locale).language === 'en'
      ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name
      : helper.isString(savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized)
        ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized
        : savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name;
    return savedDealerCookie ? savedDealerName : '';
  }
  if (topLevelRoutingKey === routingKey.RoutingKeys.MODELS) {
    if (helper.isString(activeRoutingKey)) {
      const routingId = routingKey.getLastRoutingSegment(activeRoutingKey);
      const menuContent = models.series.find((modelsSeries) => routingId === modelsSeries.id);
      if (menuContent) {
        return menuContent.tags.map((tag) => tag.text).join(' | ');
      }
    }
  }
  return '';
}

exports.getBackButtonText = getBackButtonText;
exports.getHeadlineText = getHeadlineText;
exports.getLevel1Items = getLevel1Items;
exports.getMenuContent = getMenuContent;
exports.getSideDrawerItems = getSideDrawerItems;
exports.getSideDrawerRoutingKey = getSideDrawerRoutingKey;
exports.getSubtext = getSubtext;

//# sourceMappingURL=menu-items-service-de2bb23d.js.map