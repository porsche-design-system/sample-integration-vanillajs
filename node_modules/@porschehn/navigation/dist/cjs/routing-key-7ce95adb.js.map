{"file":"routing-key-7ce95adb.js","mappings":";;;;MAEa,WAAW,GAAG;EACzB,SAAS,EAAE,UAAU;EACrB,aAAa,EAAE,eAAe;EAC9B,IAAI,EAAE,MAAM;EACZ,IAAI,EAAE,MAAM;EACZ,MAAM,EAAE,QAAQ;EAChB,UAAU,EAAE,YAAY;EACxB,gBAAgB,EAAE,kBAAkB;EACpC,UAAU,EAAE,YAAY;EACxB,QAAQ,EAAE,UAAU;EACpB,MAAM,EAAE,QAAQ;EACP;AAECA;AAAZ,WAAY,kBAAkB;EAC5B,wEAAe,CAAA;EACf,qEAAa,CAAA;EACb,qEAAa,CAAA;AACf,CAAC,EAJWA,0BAAkB,KAAlBA,0BAAkB,QAI7B;SASe,mBAAmB,CAAC,GAAG,IAAc;EACnD,OAAO,IAAI;KACR,MAAM,CAAW,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,GAAG,QAAQ,EAAE,GAAGC,gBAAS,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;KACpF,MAAM,CAAC,OAAO,CAAC;KACf,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;SAEe,sBAAsB,CAAC,gBAAwB;EAC7D,IAAIC,eAAQ,CAAC,gBAAgB,CAAC,EAAE;IAC9B,OAAO,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,gBAAgB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;GACjG;AACH,CAAC;SAMe,mBAAmB,CAAC,GAAG,IAAc;EACnD,OAAO,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;AAC1D,CAAC;SAEe,0BAA0B,CAAC,GAAG,IAAc;EAC1D,OAAO,mBAAmB,CAAC,WAAW,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,CAAC;AACjE,CAAC;SAEe,sBAAsB,CAAC,GAAG,IAAc;EACtD,OAAO,mBAAmB,CAAC,WAAW,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC;AAC9D,CAAC;SAEe,4BAA4B,CAAC,GAAG,IAAc;EAC5D,OAAO,mBAAmB,CAAC,WAAW,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC,CAAC;AACpE,CAAC;SAEe,qBAAqB,CAAC,UAAkB;EACtD,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC;SAEe,wBAAwB,CAAC,UAAkB;EACzD,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtD,CAAC;SAEe,wBAAwB,CAAC,gBAAwB;EAC/D,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;EACpE,QAAQ,kBAAkB;IACxB,KAAK,WAAW,CAAC,SAAS,EAAE;MAC1B,OAAO,CAAC,CAAC;KACV;IACD,KAAK,gBAAgB,EAAE;MACrB,OAAO,CAAC,CAAC;KACV;IACD,SAAS;MACP,OAAO,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAC/C;GACF;AACH,CAAC;SAEe,qBAAqB,CAAC,UAAkB;EACtD,MAAM,kBAAkB,GAAG,wBAAwB,CAAC,UAAU,CAAC,CAAC;EAChE,IAAI,CAACA,eAAQ,CAAC,kBAAkB,CAAC,EAAE;IACjC,OAAO,WAAW,CAAC,SAAS,CAAC;GAC9B;EAED,OAAO,kBAAkB,CAAC;AAC5B;;;;;;;;;;;;;;","names":["RoutingKeyPointers","getString","isString"],"sources":["src/entities/routing-key.ts"],"sourcesContent":["import { getString, isString } from '../utility/helper';\n\nexport const RoutingKeys = {\n  MAIN_MENU: 'mainmenu',\n  DEALER_SEARCH: 'find_a_dealer',\n  MORE: 'more',\n  SHOP: 'shop',\n  SERIES: 'series',\n  MY_PORSCHE: 'my_porsche',\n  VEHICLE_PURCHASE: 'vehicle_purchase',\n  EXPERIENCE: 'experience',\n  SERVICES: 'services',\n  MODELS: 'models'\n} as const;\n\nexport enum RoutingKeyPointers {\n  LEVEL_ZERO = -1,\n  LEVEL_ONE = 0,\n  LEVEL_TWO = 1\n}\n\nexport type RoutingKey = (typeof RoutingKeys)[keyof typeof RoutingKeys];\n\nexport interface RoutingKeyWithClick {\n  initialRoutingKey: RoutingKey | string;\n  isKeyboardClick: boolean;\n}\n\nexport function constructRoutingKey(...args: string[]): string {\n  return args\n    .reduce<string[]>((segments, arg) => [...segments, ...getString(arg).split('/')], [])\n    .filter(Boolean)\n    .join('/');\n}\n\nexport function findTopLevelRoutingKey(activeRoutingKey: string): RoutingKey | undefined {\n  if (isString(activeRoutingKey)) {\n    return Object.values(RoutingKeys).find((routingKey) => activeRoutingKey.startsWith(routingKey));\n  }\n}\n\nexport function getSeriesRoutingKey(...args: string[]): string {\n  return constructRoutingKey(RoutingKeys.SERIES, ...args);\n}\n\nexport function getModelsRoutingKey(...args: string[]): string {\n  return constructRoutingKey(RoutingKeys.MODELS, ...args);\n}\n\nexport function getDealerDetailsRoutingKey(...args: string[]): string {\n  return constructRoutingKey(RoutingKeys.DEALER_SEARCH, ...args);\n}\n\nexport function getMyPorscheRoutingKey(...args: string[]): string {\n  return constructRoutingKey(RoutingKeys.MY_PORSCHE, ...args);\n}\n\nexport function getVehiclePurchaseRoutingKey(...args: string[]): string {\n  return constructRoutingKey(RoutingKeys.VEHICLE_PURCHASE, ...args);\n}\n\nexport function getLastRoutingSegment(routingKey: string): string {\n  return routingKey.split('/').slice(-1)[0];\n}\n\nexport function removeLastRoutingSegment(routingKey: string): string {\n  return routingKey.split('/').slice(0, -1).join('/');\n}\n\nexport function determineMainDrawerLevel(activeRoutingKey: string): number {\n  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);\n  switch (topLevelRoutingKey) {\n    case RoutingKeys.MAIN_MENU: {\n      return 1;\n    }\n    case activeRoutingKey: {\n      return 2;\n    }\n    default: {\n      return activeRoutingKey.split('/').length + 1;\n    }\n  }\n}\n\nexport function getPreviousRoutingKey(routingKey: string): string {\n  const previousRoutingKey = removeLastRoutingSegment(routingKey);\n  if (!isString(previousRoutingKey)) {\n    return RoutingKeys.MAIN_MENU;\n  }\n\n  return previousRoutingKey;\n}\n"],"version":3}