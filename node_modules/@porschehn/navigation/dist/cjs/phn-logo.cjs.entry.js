'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-98b6cdb7.js');
const globalDataLayerService = require('./global-data-layer-service-534dfa5c.js');
const index$1 = require('./index-62f113b0.js');
const navContentStore = require('./nav-content-store-ed0e79aa.js');
const helper = require('./helper-67121a1c.js');
const shopHelper = require('./shop-helper-d333e4b0.js');

const logoCss = "";

const Logo = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.logoLoaded = index.createEvent(this, "logoLoaded", 7);
    this.size = undefined;
    this.locale = undefined;
    this.app = undefined;
    this.theme = helper.NavigationTheme.light;
    this.mode = helper.NavigationMode.navbar;
    this.breakpoint = undefined;
  }
  sendDataLayerEvent(crest) {
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.CREST_CLICK, {
      componentClick: {
        clickElementId: crest.id,
        clickElementName: crest.text,
        clickElementType: navContentStore.ClickElementTypes.Link,
        targetUrl: crest.link
      }
    });
  }
  componentWillLoad() {
    index$1.componentsJs.componentsReady(this.el) // TR: I believe this first call waits for the phn-logo element to be ready
      .then(() => index$1.componentsJs.componentsReady(this.el)) // TR: Then this second call actually waits for its children (i.e.: phn-p-marque) to be ready
      .then(() => {
      this.logoLoaded.emit();
    });
  }
  getLogoLink(locale, app, crest, shop) {
    return shopHelper.isShopAvailableAndLogoLinksToShop(locale, app, shop) ? shop.link : crest.link;
  }
  getLogoAriaLabel(locale, app, shop) {
    return shopHelper.isShopAvailableAndLogoLinksToShop(locale, app, shop) ? 'Porsche Shop Homepage' : 'Porsche.com Homepage';
  }
  render() {
    const { crest, shop } = navContentStore.navContentStore.state;
    const logoLink = this.getLogoLink(this.locale, this.app, crest, shop);
    const logoAriaLabel = this.getLogoAriaLabel(this.locale, this.app, shop);
    return helper.isDesktop(this.breakpoint) ? (index.h("phn-p-wordmark", { onClick: () => this.sendDataLayerEvent(crest), href: helper.isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel }, size: "small", theme: helper.getRightTheme(this.theme, this.mode) })) : (index.h("phn-p-crest", { onClick: () => this.sendDataLayerEvent(crest), href: helper.isString(logoLink) ? logoLink : undefined, aria: { 'aria-label': logoAriaLabel } }));
  }
  get el() { return index.getElement(this); }
};
Logo.style = logoCss;

exports.phn_logo = Logo;

//# sourceMappingURL=phn-logo.cjs.entry.js.map