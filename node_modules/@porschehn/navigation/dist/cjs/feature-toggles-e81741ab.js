'use strict';

const navContentStore = require('./nav-content-store-792bb73e.js');
const naviError = require('./navi-error-3887a972.js');
const windowService = require('./window-service-c9a19f26.js');

const FEATURE_OVERRIDE_ENABLED = 'featureOverrideEnabled';
const FEATURE_PORSCHE_75_YEARS_LOGO = 'porsche_75_years_logo';
const FEATURE_SHOP = 'shop';
const FEATURE_PCOM_SEARCH = 'pcom_search';
const FEATURE_SAVED_ITEMS = 'saved_items';
const FEATURE_AB_TESTING = 'ab';
const FEATURE_DEALER_SEARCH_CHINA = 'dealer_search_china';
const FEATURE_DEALER_SEARCH_OPENING_HOURS = 'opening_hours';

const local = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
const preview = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
const test = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
const production = {
	featureOverrideEnabled: {
		enabled: false
	},
	homenav_1723: {
		enabled: false
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	}
};
const featureJson = {
	local: local,
	preview: preview,
	test: test,
	production: production
};

const LOGGING_ENDPOINT = 'https://logs.nav.porsche.com';
class Logger {
  constructor() {
    this.env = null;
    this.version = naviError.VERSION;
    this.breakpoint = 0;
    this.locale = null;
  }
  init(env, breakpoint, locale) {
    this.env = env;
    this.breakpoint = breakpoint;
    this.locale = locale;
  }
  log(logName, level, id, message, errorType) {
    if (this.env === navContentStore.Environments.TEST) {
      return;
    }
    try {
      const log = JSON.stringify({
        name: logName,
        level: level,
        env: this.env,
        breakpoint: this.breakpoint,
        locale: this.locale,
        version: this.version,
        hostname: windowService.windowService.location.hostname,
        pathname: windowService.windowService.location.pathname,
        id,
        errorType: errorType || '',
        message
      });
      if (this.env === navContentStore.Environments.PRODUCTION) {
        if (level !== "debug" /* LogLevel.DEBUG */) {
          fetch(LOGGING_ENDPOINT, {
            method: 'POST',
            body: log,
            mode: 'no-cors'
          });
        }
      }
      else {
        // eslint-disable-next-line no-console
        console[level](log);
      }
    }
    catch (err) {
      // throw the error away
    }
  }
  info(id, message = '') {
    this.log('PHN_HEADER_LOG_ENTRY', "info" /* LogLevel.INFO */, id, message);
  }
  error(id, err) {
    const errorType = err instanceof naviError.NaviError ? err.type : naviError.NaviErrorTypes.GENERAL;
    this.log('PHN_HEADER_LOG_ENTRY', "error" /* LogLevel.ERROR */, id, err.message, errorType);
  }
}
const logger = new Logger();

class FeatureToggles {
  constructor(env = navContentStore.getEnvironment(naviError.DEFAULT_ENVIRONMENT), featureEnvMap = featureJson) {
    this.featureEnvMap = featureEnvMap;
    this.features = {};
    this.env = 'local';
    this.isShopToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP, windowService.windowService.location.search);
    this.isPcomSearchToggleActive = () => this.isFeatureEnabled(FEATURE_PCOM_SEARCH, windowService.windowService.location.search);
    this.isSavedItemsToggleActive = () => this.isFeatureEnabled(FEATURE_SAVED_ITEMS, windowService.windowService.location.search);
    this.isABTestingToggleActive = () => this.isFeatureEnabled(FEATURE_AB_TESTING, windowService.windowService.location.search);
    this.isDealerSearchChinaEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_CHINA, windowService.windowService.location.search);
    this.isDealerSearchOpeningHoursEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_OPENING_HOURS, windowService.windowService.location.search);
    this.env = env;
    this.features = this.featureEnvMap[env];
  }
  async loadRemoteToggles() {
    try {
      const BFFEndpoint = naviError.getConfig(this.env).BFF_ENDPOINT;
      const response = await fetch(`${BFFEndpoint}/toggles?env=${this.env}`);
      if (!response.ok) {
        const text = await response.text();
        throw new Error(text);
      }
      const result = await response.json();
      this.features = result;
    }
    catch (err) {
      throw new naviError.NaviError(`Load Feature Toggles failed with error: ${err}`, naviError.NaviErrorTypes.GENERAL);
    }
  }
  stringToBooleanStrict(value) {
    if (value === 'true') {
      return true;
    }
    if (value === 'false') {
      return false;
    }
    return null;
  }
  getUrlFeatureToggleOverride(feature, searchString) {
    var _a, _b;
    const queryValue = (_b = (_a = searchString
      .split('?')[1]) === null || _a === void 0 ? void 0 : _a.split('&').find((query) => query.includes(feature))) === null || _b === void 0 ? void 0 : _b.split('=')[1];
    return naviError.isString(queryValue) ? this.stringToBooleanStrict(queryValue || '') : null;
  }
  getLocalStorageFeatureToggleOverride(feature) {
    const localStorageValue = localStorage.getItem(`phn.${feature}`);
    return naviError.isString(localStorageValue) ? this.stringToBooleanStrict(localStorageValue) : null;
  }
  isFeatureEnabled(feature, searchString) {
    var _a;
    if (this.features === undefined) {
      return false;
    }
    if (this.env === navContentStore.Environments.PRODUCTION && this.isOnSecurityLayer(feature)) {
      return false;
    }
    if ((_a = this.features[FEATURE_OVERRIDE_ENABLED]) === null || _a === void 0 ? void 0 : _a.enabled) {
      const featureToggleOverrides = [
        this.getUrlFeatureToggleOverride(feature, searchString),
        this.getLocalStorageFeatureToggleOverride(feature)
      ];
      for (const featureToggleOverride of featureToggleOverrides) {
        if (featureToggleOverride !== null) {
          return featureToggleOverride;
        }
      }
    }
    if (this.features[feature] !== undefined) {
      return this.features[feature].enabled;
    }
    else {
      return false;
    }
  }
  async setFeatures(env) {
    this.env = env;
    try {
      if (env === 'test') {
        this.features = this.featureEnvMap[env];
        return;
      }
      await this.loadRemoteToggles();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (error) {
      logger.error('INIT_APP_CONFIG', error);
      this.features = this.featureEnvMap[env];
    }
  }
  isOnSecurityLayer(feature) {
    const prodDisabledToggles = ['opening_hours'];
    return prodDisabledToggles.includes(feature);
  }
}
const featureToggles = new FeatureToggles();

exports.FEATURE_PORSCHE_75_YEARS_LOGO = FEATURE_PORSCHE_75_YEARS_LOGO;
exports.featureToggles = featureToggles;
exports.logger = logger;

//# sourceMappingURL=feature-toggles-e81741ab.js.map