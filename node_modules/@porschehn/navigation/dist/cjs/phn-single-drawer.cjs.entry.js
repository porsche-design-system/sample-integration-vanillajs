'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-947214e4.js');
const routingKey = require('./routing-key-39c28377.js');
const animationManager = require('./animation-manager-cd2e5425.js');
const globalDataLayerService = require('./global-data-layer-service-a697b177.js');
const naviError = require('./navi-error-3887a972.js');
const timeout = require('./timeout-2252a895.js');
const menuItemsService = require('./menu-items-service-e380c308.js');
const navContentStore = require('./nav-content-store-792bb73e.js');
const singleDrawerAnimationSequences = require('./single-drawer-animation-sequences-2abdefe6.js');
const analyticsManager = require('./analytics-manager-c01a9024.js');
const helper = require('./helper-bce758fc.js');
const animations = require('./animations-dcc5b59a.js');
require('./window-service-c9a19f26.js');
require('./ab-testing-constructor-service-c7ed262c.js');
require('./feature-toggles-e81741ab.js');
require('./router-store-96589d10.js');

function DrawerContent({ routingKey, previousRoutingKey, breakpoint, locale, showBackButton, receivedContent }) {
  const { menu } = navContentStore.navContentStore.state;
  const backButtonText = menuItemsService.getBackButtonText(navContentStore.navContentStore.state, previousRoutingKey !== null && previousRoutingKey !== void 0 ? previousRoutingKey : '') || menu.text;
  return (index.h(index.Fragment, null,
    index.h("div", { class: "bottom-gradient" }),
    index.h("div", { class: "drawer-content" },
      index.h("phn-drawer-header", { showBackButton: showBackButton, backButtonAnalyticsId: menu.id, backButtonText: backButtonText, activeRoutingKey: routingKey, breakpoint: breakpoint, receivedContent: receivedContent, locale: locale }),
      index.h("phn-router", { activeRoutingKey: routingKey, breakpoint: breakpoint, locale: locale, receivedContent: receivedContent }))));
}

const singleDrawerCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-single-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-single-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-single-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-single-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-single-drawer-h{display:block}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer{z-index:301;background-color:#fff;position:fixed;top:0;bottom:0;right:0;width:100vw}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{overflow-y:auto;height:100vh;width:100vw;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 1.6875rem 6.25rem 1.6875rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.1875rem 6.25rem 2.1875rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 3.375rem 6.25rem 3.375rem}}@media (min-width: 1000px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.25rem 6.25rem 2.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:1.125rem;margin-bottom:1.9375rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-top:2rem;margin-bottom:2.3125rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-bottom:1.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-router.sc-phn-single-drawer{padding-bottom:4rem}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .bottom-gradient.sc-phn-single-drawer{height:10rem;background:-webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(rgb(255, 255, 255)));background:linear-gradient(to bottom, rgba(255, 255, 255, 0), rgb(255, 255, 255));opacity:1;position:absolute;width:100%;bottom:0;margin-left:-1.5rem;pointer-events:none;margin-left:0;z-index:1}";

const SingleDrawer = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.drawerClosed = index.createEvent(this, "drawerClosed", 7);
    this.drawerChanged = index.createEvent(this, "drawerChanged", 7);
    this.drawerStartsClosing = index.createEvent(this, "drawerStartsClosing", 7);
    this.backdropClosed = index.createEvent(this, "backdropClosed", 7);
    this.phnDrawerStatus = index.createEvent(this, "phnDrawerStatus", 7);
    this.focusTimeout = new timeout.Timeout(0);
    this.operationPipeline = [];
    this.breakpoint = undefined;
    this.locale = undefined;
    this.usingKeyboard = false;
    this.routingKeyHistory = undefined;
    this.routingKeyPointer = undefined;
    this.receivedContent = false;
    this.animatingPointer = -1;
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    const targetElement = naviError.getHTMLElement(e.target);
    if (targetElement === null) {
      return;
    }
    let focusableDrawerElements = helper.getAllFocusableElements(this.el.querySelector('.active'));
    if (focusableDrawerElements.length === 0) {
      return;
    }
    const activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    if (activeRoutingKey.startsWith(routingKey.RoutingKeys.DEALER_SEARCH)) {
      focusableDrawerElements = focusableDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const firstFocusableDrawerElement = focusableDrawerElements[0];
    const lastFocusableDrawerElement = focusableDrawerElements[focusableDrawerElements.length - 1];
    if (targetElement === firstFocusableDrawerElement && e.shiftKey) {
      e.preventDefault();
      if (lastFocusableDrawerElement !== null) {
        naviError.focusOnElement(lastFocusableDrawerElement);
      }
      return;
    }
    if (targetElement === lastFocusableDrawerElement && !e.shiftKey) {
      e.preventDefault();
      if (firstFocusableDrawerElement !== null) {
        naviError.focusOnElement(firstFocusableDrawerElement);
      }
      return;
    }
  }
  handleMobileMenuItemClick(e) {
    if (singleDrawerAnimationSequences.isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
    this.animatingPointer = this.routingKeyPointer;
  }
  handleClickDrawerHeaderClose(e) {
    if (singleDrawerAnimationSequences.isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
  }
  handleClickDrawerHeaderBack(e) {
    if (singleDrawerAnimationSequences.isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
    this.animatingPointer = this.routingKeyPointer;
  }
  onTransitionEnd() {
    const focussedElementId = this.animatingPointer > this.routingKeyPointer ? this.routingKeyHistory[this.animatingPointer] : '';
    this.animatingPointer = this.routingKeyPointer;
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    this.drawerChanged.emit(isNavigatingBackwards);
    // Focus needs to happen after rerender, so wait for next tick
    this.focusTimeout.set(async () => {
      this.focusOnActiveDrawer(focussedElementId);
    });
    this.sendDataLayerEvent();
  }
  componentWillLoad() {
    singleDrawerAnimationSequences.registerOpenSingleDrawerAnimation({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: naviError.DrawerStatusValues.startOpening });
      },
      onAnimationEnds: () => {
        this.onTransitionEnd();
        this.phnDrawerStatus.emit({ status: naviError.DrawerStatusValues.finishOpening });
      }
    });
    singleDrawerAnimationSequences.registerCloseSingleDrawerAnimation({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: naviError.DrawerStatusValues.startClosing });
      },
      onAnimationEnds: () => {
        this.backdropClosed.emit();
        this.phnDrawerStatus.emit({ status: naviError.DrawerStatusValues.finishClosing });
      }
    });
    singleDrawerAnimationSequences.registerTransitionNextLevelSingleDrawerAnimation({
      onAnimationEnds: () => this.onTransitionEnd()
    });
    singleDrawerAnimationSequences.registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds: () => this.onTransitionEnd() });
  }
  focusOnActiveDrawer(focussedElementId) {
    const autoFocusElement = naviError.getHTMLElement(this.el.querySelector('.active .autofocus'));
    if (autoFocusElement !== null) {
      naviError.focusOnElement(autoFocusElement);
      return;
    }
    if (this.usingKeyboard) {
      let focussableElement = null;
      if (naviError.isString(focussedElementId)) {
        focussableElement = naviError.getHTMLElement(this.el.querySelector(`.active [data-id="${focussedElementId}"]`));
      }
      if (focussableElement === null) {
        focussableElement = naviError.getHTMLElement(this.el.querySelector(`.active ${naviError.FOCUSABLE_ELEMENTS_SELECTOR}`));
      }
      if (focussableElement !== null) {
        naviError.focusOnElement(focussableElement);
      }
    }
    else {
      //Todo: Why first-focus class? We have it nowhere
      const firstFocus = naviError.getHTMLElement(this.el.querySelector('.first-focus'));
      if (firstFocus !== null) {
        naviError.focusOnElement(firstFocus);
      }
    }
  }
  sendDataLayerEvent() {
    analyticsManager.analyticsManager.setDrawerType(navContentStore.DisplayElementTypes.SingleDrawer);
    const activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    globalDataLayerService.globalDataLayerService.pushDataLayerEvent(navContentStore.EventActions.DRAWER_LOAD, {
      componentDisplay: {
        displayElementType: analyticsManager.analyticsManager.calculateDisplayElementType(activeRoutingKey, navContentStore.ElementTypes.singleDrawer),
        displayElementId: analyticsManager.analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Single Drawer'
      }
    });
  }
  disconnectedCallback() {
    this.focusTimeout.cancel();
  }
  async componentDidRender() {
    const promises = [];
    for (const operation of this.operationPipeline) {
      const maybePromise = operation();
      if (naviError.isPromise(maybePromise)) {
        promises.push(maybePromise);
      }
    }
    await Promise.all(promises);
    this.operationPipeline.splice(0, this.operationPipeline.length);
  }
  render() {
    var _a, _b;
    const isOpening = this.routingKeyPointer > this.animatingPointer;
    const isClosing = this.routingKeyPointer < this.animatingPointer;
    let topDrawerContentPointer = -1;
    let bottomDrawerContentPointer = this.routingKeyPointer;
    if (isOpening) {
      topDrawerContentPointer = this.routingKeyPointer;
      bottomDrawerContentPointer = this.animatingPointer;
      if (bottomDrawerContentPointer !== routingKey.RoutingKeyPointers.LEVEL_ZERO) {
        this.operationPipeline.push(async () => {
          animationManager.animationManager.play(animations.AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);
        });
      }
    }
    else if (isClosing) {
      topDrawerContentPointer = this.animatingPointer;
      if (bottomDrawerContentPointer !== routingKey.RoutingKeyPointers.LEVEL_ZERO) {
        this.operationPipeline.push(async () => {
          animationManager.animationManager.play(animations.AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);
        });
      }
    }
    const animatingRoutingKey = (_a = this.routingKeyHistory[topDrawerContentPointer]) !== null && _a !== void 0 ? _a : '';
    const routingKey$1 = (_b = this.routingKeyHistory[bottomDrawerContentPointer]) !== null && _b !== void 0 ? _b : '';
    return (index.h(index.Host, null, naviError.isString(routingKey$1) ? (index.h("div", { class: "drawer active", key: routingKey$1 }, index.h("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }), index.h(DrawerContent, { routingKey: routingKey$1, previousRoutingKey: this.routingKeyHistory[bottomDrawerContentPointer - 1], breakpoint: this.breakpoint, locale: this.locale, showBackButton: bottomDrawerContentPointer > 0, receivedContent: this.receivedContent }))) : null, naviError.isString(animatingRoutingKey) ? (index.h("div", { class: `drawer animating`, style: isOpening ? { right: '-100%' } : {}, key: animatingRoutingKey }, index.h(DrawerContent, { routingKey: animatingRoutingKey, previousRoutingKey: this.routingKeyHistory[topDrawerContentPointer - 1], breakpoint: this.breakpoint, locale: this.locale, showBackButton: topDrawerContentPointer > 0, receivedContent: this.receivedContent }))) : null));
  }
  get el() { return index.getElement(this); }
};
SingleDrawer.style = singleDrawerCss;

exports.phn_single_drawer = SingleDrawer;

//# sourceMappingURL=phn-single-drawer.cjs.entry.js.map