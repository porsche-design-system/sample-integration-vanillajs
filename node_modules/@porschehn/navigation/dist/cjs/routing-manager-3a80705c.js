'use strict';

const routerStore = require('./router-store-fdfbb3ef.js');
const routingKey = require('./routing-key-7ce95adb.js');
const helper = require('./helper-2e938230.js');
const featureToggles = require('./feature-toggles-56b31f71.js');
const dealerSearchResultsStore = require('./dealer-search-results-store-82b04c04.js');
const animationManager = require('./animation-manager-697ad19b.js');
const animations = require('./animations-34f77238.js');

const handleAnimationRouting = () => {
  const actions = {
    OPENING: openingAction,
    CLOSING: closingAction,
    FORWARD: forwardAction,
    BACKWARDS: backwardAction,
    UNCHANGED: unchangedAction
  };
  const conditionToExecute = getSingleDrawerAction();
  return actions[conditionToExecute]();
};
function getSingleDrawerAction() {
  if (isOpening()) {
    return 'OPENING';
  }
  if (isClosing()) {
    return 'CLOSING';
  }
  if (isAnimatingForward()) {
    return 'FORWARD';
  }
  if (isAnimatingBackward()) {
    return 'BACKWARDS';
  }
  return 'UNCHANGED';
}
const openingAction = () => {
  animationManager.animationManager.play(animations.AnimationSequences.OPEN_SINGLE_DRAWER);
  return {
    nextRoute: '',
    currentRoute: getCurrentRoute()
  };
};
const closingAction = () => {
  animationManager.animationManager.play(animations.AnimationSequences.CLOSE_SINGLE_DRAWER).then(() => {
    // TODO: Focus on burger button if using the keyboard
  });
  return {
    nextRoute: getCurrentRoute() || '',
    currentRoute: getAnimatedRoute() || ''
  };
};
const forwardAction = () => {
  var _a, _b;
  setTimeout(() => {
    animationManager.animationManager.play(animations.AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);
  });
  return {
    nextRoute: (_a = getCurrentRoute()) !== null && _a !== void 0 ? _a : '',
    currentRoute: (_b = getAnimatedRoute()) !== null && _b !== void 0 ? _b : ''
  };
};
const backwardAction = () => {
  var _a, _b;
  if (getCurrentRoute() !== '') {
    setTimeout(() => {
      animationManager.animationManager.play(animations.AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);
    });
  }
  return {
    nextRoute: (_a = getAnimatedRoute()) !== null && _a !== void 0 ? _a : '',
    currentRoute: (_b = getCurrentRoute()) !== null && _b !== void 0 ? _b : ''
  };
};
const unchangedAction = () => {
  return {
    nextRoute: '',
    currentRoute: getCurrentRoute()
  };
};
const isPlayingSingleDrawerAnimation = () => {
  try {
    const singleDrawerAnimationSequences = [
      animations.AnimationSequences.OPEN_SINGLE_DRAWER,
      animations.AnimationSequences.CLOSE_SINGLE_DRAWER,
      animations.AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,
      animations.AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER
    ];
    return singleDrawerAnimationSequences.some((sequence) => {
      try {
        return animationManager.animationManager.isPlaying(sequence);
      }
      catch (_a) {
        return false;
      }
    });
  }
  catch (e) {
    return false;
  }
};

const getCurrentRoute = () => {
  const { routingKeyHistory, routingKeyPointer } = routerStore.routerStore.state;
  return routingKeyHistory[routingKeyPointer] || '';
};
const getAnimatedRoute = () => {
  const { routingKeyHistory, animatingPointer } = routerStore.routerStore.state;
  return routingKeyHistory[animatingPointer] || '';
};
const goTo = (...routes) => {
  const newHistory = [routingKey.RoutingKeys.MAIN_MENU, ...routes];
  routerStore.routerStore.state.routingKeyPointer = routes.length;
  routerStore.routerStore.state.routingKeyHistory = newHistory;
};
const back = () => {
  if (!isPlayingSingleDrawerAnimation()) {
    if (routingKey.findTopLevelRoutingKey(getCurrentRoute()) === routingKey.RoutingKeys.DEALER_SEARCH) {
      dealerSearchResultsStore.dealerSearchResultsStore.state.savedDealerCookie = null;
    }
    routerStore.routerStore.state.routingKeyPointer = routerStore.routerStore.state.routingKeyPointer - 1;
  }
};
const pop = () => {
  if (isNavigatingBackwards())
    routerStore.routerStore.state.routingKeyHistory.pop();
};
const addRoute = (newRoute) => {
  if (helper.isDesktop(featureToggles.windowService.getBreakpoint())) {
    helper.dispatchEvent('phn-router', 'mobileMenuItemClick', {
      bubbles: true,
      cancelable: false,
      detail: [routingKey.constructRoutingKey(getCurrentRoute(), ...newRoute)]
    });
  }
  else {
    const newHistory = [...routerStore.routerStore.state.routingKeyHistory, routingKey.constructRoutingKey(getCurrentRoute(), ...newRoute)];
    routerStore.routerStore.state.routingKeyPointer = newHistory.length - 1;
    routerStore.routerStore.state.routingKeyHistory = newHistory;
  }
};
const reset = () => {
  routerStore.routerStore.state.routingKeyPointer = -1;
};
const isNavigatingBackwards = () => {
  return routerStore.routerStore.state.routingKeyPointer < routerStore.routerStore.state.routingKeyHistory.length - 1;
};
//____________ANIMATIONS______________//
const isAnimatingForward = () => {
  return routerStore.routerStore.state.routingKeyPointer > routerStore.routerStore.state.animatingPointer;
};
const isAnimatingBackward = () => {
  return routerStore.routerStore.state.routingKeyPointer < routerStore.routerStore.state.animatingPointer;
};
const isOpening = () => {
  return (routerStore.routerStore.state.animatingPointer === routingKey.RoutingKeyPointers.LEVEL_ZERO && routerStore.routerStore.state.routingKeyPointer >= 0);
};
const isOpened = () => {
  return !isClosed();
};
const isClosed = () => {
  return (routerStore.routerStore.state.routingKeyPointer === routingKey.RoutingKeyPointers.LEVEL_ZERO &&
    routerStore.routerStore.state.animatingPointer === routingKey.RoutingKeyPointers.LEVEL_ZERO);
};
const isClosing = () => {
  return routerStore.routerStore.state.routingKeyPointer === -1 && routerStore.routerStore.state.animatingPointer >= 0;
};
const syncAnimation = () => {
  routerStore.routerStore.state.animatingPointer = routerStore.routerStore.state.routingKeyPointer;
};
const showBackButton = (section) => {
  const sectionKey = routerStore.routerStore.state.routingKeyHistory.indexOf(section);
  return sectionKey >= routingKey.RoutingKeyPointers.LEVEL_TWO;
};

exports.addRoute = addRoute;
exports.back = back;
exports.getCurrentRoute = getCurrentRoute;
exports.goTo = goTo;
exports.handleAnimationRouting = handleAnimationRouting;
exports.isAnimatingForward = isAnimatingForward;
exports.isClosed = isClosed;
exports.isOpened = isOpened;
exports.isOpening = isOpening;
exports.pop = pop;
exports.reset = reset;
exports.showBackButton = showBackButton;
exports.syncAnimation = syncAnimation;

//# sourceMappingURL=routing-manager-3a80705c.js.map