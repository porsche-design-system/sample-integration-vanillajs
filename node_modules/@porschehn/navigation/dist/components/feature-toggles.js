import { E as Environments, N as NaviError, a as NaviErrorTypes, g as getEnvironment } from './navi-error.js';
import { V as VERSION, f as DEFAULT_ENVIRONMENT, b as isString, c as getConfig } from './helper.js';
import { w as windowService } from './window-service.js';
import { n as navStateStore } from './nav-state-store.js';

const FEATURE_OVERRIDE_ENABLED = 'featureOverrideEnabled';
const FEATURE_SHOP = 'shop';
const FEATURE_PCOM_SEARCH = 'pcom_search';
const FEATURE_SAVED_ITEMS = 'saved_items';
const FEATURE_AB_TESTING = 'ab';
const FEATURE_DEALER_SEARCH_CHINA = 'dealer_search_china';
const FEATURE_DEALER_SEARCH_OPENING_HOURS = 'opening_hours';
const FEATURE_SENTRY = 'sentry';
const FEATURE_SHOP_WISHLIST = 'shop_wishlist';

const local = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const preview = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: false
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const test = {
	featureOverrideEnabled: {
		enabled: true
	},
	homenav_1723: {
		enabled: true
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	one_ui: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const production = {
	featureOverrideEnabled: {
		enabled: false
	},
	homenav_1723: {
		enabled: false
	},
	navi_3: {
		enabled: true
	},
	porsche_75_years_logo: {
		enabled: false
	},
	mock_shop_content: {
		enabled: false
	},
	shop: {
		enabled: false
	},
	pcom_search: {
		enabled: false
	},
	shop_wishlist: {
		enabled: false
	}
};
const featureJson = {
	local: local,
	preview: preview,
	test: test,
	production: production
};

class Logger {
  constructor() {
    this.version = VERSION;
    this.breakpoint = 0;
    this.locale = null;
  }
  init(_, locale) {
    this.breakpoint = windowService.getBreakpoint();
    this.locale = locale;
  }
  log(logName, level, id, message, errorType) {
    const { env } = navStateStore.state;
    if (env === Environments.TEST) {
      return;
    }
    try {
      const log = JSON.stringify({
        name: logName,
        level: level,
        env: env,
        breakpoint: this.breakpoint,
        locale: this.locale,
        version: this.version,
        hostname: windowService.location.hostname,
        pathname: windowService.location.pathname,
        id,
        errorType: errorType || '',
        message
      });
      if (env !== Environments.PRODUCTION) {
        // eslint-disable-next-line no-console
        console[level](log);
      }
      // eslint-disable-next-line no-empty
    }
    catch (err) { }
  }
  info(id, message = '') {
    this.log('PHN_HEADER_LOG_ENTRY', "info" /* LogLevel.INFO */, id, message);
  }
  error(id, err) {
    const errorType = err instanceof NaviError ? err.type : NaviErrorTypes.GENERAL;
    this.log('PHN_HEADER_LOG_ENTRY', "error" /* LogLevel.ERROR */, id, err.message, errorType);
    // captureNaviException(err, { breakpoint: this.breakpoint, locale: this.locale });
  }
}
const logger = new Logger();

class FeatureToggles {
  constructor(env = getEnvironment(DEFAULT_ENVIRONMENT), featureEnvMap = featureJson) {
    this.featureEnvMap = featureEnvMap;
    this.features = {};
    this.env = 'local';
    this.isShopToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP, windowService.location.search);
    this.isPcomSearchToggleActive = () => this.isFeatureEnabled(FEATURE_PCOM_SEARCH, windowService.location.search);
    this.isSavedItemsToggleActive = () => this.isFeatureEnabled(FEATURE_SAVED_ITEMS, windowService.location.search);
    this.isABTestingToggleActive = () => this.isFeatureEnabled(FEATURE_AB_TESTING, windowService.location.search);
    this.isDealerSearchChinaEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_CHINA, windowService.location.search);
    this.isDealerSearchOpeningHoursEnabled = () => this.isFeatureEnabled(FEATURE_DEALER_SEARCH_OPENING_HOURS, windowService.location.search);
    this.isSentryEnabled = () => this.isFeatureEnabled(FEATURE_SENTRY, windowService.location.search);
    this.isShopWishlistToggleActive = () => this.isFeatureEnabled(FEATURE_SHOP_WISHLIST, windowService.location.search);
    this.env = env;
    this.features = this.featureEnvMap[env];
  }
  async loadRemoteToggles() {
    try {
      const BFFEndpoint = getConfig(this.env).BFF_ENDPOINT;
      const response = await fetch(`${BFFEndpoint}/toggles?env=${this.env}`);
      if (!response.ok) {
        const text = await response.text();
        throw new Error(text);
      }
      const result = await response.json();
      this.features = result;
    }
    catch (err) {
      throw new NaviError(`Load Feature Toggles failed with error: ${err}`, NaviErrorTypes.GENERAL);
    }
  }
  stringToBooleanStrict(value) {
    if (value === 'true') {
      return true;
    }
    if (value === 'false') {
      return false;
    }
    return null;
  }
  getUrlFeatureToggleOverride(feature, searchString) {
    var _a, _b;
    const queryValue = (_b = (_a = searchString
      .split('?')[1]) === null || _a === void 0 ? void 0 : _a.split('&').find((query) => query.includes(feature))) === null || _b === void 0 ? void 0 : _b.split('=')[1];
    return isString(queryValue) ? this.stringToBooleanStrict(queryValue || '') : null;
  }
  getLocalStorageFeatureToggleOverride(feature) {
    const localStorageValue = localStorage.getItem(`phn.${feature}`);
    return isString(localStorageValue) ? this.stringToBooleanStrict(localStorageValue) : null;
  }
  isFeatureEnabled(feature, searchString) {
    var _a;
    if (this.features === undefined) {
      return false;
    }
    if (this.env === Environments.PRODUCTION && this.isOnSecurityLayer(feature)) {
      return false;
    }
    if ((_a = this.features[FEATURE_OVERRIDE_ENABLED]) === null || _a === void 0 ? void 0 : _a.enabled) {
      const featureToggleOverrides = [
        this.getUrlFeatureToggleOverride(feature, searchString),
        this.getLocalStorageFeatureToggleOverride(feature)
      ];
      for (const featureToggleOverride of featureToggleOverrides) {
        if (featureToggleOverride !== null) {
          return featureToggleOverride;
        }
      }
    }
    if (this.features[feature] !== undefined) {
      return this.features[feature].enabled;
    }
    else {
      return false;
    }
  }
  async setFeatures(env) {
    this.env = env;
    try {
      if (env === 'test') {
        this.features = this.featureEnvMap[env];
        return;
      }
      await this.loadRemoteToggles();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (error) {
      logger.error('INIT_APP_CONFIG', error);
      this.features = this.featureEnvMap[env];
    }
  }
  isOnSecurityLayer(feature) {
    const prodDisabledToggles = [FEATURE_SENTRY, FEATURE_DEALER_SEARCH_OPENING_HOURS];
    return prodDisabledToggles.includes(feature);
  }
}
const featureToggles = new FeatureToggles();

export { featureToggles as f, logger as l };

//# sourceMappingURL=feature-toggles.js.map