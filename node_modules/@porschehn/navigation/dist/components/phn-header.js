import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { N as NaviError, a as NaviErrorTypes, g as getEnvironment } from './navi-error.js';
import { g as globalDataLayerService, s as splitLocale, R as RegionLocales, E as EventActions } from './global-data-layer-service.js';
import { f as fetchContent, d as defineCustomElement$s } from './country-recommender.js';
import { c as getPPNDealerByRegion, d as getPPNDealer } from './dealer-service.js';
import { l as logger, f as featureToggles } from './feature-toggles.js';
import { n as navStateStore } from './nav-state-store.js';
import { j as getString, b as getConfig, d as DEFAULT_UNREAD_MESSAGES_COUNT, I as IsLoggedIn, v as getQueryString, B as IFRAME_ID, p as constructCacheKey, L as LOGGED_OUT_USER_STATUS, E as LOGGED_IN_USER_NO_NAME_STATUS, a as isString, N as NavigationTheme, m as NavigationMode, A as Application, H as sanitizeApp, J as getValidContentPathSegments, V as VERSION, K as getRootMenuItem, O as buildRoutingKeyHistoryFromContentPath } from './helper.js';
import { w as windowService } from './window-service.js';
import { f as finderStateStore } from './finder-state-store.js';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';
import { n as navContentStore } from './nav-content-store.js';
import { s as shopStateStore, l as loadsShopPropsOnStore, i as isShopAvailable } from './shop-helper.js';
import { h as abTestingService, r as routerStore } from './analytics-manager.js';
import { T as Timeout } from './timeout.js';
import { a as showDealerSearchDropdown } from './dealer-search-helper.js';
import { d as defineCustomElement$y } from './contextual-drawer2.js';
import { d as defineCustomElement$x } from './autocomplete-search-field.js';
import { d as defineCustomElement$w } from './back-button.js';
import { d as defineCustomElement$v } from './backdrop.js';
import { d as defineCustomElement$u } from './burger-button.js';
import { d as defineCustomElement$t } from './car-body-types-drawer.js';
import { d as defineCustomElement$r } from './dealer-details-drawer.js';
import { d as defineCustomElement$q } from './dealer-search-by-number-of-dealers.js';
import { d as defineCustomElement$p } from './dealer-search-form.js';
import { d as defineCustomElement$o } from './dealer-search-form-dropdown.js';
import { d as defineCustomElement$n } from './dealer-search-form-geolocation.js';
import { d as defineCustomElement$m } from './dealer-search-results.js';
import { d as defineCustomElement$l } from './double-drawer.js';
import { d as defineCustomElement$k } from './drawer-header.js';
import { d as defineCustomElement$j } from './heading.js';
import { d as defineCustomElement$i } from './level-0.js';
import { d as defineCustomElement$h } from './level-0-icons.js';
import { d as defineCustomElement$g } from './level-1.js';
import { d as defineCustomElement$f } from './logo.js';
import { d as defineCustomElement$e } from './menu.js';
import { d as defineCustomElement$d } from './menu-item.js';
import { d as defineCustomElement$c } from './menu-item-card.js';
import { d as defineCustomElement$b } from './models.js';
import { d as defineCustomElement$a } from './my-porsche-icon-button.js';
import { d as defineCustomElement$9 } from './myporsche-drawer.js';
import { d as defineCustomElement$8 } from './myporsche-login.js';
import { d as defineCustomElement$7 } from './router.js';
import { d as defineCustomElement$6 } from './side-drawer.js';
import { d as defineCustomElement$5 } from './side-drawer-item.js';
import { d as defineCustomElement$4 } from './signature-heading.js';
import { d as defineCustomElement$3 } from './single-drawer.js';
import { d as defineCustomElement$2 } from './wrapper.js';

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
const native = {
  randomUUID
};

function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

async function getUserInformation(accessToken, locale) {
  const config = getConfig(navStateStore.state.env);
  const init = {
    method: 'GET',
    headers: {
      'X-Trace-Id': v4(),
      Authorization: `${accessToken}`,
      Accept: 'application/json',
      Env: navStateStore.state.env
    }
  };
  try {
    const response = await fetch(getString(`${config === null || config === void 0 ? void 0 : config.BFF_ENDPOINT}/user-information?locale=${locale}`), init);
    if (!response.ok) {
      const text = await response.text();
      throw new Error(text);
    }
    return await response.json();
  }
  catch (error) {
    throw new NaviError(`Get User information request failed in Frontend with error: ${error}`, NaviErrorTypes.GENERAL);
  }
}

function getUserNameFromUserData(userData) {
  let status = '';
  const firstName = getString(userData.firstName);
  const lastName = getString(userData.lastName);
  if (isString(firstName)) {
    status = firstName;
    if (isString(lastName)) {
      status += ` ${lastName}`;
    }
  }
  else {
    if (isString(lastName)) {
      status = lastName;
    }
  }
  return status;
}
async function getUserIdFromUserData(userData) {
  return await windowService.hashString(getString(userData.porscheId));
}
const userDataCache = new Map();
async function getUserData(accessToken, locale, config) {
  const cacheKey = constructCacheKey(accessToken, locale, config.PROFILE_API_URL);
  const cachedUserData = userDataCache.get(cacheKey);
  if (cachedUserData !== undefined) {
    return cachedUserData;
  }
  let userProfileResponse;
  const { language, country } = splitLocale(locale);
  const init = {
    method: 'GET',
    headers: {
      'Accept-Language': `${language}_${country}`,
      'x-trace-id': v4(),
      apikey: getString(config.CLIENT_ID),
      Authorization: `Bearer ${accessToken}`,
      Accept: 'application/json'
    }
  };
  const query = country !== RegionLocales.INTERNATIONAL ? `?country=${country}` : '';
  try {
    userProfileResponse = await fetch(`${getString(config.PROFILE_API_URL)}${query}`, init);
  }
  catch (err) {
    const errorMessage = `Exception occurred while fetching user info: ${JSON.stringify(err.message)}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  if (userProfileResponse.status === 401) {
    throw new NaviError('AccessToken has expired', NaviErrorTypes.UNAUTHORIZED);
  }
  if (!userProfileResponse.ok) {
    const errorMessage = `Error occurred: ${userProfileResponse.status} ${userProfileResponse.statusText}`;
    throw new NaviError(errorMessage, NaviErrorTypes.GENERAL);
  }
  let userData;
  try {
    userData = await userProfileResponse.json();
  }
  catch (err) {
    throw new NaviError(`Could not extract json from user profile response: ${err}`, NaviErrorTypes.GENERAL);
  }
  if (typeof userData !== 'object' || userData === null) {
    throw new NaviError('Invalid user data object extracted from user profile response', NaviErrorTypes.NO_RESULTS);
  }
  userDataCache.set(cacheKey, userData);
  return userData;
}
async function initializeUserData(accessToken, locale, config) {
  let loggedInState = LOGGED_OUT_USER_STATUS;
  let userId;
  try {
    const userData = await getUserData(accessToken, locale, config);
    loggedInState = getUserNameFromUserData(userData) || LOGGED_IN_USER_NO_NAME_STATUS;
    userId = await getUserIdFromUserData(userData);
  }
  catch (err) {
    if (!(err instanceof NaviError) || err.type !== NaviErrorTypes.UNAUTHORIZED) {
      loggedInState = LOGGED_IN_USER_NO_NAME_STATUS;
    }
    navStateStore.state.unreadMessagesCount = DEFAULT_UNREAD_MESSAGES_COUNT;
    navStateStore.state.loggedInState = loggedInState;
    throw err;
  }
  navStateStore.state.loggedInState = loggedInState;
  globalDataLayerService.setUser(userId, IsLoggedIn(loggedInState));
  const { savedSearches, savedVehicles, unreadMessages } = await getUserInformation(accessToken, locale);
  finderStateStore.state.savedSearchesCount = savedSearches;
  finderStateStore.state.savedVehiclesCount = savedVehicles;
  navStateStore.state.unreadMessagesCount = unreadMessages;
}
function initAuthIframe(config) {
  const queryString = getQueryString({
    domain: config.IDENTITY_PROVIDER_URL,
    clientId: config.IDENTITY_CLIENT_ID,
    redirect_uri: config.LOGIN_REDIRECT_URL,
    audience: config.IDENTITY_AUDIENCE
  });
  windowService.removeElement(IFRAME_ID);
  windowService.createIframe(IFRAME_ID, `${config.LOGIN_REDIRECT_URL}?${queryString}`);
}

const headerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center{-ms-flex-align:center;align-items:center}.phn-justify-around{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap{-ms-flex-wrap:wrap;flex-wrap:wrap}:host{display:block;position:relative;visibility:visible;height:auto !important;z-index:500}:host .header{min-height:4.125rem}@media (min-width: 480px){:host .header{min-height:5rem}}@media (min-width: 760px){:host .header{min-height:4.5625rem}}@media (min-width: 1000px){:host .header{min-height:4.75rem}}@media (min-width: 1300px){:host .header{min-height:5.125rem}}@media (min-width: 1920px){:host .limited-width{max-width:160rem;margin:0 auto}}";

const Header = /*@__PURE__*/ proxyCustomElement(class Header extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.navigationDidLoad = createEvent(this, "navigationDidLoad", 7);
    this.phnLogout = createEvent(this, "phnLogout", 7);
    this.phnLogin = createEvent(this, "phnLogin", 7);
    this.eventPreventedTimeout = new Timeout(0);
    this.checkedMarketingConsent = false;
    this.loadedToggles = false;
    this.locale = '';
    this.env = '';
    this.clientId = '';
    this.pageName = '';
    this.theme = NavigationTheme.light;
    this.mode = NavigationMode.navbar;
    this.limitedWidth = 'true';
    this.app = Application.default;
    this.initialRoutingPath = '';
    this.displayLogoOnly = false;
    this.numberOfShoppingItems = 0;
    this.wishlistItemsNumber = 0;
    this.shopInformation = '{ "wishlistItemsNumber": 0, "numberOfShoppingItems": 0, "subTotal": "0" }';
    this.loadingContent = false;
    this.receivedContent = false;
    this.breakpoint = windowService.getBreakpoint();
  }
  async localeWatchHandler() {
    await this.initNavContentStore();
    globalDataLayerService.setLocale(this.locale);
    logger.init(this.breakpoint, this.locale);
  }
  pageNameWatchHandler() {
    globalDataLayerService.setPageName(this.pageName);
  }
  async newEnvReceived() {
    await this.initEnvironment();
    await this.initNavContentStore();
    initAuthIframe(getConfig(navStateStore.state.env));
  }
  async appWatcher(newValue) {
    navStateStore.state.app = sanitizeApp(newValue);
  }
  breakpointWatcher() {
    logger.init(this.breakpoint, this.locale);
  }
  watchShopVariables(newValue, _, propName) {
    shopStateStore.set(propName, newValue);
  }
  watchShopVariable(information, _, propName) {
    const shopInformation = JSON.parse(information);
    shopStateStore.set(propName, shopInformation);
  }
  initialRoutingPathWatcher() {
    this.handleInitialRoutingKeyPath();
  }
  resizeHandler() {
    this.breakpoint = windowService.getBreakpoint();
  }
  async newAuthMessageReceived(event) {
    const config = getConfig(navStateStore.state.env);
    if (new URL(config.LOGIN_REDIRECT_URL).origin !== new URL(event.origin).origin) {
      return;
    }
    if (isString(event.data.token)) {
      try {
        windowService.removeElement(IFRAME_ID);
        await initializeUserData(event.data.token, this.locale, config);
      }
      catch (err) {
        logger.error('INIT_USER_DATA', err);
      }
    }
  }
  async handleLogin() {
    const phnLogin = this.phnLogin.emit();
    this.eventPreventedTimeout.set(async () => {
      var _a;
      if (phnLogin.defaultPrevented) {
        return;
      }
      const loginLink = (_a = navContentStore.state.myPorsche) === null || _a === void 0 ? void 0 : _a.link;
      if (isString(loginLink)) {
        windowService.redirectToUrl(loginLink);
        return;
      }
    });
  }
  async handleLogout() {
    const config = getConfig(navStateStore.state.env);
    const phnLogout = this.phnLogout.emit();
    this.eventPreventedTimeout.set(async () => {
      if (phnLogout.defaultPrevented) {
        return;
      }
      // TODO which logout url to use? myporsche? auth0?
      windowService.redirectToUrl(`${config.IDENTITY_PROVIDER_URL}/v2/logout`);
      return;
    });
  }
  handleUserCentricsReady() {
    this.checkMarketingConsent();
  }
  handleUserCentricsInitalization() {
    this.checkMarketingConsent();
  }
  navigationLoadedHandler({ detail: navigationLoaded }) {
    windowService.navigationLoaded = navigationLoaded;
    if (navigationLoaded) {
      this.navigationDidLoad.emit();
    }
  }
  checkMarketingConsent() {
    if (!this.checkedMarketingConsent) {
      navStateStore.state.userConsent = false;
      this.checkedMarketingConsent = windowService.maybeCheckMarketingConsent(() => {
        navStateStore.state.userConsent = true;
      });
    }
  }
  async initEnvironment() {
    navStateStore.state.env = getEnvironment(this.env);
    navStateStore.state.app = sanitizeApp(this.app);
    globalDataLayerService.setEnvironment(navStateStore.state.env);
    const config = getConfig(navStateStore.state.env);
    initAuthIframe(config);
    this.loadedToggles = false;
    await featureToggles.setFeatures(navStateStore.state.env);
    this.loadedToggles = true;
    logger.init(this.breakpoint, this.locale);
    const shopInformation = JSON.parse(this.shopInformation);
    loadsShopPropsOnStore({
      wishlistItemsNumber: this.wishlistItemsNumber,
      numberOfShoppingItems: this.numberOfShoppingItems,
      shopInformation: shopInformation
    });
    await abTestingService().init();
  }
  async initNavContentStore() {
    const previouslyReceivedContent = this.receivedContent;
    this.receivedContent = false;
    this.loadingContent = true;
    try {
      const fetchedLocale = this.locale;
      const fetchedEnv = navStateStore.state.env;
      const contentForLocale = await fetchContent(fetchedLocale, this.app);
      // This is to make sure that the response is valid for the current locale and environment
      // and wasn't made with another locale or enironment
      if (this.locale === fetchedLocale && navStateStore.state.env === fetchedEnv) {
        Object.assign(navContentStore.state, contentForLocale);
        this.receivedContent = true;
      }
    }
    catch (err) {
      logger.error('FETCH_CONTENT', err);
      if (previouslyReceivedContent) {
        this.receivedContent = true;
      }
    }
    this.loadingContent = false;
  }
  async setDealerSearchResultsStore() {
    const { savedDealerCookie, ppnDealers } = dealerSearchResultsStore.state;
    if (savedDealerCookie === null || ppnDealers[savedDealerCookie.id] !== undefined) {
      return;
    }
    const coordinates = { latitude: savedDealerCookie.latitude, longitude: savedDealerCookie.longitude };
    const { env } = navStateStore.state;
    try {
      const { country } = splitLocale(this.locale);
      const { id: dealerId } = savedDealerCookie;
      const ppnDealer = showDealerSearchDropdown(country)
        ? await getPPNDealerByRegion(dealerId, country)
        : await getPPNDealer(env, getConfig(env).DEALER_API_URL, dealerId, coordinates, country);
      dealerSearchResultsStore.state.ppnDealers[savedDealerCookie.id] = ppnDealer;
    }
    catch (err) {
      logger.error('GET_DEALER', err);
      dealerSearchResultsStore.state.savedDealerCookie = null;
    }
  }
  handleInitialRoutingKeyPath() {
    const [topLevelRoutingKey, ...segments] = this.initialRoutingPath.split('>');
    const rootContentItem = getRootMenuItem(navContentStore.state, topLevelRoutingKey);
    if (rootContentItem === null) {
      return;
    }
    const validSegments = getValidContentPathSegments(rootContentItem, segments);
    const routingKeyHistory = buildRoutingKeyHistoryFromContentPath([topLevelRoutingKey, ...validSegments]);
    routerStore.state.initialRoutingKeyHistory = routingKeyHistory;
    routerStore.state.initialRoutingKeyPointer = routingKeyHistory.length - 1;
  }
  componentWillLoad() {
    globalDataLayerService.setDefaultProperties(this.locale, this.pageName);
    window.ncs = navContentStore;
    this.checkMarketingConsent();
    this.initEnvironment()
      .then(() => Promise.all([this.initNavContentStore(), this.setDealerSearchResultsStore()]))
      .then(() => Promise.all([abTestingService().loadContentGeneratorExperiments()]))
      .then(() => {
      this.handleInitialRoutingKeyPath();
    });
  }
  async componentDidLoad() {
    windowService.version = VERSION;
    globalDataLayerService.pushDataLayerEvent(EventActions.GENERAL_LOAD);
    logger.info('NAVIGATION_LOAD');
  }
  disconnectedCallback() {
    this.eventPreventedTimeout.cancel();
  }
  hasLimitedWidth() {
    return this.mode === NavigationMode.hero && this.limitedWidth === 'true' ? true : false;
  }
  render() {
    if (!this.loadedToggles) {
      return h("div", null);
    }
    return (
    // div needed because conditional styling does not work on Host of shadow component for some unknown reason
    h("div", { class: this.hasLimitedWidth() ? 'header limited-width' : 'header' }, h("phn-wrapper", { theme: this.theme, mode: this.mode, locale: this.locale, loadingContent: this.loadingContent, receivedContent: this.receivedContent, breakpoint: this.breakpoint, app: sanitizeApp(this.app), displayLogoOnly: this.displayLogoOnly, limitedWidth: this.hasLimitedWidth() }, isShopAvailable(this.locale, sanitizeApp(this.app)) ? (h("div", { slot: "contextual_drawer_header" }, h("slot", { name: "contextual_drawer_header" }))) : null)));
  }
  static get assetsDirs() { return ["auth"]; }
  static get watchers() { return {
    "locale": ["localeWatchHandler"],
    "pageName": ["pageNameWatchHandler"],
    "env": ["newEnvReceived"],
    "app": ["appWatcher"],
    "breakpoint": ["breakpointWatcher"],
    "numberOfShoppingItems": ["watchShopVariables"],
    "wishlistItemsNumber": ["watchShopVariables"],
    "shopInformation": ["watchShopVariable"],
    "initialRoutingPath": ["initialRoutingPathWatcher"]
  }; }
  static get style() { return headerCss; }
}, [1, "phn-header", {
    "locale": [1],
    "env": [1],
    "clientId": [1, "client-id"],
    "pageName": [1, "page-name"],
    "theme": [1],
    "mode": [1],
    "limitedWidth": [1, "limited-width"],
    "app": [1],
    "initialRoutingPath": [1, "initial-routing-path"],
    "displayLogoOnly": [4, "display-logo-only"],
    "numberOfShoppingItems": [2, "number-of-shopping-items"],
    "wishlistItemsNumber": [2, "wishlist-items-number"],
    "shopInformation": [1, "shop-information"],
    "loadingContent": [32],
    "receivedContent": [32],
    "breakpoint": [32]
  }, [[9, "resize", "resizeHandler"], [9, "message", "newAuthMessageReceived"], [0, "loginEvent", "handleLogin"], [0, "logoutEvent", "handleLogout"], [9, "ucReady", "handleUserCentricsReady"], [9, "ucInit", "handleUserCentricsInitalization"], [0, "navigationLoaded", "navigationLoadedHandler"]], {
    "locale": ["localeWatchHandler"],
    "pageName": ["pageNameWatchHandler"],
    "env": ["newEnvReceived"],
    "app": ["appWatcher"],
    "breakpoint": ["breakpointWatcher"],
    "numberOfShoppingItems": ["watchShopVariables"],
    "wishlistItemsNumber": ["watchShopVariables"],
    "shopInformation": ["watchShopVariable"],
    "initialRoutingPath": ["initialRoutingPathWatcher"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-header", "contextual-drawer", "phn-autocomplete-search-field", "phn-back-button", "phn-backdrop", "phn-burger-button", "phn-car-body-types-drawer", "phn-country-recommender", "phn-dealer-details-drawer", "phn-dealer-search-by-number-of-dealers", "phn-dealer-search-form", "phn-dealer-search-form-dropdown", "phn-dealer-search-form-geolocation", "phn-dealer-search-results", "phn-double-drawer", "phn-drawer-header", "phn-heading", "phn-level-0", "phn-level-0-icons", "phn-level-1", "phn-logo", "phn-menu", "phn-menu-item", "phn-menu-item-card", "phn-models", "phn-my-porsche-icon-button", "phn-myporsche-drawer", "phn-myporsche-login", "phn-router", "phn-side-drawer", "phn-side-drawer-item", "phn-signature-heading", "phn-single-drawer", "phn-wrapper"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-header":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Header);
      }
      break;
    case "contextual-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$y();
      }
      break;
    case "phn-autocomplete-search-field":
      if (!customElements.get(tagName)) {
        defineCustomElement$x();
      }
      break;
    case "phn-back-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$w();
      }
      break;
    case "phn-backdrop":
      if (!customElements.get(tagName)) {
        defineCustomElement$v();
      }
      break;
    case "phn-burger-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$u();
      }
      break;
    case "phn-car-body-types-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$t();
      }
      break;
    case "phn-country-recommender":
      if (!customElements.get(tagName)) {
        defineCustomElement$s();
      }
      break;
    case "phn-dealer-details-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$r();
      }
      break;
    case "phn-dealer-search-by-number-of-dealers":
      if (!customElements.get(tagName)) {
        defineCustomElement$q();
      }
      break;
    case "phn-dealer-search-form":
      if (!customElements.get(tagName)) {
        defineCustomElement$p();
      }
      break;
    case "phn-dealer-search-form-dropdown":
      if (!customElements.get(tagName)) {
        defineCustomElement$o();
      }
      break;
    case "phn-dealer-search-form-geolocation":
      if (!customElements.get(tagName)) {
        defineCustomElement$n();
      }
      break;
    case "phn-dealer-search-results":
      if (!customElements.get(tagName)) {
        defineCustomElement$m();
      }
      break;
    case "phn-double-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$l();
      }
      break;
    case "phn-drawer-header":
      if (!customElements.get(tagName)) {
        defineCustomElement$k();
      }
      break;
    case "phn-heading":
      if (!customElements.get(tagName)) {
        defineCustomElement$j();
      }
      break;
    case "phn-level-0":
      if (!customElements.get(tagName)) {
        defineCustomElement$i();
      }
      break;
    case "phn-level-0-icons":
      if (!customElements.get(tagName)) {
        defineCustomElement$h();
      }
      break;
    case "phn-level-1":
      if (!customElements.get(tagName)) {
        defineCustomElement$g();
      }
      break;
    case "phn-logo":
      if (!customElements.get(tagName)) {
        defineCustomElement$f();
      }
      break;
    case "phn-menu":
      if (!customElements.get(tagName)) {
        defineCustomElement$e();
      }
      break;
    case "phn-menu-item":
      if (!customElements.get(tagName)) {
        defineCustomElement$d();
      }
      break;
    case "phn-menu-item-card":
      if (!customElements.get(tagName)) {
        defineCustomElement$c();
      }
      break;
    case "phn-models":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "phn-my-porsche-icon-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "phn-myporsche-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "phn-myporsche-login":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "phn-router":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "phn-side-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "phn-side-drawer-item":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "phn-signature-heading":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "phn-single-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "phn-wrapper":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}
defineCustomElement$1();

const PhnHeader = Header;
const defineCustomElement = defineCustomElement$1;

export { PhnHeader, defineCustomElement };

//# sourceMappingURL=phn-header.js.map