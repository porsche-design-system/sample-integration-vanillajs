import { g as getDealerDetailsRoutingKey, R as RoutingKeys, f as findTopLevelRoutingKey, r as removeLastRoutingSegment, c as constructRoutingKey, a as getModelsRoutingKey, b as getLastRoutingSegment, d as getPreviousRoutingKey, e as determineMainDrawerLevel } from './routing-key.js';
import { c as createStore, N as NaviError, a as NaviErrorTypes } from './navi-error.js';
import { s as splitLocale, E as EventActions, i as isCountryInOneOfRegions, D as DEALER_SEARCH_ELEMENT_TYPE, a as ElementTypes } from './global-data-layer-service.js';
import { g as getHTMLElement, a as isString, l as getUsername, A as Application, I as IsLoggedIn } from './helper.js';
import { n as navContentStore, f as findMenuItemById } from './nav-content-store.js';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';
import { n as navStateStore } from './nav-state-store.js';
import { f as featureToggles, l as logger } from './feature-toggles.js';

const routerStore = createStore({
  routingKeyHistory: [],
  routingKeyPointer: -1,
  initialRoutingKeyHistory: null,
  initialRoutingKeyPointer: null
});

const experimentsDefinitions = {};

class MatomoAbTestingService {
  constructor() {
    this.client = null;
    this.experiments = [];
  }
  async init() {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        await this.setClient();
        await this.loadExperiments();
      }
      catch (e) {
        logger.error('Could not initialize AbTesting', e);
      }
    }
  }
  execute(experimentName) {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        const experiment = this.getExperiment(experimentName);
        const variation = this.getVariation(experiment);
        variation.activate();
      }
      catch (e) {
        logger.error(`Could not execute experiment ${experimentName}`, e);
      }
    }
  }
  executeContentChange(menu) {
    if (featureToggles.isABTestingToggleActive()) {
      try {
        const experiment = this.getExperiment(menu.experienceName);
        const variation = this.getVariation(experiment);
        if (variation.name === 'original') {
          return menu.children;
        }
        return variation.activate();
      }
      catch (e) {
        logger.error(`Could not execute experiment ${menu.experienceName}`, e);
      }
    }
    return menu.children;
  }
  async setClient() {
    if (this.client)
      return Promise.resolve(this.client);
    await this.injectScript();
    const w = window;
    this.client = w.Matomo;
    return this.client;
  }
  async loadExperiments() {
    const client = this.getClient();
    const ExperimentCreator = client.AbTesting.Experiment;
    const experimentsDefinitions = this.getAbTestingDefinitions();
    for (const experimentKey in experimentsDefinitions) {
      const experimentDefinition = experimentsDefinitions[experimentKey];
      const experiment = new ExperimentCreator(experimentDefinition);
      this.experiments.push(experiment);
    }
  }
  async loadContentGeneratorExperiments() {
    if (featureToggles.isABTestingToggleActive()) {
      const client = this.getClient();
      const ExperimentCreator = client.AbTesting.Experiment;
      const contentDefinitions = navContentStore.state.abExperiences;
      if (contentDefinitions) {
        for (const experimentDefinition of contentDefinitions) {
          const variationDefinition = experimentDefinition.variations.map((variation) => ({
            name: variation.name,
            activate: () => variation.children
          }));
          variationDefinition.push({
            name: 'original',
            activate: () => null
          });
          const experiment = new ExperimentCreator(Object.assign(Object.assign({}, experimentDefinition), { variations: variationDefinition }));
          this.experiments.push(experiment);
        }
      }
    }
  }
  getExperiment(name) {
    const experiment = this.experiments.find((experiment) => experiment.name === name);
    if (!experiment)
      throw new NaviError(`No experiment with name: ${name} found`, NaviErrorTypes.GENERAL);
    return experiment;
  }
  getVariation(experiment) {
    const variationName = experiment.getActivatedVariationName();
    const variation = experiment.variations.find((variation) => variation.name === variationName);
    if (!variation)
      throw new NaviError(`No variation in experiment: ${experiment.name} with name: ${variationName} found`, NaviErrorTypes.GENERAL);
    return variation;
  }
  getClient() {
    if (!this.client)
      throw new NaviError('No client is set, you must call init first', NaviErrorTypes.GENERAL);
    return this.client;
  }
  injectScript() {
    return new Promise((resolve, reject) => {
      const s = document.createElement('script');
      s.text = this.getMatomoScript();
      document.head.appendChild(s);
      const matomoScript = getHTMLElement(document.querySelector('script[src="//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js"]'));
      if (matomoScript) {
        matomoScript.onload = () => {
          resolve(true);
        };
        matomoScript.onerror = () => reject(new NaviError('Could not inject Matomo script', NaviErrorTypes.GENERAL));
      }
      else {
        reject(new NaviError('There is no HTML Script element available', NaviErrorTypes.GENERAL));
      }
    });
  }
  getAbTestingDefinitions() {
    return experimentsDefinitions;
  }
  getMatomoScript() {
    const currentEnvironment = navStateStore.state.env;
    return `var _paq = window._paq = window._paq || [];
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://porsche.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', ${currentEnvironment === 'production' ? '7' : '8'}]);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })
   ();`;
  }
}
const MatomoAbTesting = new MatomoAbTestingService();

function abTestingService() {
  return MatomoAbTesting;
}

function getLevel1Items(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, userConsentGiven) {
  var _a, _b;
  const { dealer, models, myPorsche, vehiclePurchase, shop, experience, services } = content;
  const { savedDealerCookie, ppnDealers } = dealerSearchResults;
  const { app } = navStateStore.state;
  const savedDealer = savedDealerCookie !== null ? ppnDealers[savedDealerCookie.id] : undefined;
  // outbound link needed for Singapore market
  let outboundLink;
  if (locale === 'en-SG' && dealer.search.outboundLink) {
    outboundLink = (_a = dealer.search.outboundLink) === null || _a === void 0 ? void 0 : _a.link;
  }
  const dealerRoutingKeys = [RoutingKeys.DEALER_SEARCH];
  if (savedDealer !== undefined && ((_b = dealerSearchResultsStore.state.results) === null || _b === void 0 ? void 0 : _b.length) != 1) {
    dealerRoutingKeys.push(getDealerDetailsRoutingKey(savedDealer.ppnDealer.id));
  }
  const menu = [
    {
      elementId: RoutingKeys.MODELS,
      routingKeys: [RoutingKeys.MODELS],
      analyticsId: models.id,
      text: models.text
    },
    {
      elementId: RoutingKeys.VEHICLE_PURCHASE,
      routingKeys: [RoutingKeys.VEHICLE_PURCHASE],
      analyticsId: vehiclePurchase.id,
      text: vehiclePurchase.text
    },
    {
      elementId: RoutingKeys.SERVICES,
      routingKeys: [RoutingKeys.SERVICES],
      analyticsId: services.id,
      text: services.text
    },
    {
      elementId: RoutingKeys.EXPERIENCE,
      routingKeys: [RoutingKeys.EXPERIENCE],
      analyticsId: experience.id,
      text: experience.text
    }
  ];
  const dealerSearch = {
    elementId: RoutingKeys.DEALER_SEARCH,
    routingKeys: dealerRoutingKeys,
    analyticsId: dealer.id,
    text: dealer.text,
    link: outboundLink,
    iconRight: locale === 'en-SG' && dealer.search.outboundLink ? 'external' : 'arrow-head-right'
  };
  if (shop !== null && shop.text !== '') {
    const shopItem = {
      elementId: RoutingKeys.SHOP,
      routingKeys: [RoutingKeys.SHOP],
      analyticsId: shop.id,
      text: shop.text,
      link: app !== Application.shop ? shop.link : undefined,
      datalayerEventAction: EventActions.NAVIGATION_LINK_CLICK,
      iconRight: 'external'
    };
    menu.splice(2, 0, shopItem);
  }
  if (isDealerSearchEnabled(locale, userConsentGiven)) {
    const savedDealerName = splitLocale(locale).language === 'en'
      ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name
      : isString(savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized)
        ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized
        : savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name;
    if (isString(savedDealerName)) {
      dealerSearch.subtext = savedDealerName;
    }
  }
  else {
    dealerSearch.link = dealer.search.map.link;
    dealerSearch.onClick = undefined;
  }
  menu.push(dealerSearch);
  if (myPorsche !== null) {
    const isLoggedIn = IsLoggedIn(loggedInState);
    const username = isLoggedIn ? getUsername(loggedInState, myPorsche.loggedInFallback) : undefined;
    menu.push({
      elementId: RoutingKeys.MY_PORSCHE,
      routingKeys: [RoutingKeys.MY_PORSCHE],
      analyticsId: myPorsche.id,
      text: myPorsche.text,
      subtext: username,
      showIconModifier: isLoggedIn && unreadMessagesCount > 0
    });
  }
  return menu;
}
function getSideDrawerItems(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, activeRoutingKey, userConsentGiven) {
  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case activeRoutingKey:
      break;
    case RoutingKeys.MODELS:
      return content.models.series.map((modelsSeries) => ({
        elementId: getModelsRoutingKey(modelsSeries.id),
        routingKeys: [getModelsRoutingKey(modelsSeries.id)],
        analyticsId: modelsSeries.id,
        text: modelsSeries.name,
        subtext: modelsSeries.tags.map((tag) => tag.text).join(' | '),
        renderSignatures: true,
        datalayerEventAction: EventActions.MODEL_RANGE_CLICK
      }));
    case RoutingKeys.SHOP:
    case RoutingKeys.VEHICLE_PURCHASE:
    case RoutingKeys.SERVICES:
    case RoutingKeys.EXPERIENCE: {
      const parentRoutingKey = removeLastRoutingSegment(activeRoutingKey);
      const menuDrawerParent = getMenuContent(content, parentRoutingKey, topLevelRoutingKey);
      if (menuDrawerParent !== null) {
        return menuDrawerParent.children.map((childItem) => ({
          elementId: constructRoutingKey(parentRoutingKey, childItem.id),
          routingKeys: [constructRoutingKey(parentRoutingKey, childItem.id)],
          analyticsId: childItem.id,
          text: childItem.text,
          link: childItem.link
        }));
      }
      break;
    }
  }
  return getLevel1Items(content, dealerSearchResults, locale, loggedInState, unreadMessagesCount, userConsentGiven);
}
function getSideDrawerRoutingKey(activeRoutingKey) {
  const topLevelRoutingKey = findTopLevelRoutingKey(activeRoutingKey);
  switch (topLevelRoutingKey) {
    case activeRoutingKey: {
      break;
    }
    case RoutingKeys.DEALER_SEARCH: {
      return RoutingKeys.DEALER_SEARCH;
    }
    case RoutingKeys.MODELS: {
      return RoutingKeys.MODELS;
    }
    case RoutingKeys.SHOP:
    case RoutingKeys.VEHICLE_PURCHASE:
    case RoutingKeys.SERVICES:
    case RoutingKeys.EXPERIENCE: {
      const parentRoutingKey = removeLastRoutingSegment(activeRoutingKey);
      return getLastRoutingSegment(parentRoutingKey);
    }
  }
  return RoutingKeys.MAIN_MENU;
}
function getMenuContent(content, routingKey, topLevelRoutingKey) {
  const { vehiclePurchase, experience, shop, legacyMore, services } = content;
  const menuContent = {
    [RoutingKeys.VEHICLE_PURCHASE]: vehiclePurchase,
    [RoutingKeys.EXPERIENCE]: experience,
    [RoutingKeys.SHOP]: shop,
    [RoutingKeys.MORE]: legacyMore,
    [RoutingKeys.SERVICES]: services
  }[topLevelRoutingKey];
  if (menuContent === undefined || menuContent === null) {
    return null;
  }
  if (isString(menuContent.experienceName)) {
    menuContent.children = abTestingService().executeContentChange(menuContent);
  }
  const idOfLastRoutingSegment = getLastRoutingSegment(routingKey);
  return idOfLastRoutingSegment === topLevelRoutingKey
    ? menuContent
    : findMenuItemById(menuContent, idOfLastRoutingSegment);
}
function isDealerSearchEnabled(locale, userConsentGiven) {
  try {
    const { country } = splitLocale(locale);
    const returnDealerSearch = !isCountryInOneOfRegions(country) && userConsentGiven;
    return (featureToggles.isDealerSearchChinaEnabled() || country !== 'CN') && returnDealerSearch;
  }
  catch (_a) {
    // ignore error
  }
  return true;
}
function getBackButtonText(content, previousRoutingKey) {
  if (!isString(previousRoutingKey)) {
    return '';
  }
  const topLevelRoutingKey = findTopLevelRoutingKey(previousRoutingKey);
  switch (topLevelRoutingKey) {
    case RoutingKeys.MODELS: {
      return content.models.text;
    }
    case RoutingKeys.DEALER_SEARCH:
      if (content.dealer.numberOfDealers === 1) {
        return '';
      }
      return content.dealer.details.backToSearch;
    case RoutingKeys.SHOP:
    case RoutingKeys.VEHICLE_PURCHASE:
    case RoutingKeys.MORE:
    case RoutingKeys.EXPERIENCE: {
      const menuContent = getMenuContent(navContentStore.state, previousRoutingKey, topLevelRoutingKey);
      if (menuContent !== null) {
        return menuContent.text;
      }
      break;
    }
  }
  return '';
}
function getHeadlineText(content, routingKey, topLevelRoutingKey) {
  var _a;
  const { dealer, myPorsche, models, vehiclePurchase, experience, shop, legacyMore, services } = content;
  let menuContent;
  switch (topLevelRoutingKey) {
    case RoutingKeys.MORE:
    case RoutingKeys.SHOP:
    case RoutingKeys.EXPERIENCE:
    case RoutingKeys.SERVICES:
    case RoutingKeys.VEHICLE_PURCHASE: {
      menuContent = {
        [RoutingKeys.VEHICLE_PURCHASE]: vehiclePurchase,
        [RoutingKeys.EXPERIENCE]: experience,
        [RoutingKeys.SHOP]: shop,
        [RoutingKeys.MORE]: legacyMore,
        [RoutingKeys.SERVICES]: services
      }[topLevelRoutingKey];
      if (menuContent === undefined) {
        return '';
      }
      const idOfLastRoutingSegment = getLastRoutingSegment(routingKey);
      return idOfLastRoutingSegment === topLevelRoutingKey
        ? menuContent === null || menuContent === void 0 ? void 0 : menuContent.text
        : (_a = findMenuItemById(menuContent, idOfLastRoutingSegment)) === null || _a === void 0 ? void 0 : _a.text;
    }
    case RoutingKeys.SERIES:
    case RoutingKeys.MODELS: {
      const routingId = getLastRoutingSegment(routingKey);
      menuContent = models.series.find((modelsSeries) => routingId === modelsSeries.id);
      return menuContent === undefined ? models.text : menuContent === null || menuContent === void 0 ? void 0 : menuContent.id;
    }
    case RoutingKeys.DEALER_SEARCH: {
      return dealer.search.text;
    }
    case RoutingKeys.MY_PORSCHE: {
      return myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.text;
    }
  }
  return '';
}
function getSubtext(topLevelRoutingKey, activeRoutingKey, locale) {
  const { myPorsche, models } = navContentStore.state;
  const { loggedInState } = navStateStore.state;
  if (topLevelRoutingKey === RoutingKeys.MY_PORSCHE) {
    const isLoggedIn = IsLoggedIn(loggedInState);
    return isLoggedIn ? getUsername(loggedInState, (myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.loggedInFallback) || '') : '';
  }
  if (topLevelRoutingKey === RoutingKeys.DEALER_SEARCH) {
    const { savedDealerCookie, ppnDealers } = dealerSearchResultsStore.state;
    const savedDealer = savedDealerCookie !== null ? ppnDealers[savedDealerCookie.id] : undefined;
    const savedDealerName = locale && splitLocale(locale).language === 'en'
      ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name
      : isString(savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized)
        ? savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.nameLocalized
        : savedDealer === null || savedDealer === void 0 ? void 0 : savedDealer.ppnDealer.name;
    return savedDealerCookie ? savedDealerName : '';
  }
  if (topLevelRoutingKey === RoutingKeys.MODELS) {
    if (isString(activeRoutingKey)) {
      const routingId = getLastRoutingSegment(activeRoutingKey);
      const menuContent = models.series.find((modelsSeries) => routingId === modelsSeries.id);
      if (menuContent) {
        return menuContent.tags.map((tag) => tag.text).join(' | ');
      }
    }
  }
  return '';
}

const state = {};
function setDrawerType(drawerType) {
  state.drawerType = drawerType;
}
function calculateDisplayElementId(routingKeyForNavigatingForward) {
  const { drawerType } = state;
  const mainDrawerRoutingKey = (isString(routingKeyForNavigatingForward)
    ? getPreviousRoutingKey(routingKeyForNavigatingForward)
    : routerStore.state.routingKeyHistory[routerStore.state.routingKeyPointer]) || '';
  const lastMainDrawerRoutingKey = getLastRoutingSegment(mainDrawerRoutingKey);
  const mainDrawerLevel = determineMainDrawerLevel(mainDrawerRoutingKey);
  const sideDrawerLevel = mainDrawerLevel - 1;
  if (!isString(mainDrawerRoutingKey)) {
    return 'level0';
  }
  const mainDrawerDisplayElementId = isString(mainDrawerRoutingKey)
    ? `level${mainDrawerLevel}-${lastMainDrawerRoutingKey}`
    : `level${mainDrawerLevel - 1}-unknown`;
  if (drawerType === 'doubleDrawer') {
    if (mainDrawerRoutingKey === '') {
      return `level${sideDrawerLevel}-unknown_level${mainDrawerLevel}-unknown`;
    }
    const sideDrawerRoutingKey = getSideDrawerRoutingKey(mainDrawerRoutingKey);
    return `level${sideDrawerLevel}-${sideDrawerRoutingKey}_${mainDrawerDisplayElementId}`;
  }
  return mainDrawerDisplayElementId;
}
function calculateDisplayElementType(activeRoutingKey, elementType, isSideDrawer) {
  const { drawerType } = state;
  const mainDrawerLevel = determineMainDrawerLevel(activeRoutingKey);
  if (drawerType === 'doubleDrawer') {
    let sideDrawerLevel = mainDrawerLevel;
    if (isSideDrawer) {
      sideDrawerLevel = sideDrawerLevel - 1;
    }
    return `level${sideDrawerLevel}_${elementType}`;
  }
  else {
    return isString(activeRoutingKey)
      ? `level${mainDrawerLevel}_${elementType}`
      : `level${mainDrawerLevel - 1}_${elementType}`;
  }
}
function getModelName(bodyType) {
  const urlSplitIntoPieces = bodyType.link.split('/');
  const lastElementInUrlSplit = urlSplitIntoPieces[urlSplitIntoPieces.length - 1];
  let modelName;
  if (lastElementInUrlSplit === '') {
    if (urlSplitIntoPieces[urlSplitIntoPieces.length - 2] === undefined) {
      modelName = '';
    }
    else {
      modelName = urlSplitIntoPieces[urlSplitIntoPieces.length - 2].split('-').join(' ');
    }
  }
  else {
    modelName = lastElementInUrlSplit.split('-').join(' ');
  }
  return modelName;
}
function getModelTargetElement(elementId, text) {
  if (elementId.includes('models')) {
    const mainDrawerLevel = determineMainDrawerLevel(elementId);
    return `level${mainDrawerLevel}_${text.toLowerCase()}`;
  }
  return;
}
function getDrawerType() {
  return state.drawerType;
}
function getDealerResultsLoadDisplayElementId(elementId) {
  if (getDrawerType() === 'doubleDrawer') {
    return elementId;
  }
  else {
    return calculateDisplayElementId();
  }
}
function getDealerResultsLoadDisplayElementType() {
  if (getDrawerType() === 'doubleDrawer') {
    return DEALER_SEARCH_ELEMENT_TYPE;
  }
  else {
    return calculateDisplayElementType('', ElementTypes.dealerSearchForm);
  }
}
const analyticsManager = {
  setDrawerType,
  getDealerResultsLoadDisplayElementId,
  calculateDisplayElementId,
  getDealerResultsLoadDisplayElementType,
  calculateDisplayElementType,
  getModelName,
  getModelTargetElement
};

export { analyticsManager as a, getLevel1Items as b, getMenuContent as c, getSideDrawerItems as d, getHeadlineText as e, getSubtext as f, getBackButtonText as g, abTestingService as h, routerStore as r };

//# sourceMappingURL=analytics-manager.js.map