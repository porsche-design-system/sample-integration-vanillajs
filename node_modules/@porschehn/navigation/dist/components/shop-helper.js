import { A as Application, n as getUsername } from './helper.js';
import { n as navStateStore } from './nav-state-store.js';
import { n as navContentStore } from './nav-content-store.js';
import { c as createStore } from './navi-error.js';

const shopStateStore = createStore({
  shopInformation: { numberOfShoppingItems: 0, wishlistItemsNumber: 0, subTotal: '0' }
});

function isShopAvailable(locale, app) {
  var _a;
  const shopList = (_a = navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.availableLocales;
  return shopList !== undefined && shopList.includes(locale) && app === Application.shop;
}
function logoLinksToShop(locale) {
  var _a, _b;
  return ((_b = (_a = navContentStore.state.shop) === null || _a === void 0 ? void 0 : _a.logoLinksToShopLocales) === null || _b === void 0 ? void 0 : _b.includes(locale)) || false;
}
function isShopAvailableAndLogoLinksToShop(locale, app, shop) {
  return isShopAvailable(locale, app) && logoLinksToShop(locale) && shop !== null;
}
function modifyShopItemDependingOnMarket(locale, app, content) {
  const { shop, externalShop } = content;
  if (shop === null)
    return content;
  if (externalShop && app !== Application.shop) {
    return replaceShopWithExternalShop(content, shop, externalShop);
  }
  if (shopNotAvailableOnGlobalPages(shop, locale, app)) {
    return removeShopItemFromContent(content, shop);
  }
  return content;
}
function replaceShopWithExternalShop(content, shop, externalShop) {
  return Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, shop), externalShop) });
}
function shopNotAvailableOnGlobalPages(shop, locale, app) {
  return (!(shop === null || shop === void 0 ? void 0 : shop.availableLocales.includes(locale)) ||
    ((shop === null || shop === void 0 ? void 0 : shop.availableLocalesOnlyForShop.includes(locale)) && app !== Application.shop));
}
function removeShopItemFromContent(content, shop) {
  return Object.assign(Object.assign({}, content), { shop: Object.assign(Object.assign({}, shop), { text: '' }) });
}
function filterWishlistItemsByAuthStatus(menuItems, authStatusList) {
  return menuItems === null || menuItems === void 0 ? void 0 : menuItems.filter((item) => {
    if (item.authStatus === null || item.authStatus === undefined) {
      return authStatusList.includes(null);
    }
    return authStatusList.includes(item.authStatus);
  });
}
function getAvailableShopVariables() {
  const { myPorsche } = navContentStore.state;
  const { loggedInState } = navStateStore.state;
  const { wishlistItemsNumber } = shopStateStore.state.shopInformation;
  const username = getUsername(loggedInState, (myPorsche === null || myPorsche === void 0 ? void 0 : myPorsche.loggedInFallback) || '');
  return { wishlistItemsNumber, username };
}
function loadsShopPropsOnStore(props) {
  shopStateStore.set('shopInformation', props.shopInformation);
}
function getWishlistIconName() {
  const { shopInformation } = shopStateStore.state;
  const wishlistNumber = shopInformation.wishlistItemsNumber;
  return wishlistNumber > 0 ? 'heart-filled' : 'heart';
}
function handleFilledIcon(icon, numberOfItems) {
  switch (true) {
    case numberOfItems === 0:
      return `${icon}`;
    case numberOfItems > 0:
      return `${icon}-filled`;
    default:
      return `${icon}`;
  }
}
function getIconNameByMenuItemId(id) {
  const iconsGetterFunctions = {
    wishlist: getWishlistIconName
  };
  const getIconName = iconsGetterFunctions[id];
  if (typeof getIconName !== 'function')
    return null;
  return getIconName();
}

export { getAvailableShopVariables as a, isShopAvailableAndLogoLinksToShop as b, filterWishlistItemsByAuthStatus as f, getIconNameByMenuItemId as g, handleFilledIcon as h, isShopAvailable as i, loadsShopPropsOnStore as l, modifyShopItemDependingOnMarket as m, shopStateStore as s };

//# sourceMappingURL=shop-helper.js.map