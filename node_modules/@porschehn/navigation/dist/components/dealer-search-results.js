import { h, proxyCustomElement, HTMLElement, createEvent, Fragment, Host } from '@stencil/core/internal/client';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';
import { n as navContentStore } from './nav-content-store.js';
import { a as isString, G as GEOLOCATION_BUTTON_SEARCH_TERM } from './helper.js';
import { g as getDealerDetailsRoutingKey, R as RoutingKeys } from './routing-key.js';
import { s as splitLocale, g as globalDataLayerService, E as EventActions, C as ClickElementTypes, c as DEALER_SEARCH_DISPLAY_ELEMENT_ID, a as ElementTypes } from './global-data-layer-service.js';
import { a as analyticsManager } from './analytics-manager.js';
import { E as ErrorMessage } from './error-message.js';
import { d as defineCustomElement$2 } from './dealer-details-drawer.js';
import { d as defineCustomElement$1 } from './menu-item-card.js';

function DealerSearchFormItemCard({ dealer, showOverlay, eventEmitter, locale }) {
  const { ppnDealer, distance } = dealer;
  const language = splitLocale(locale).language;
  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
  // postalCode is currently not available in addressLocalized
  const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
  const name = language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
  const numberOfDealers = navContentStore.state.dealer.numberOfDealers;
  let country = '';
  try {
    country = splitLocale(locale).country;
  }
  catch (err) {
    // throw the error away
  }
  const onDealerCardClick = (ppnDealer) => {
    const dealerDetailsRoutingKey = getDealerDetailsRoutingKey(ppnDealer.id);
    eventEmitter.emit([dealerDetailsRoutingKey]);
    const { dealer: dealerContent } = navContentStore.state;
    const { results, searchTerm } = dealerSearchResultsStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULT_CLICK, {
      componentClick: {
        clickElementId: ppnDealer.id,
        clickElementName: ppnDealer.name,
        clickElementType: ClickElementTypes.Button,
        targetElement: `level2_${dealerDetailsRoutingKey}`
      },
      componentDisplay: {
        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
        displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: searchTerm,
        numberOfResults: results === null || results === void 0 ? void 0 : results.length
      },
      partner: {
        companyName: ppnDealer.name,
        companyId: ppnDealer.porschePartnerNo
      }
    });
  };
  return (h("phn-menu-item-card", { tabIndex: 0, text: name, class: `animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`, onClick: () => onDealerCardClick(ppnDealer), analyticsId: ppnDealer.id },
    h("div", { class: "phn-flex-row phn-justify-between phn-align-center" },
      country === 'JP' ? (h("phn-p-text", { color: "primary", size: "small" }, `ã€’${ppnDealer.address.postalCode} ${address.city} ${address.street}`)) : (h("phn-p-text", { color: "primary", size: "small" },
        `${address.street}, `,
        h("span", { class: "city" },
          ppnDealer.address.postalCode,
          " ",
          address.city))),
      distance && distance.value >= 1 && numberOfDealers > 5 ? (h("phn-p-tag", { color: "notification-info-soft" }, `${Math.round(distance.value)}${distance.unit.toLowerCase()}`)) : null)));
}

function DealerSearchMapLink() {
  const { dealer: dealerContent } = navContentStore.state;
  function emitDealersMapEvent() {
    const map = dealerContent.search.map;
    const { results, searchTerm } = dealerSearchResultsStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_MAP_CLICK, {
      componentClick: {
        clickElementId: map.id,
        clickElementName: map.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: map.link
      },
      componentDisplay: {
        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
        displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,
        numberOfResults: results === null || results === void 0 ? void 0 : results.length
      }
    });
  }
  return (h("a", { class: 'animated', href: dealerContent.search.map.link, "aria-label": dealerContent.search.map.description },
    h("phn-p-button", { onClick: emitDealersMapEvent, variant: "tertiary" },
      dealerContent.search.map.text,
      ' ')));
}

const dealerSearchResultsCss = ".sc-phn-dealer-search-results-h{display:block}.sc-phn-dealer-search-results-h phn-dealer-details-drawer.sc-phn-dealer-search-results{margin-top:1.25rem}.sc-phn-dealer-search-results-h phn-menu-item-card.sc-phn-dealer-search-results>div.sc-phn-dealer-search-results{margin-top:14px}.sc-phn-dealer-search-results-h .dealer-card-overlay.sc-phn-dealer-search-results{opacity:0.3}.sc-phn-dealer-search-results-h .dealer-card.sc-phn-dealer-search-results phn-p-tag.sc-phn-dealer-search-results{margin-left:1rem}.sc-phn-dealer-search-results-h .error-message.sc-phn-dealer-search-results{position:relative;margin-top:2rem}.sc-phn-dealer-search-results-h .animated.sc-phn-dealer-search-results{-webkit-animation:fadeInFromBottom 0.75s ease-in-out 0s;animation:fadeInFromBottom 0.75s ease-in-out 0s}.sc-phn-dealer-search-results-h a.sc-phn-dealer-search-results{display:inline-block;position:relative;width:100%;-webkit-text-decoration-line:none;text-decoration-line:none;margin-top:2.25rem}.sc-phn-dealer-search-results-h a.sc-phn-dealer-search-results phn-p-button.sc-phn-dealer-search-results{width:100%}";

const DealerSearchResults = /*@__PURE__*/ proxyCustomElement(class DealerSearchResults extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.mobileMenuItemClick = createEvent(this, "mobileMenuItemClick", 6);
    this.showOverlay = false;
    this.locale = undefined;
    this.breakpoint = undefined;
  }
  render() {
    const { results, ppnDealers } = dealerSearchResultsStore.state;
    const { error: errorContent } = navContentStore.state;
    if (results === null)
      return null;
    if ((results === null || results === void 0 ? void 0 : results.length) === 0)
      return (h(Fragment, null, h(ErrorMessage, { errorMessage: errorContent.noResults, onDismiss: () => null })));
    const dealerId = results[0];
    if (results.length === 1 && ppnDealers[dealerId]) {
      dealerSearchResultsStore.state.savedDealerCookie = {
        id: dealerId,
        latitude: ppnDealers[dealerId].ppnDealer.coordinates.latitude,
        longitude: ppnDealers[dealerId].ppnDealer.coordinates.longitude
      };
      return h("phn-dealer-details-drawer", { breakpoint: this.breakpoint, dealerId: dealerId, locale: this.locale });
    }
    return (h(Host, null, h(Fragment, null, results.map((dealerId) => {
      const dealer = ppnDealers[dealerId];
      if (dealer === undefined || dealer.ppnDealer === undefined) {
        return null;
      }
      return (h(DealerSearchFormItemCard, { dealer: dealer, eventEmitter: this.mobileMenuItemClick, showOverlay: this.showOverlay, locale: this.locale }));
    }), h(DealerSearchMapLink, null))));
  }
  static get style() { return dealerSearchResultsCss; }
}, [2, "phn-dealer-search-results", {
    "showOverlay": [4, "show-overlay"],
    "locale": [1],
    "breakpoint": [2]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-dealer-search-results", "phn-dealer-details-drawer", "phn-menu-item-card"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-dealer-search-results":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DealerSearchResults);
      }
      break;
    case "phn-dealer-details-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "phn-menu-item-card":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { DealerSearchResults as D, defineCustomElement as d };

//# sourceMappingURL=dealer-search-results.js.map