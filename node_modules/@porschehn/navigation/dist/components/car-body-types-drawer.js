import { proxyCustomElement, HTMLElement, getAssetPath, h, Host, Fragment } from '@stencil/core/internal/client';
import { g as globalDataLayerService, E as EventActions, C as ClickElementTypes, a as ElementTypes } from './global-data-layer-service.js';
import { n as navStateStore } from './nav-state-store.js';
import { f as breakpoint, b as getConfig, a as isString, g as getHTMLElement } from './helper.js';
import { c as componentsOnReady, T as Timeout } from './timeout.js';
import { a as analyticsManager } from './analytics-manager.js';

const carBodyTypesDrawerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-car-body-types-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-car-body-types-drawer{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-car-body-types-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-car-body-types-drawer{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-car-body-types-drawer{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-car-body-types-drawer{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-car-body-types-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-car-body-types-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-car-body-types-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-car-body-types-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-car-body-types-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-car-body-types-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-car-body-types-drawer-h{display:block}.sc-phn-car-body-types-drawer-h ul.sc-phn-car-body-types-drawer{margin:0;padding:0}.sc-phn-car-body-types-drawer-h phn-p-headline.sc-phn-car-body-types-drawer{font-size:1.75rem}.sc-phn-car-body-types-drawer-h .model-link-content.sc-phn-car-body-types-drawer{position:relative;-webkit-transition:-webkit-transform 0.24s ease;transition:-webkit-transform 0.24s ease;transition:transform 0.24s ease;transition:transform 0.24s ease, -webkit-transform 0.24s ease;inset:0px;backface-visibility:hidden;-webkit-backface-visibility:hidden;-webkit-transform:translateZ(0);transform:translateZ(0);padding-bottom:5px}.sc-phn-car-body-types-drawer-h .model-link-content.sc-phn-car-body-types-drawer:hover{image-rendering:high-quality;-webkit-transform:scale3d(1.08, 1.08, 1.08);transform:scale3d(1.08, 1.08, 1.08)}.sc-phn-car-body-types-drawer-h .skeleton-bodytype.sc-phn-car-body-types-drawer{height:8.4375rem;width:16.25rem;margin:1.5rem 0 0 0;background:#d8d8db;border-radius:4px}@media (min-width: 480px){.sc-phn-car-body-types-drawer-h .skeleton-bodytype.sc-phn-car-body-types-drawer{height:6.875rem}}@media (min-width: 760px){.sc-phn-car-body-types-drawer-h .skeleton-bodytype.sc-phn-car-body-types-drawer{height:7.5rem;width:16.25rem}}.skeleton.sc-phn-car-body-types-drawer-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;opacity:60%}.skeleton.sc-phn-car-body-types-drawer-h .skeleton-headline.sc-phn-car-body-types-drawer{width:auto;height:2.375rem;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-car-body-types-drawer-h .skeleton-link.sc-phn-car-body-types-drawer{width:auto;height:3rem;margin:1rem 0;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{width:auto;height:8.4375rem;margin:1.5rem 0;background:#d8d8db;border-radius:4px}@media (min-width: 480px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:9.0625rem}}@media (min-width: 760px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:7.5rem}}@media (min-width: 1000px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:8.5625rem}}@media (min-width: 1300px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:8.3125rem}}@media (min-width: 1920px){.skeleton.sc-phn-car-body-types-drawer-h .skeleton-image.sc-phn-car-body-types-drawer{height:9.0625rem}}.sc-phn-car-body-types-drawer-h .links.sc-phn-car-body-types-drawer .link.sc-phn-car-body-types-drawer{width:100%;padding-top:1rem}.sc-phn-car-body-types-drawer-h .series-body-type.sc-phn-car-body-types-drawer{text-align:center;padding:0.125rem;margin-top:0.125rem}.sc-phn-car-body-types-drawer-h .further.sc-phn-car-body-types-drawer{width:100%;padding-top:4rem}.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1rem}@media (min-width: 480px){.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1.125rem}}@media (min-width: 760px){.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1rem}}@media (min-width: 1920px){.sc-phn-car-body-types-drawer-h .car-models.sc-phn-car-body-types-drawer phn-p-text.sc-phn-car-body-types-drawer{font-size:1.125rem}}";

const CarBodyTypeDrawer = /*@__PURE__*/ proxyCustomElement(class CarBodyTypeDrawer extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.bodyTypesImagesLoaded = new Set();
    this.bodyTypesImagesNotLoaded = new Set();
    this.series = undefined;
    this.breakpoint = undefined;
    this.activeRoutingKey = undefined;
    this.seriesLoaded = false;
    this.showSkeleton = true;
  }
  seriesWatcher() {
    this.seriesLoaded = false;
    this.showSkeleton = true;
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = !this.seriesLoaded;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  componentDidRender() {
    this.showSkeleton = !this.seriesLoaded;
  }
  handleImageLoad(seriesId) {
    this.bodyTypesImagesLoaded.add(seriesId);
    if (this.series.bodyTypes.every(({ id }) => this.bodyTypesImagesLoaded.has(id))) {
      this.seriesLoaded = true;
    }
  }
  handleImageLoadError(seriesId) {
    this.handleImageLoad(seriesId);
    this.bodyTypesImagesNotLoaded.add(seriesId);
  }
  sendMetaFunctionDataLayerEvent(link) {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CTA_CLICK, {
      componentClick: {
        clickElementId: link.id,
        clickElementName: link.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: link.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: link.text
      },
      car: {
        modelRangeName: link.id.split('.')[1]
      }
    });
  }
  sendBodyTypeClickDataLayerEvent(bodyType, tagName) {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {
      componentClick: {
        clickElementId: bodyType.id,
        clickElementName: bodyType.name,
        clickElementType: tagName === 'IMG' ? ClickElementTypes.Image : ClickElementTypes.Link,
        targetUrl: bodyType.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: bodyType.name
      },
      car: {
        modelRangeName: bodyType.id.split('.')[1],
        modelName: analyticsManager.getModelName(bodyType)
      }
    });
  }
  sendNavigationDataLayerEvent() {
    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {
      componentClick: {
        clickElementId: this.series.all.id,
        clickElementName: this.series.all.text,
        clickElementType: ClickElementTypes.Link,
        targetUrl: this.series.all.link
      },
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType(this.activeRoutingKey, ElementTypes.bodyTypeButton),
        displayElementName: this.series.all.text
      }
    });
  }
  getImageSize(currentBreakpoint) {
    switch (currentBreakpoint) {
      case breakpoint.xxl:
        return 1920;
      case breakpoint.xl:
      case breakpoint.l:
        return 1360;
      case breakpoint.m:
        return 1024;
      case breakpoint.s:
        return 760;
      case breakpoint.xs:
      case breakpoint.base:
      default:
        return 320;
    }
  }
  getImageSource(image) {
    const assetPath = getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/model-assets`);
    const imageSize = this.getImageSize(this.breakpoint);
    const imagePath = `${assetPath}/${imageSize}`;
    return `${imagePath}/${image}.webp, ${imagePath}/${image}@2x.webp 2x`;
  }
  render() {
    return (h(Host, { class: `${this.showSkeleton ? 'skeleton' : ''}` }, h(Fragment, null, h("ul", { class: "links" }, this.series.links.map((link) => (h(Fragment, null, this.showSkeleton ? h("div", { class: "skeleton-link" }) : null, h("phn-p-link", { key: link.id, variant: "tertiary", href: link.link, icon: link.icon, size: "inherit", class: "link", style: { display: this.showSkeleton ? 'none' : '' }, onClick: () => {
        this.sendMetaFunctionDataLayerEvent(link);
      }, role: "listitem" }, link.text))))), h("ul", null, this.series.bodyTypes.map((bodyType) => {
      return (h(Fragment, null, this.showSkeleton ? (h(Fragment, null, h("div", { class: "skeleton-image" }))) : null, h("div", { class: "series-body-type", key: bodyType.id, style: { display: this.showSkeleton ? 'none' : '' }, role: "listitem" }, h("phn-p-link-pure", { icon: "none", onClick: (e) => {
          const clickedElement = getHTMLElement(e.target);
          if (clickedElement !== null) {
            this.sendBodyTypeClickDataLayerEvent(bodyType, clickedElement.tagName);
          }
        } }, h("a", { href: bodyType.link }, this.bodyTypesImagesNotLoaded.has(bodyType.id) ? (h(Fragment, null, h("div", { class: "skeleton-bodytype" }))) : (h("div", { class: "model-link-content" }, h("img", { srcSet: this.getImageSource(bodyType.image), alt: `${bodyType.name} Sideshot`, onLoad: () => this.handleImageLoad(bodyType.id), onError: () => this.handleImageLoadError(bodyType.id) }), h("phn-p-text", { size: "inherit", color: "inherit", align: "center" }, bodyType.name), isString(bodyType.description) ? (h("phn-p-text", { className: "model-description", size: "x-small", align: "center" }, bodyType.description)) : null)))))));
    })), this.showSkeleton ? null : (h("phn-p-link", { variant: "tertiary", href: this.series.all.link, size: "inherit", class: "further", "data-test-id": "car-body-types-drawer-further-links-button", onClick: () => {
        this.sendNavigationDataLayerEvent();
      } }, this.series.all.text)))));
  }
  static get assetsDirs() { return ["model-assets"]; }
  get el() { return this; }
  static get watchers() { return {
    "series": ["seriesWatcher"]
  }; }
  static get style() { return carBodyTypesDrawerCss; }
}, [2, "phn-car-body-types-drawer", {
    "series": [16],
    "breakpoint": [2],
    "activeRoutingKey": [1, "active-routing-key"],
    "seriesLoaded": [32],
    "showSkeleton": [32]
  }, undefined, {
    "series": ["seriesWatcher"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-car-body-types-drawer"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-car-body-types-drawer":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CarBodyTypeDrawer);
      }
      break;
  } });
}
defineCustomElement();

export { CarBodyTypeDrawer as C, defineCustomElement as d };

//# sourceMappingURL=car-body-types-drawer.js.map