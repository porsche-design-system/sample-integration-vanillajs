const breakpointBase = 0;

const breakpointXS = 480;

const breakpointS = 760;

const breakpointM = 1000;

const breakpointL = 1300;

const breakpointXL = 1760;

const breakpointXXL = 1920;

const breakpoint = {
    base: breakpointBase,
    xs: breakpointXS,
    s: breakpointS,
    m: breakpointM,
    l: breakpointL,
    xl: breakpointXL,
    xxl: breakpointXXL,
};

const test = {
	CONTENT_URL: "http://content/url",
	SHOP_CONTENT_URL: "http://shop-content/url",
	ASSETS_URL: "http://assets/url",
	PROFILE_API_URL: "http://profile-api/url",
	FINDER_URL: "http://finder/url",
	FOOTER_ASSETS_URL: "http://footer/assets",
	COUNTRY_SELECTOR_URL: "http://select/countries",
	UNREAD_MESSAGES_COUNT_API_URL: "http://unread-messages-count-api/url",
	LOGIN_BASE_URL: "http://login-base/url",
	LOGIN_REDIRECT_URL: "http://login-redirect/url",
	CLIENT_ID: "client-id",
	IDENTITY_PROVIDER_URL: "http://identity-redirect/url",
	IDENTITY_CLIENT_ID: "identity-client-id",
	IDENTITY_AUDIENCE: "https://identity-audience/url",
	IDENTITY_USER_SCOPES: "openid pid:user_profile.name:read pid:user_profile.porscheid:read",
	IDP_MIGRATION_ENDPOINT: "http://idp-migration-endpoint",
	PORSCHE_COM_URL: [
		"http://porsche-com/url"
	],
	DEALER_API_URL: "https://eu-0.test.api.porsche.io/porsche-group/test/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-preview-nav.porsche.services"
};
const local = {
	CONTENT_URL: "https://preview-nav.porsche.com/v3/content",
	SHOP_CONTENT_URL: "https://shop.porsche-preview.com/api/content",
	ASSETS_URL: ".",
	FOOTER_ASSETS_URL: "https://footer.pchomenav.aws.porsche.cloud/assets",
	COUNTRY_SELECTOR_URL: "https://preview.ppn.porsche.com/countries",
	PROFILE_API_URL: "https://api.porsche-preview.com/profiles/mydata",
	FINDER_URL: "https://finder.porsche.com",
	UNREAD_MESSAGES_COUNT_API_URL: "https://api.porsche-preview.com/inbox/pp/rest/messages/unreadCount",
	LOGIN_BASE_URL: "https://preview-login.porsche.com",
	LOGIN_REDIRECT_URL: "https://preview-nav.porsche.com/auth/authIframe.html",
	CLIENT_ID: "V5yfGusXVALiypCMRFBfM4IAHaZ0IA4A",
	IDENTITY_PROVIDER_URL: "https://identity.porsche-preview.com",
	IDENTITY_CLIENT_ID: "6nPQZTTgpN6HEgvb9gswJyduzgVfy7Cr",
	IDENTITY_AUDIENCE: "https://api.porsche-preview.com",
	IDENTITY_USER_SCOPES: "openid pid:user_profile.name:read pid:user_profile.porscheid:read",
	IDP_MIGRATION_ENDPOINT: "https://assets.identity.porsche-preview.com/migration/configuration",
	PORSCHE_COM_URL: [
		"http://localhost:3333",
		"http://localhost:3334",
		"http://localhost:3335",
		"https://local.porsche.com:3333",
		"https://local.porsche.com:3334",
		"https://local.porsche.com:3335"
	],
	DEALER_API_URL: "https://configurator-dev.porsche.com/api/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-preview-nav.porsche.services"
};
const preview = {
	CONTENT_URL: "https://preview-nav.porsche.com/v3/content",
	SHOP_CONTENT_URL: "https://shop.porsche-preview.com/api/content",
	ASSETS_URL: "https://preview-nav.porsche.com",
	FOOTER_ASSETS_URL: "https://footer.pchomenav.aws.porsche.cloud/assets",
	COUNTRY_SELECTOR_URL: "https://preview.ppn.porsche.com/countries",
	PROFILE_API_URL: "https://api.porsche-preview.com/profiles/mydata",
	FINDER_URL: "https://finder.porsche.com",
	UNREAD_MESSAGES_COUNT_API_URL: "https://api.porsche-preview.com/inbox/pp/rest/messages/unreadCount",
	LOGIN_BASE_URL: "https://preview-login.porsche.com",
	LOGIN_REDIRECT_URL: "https://preview-nav.porsche.com/auth/authIframe.html",
	CLIENT_ID: "V5yfGusXVALiypCMRFBfM4IAHaZ0IA4A",
	IDENTITY_PROVIDER_URL: "https://identity.porsche-preview.com",
	IDENTITY_CLIENT_ID: "6nPQZTTgpN6HEgvb9gswJyduzgVfy7Cr",
	IDENTITY_AUDIENCE: "https://api.porsche-preview.com",
	IDENTITY_USER_SCOPES: "openid pid:user_profile.name:read pid:user_profile.porscheid:read",
	IDP_MIGRATION_ENDPOINT: "https://assets.identity.porsche-preview.com/migration/configuration",
	PORSCHE_COM_URL: [
		"https://vanillajs.preview-nav.porsche.com",
		"https://angular.preview-nav.porsche.com",
		"https://react.preview-nav.porsche.com",
		"https://vanillajs.pchomenav.aws.porsche.cloud",
		"https://react.pchomenav.aws.porsche.cloud",
		"https://angular.pchomenav.aws.porsche.cloud",
		"https://preview.ppn.porsche.com",
		"https://configurator-staging.porsche.com",
		"https://cd.int.pcom.weu.porsche.com/",
		"https://cm.int.pcom.weu.porsche.com/",
		"https://cd.staging.pcom.weu.porsche.com/",
		"https://cm.staging.pcom.weu.porsche.com/",
		"https://ohdev.westeurope.cloudapp.azure.com/",
		"https://ohtest.westeurope.cloudapp.azure.com/"
	],
	DEALER_API_URL: "https://configurator.porsche.com/api/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-preview-nav.porsche.services"
};
const production = {
	CONTENT_URL: "https://nav.porsche.com/00BC524/v3/content",
	SHOP_CONTENT_URL: "https://shop.porsche.com/api/content",
	ASSETS_URL: "https://nav.porsche.com/00BC524",
	FOOTER_ASSETS_URL: "https://nav.porsche.com/00BC524/footer/assets",
	PROFILE_API_URL: "https://api.porsche.com/profiles/mydata",
	FINDER_URL: "https://finder.porsche.com",
	COUNTRY_SELECTOR_URL: "https://www.porsche.com/countries",
	UNREAD_MESSAGES_COUNT_API_URL: "https://api.porsche.com/inbox/p/rest/messages/unreadCount",
	LOGIN_BASE_URL: "https://login.porsche.com",
	LOGIN_REDIRECT_URL: "https://nav.porsche.com/00BC524/auth/authIframe.html",
	CLIENT_ID: "QPw3VOLAMfI7r0nmRY8ELq4RzZpZeXEE",
	IDENTITY_PROVIDER_URL: "https://identity.porsche.com",
	IDENTITY_CLIENT_ID: "fFp1mRfLwaUkbrAFv7QYeubkPofNYvWY",
	IDENTITY_AUDIENCE: "https://api.porsche.com",
	IDENTITY_USER_SCOPES: "openid pid:user_profile.name:read pid:user_profile.porscheid:read",
	IDP_MIGRATION_ENDPOINT: "https://assets.identity.porsche.com/migration/configuration",
	PORSCHE_COM_URL: [
		"https://www.porsche.com",
		"https://configurator.porsche.com"
	],
	DEALER_API_URL: "https://configurator.porsche.com/api/dealer-search",
	DEALER_API_URL_ALL_DEALERS: "https://configurator.porsche.com/api/dealer-search",
	BFF_ENDPOINT: "https://resources-nav.porsche.services"
};
const configJSON = {
	test: test,
	local: local,
	preview: preview,
	production: production
};

const NavigationMode = {
  hero: 'hero',
  navbar: 'navbar',
  transparent: 'transparent'
};
const NavigationTheme = {
  light: 'light',
  dark: 'dark'
};

const DEFAULT_ENVIRONMENT = 'production';
const LOGGED_IN_USER_NO_NAME_STATUS = 'loggedIn';
const LOGGED_OUT_USER_STATUS = 'loginOrRegister';
const LOADING_STATUS = 'loading';
const VERSION = '3.3.0';
const DEFAULT_UNREAD_MESSAGES_COUNT = 0;
const FOCUSABLE_ELEMENTS_SELECTOR = 'a, button, [tabindex]:not([tabindex="-1"]), phn-p-link-pure, phn-p-button-pure, phn-p-link, phn-p-button, input.autofocus, phn-p-inline-notification';
const SAVED_DEALER_COOKIE = 'nav_saved_dealer';
const GEOLOCATION_BUTTON_SEARCH_TERM = 'by geolocation';
const DEALER_MARKET_SEARCH_TERM = 'by market';
const MS_IN_MONTH = 1000 * 60 * 60 * 24 * 90;
const COOKIE_DOMAIN = 'porsche.com';
const IFRAME_ID = 'auth-iframe-header-navigation';
const MenuItemVariant = {
  Model: 'model-variant',
  Level1: 'level1-variant',
  DealerDetails: 'dealer-details-variant'
};
const DEFAULT_LOCALE = '';

const Application = {
  shop: 'shop',
  pcom: 'pcom',
  default: 'default'
};
var DrawerStatusValues;
(function (DrawerStatusValues) {
  DrawerStatusValues["startOpening"] = "startOpening";
  DrawerStatusValues["startClosing"] = "startClosing";
  DrawerStatusValues["finishOpening"] = "finishOpening";
  DrawerStatusValues["finishClosing"] = "finishClosing";
})(DrawerStatusValues || (DrawerStatusValues = {}));

let rootElement = null;
function getRootElement() {
  if (rootElement === null) {
    throw new Error('No root element present');
  }
  return rootElement;
}
function loadRootElement(element) {
  rootElement = element;
}
function getHTMLElementFromRoot(selector) {
  return getRootElement().querySelector(selector);
}
function getConfig(env) {
  return configJSON[env];
}
function hasKey(obj, key) {
  return obj && typeof obj === 'object' && key in obj;
}
function isString(test) {
  return typeof test === 'string' && test.length > 0;
}
function getString(test) {
  return typeof test === 'string' ? test : '';
}
/* istanbul ignore next */
function getHTMLElement(el) {
  return el instanceof HTMLElement ? el : null;
}
/* istanbul ignore next */
function focusOnElement(el) {
  var _a;
  (_a = getHTMLElement(el)) === null || _a === void 0 ? void 0 : _a.focus();
}
/* istanbul ignore next */
function getHTMLInputElement(el) {
  return el instanceof HTMLInputElement ? el : null;
}
function IsKeyboardClick(e) {
  return e.x === 0 && e.y === 0;
}
function IsLoading(loggedInState) {
  return loggedInState === LOADING_STATUS;
}
function IsLoggedOut(loggedInState) {
  return loggedInState === LOGGED_OUT_USER_STATUS;
}
function IsLoggedIn(loggedInState) {
  return !IsLoading(loggedInState) && !IsLoggedOut(loggedInState);
}
function getUsername(loggedInState, loggedInText) {
  return loggedInState === LOGGED_IN_USER_NO_NAME_STATUS ? loggedInText : loggedInState;
}
function getQueryString(params) {
  return Object.entries(params)
    .filter((entry) => entry[1] !== undefined)
    .map(([name, value]) => [name, isString(value) ? value : value.toString()])
    .map(([name, value]) => `${encodeURIComponent(name)}=${encodeURIComponent(value)}`)
    .join('&');
}
function constructCacheKey(...args) {
  return args.join('---');
}
function isDesktop(currentBreakpoint) {
  return currentBreakpoint >= breakpoint.s;
}
function getImageSize(currentBreakpoint) {
  switch (currentBreakpoint) {
    case breakpoint.xxl:
    case breakpoint.xl:
      return 1920;
    case breakpoint.l:
      return 1360;
    case breakpoint.m:
      return 1024;
    case breakpoint.s:
      return 760;
    case breakpoint.xs:
      return 390;
    default:
      return 320;
  }
}
function sanitizeMode(mode) {
  if (!Object.keys(NavigationMode).includes(mode)) {
    return NavigationMode.navbar;
  }
  return mode;
}
function sanitizeTheme(theme) {
  if (!Object.keys(NavigationTheme).includes(theme)) {
    return NavigationTheme.light;
  }
  return theme;
}
function sanitizeApp(app) {
  if (!Object.keys(Application).includes(app)) {
    return Application.default;
  }
  return app;
}
function constructThemeClass(mode, theme) {
  const sanitizedMode = sanitizeMode(mode);
  if (sanitizedMode === NavigationMode.navbar) {
    return NavigationMode.navbar;
  }
  const sanitizedTheme = sanitizeTheme(theme);
  return `${mode}_${sanitizedTheme}`;
}
function isPromise(value) {
  return (Boolean(value) &&
    typeof value.then === 'function' &&
    value[Symbol.toStringTag] === 'Promise');
}
function addQueryParamsToUrl(url, params) {
  return `${url}${url.includes('?') ? '&' : '?'}${getQueryString(params)}`;
}
function getValidContentPathSegments(rootContentItem, segments) {
  let currentContentItem = rootContentItem;
  const validSegments = [];
  for (const segment of segments) {
    currentContentItem = currentContentItem.children.find((child) => child.id === segment);
    if (currentContentItem === undefined || currentContentItem === null) {
      break;
    }
    validSegments.push(segment);
  }
  return validSegments;
}
function getRootMenuItem(content, key) {
  if (!['vehiclePurchase', 'shop', 'experience', 'services'].includes(key) || content[key] === undefined) {
    return null;
  }
  return content[key];
}
function buildRoutingKeyHistoryFromContentPath(segments) {
  const routingKeyHistory = [segments[0]];
  for (let i = 1; i < segments.length; i++) {
    routingKeyHistory.push(`${routingKeyHistory[i - 1]}/${segments[i]}`);
  }
  return routingKeyHistory;
}
function isModelName(text) {
  return ['718', '911', 'Taycan', 'Macan', 'Panamera', 'Cayenne'].includes(text);
}
function isModelFuelTypeGasoline(model) {
  const lowerCase = model.toLowerCase();
  return ['718', '911', 'macan'].includes(lowerCase);
}
const getRightTheme = (theme, mode) => {
  if (mode === NavigationMode.transparent || mode === NavigationMode.hero) {
    return theme;
  }
  return 'light';
};
function camelToKebapCase(camelString) {
  return camelString.replace(/([A-Z])/g, (g) => `-${g[0].toLowerCase()}`);
}
function shallowCopySpecifiedAttributesWithDefault(sourceObject, copyObject, accessor = (object, key) => object[key]) {
  return Object.entries(copyObject).reduce((values, [key, value]) => {
    const valueFromSource = accessor(sourceObject, key);
    if (typeof valueFromSource === 'string') {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      values[key] = valueFromSource;
    }
    else {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      values[key] = value;
    }
    return values;
  }, {});
}
const dispatchEvent = (from, eventName, { bubbles, detail, composed, cancelable }) => {
  const event = new CustomEvent(eventName, { detail, bubbles, cancelable, composed });
  const element = getHTMLElementFromRoot(from);
  element === null || element === void 0 ? void 0 : element.dispatchEvent(event);
};

export { Application as A, getImageSize as B, COOKIE_DOMAIN as C, DrawerStatusValues as D, isModelName as E, FOCUSABLE_ELEMENTS_SELECTOR as F, GEOLOCATION_BUTTON_SEARCH_TERM as G, isModelFuelTypeGasoline as H, IsLoggedIn as I, IFRAME_ID as J, LOGGED_IN_USER_NO_NAME_STATUS as K, LOGGED_OUT_USER_STATUS as L, MS_IN_MONTH as M, NavigationTheme as N, sanitizeApp as O, getValidContentPathSegments as P, getRootMenuItem as Q, buildRoutingKeyHistoryFromContentPath as R, SAVED_DEALER_COOKIE as S, IsKeyboardClick as T, getHTMLElementFromRoot as U, VERSION as V, loadRootElement as W, getHTMLElement as a, isString as b, getConfig as c, getHTMLInputElement as d, DEFAULT_UNREAD_MESSAGES_COUNT as e, DEFAULT_ENVIRONMENT as f, getRootElement as g, DEFAULT_LOCALE as h, isPromise as i, breakpoint as j, hasKey as k, getString as l, camelToKebapCase as m, getUsername as n, isDesktop as o, dispatchEvent as p, NavigationMode as q, constructThemeClass as r, shallowCopySpecifiedAttributesWithDefault as s, getRightTheme as t, constructCacheKey as u, MenuItemVariant as v, addQueryParamsToUrl as w, DEALER_MARKET_SEARCH_TERM as x, getQueryString as y, focusOnElement as z };

//# sourceMappingURL=helper.js.map