{"file":"autocomplete-search-field.js","mappings":"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","names":[],"sources":["src/components/autocomplete-search-field/autocomplete-search-field.scss?tag=phn-autocomplete-search-field&encapsulation=scoped","src/components/autocomplete-search-field/autocomplete-search-field.tsx"],"sourcesContent":["@import '../../scss';\n\n:host {\n  display: block;\n\n  .form-container {\n    display: block;\n    position: relative;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    box-sizing: border-box;\n\n    phn-p-text-field-wrapper {\n      width: 100%;\n\n      input[type=search]::-ms-clear {  display: none; width : 0; height: 0; }\n      input[type=search]::-ms-reveal {  display: none; width : 0; height: 0; }\n      input[type=\"search\"]::-webkit-search-decoration,\n      input[type=\"search\"]::-webkit-search-cancel-button,\n      input[type=\"search\"]::-webkit-search-results-button,\n      input[type=\"search\"]::-webkit-search-results-decoration { display: none; }\n    }\n\n    &.inline-search-form {\n      margin-right: p-px-to-rem(16px);\n    }\n  }\n\n  .prediction-container {\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 10;\n    width: 100%;\n\n    background-color: white;\n    border: 1px solid $pds-theme-light-contrast-low;\n\n    ul {\n      margin-block: 0;\n      margin-inline: 0;\n      padding-inline: 0;\n      list-style-type: none;\n\n      li {\n        padding-left: p-px-to-rem(12px);\n        padding: p-px-to-rem(8px) 0 p-px-to-rem(8px) p-px-to-rem(12px);\n        color: $pds-theme-light-primary;\n\n        &:hover {\n          color: $pds-theme-light-notification-info;\n          background-color: $pds-theme-light-background-surface;\n        }\n\n        &.highlighted-prediction {\n          color: $pds-theme-light-notification-info;\n        }\n      }\n    }\n\n    .powered-by-google {\n      margin: p-px-to-rem(12px) 0 p-px-to-rem(12px) p-px-to-rem(12px);\n    }\n  }\n}\n","import { Component, EventEmitter, h, Prop, State, Event, getAssetPath, Element, Listen, Watch } from '@stencil/core';\nimport { Prediction } from '../../entities/places';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getConfig, getHTMLInputElement, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\n\n@Component({\n  tag: 'phn-autocomplete-search-field',\n  styleUrl: 'autocomplete-search-field.scss',\n  scoped: true\n})\nexport class AutocompleteSearchField {\n  @Prop() placeholder!: string;\n  @Prop() predictions!: Prediction[];\n  @Prop() initialValue = '';\n  @Prop() errorState = '';\n  @Prop() errorMessage = '';\n\n  @State() showPredictions = false;\n  @State() highlightedPredictionIndex = -1;\n  @State() searchterm = this.initialValue;\n\n  @Event() searchInput!: EventEmitter<string>;\n  @Event() clearSearch!: EventEmitter<void>;\n  @Event() submitSearch!: EventEmitter<Prediction | null>;\n  @Event() predictionsToggle!: EventEmitter<boolean>;\n  @Event() autoCompleteLoaded!: EventEmitter<boolean>;\n\n  @Element() el!: HTMLPhnAutocompleteSearchFieldElement;\n\n  @Listen('click', { passive: true, target: 'window' })\n  clickListener(e: MouseEvent): void {\n    this.showPredictions =\n      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;\n  }\n\n  @Listen('keydown', { passive: false })\n  keydownListener(e: KeyboardEvent): void {\n    if (e.key === 'Escape' && this.showPredictions) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.showPredictions = false;\n    }\n  }\n\n  @Watch('showPredictions')\n  watchShowPredictions(newValue: boolean): void {\n    this.predictionsToggle.emit(newValue);\n  }\n\n  @Watch('initialValue')\n  watchInitialValue(): void {\n    this.searchterm = this.initialValue;\n  }\n\n  componentDidRender(): void {\n    this.autoCompleteLoaded.emit(true);\n  }\n\n  private onKeyDown(pressedKey: string): void {\n    if (this.predictions.length === 0) return;\n\n    switch (pressedKey) {\n      case 'ArrowDown':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex === this.predictions.length - 1) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        }\n        this.highlightedPredictionIndex++;\n        break;\n\n      case 'ArrowUp':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex < 0) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        } else if (this.highlightedPredictionIndex === 0) {\n          this.highlightedPredictionIndex = this.predictions.length - 1;\n          break;\n        }\n        this.highlightedPredictionIndex--;\n        break;\n    }\n\n    if (this.highlightedPredictionIndex > -1) {\n      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;\n    }\n  }\n\n  private onSubmit() {\n    const prediction =\n      this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];\n    this.submitSearch.emit(prediction ?? null);\n    this.showPredictions = false;\n    if (prediction !== undefined) this.searchterm = prediction.text;\n  }\n\n  render(): HTMLPhnAutocompleteSearchFieldElement {\n    return (\n      <form\n        class=\"form-container\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n      >\n        <phn-p-text-field-wrapper\n          data-test-id=\"dealer-search-form-input\"\n          state={isString(this.errorMessage) ? 'error' : 'none'}\n          message={this.errorMessage}\n        >\n          <input\n            class=\"autofocus\"\n            aria-label=\"Find a dealer by typing a city name or zip code\"\n            type=\"search\"\n            placeholder={this.placeholder}\n            autocomplete=\"off\"\n            role=\"combobox\"\n            data-validate=\"required\"\n            aria-expanded={(this.predictions.length > 0 && this.showPredictions).toString()}\n            aria-controls=\"predictions\"\n            aria-autocomplete=\"list\"\n            aria-activedescendant={this.showPredictions ? String(this.highlightedPredictionIndex) : undefined}\n            value={this.searchterm}\n            onInput={(event: Event) => {\n              event.preventDefault();\n\n              this.showPredictions = true;\n              this.highlightedPredictionIndex = -1;\n\n              const value = getHTMLInputElement(event.target)?.value;\n\n              if (!isString(value)) {\n                this.searchterm = '';\n                this.showPredictions = false;\n                dealerSearchResultsStore.state.savedDealerCookie = null;\n                this.clearSearch.emit();\n                return;\n              }\n\n              this.searchInput.emit(value);\n            }}\n            onKeyDown={(event: KeyboardEvent) => {\n              this.onKeyDown(event.key);\n            }}\n          />\n        </phn-p-text-field-wrapper>\n\n        {this.predictions.length > 0 && this.showPredictions ? (\n          <div class=\"prediction-container\">\n            <ul\n              id=\"predictions\"\n              data-test-id=\"dealer-search-autocomplete-predictions\"\n              role=\"listbox\"\n              aria-label=\"List of location predictions\"\n            >\n              {this.predictions.map((prediction, index) => (\n                <li\n                  key={prediction.id}\n                  class={index === this.highlightedPredictionIndex ? 'highlighted-prediction' : ''}\n                  role=\"option\"\n                  aria-selected={String(index === this.highlightedPredictionIndex)}\n                  id={String(index)}\n                  onClick={() => {\n                    this.highlightedPredictionIndex = index;\n                    this.onSubmit();\n                  }}\n                  onKeyDown={(event: KeyboardEvent) => {\n                    // TODO: does this code ever get executed?\n                    if (event.key === 'Enter') {\n                      this.onSubmit();\n                    }\n                  }}\n                >\n                  <phn-p-text color=\"inherit\">{prediction.text}</phn-p-text>\n                </li>\n              ))}\n            </ul>\n            <img\n              class=\"powered-by-google\"\n              src={getAssetPath(\n                `${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`\n              )}\n              alt=\"powered by Google\"\n            />\n          </div>\n        ) : null}\n      </form>\n    );\n  }\n}\n"],"version":3}