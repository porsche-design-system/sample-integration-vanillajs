import { h, proxyCustomElement, HTMLElement, createEvent, Host, Fragment } from '@stencil/core/internal/client';
import { h as RoutingKeyPointers, f as findTopLevelRoutingKey, R as RoutingKeys } from './routing-key.js';
import { a as analyticsManager, g as getBackButtonText } from './analytics-manager.js';
import { b as DisplayElementTypes, g as globalDataLayerService, E as EventActions, a as ElementTypes, C as ClickElementTypes } from './global-data-layer-service.js';
import { a as animationManager, m as makeSequence } from './animation-manager.js';
import { n as navContentStore } from './nav-content-store.js';
import { b as isString, z as focusOnElement, a as getHTMLElement, F as FOCUSABLE_ELEMENTS_SELECTOR, D as DrawerStatusValues } from './helper.js';
import { A as AnimationSequences } from './routing-manager.js';
import { g as getAllFocusableElements } from './helper2.js';
import { d as defineCustomElement$j } from './autocomplete-search-field.js';
import { d as defineCustomElement$i } from './back-button.js';
import { d as defineCustomElement$h } from './car-body-types-drawer.js';
import { d as defineCustomElement$g } from './dealer-details-drawer.js';
import { d as defineCustomElement$f } from './dealer-search-by-number-of-dealers.js';
import { d as defineCustomElement$e } from './dealer-search-form.js';
import { d as defineCustomElement$d } from './dealer-search-form-dropdown.js';
import { d as defineCustomElement$c } from './dealer-search-form-geolocation.js';
import { d as defineCustomElement$b } from './dealer-search-results.js';
import { d as defineCustomElement$a } from './level-1.js';
import { d as defineCustomElement$9 } from './menu.js';
import { d as defineCustomElement$8 } from './menu-item.js';
import { d as defineCustomElement$7 } from './menu-item-card.js';
import { d as defineCustomElement$6 } from './models.js';
import { d as defineCustomElement$5 } from './myporsche-drawer.js';
import { d as defineCustomElement$4 } from './myporsche-login.js';
import { d as defineCustomElement$3 } from './router.js';
import { d as defineCustomElement$2 } from './side-drawer.js';
import { d as defineCustomElement$1 } from './side-drawer-item.js';

const resetToFarRight = (el) => {
  el.style.left = '150%';
  el.style.position = 'relative';
};
const mainDrawerHTMLSelector = '#main-drawer > div:first-child';
const registerOpenDoubleDrawerSequence = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-double-drawer',
        animation: {
          className: 'opening-animation',
          cleanUpAfterAnimation: (element) => {
            element.style.left = '0px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-in-animation',
          cleanUpAfterAnimation: (element) => {
            element.style.opacity = '1';
            element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_DOUBLE_DRAWER, makeSequence(sequence));
};
const registerCloseDoubleDrawerSequence = ({ onBackdropFadeOutEnd, onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        elementSelector: 'phn-double-drawer',
        onStart: onAnimationStarts,
        animation: {
          className: 'closing-animation',
          cleanUpBeforeAnimation: (element) => {
            element.style.left = '';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-out-animation',
          cleanUpBeforeAnimation: (element) => {
            element.style.opacity = '';
            element.style.backgroundColor = '';
          }
        },
        onEnd: () => {
          onBackdropFadeOutEnd();
          onAnimationEnds();
        }
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_DOUBLE_DRAWER, makeSequence(sequence));
};
const registerTransitionSequence = ({ onSlideMainDrawerOutEnd }, direction = 'normal') => {
  animationManager.register(`transitionSameLevelDoubleDrawer${direction === 'reverse' ? 'Reverse' : ''}`, makeSequence([
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: direction === 'reverse' ? 'transition-backward-animation-out' : 'transition-forward-animation-out',
          cleanUpAfterAnimation: resetToFarRight
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: direction === 'reverse' ? 'transition-forward-animation-in' : 'transition-forward-animation-in',
          cleanUpBeforeAnimation: (element) => {
            element.style.left = '';
            element.style.position = '';
          }
        }
      }
    ]
  ]));
};
const registerForwardToNextMenuSequence = ({ onSlideMainDrawerOutEnd }) => {
  animationManager.register('transitionNextLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-forward-animation-out'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-forward-animation-out'
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-forward-animation-in'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-forward-animation-in'
        }
      }
    ]
  ]));
};
const registerBackToPreviousMenuSequence = ({ onSlideMainDrawerOutEnd }) => {
  animationManager.register('transitionPreviousLevelDoubleDrawer', makeSequence([
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-backward-animation-out'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-backward-animation-out'
        },
        onEnd: onSlideMainDrawerOutEnd
      }
    ],
    [
      {
        elementSelector: '#side-drawer > div',
        animation: {
          className: 'transition-backward-animation-in'
        }
      },
      {
        elementSelector: mainDrawerHTMLSelector,
        animation: {
          className: 'transition-backward-animation-in'
        }
      }
    ]
  ]));
};
const isPlayingDoubleDrawerAnimation = () => {
  const doubleDrawerAnimationSequences = [
    AnimationSequences.OPEN_DOUBLE_DRAWER,
    AnimationSequences.CLOSE_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_NEXT_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_PREVIOUS_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER,
    AnimationSequences.TRANSITION_SAME_LEVEL_DOUBLE_DRAWER_REVERSE
  ];
  return doubleDrawerAnimationSequences.some((sequence) => {
    try {
      return animationManager.isPlaying(sequence);
    }
    catch (_a) {
      return false;
    }
  });
};

const MainDrawerContent = ({ activeRoutingKey, locale, breakpoint, backButtonText, onClickBack, receivedContent }) => (h("div", { class: "drawer-content" },
  h("div", { class: "main-drawer-header" }, isString(backButtonText) ? (h("phn-back-button", { class: "back-button", onClick: onClickBack, text: backButtonText, analyticsId: navContentStore.state.menu.id })) : null),
  h("phn-router", { activeRoutingKey: activeRoutingKey, breakpoint: breakpoint, locale: locale, receivedContent: receivedContent })));

const SideDrawerContent = ({ activeRoutingKey, locale, backButtonText, onClickBack }) => {
  return (h("div", { class: "drawer-content" },
    h("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }),
    h("div", { class: "side-drawer-header" }, isString(backButtonText) ? (h("phn-back-button", { class: "back-button", onClick: onClickBack, text: backButtonText, analyticsId: navContentStore.state.menu.id })) : null),
    h("phn-side-drawer", { activeRoutingKey: activeRoutingKey, locale: locale })));
};

const doubleDrawerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-double-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-double-drawer{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-double-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-double-drawer{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-double-drawer{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-double-drawer{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-double-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-double-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-double-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-double-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-double-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-double-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-double-drawer-h{position:fixed;top:0;left:-1000px;height:100vh;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;z-index:301}@media (min-width: 1920px){.sc-phn-double-drawer-h{left:-1300px}}.opening-animation.sc-phn-double-drawer-h{left:0px;-webkit-transition:left 600ms;transition:left 600ms}.closing-animation.sc-phn-double-drawer-h{left:-1000px;-webkit-transition:left 600ms;transition:left 600ms}@media (min-width: 1920px){.closing-animation.sc-phn-double-drawer-h{left:-1300px}}.sc-phn-double-drawer-h .close-button.sc-phn-double-drawer{position:absolute;right:-4.75rem;z-index:301;width:3rem;height:3rem;margin-top:1.75rem;cursor:pointer}.sc-phn-double-drawer-h .drawer.sc-phn-double-drawer{overflow-y:auto;overflow-x:hidden;position:relative;background-color:#fff;height:100vh;-webkit-transition:left 400ms;transition:left 400ms}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{z-index:302;float:left;width:17.125rem;padding-left:1.75rem;padding-right:1.75rem}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:16.5rem;padding-left:2.25rem;padding-right:2.25rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:19.3125rem;padding-left:3rem;padding-right:3rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer{width:27.375rem;padding-left:5.25rem;padding-right:5.25rem}}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer>div.sc-phn-double-drawer{left:0}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer phn-side-drawer.sc-phn-double-drawer{padding-bottom:6rem}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;height:5.75rem;padding-top:2.625rem}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{height:6rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer{height:8rem;padding-top:3.75rem}}.sc-phn-double-drawer-h .drawer#side-drawer.sc-phn-double-drawer .side-drawer-header.sc-phn-double-drawer phn-back-button.sc-phn-double-drawer{margin-left:-0.5rem;height:1.5rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{z-index:301;float:right;border-radius:0 4px 4px 0;background-color:#EEEFF2;-webkit-box-sizing:border-box;box-sizing:border-box;position:static;width:20.625rem;padding-left:1.75rem;padding-right:1.75rem}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:21rem;padding-left:2.25rem;padding-right:2.25rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:25.3125rem;padding-left:3rem;padding-right:3rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer{width:37.875rem;padding-left:5.25rem;padding-right:5.25rem}}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer>div.sc-phn-double-drawer{left:0}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer phn-router.sc-phn-double-drawer{padding-bottom:6rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;height:4.125rem;padding-top:2.5rem;margin-bottom:1.625rem}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{margin-bottom:1.875rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer{height:5.25rem;margin-bottom:2.75rem;padding-top:2.5rem}}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .main-drawer-header.sc-phn-double-drawer phn-back-button.sc-phn-double-drawer{margin-left:-0.5rem;height:1.5rem}.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{z-index:302;height:10rem;background:-webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(#EEEFF2));background:linear-gradient(to bottom, rgba(255, 255, 255, 0), #EEEFF2);opacity:1;position:absolute;width:100%;bottom:0;margin-left:-1.5rem;pointer-events:none;width:20.625rem;margin-left:20.625rem;border-radius:0 0 4px 0}@media (min-width: 1000px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:21rem;margin-left:21rem}}@media (min-width: 1300px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:25.3125rem;margin-left:25.3125rem}}@media (min-width: 1920px){.sc-phn-double-drawer-h .drawer#main-drawer.sc-phn-double-drawer .bottom-gradient.sc-phn-double-drawer{width:37.875rem;margin-left:37.875rem}}";

const DoubleDrawer = /*@__PURE__*/ proxyCustomElement(class DoubleDrawer extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.clickDrawerHeaderClose = createEvent(this, "clickDrawerHeaderClose", 7);
    this.clickDrawerHeaderBack = createEvent(this, "clickDrawerHeaderBack", 7);
    this.drawerClosed = createEvent(this, "drawerClosed", 7);
    this.drawerChanged = createEvent(this, "drawerChanged", 7);
    this.backdropClosed = createEvent(this, "backdropClosed", 7);
    this.phnDrawerStatus = createEvent(this, "phnDrawerStatus", 7);
    this.breakpoint = undefined;
    this.locale = undefined;
    this.initialUsingKeyboard = false;
    this.routingKeyHistory = [];
    this.routingKeyPointer = RoutingKeyPointers.LEVEL_ZERO;
    this.receivedContent = undefined;
    this.usingKeyboard = false;
    this.animatingRoutingKeyPointer = RoutingKeyPointers.LEVEL_ZERO;
    this.isAnimating = true;
    this.animatingRoutingKey = '';
  }
  watchRoutingKeyPointer(newPointer, oldPointer) {
    if (oldPointer < newPointer) {
      const topLevelRoutingKey = findTopLevelRoutingKey(this.routingKeyHistory[this.routingKeyPointer]);
      if (topLevelRoutingKey === RoutingKeys.DEALER_SEARCH) {
        animationManager.play('transitionSameLevelDoubleDrawer').then(() => this.focusOnInitialElement());
      }
      else {
        animationManager.play('transitionNextLevelDoubleDrawer').then(() => this.focusOnInitialElement());
      }
    }
  }
  watchRoutingKeyHistory(newHistory, oldHistory) {
    if (newHistory.length < oldHistory.length || this.animateIfSameLength(newHistory, oldHistory)) {
      animationManager.play('transitionSameLevelDoubleDrawer').then(() => this.focusOnInitialElement());
    }
  }
  onResizeWindow() {
    if (this.animatingRoutingKeyPointer !== this.routingKeyPointer) {
      this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
      this.animatingRoutingKeyPointer = this.routingKeyPointer;
    }
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    let activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    if (activeRoutingKey.startsWith(RoutingKeys.DEALER_SEARCH)) {
      activeRoutingKey = activeRoutingKey.split('/')[0];
    }
    const eventSourceElement = getHTMLElement(e.target);
    if (eventSourceElement === null) {
      return;
    }
    const focusableSideDrawerElements = getAllFocusableElements(this.el.querySelector('#side-drawer'));
    let focusableMainDrawerElements = getAllFocusableElements(this.el.querySelector('#main-drawer'));
    if (focusableSideDrawerElements.length === 0 || focusableMainDrawerElements.length === 0) {
      return;
    }
    const highlightedSideDrawerElementIndex = focusableSideDrawerElements.findIndex((el) => el.getAttribute('data-id') === activeRoutingKey);
    const highlightedSideDrawerElement = focusableSideDrawerElements[highlightedSideDrawerElementIndex];
    if (activeRoutingKey === RoutingKeys.DEALER_SEARCH) {
      focusableMainDrawerElements = focusableMainDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const lastSideDrawerElement = focusableSideDrawerElements[focusableSideDrawerElements.length - 1];
    const lastMainDrawerElement = focusableMainDrawerElements[focusableMainDrawerElements.length - 1];
    const closeButton = this.el.querySelector('.close-button');
    if (!e.shiftKey) {
      if (eventSourceElement === highlightedSideDrawerElement) {
        e.preventDefault();
        focusOnElement(focusableMainDrawerElements[0]);
        return;
      }
      if (eventSourceElement === lastSideDrawerElement) {
        e.preventDefault();
        if (closeButton !== null) {
          focusOnElement(closeButton);
        }
      }
      if (eventSourceElement === lastMainDrawerElement) {
        e.preventDefault();
        const nextSideDrawerElementIndex = highlightedSideDrawerElementIndex + 1 >= focusableSideDrawerElements.length
          ? 0
          : highlightedSideDrawerElementIndex + 1;
        const nextSideDrawerElement = getHTMLElement(focusableSideDrawerElements[nextSideDrawerElementIndex]);
        focusOnElement(nextSideDrawerElement);
      }
      if (eventSourceElement === closeButton) {
        e.preventDefault();
        focusOnElement(focusableSideDrawerElements[0]);
      }
    }
    else if (e.shiftKey) {
      if (eventSourceElement === focusableMainDrawerElements[0]) {
        e.preventDefault();
        if (highlightedSideDrawerElement !== null) {
          focusOnElement(highlightedSideDrawerElement);
        }
      }
      if (eventSourceElement === closeButton) {
        e.preventDefault();
        focusOnElement(lastSideDrawerElement);
      }
    }
  }
  handleMobileMenuItemClick(event) {
    if (animationManager.isPlaying('transitionNextLevelDoubleDrawer')) {
      event.stopPropagation();
    }
  }
  handleSideDrawerItemClick(event) {
    if (animationManager.isPlaying('transitionSameLevelDoubleDrawer')) {
      event.stopPropagation();
    }
  }
  focusOnInitialElement() {
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    let focusedRoutingKey = isNavigatingBackwards
      ? this.routingKeyHistory[this.routingKeyPointer + 1]
      : this.routingKeyHistory[this.routingKeyPointer];
    if (focusedRoutingKey.startsWith(RoutingKeys.DEALER_SEARCH)) {
      focusedRoutingKey = focusedRoutingKey.split('/')[0];
    }
    const autoFocusElement = getHTMLElement(this.el.querySelector('.autofocus'));
    if (autoFocusElement !== null) {
      focusOnElement(autoFocusElement);
      return;
    }
    if (this.usingKeyboard) {
      let focusableElement = null;
      if (isString(focusedRoutingKey)) {
        focusableElement = getHTMLElement(this.el.querySelector(`[data-id="${focusedRoutingKey}"]`));
      }
      if (focusableElement === null) {
        focusableElement = getHTMLElement(this.el.querySelector(`${FOCUSABLE_ELEMENTS_SELECTOR}`));
      }
      if (focusableElement !== null) {
        focusOnElement(focusableElement);
      }
      return;
    }
    const firstFocus = getHTMLElement(this.el.querySelector('.first-focus'));
    if (firstFocus !== null) {
      focusOnElement(firstFocus);
    }
  }
  async goBackToPreviousMenu() {
    if (this.routingKeyPointer === this.animatingRoutingKeyPointer) {
      this.clickDrawerHeaderBack.emit();
      const topLevelRoutingKey = findTopLevelRoutingKey(this.routingKeyHistory[this.routingKeyPointer]);
      if (topLevelRoutingKey === RoutingKeys.DEALER_SEARCH) {
        animationManager.play('transitionSameLevelDoubleDrawerReverse').then(() => this.focusOnInitialElement());
      }
      else {
        animationManager.play('transitionPreviousLevelDoubleDrawer').then(() => this.focusOnInitialElement());
      }
    }
  }
  async updateRouting() {
    this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    this.animatingRoutingKeyPointer = this.routingKeyPointer;
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    this.drawerChanged.emit(isNavigatingBackwards);
    this.sendDoubleDrawerLoadDataEvent();
  }
  sendDoubleDrawerLoadDataEvent() {
    analyticsManager.setDrawerType(DisplayElementTypes.DoubleDrawer);
    const activeRoutingKey = this.animatingRoutingKey || '';
    globalDataLayerService.pushDataLayerEvent(EventActions.DRAWER_LOAD, {
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(activeRoutingKey, ElementTypes.doubleDrawer),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  sendDataEventOfCloseButtonClick() {
    const activeRoutingKey = this.animatingRoutingKey || '';
    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {
      componentClick: {
        clickElementId: 'mainmenu.drawer.close',
        clickElementName: 'X',
        clickElementType: ClickElementTypes.Button,
        targetElement: 'level-0'
      },
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(activeRoutingKey, ElementTypes.closeButton),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Double Drawer'
      }
    });
  }
  animateIfSameLength(newHistory, oldHistory) {
    return (newHistory.length === oldHistory.length &&
      this.routingKeyPointer === newHistory.length - 1 &&
      newHistory[newHistory.length - 1] !== oldHistory[oldHistory.length - 1]);
  }
  componentWillLoad() {
    this.animatingRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    this.animatingRoutingKeyPointer = this.routingKeyPointer;
    this.usingKeyboard = this.initialUsingKeyboard;
  }
  componentDidLoad() {
    const routeChangeCallbacks = {
      onSlideMainDrawerOutEnd: async () => this.updateRouting()
    };
    registerOpenDoubleDrawerSequence({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startOpening });
      },
      onAnimationEnds: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishOpening });
        this.focusOnInitialElement();
      }
    });
    registerCloseDoubleDrawerSequence({
      onBackdropFadeOutEnd: async () => {
        this.backdropClosed.emit();
      },
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startClosing });
      },
      onAnimationEnds: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishClosing });
      }
    });
    registerBackToPreviousMenuSequence(routeChangeCallbacks);
    registerForwardToNextMenuSequence(routeChangeCallbacks);
    registerTransitionSequence(routeChangeCallbacks);
    registerTransitionSequence(routeChangeCallbacks, 'reverse');
    this.sendDoubleDrawerLoadDataEvent();
  }
  render() {
    const previousRoutingKey = this.routingKeyHistory[this.animatingRoutingKeyPointer - 1];
    const backButtonText = getBackButtonText(navContentStore.state, previousRoutingKey);
    const topLevelRoutingKey = findTopLevelRoutingKey(this.animatingRoutingKey);
    const wasPreviouslyOnDealerSearch = findTopLevelRoutingKey(previousRoutingKey) === RoutingKeys.DEALER_SEARCH;
    const isOnDealerDetails = topLevelRoutingKey === RoutingKeys.DEALER_SEARCH && this.animatingRoutingKey !== topLevelRoutingKey;
    return (h(Host, { role: "dialog", "aria-modal": "true", "aria-label": "navigation modal dialog" }, h("phn-p-button", { variant: "secondary", class: "close-button", theme: "dark", "hide-label": "true", icon: 'close', aria: "{ 'aria-label': 'close modal dialog' }", "data-test-id": "close-button", onClick: () => {
        this.sendDataEventOfCloseButtonClick();
        this.clickDrawerHeaderClose.emit();
      } }), isString(this.animatingRoutingKey) ? (h(Fragment, null, h("div", { class: "drawer", id: "side-drawer" }, h(SideDrawerContent, { activeRoutingKey: this.animatingRoutingKey, locale: this.locale, backButtonText: wasPreviouslyOnDealerSearch ? '' : backButtonText, onClickBack: () => this.goBackToPreviousMenu() })), h("div", { class: "drawer", id: "main-drawer" }, h(MainDrawerContent, { activeRoutingKey: this.animatingRoutingKey, breakpoint: this.breakpoint, locale: this.locale, backButtonText: isOnDealerDetails ? backButtonText : '', receivedContent: this.receivedContent, onClickBack: () => this.goBackToPreviousMenu() }), h("div", { class: "bottom-gradient" })))) : null));
  }
  get el() { return this; }
  static get watchers() { return {
    "routingKeyPointer": ["watchRoutingKeyPointer"],
    "routingKeyHistory": ["watchRoutingKeyHistory"]
  }; }
  static get style() { return doubleDrawerCss; }
}, [2, "phn-double-drawer", {
    "breakpoint": [2],
    "locale": [1],
    "initialUsingKeyboard": [4, "initial-using-keyboard"],
    "routingKeyHistory": [16],
    "routingKeyPointer": [2, "routing-key-pointer"],
    "receivedContent": [4, "received-content"],
    "usingKeyboard": [32],
    "animatingRoutingKeyPointer": [32],
    "isAnimating": [32],
    "animatingRoutingKey": [32]
  }, [[9, "resize", "onResizeWindow"], [0, "keydown", "handleKeyDown"], [0, "mobileMenuItemClick", "handleMobileMenuItemClick"], [0, "sideDrawerItemClick", "handleSideDrawerItemClick"]], {
    "routingKeyPointer": ["watchRoutingKeyPointer"],
    "routingKeyHistory": ["watchRoutingKeyHistory"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-double-drawer", "phn-autocomplete-search-field", "phn-back-button", "phn-car-body-types-drawer", "phn-dealer-details-drawer", "phn-dealer-search-by-number-of-dealers", "phn-dealer-search-form", "phn-dealer-search-form-dropdown", "phn-dealer-search-form-geolocation", "phn-dealer-search-results", "phn-level-1", "phn-menu", "phn-menu-item", "phn-menu-item-card", "phn-models", "phn-myporsche-drawer", "phn-myporsche-login", "phn-router", "phn-side-drawer", "phn-side-drawer-item"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-double-drawer":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DoubleDrawer);
      }
      break;
    case "phn-autocomplete-search-field":
      if (!customElements.get(tagName)) {
        defineCustomElement$j();
      }
      break;
    case "phn-back-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$i();
      }
      break;
    case "phn-car-body-types-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$h();
      }
      break;
    case "phn-dealer-details-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$g();
      }
      break;
    case "phn-dealer-search-by-number-of-dealers":
      if (!customElements.get(tagName)) {
        defineCustomElement$f();
      }
      break;
    case "phn-dealer-search-form":
      if (!customElements.get(tagName)) {
        defineCustomElement$e();
      }
      break;
    case "phn-dealer-search-form-dropdown":
      if (!customElements.get(tagName)) {
        defineCustomElement$d();
      }
      break;
    case "phn-dealer-search-form-geolocation":
      if (!customElements.get(tagName)) {
        defineCustomElement$c();
      }
      break;
    case "phn-dealer-search-results":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "phn-level-1":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "phn-menu":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "phn-menu-item":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "phn-menu-item-card":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "phn-models":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "phn-myporsche-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "phn-myporsche-login":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "phn-router":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "phn-side-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "phn-side-drawer-item":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { DoubleDrawer as D, defineCustomElement as d, isPlayingDoubleDrawerAnimation as i };

//# sourceMappingURL=double-drawer.js.map