import { proxyCustomElement, HTMLElement, createEvent, h, Host, Fragment } from '@stencil/core/internal/client';
import { s as splitLocale, g as globalDataLayerService, E as EventActions, a as ElementTypes, d as DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER, C as ClickElementTypes, e as DEALER_SEARCH_TARGET_ELEMENT, c as DEALER_SEARCH_DISPLAY_ELEMENT_ID } from './global-data-layer-service.js';
import { n as navStateStore } from './nav-state-store.js';
import { b as getPPNDealers } from './dealer-service.js';
import { a as isString, e as getConfig, G as GEOLOCATION_BUTTON_SEARCH_TERM, g as getString } from './helper.js';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';
import { l as logger } from './feature-toggles.js';
import { N as NaviError, a as NaviErrorTypes, g as getErrorMessage } from './navi-error.js';
import { a as analyticsManager } from './analytics-manager.js';
import { R as RoutingKeys } from './routing-key.js';
import { w as windowService } from './window-service.js';
import { b as getRegionSpecificCountry } from './dealer-search-helper.js';
import { T as Timeout, c as componentsOnReady } from './timeout.js';
import { n as navContentStore } from './nav-content-store.js';
import { E as ErrorMessage } from './error-message.js';
import { d as defineCustomElement$1 } from './autocomplete-search-field.js';

/* istanbul ignore file */
class MapsService {
  constructor() {
    this.autocompleteService = null;
    this.placesService = null;
    this.geocoderService = null;
    this.getLocation = null;
  }
  async init(apiKey) {
    try {
      const google = await windowService.fetchGoogleMapsApi(apiKey);
      this.autocompleteService = new google.maps.places.AutocompleteService();
      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(windowService.createDiv()));
      this.geocoderService = new google.maps.Geocoder();
      this.getLocation = (latLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);
    }
    catch (err) {
      throw new NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, NaviErrorTypes.GENERAL);
    }
  }
  async getPredictions(input, locale) {
    var _a;
    if (input.length === 0) {
      return [];
    }
    //ToDo: Check what todo if country is no valid iso-code
    const predictions = await new Promise((resolve, reject) => {
      if (this.autocompleteService === null) {
        reject(new NaviError('autocompleteService is not initialised', NaviErrorTypes.GENERAL));
        return;
      }
      this.autocompleteService.getPlacePredictions({
        input,
        componentRestrictions: { country: getRegionSpecificCountry(splitLocale(locale).country) }
      }, (predictions, status) => status === 'OK'
        ? resolve(predictions)
        : reject(new NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))));
    });
    return ((_a = predictions === null || predictions === void 0 ? void 0 : predictions.filter(({ place_id, description }) => isString(place_id) && isString(description)).map(({ place_id: id, description: text }) => ({ id, text }))) !== null && _a !== void 0 ? _a : []);
  }
  async getPlaceCoordinates(placeId) {
    var _a, _b, _c, _d;
    const response = await new Promise((resolve, reject) => {
      if (this.placesService === null) {
        reject(new NaviError('placesService is not initialised', NaviErrorTypes.GENERAL));
        return;
      }
      this.placesService.getDetails({
        placeId
      }, (response, status) => status === 'OK'
        ? resolve(response)
        : reject(new NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status))));
    });
    const latitude = (_b = (_a = response === null || response === void 0 ? void 0 : response.geometry) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.lat();
    const longitude = (_d = (_c = response === null || response === void 0 ? void 0 : response.geometry) === null || _c === void 0 ? void 0 : _c.location) === null || _d === void 0 ? void 0 : _d.lng();
    if (typeof latitude !== 'number' || typeof longitude !== 'number') {
      throw new NaviError(`placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`, NaviErrorTypes.NO_RESULTS);
    }
    return { latitude, longitude };
  }
  async getFormattedAddressFromCoordinates(latLong) {
    if (this.getLocation === null) {
      throw new NaviError('getLocation is not initialised', NaviErrorTypes.GENERAL);
    }
    const location = this.getLocation(latLong);
    const response = await new Promise((resolve, reject) => {
      if (this.geocoderService === null) {
        reject(new NaviError('geocoderService is not initialised', NaviErrorTypes.GENERAL));
        return;
      }
      this.geocoderService.geocode({ location }, (response, status) => {
        status === 'OK'
          ? resolve(response)
          : reject(new NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));
      });
    });
    if (response === null || response.length === 0) {
      throw new NaviError('geocoderService.geocode did not find the location based on coordinates.', NaviErrorTypes.NO_RESULTS);
    }
    return response[0].formatted_address;
  }
}
function getErrorType(status) {
  switch (status) {
    case 'INVALID_REQUEST': {
      return NaviErrorTypes.INVALID_INPUT;
    }
    case 'NOT_FOUND':
    case 'ZERO_RESULTS': {
      return NaviErrorTypes.NO_RESULTS;
    }
    case 'OVER_QUERY_LIMIT':
    case 'UNKNOWN_ERROR': {
      return NaviErrorTypes.RETRY;
    }
    case 'ERROR':
    case 'REQUEST_DENIED':
    default: {
      return NaviErrorTypes.GENERAL;
    }
  }
}
const mapsService = new MapsService();

const dealerSearchFormGeolocationCss = "@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.phn-flex-col.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-search-form-geolocation{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-search-form-geolocation{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-search-form-geolocation{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-search-form-geolocation{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-search-form-geolocation-h{display:block}.skeleton.sc-phn-dealer-search-form-geolocation-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-autocomplete-search-field.sc-phn-dealer-search-form-geolocation{width:auto;height:3.125rem;background:#d8d8db;border-radius:4px}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-or-text.sc-phn-dealer-search-form-geolocation{width:auto;height:1.25rem;background:#d8d8db;border-radius:4px 4px 0 0}.skeleton.sc-phn-dealer-search-form-geolocation-h .skeleton-geolocation-button.sc-phn-dealer-search-form-geolocation{width:auto;height:3.125rem;background:#d8d8db;border-radius:0 0 4px 4px}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation{position:relative;width:100%;margin-top:1.25rem}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation .geolocation.sc-phn-dealer-search-form-geolocation{width:100%;padding-bottom:24px}.sc-phn-dealer-search-form-geolocation-h .or-container.sc-phn-dealer-search-form-geolocation phn-p-text.sc-phn-dealer-search-form-geolocation{margin-bottom:0.25rem;color:#010205}.sc-phn-dealer-search-form-geolocation-h .animate-out.sc-phn-dealer-search-form-geolocation{-webkit-animation:fadeOutToTop 0.75s ease-in-out 0s;animation:fadeOutToTop 0.75s ease-in-out 0s}.sc-phn-dealer-search-form-geolocation-h .input-container.sc-phn-dealer-search-form-geolocation{width:100%}.sc-phn-dealer-search-form-geolocation-h .spinner.sc-phn-dealer-search-form-geolocation{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}";

const DealerSearchFormGeolocation = /*@__PURE__*/ proxyCustomElement(class DealerSearchFormGeolocation extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.dealerSearchFormEvent = createEvent(this, "dealerSearchFormEvent", 7);
    this.clearSearchEvent = createEvent(this, "clearSearchEvent", 7);
    this.removeSkeletonOnDealerSearchForm = createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.debounceTimeout = new Timeout(100);
    this.locale = undefined;
    this.predictions = [];
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.isLoading = false;
    this.showGeolocationButton = dealerSearchResultsStore.state.results === null;
    this.animateResults = false;
    this.searchTerm = dealerSearchResultsStore.state.searchTerm;
    this.showSkeleton = true;
  }
  loadedAutoCompleteListener() {
    this.showSkeleton = false;
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  disconnectedCallback() {
    dealerSearchResultsStore.state.searchTerm = this.searchTerm;
    this.debounceTimeout.cancel();
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { error: errorContent } = navContentStore.state;
      mapsService.init('AIzaSyDCVTh9wCeBxQEIxiN28Zb2ZWCf8wbiw0E').catch((err) => {
        logger.error('INIT_MAPS_SERVICE', err);
        this.formErrorMessage = getErrorMessage(errorContent, err);
        this.errorMessage = null;
      });
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm, true),
        displayElementName: dealer.text
      }
    });
  }
  emitResultsLoadEvent(searchTerm) {
    const { results } = dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.state;
    const componentSearchSearchTerm = isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM;
    const numberOfResults = (results === null || results === void 0 ? void 0 : results.length) || 0;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: componentSearchSearchTerm,
        numberOfResults: numberOfResults
      }
    });
  }
  async fetchDealers(getSearchTerms) {
    const { error: errorContent } = navContentStore.state;
    try {
      this.reset();
      this.isLoading = true;
      const [searchTerm, placeCoordinates] = await getSearchTerms();
      const { env } = navStateStore.state;
      const ppnDealerSearchResults = await getPPNDealers(env, getConfig(env).DEALER_API_URL, placeCoordinates, getRegionSpecificCountry(splitLocale(this.locale).country));
      dealerSearchResultsStore.state.searchTerm = searchTerm;
      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), dealerSearchResultsStore.state.ppnDealers);
      this.showGeolocationButton = false;
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = getErrorMessage(errorContent, err);
      this.errorMessage = null;
    }
    finally {
      this.isLoading = false;
      this.animateResults = true;
    }
  }
  async onSubmit(prediction) {
    const { dealer: dealerContent, error: errorContent } = navContentStore.state;
    if (!isString(this.searchTerm)) {
      this.errorMessage = errorContent.noInput;
      this.formErrorMessage = '';
      return;
    }
    await this.fetchDealers(async () => {
      if (prediction === null) {
        throw new NaviError('Dealer search form submitted without prediction', NaviErrorTypes.INVALID_INPUT);
      }
      this.searchTerm = prediction.text;
      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_CLICK, {
        componentClick: {
          clickElementId: prediction.id,
          clickElementName: prediction.text,
          clickElementType: ClickElementTypes.Button,
          targetElement: DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: prediction.text
        }
      });
      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);
      return [prediction.text, placeCoordinates];
    });
    this.emitResultsLoadEvent(this.searchTerm);
  }
  async getCurrentLocation() {
    const { dealer: dealerContent } = navContentStore.state;
    await this.fetchDealers(async () => {
      const placeCoordinates = await windowService.getNavigatorLatLong();
      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);
      this.searchTerm = '';
      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_GEOLOCATION_CLICK, {
        componentClick: {
          clickElementId: dealerContent.search.geolocation.id,
          clickElementName: dealerContent.search.geolocation.text,
          clickElementType: ClickElementTypes.Button,
          targetElement: DEALER_SEARCH_TARGET_ELEMENT
        },
        componentDisplay: {
          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,
          displayElementType: analyticsManager.calculateDisplayElementType(RoutingKeys.DEALER_SEARCH, ElementTypes.dealerSearchForm),
          displayElementName: dealerContent.text
        },
        componentSearch: {
          searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM
        }
      });
      return [formattedAddress, placeCoordinates];
    });
    this.emitResultsLoadEvent(GEOLOCATION_BUTTON_SEARCH_TERM);
  }
  async onDealerSearchEntry(searchTerm) {
    const { error } = navContentStore.state;
    try {
      this.searchTerm = searchTerm;
      this.errorMessage = null;
      this.formErrorMessage = null;
      this.showGeolocationButton = dealerSearchResultsStore.state.results === null;
      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);
    }
    catch (err) {
      logger.error('GET_PREDICTIONS', err);
      this.errorMessage = getErrorMessage(error, err);
      this.predictions = [];
    }
  }
  reset() {
    this.errorMessage = null;
    this.formErrorMessage = null;
    this.animateResults = false;
    this.showGeolocationButton = true;
    this.isLoading = false;
    dealerSearchResultsStore.state.results = null;
  }
  render() {
    const { dealer: dealerContent } = navContentStore.state;
    const { results } = dealerSearchResultsStore.state;
    return (h(Host, { class: this.showSkeleton ? 'skeleton' : '' }, h("div", { class: "input-container" }, this.showSkeleton ? h("div", { class: "skeleton-autocomplete-search-field" }) : null, h("phn-autocomplete-search-field", { placeholder: dealerContent.search.form.inputPlaceholder, initialValue: dealerSearchResultsStore.state.searchTerm, predictions: this.predictions, onSearchInput: (e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail)), onClearSearch: () => {
        this.predictions = [];
        dealerSearchResultsStore.state.searchTerm = '';
        this.searchTerm = '';
        this.reset();
        this.clearSearchEvent.emit();
        this.showGeolocationButton = true;
      }, onSubmitSearch: (e) => this.onSubmit(e.detail), errorMessage: getString(this.errorMessage), style: { display: this.showSkeleton ? 'none' : '' } })), this.isLoading && (h("div", { class: "spinner" }, h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } }))), this.showGeolocationButton && results === null ? (h(Fragment, null, h("div", { class: `or-container ${this.isLoading ? 'animate-out' : ''}`, onAnimationEnd: () => {
        this.showGeolocationButton = false;
      } }, this.showSkeleton ? h("div", { class: "skeleton-or-text" }) : null, h("phn-p-text", { color: "inherit", size: "inherit", tag: "div", "data-test-id": "dealer-search-or-label", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.or), this.showSkeleton ? h("div", { class: "skeleton-geolocation-button" }) : null, h("phn-p-button", { class: 'geolocation', onClick: () => this.getCurrentLocation(), variant: "tertiary", icon: "locate", style: { display: this.showSkeleton ? 'none' : '' } }, dealerContent.search.geolocation.text)))) : null, isString(this.formErrorMessage) ? (h(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() })) : null));
  }
  get el() { return this; }
  static get style() { return dealerSearchFormGeolocationCss; }
}, [2, "phn-dealer-search-form-geolocation", {
    "locale": [1],
    "predictions": [32],
    "errorMessage": [32],
    "formErrorMessage": [32],
    "isLoading": [32],
    "showGeolocationButton": [32],
    "animateResults": [32],
    "searchTerm": [32],
    "showSkeleton": [32]
  }, [[0, "autoCompleteLoaded", "loadedAutoCompleteListener"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-dealer-search-form-geolocation", "phn-autocomplete-search-field"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-dealer-search-form-geolocation":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DealerSearchFormGeolocation);
      }
      break;
    case "phn-autocomplete-search-field":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { DealerSearchFormGeolocation as D, defineCustomElement as d };

//# sourceMappingURL=dealer-search-form-geolocation.js.map