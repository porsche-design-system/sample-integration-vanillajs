import { proxyCustomElement, HTMLElement, createEvent, h, getAssetPath } from '@stencil/core/internal/client';
import { n as navStateStore } from './nav-state-store.js';
import { a as isString, b as getConfig, c as getHTMLInputElement } from './helper.js';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';

const autocompleteSearchFieldCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-autocomplete-search-field{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-autocomplete-search-field{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-autocomplete-search-field{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-autocomplete-search-field{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-autocomplete-search-field{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-autocomplete-search-field{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-autocomplete-search-field{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-autocomplete-search-field{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-autocomplete-search-field{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-autocomplete-search-field{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-autocomplete-search-field{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-autocomplete-search-field{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-autocomplete-search-field-h{display:block}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field{display:block;position:relative;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field{width:100%}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-ms-clear{display:none;width:0;height:0}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-ms-reveal{display:none;width:0;height:0}.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-decoration,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-cancel-button,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-results-button,.sc-phn-autocomplete-search-field-h .form-container.sc-phn-autocomplete-search-field phn-p-text-field-wrapper.sc-phn-autocomplete-search-field input[type=search].sc-phn-autocomplete-search-field::-webkit-search-results-decoration{display:none}.sc-phn-autocomplete-search-field-h .form-container.inline-search-form.sc-phn-autocomplete-search-field{margin-right:1rem}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;z-index:10;width:100%;background-color:white;border:1px solid #d8d8db}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field{margin-block:0;margin-inline:0;padding-inline:0;list-style-type:none}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.sc-phn-autocomplete-search-field{padding-left:0.75rem;padding:0.5rem 0 0.5rem 0.75rem;color:#010205}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.sc-phn-autocomplete-search-field:hover{color:#2762ec;background-color:#eeeff2}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field ul.sc-phn-autocomplete-search-field li.highlighted-prediction.sc-phn-autocomplete-search-field{color:#2762ec}.sc-phn-autocomplete-search-field-h .prediction-container.sc-phn-autocomplete-search-field .powered-by-google.sc-phn-autocomplete-search-field{margin:0.75rem 0 0.75rem 0.75rem}";

const AutocompleteSearchField = /*@__PURE__*/ proxyCustomElement(class AutocompleteSearchField extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.searchInput = createEvent(this, "searchInput", 7);
    this.clearSearch = createEvent(this, "clearSearch", 7);
    this.submitSearch = createEvent(this, "submitSearch", 7);
    this.predictionsToggle = createEvent(this, "predictionsToggle", 7);
    this.autoCompleteLoaded = createEvent(this, "autoCompleteLoaded", 7);
    this.placeholder = undefined;
    this.predictions = undefined;
    this.initialValue = '';
    this.errorState = '';
    this.errorMessage = '';
    this.showPredictions = false;
    this.highlightedPredictionIndex = -1;
    this.searchterm = this.initialValue;
  }
  clickListener(e) {
    this.showPredictions =
      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;
  }
  keydownListener(e) {
    if (e.key === 'Escape' && this.showPredictions) {
      e.preventDefault();
      e.stopPropagation();
      this.showPredictions = false;
    }
  }
  watchShowPredictions(newValue) {
    this.predictionsToggle.emit(newValue);
  }
  watchInitialValue() {
    this.searchterm = this.initialValue;
  }
  componentDidRender() {
    this.autoCompleteLoaded.emit(true);
  }
  onKeyDown(pressedKey) {
    if (this.predictions.length === 0)
      return;
    switch (pressedKey) {
      case 'ArrowDown':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex === this.predictions.length - 1) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        this.highlightedPredictionIndex++;
        break;
      case 'ArrowUp':
        if (!this.showPredictions) {
          return;
        }
        if (this.highlightedPredictionIndex < 0) {
          this.highlightedPredictionIndex = 0;
          break;
        }
        else if (this.highlightedPredictionIndex === 0) {
          this.highlightedPredictionIndex = this.predictions.length - 1;
          break;
        }
        this.highlightedPredictionIndex--;
        break;
    }
    if (this.highlightedPredictionIndex > -1) {
      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;
    }
  }
  onSubmit() {
    const prediction = this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];
    this.submitSearch.emit(prediction !== null && prediction !== void 0 ? prediction : null);
    this.showPredictions = false;
    if (prediction !== undefined)
      this.searchterm = prediction.text;
  }
  render() {
    return (h("form", { class: "form-container", onSubmit: (event) => {
        event.preventDefault();
        this.onSubmit();
      } }, h("phn-p-text-field-wrapper", { "data-test-id": "dealer-search-form-input", state: isString(this.errorMessage) ? 'error' : 'none', message: this.errorMessage }, h("input", { class: "autofocus", "aria-label": "Find a dealer by typing a city name or zip code", type: "search", placeholder: this.placeholder, autocomplete: "off", role: "combobox", "data-validate": "required", "aria-expanded": (this.predictions.length > 0 && this.showPredictions).toString(), "aria-controls": "predictions", "aria-autocomplete": "list", "aria-activedescendant": this.showPredictions ? String(this.highlightedPredictionIndex) : undefined, value: this.searchterm, onInput: (event) => {
        var _a;
        event.preventDefault();
        this.showPredictions = true;
        this.highlightedPredictionIndex = -1;
        const value = (_a = getHTMLInputElement(event.target)) === null || _a === void 0 ? void 0 : _a.value;
        if (!isString(value)) {
          this.searchterm = '';
          this.showPredictions = false;
          dealerSearchResultsStore.state.savedDealerCookie = null;
          this.clearSearch.emit();
          return;
        }
        this.searchInput.emit(value);
      }, onKeyDown: (event) => {
        this.onKeyDown(event.key);
      } })), this.predictions.length > 0 && this.showPredictions ? (h("div", { class: "prediction-container" }, h("ul", { id: "predictions", "data-test-id": "dealer-search-autocomplete-predictions", role: "listbox", "aria-label": "List of location predictions" }, this.predictions.map((prediction, index) => (h("li", { key: prediction.id, class: index === this.highlightedPredictionIndex ? 'highlighted-prediction' : '', role: "option", "aria-selected": String(index === this.highlightedPredictionIndex), id: String(index), onClick: () => {
        this.highlightedPredictionIndex = index;
        this.onSubmit();
      }, onKeyDown: (event) => {
        // TODO: does this code ever get executed?
        if (event.key === 'Enter') {
          this.onSubmit();
        }
      } }, h("phn-p-text", { color: "inherit" }, prediction.text))))), h("img", { class: "powered-by-google", src: getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`), alt: "powered by Google" }))) : null));
  }
  get el() { return this; }
  static get watchers() { return {
    "showPredictions": ["watchShowPredictions"],
    "initialValue": ["watchInitialValue"]
  }; }
  static get style() { return autocompleteSearchFieldCss; }
}, [2, "phn-autocomplete-search-field", {
    "placeholder": [1],
    "predictions": [16],
    "initialValue": [1, "initial-value"],
    "errorState": [1, "error-state"],
    "errorMessage": [1, "error-message"],
    "showPredictions": [32],
    "highlightedPredictionIndex": [32],
    "searchterm": [32]
  }, [[9, "click", "clickListener"], [0, "keydown", "keydownListener"]], {
    "showPredictions": ["watchShowPredictions"],
    "initialValue": ["watchInitialValue"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-autocomplete-search-field"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-autocomplete-search-field":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, AutocompleteSearchField);
      }
      break;
  } });
}
defineCustomElement();

export { AutocompleteSearchField as A, defineCustomElement as d };

//# sourceMappingURL=autocomplete-search-field.js.map