import { proxyCustomElement, HTMLElement, createEvent, h, Fragment, Host } from '@stencil/core/internal/client';
import { g as globalDataLayerService, E as EventActions, c as DEALER_SEARCH_DISPLAY_ELEMENT_ID, s as splitLocale } from './global-data-layer-service.js';
import { g as getDealerDetailsRoutingKey } from './routing-key.js';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';
import { o as isDesktop, v as MenuItemVariant, b as isString, w as addQueryParamsToUrl } from './helper.js';
import { c as componentsOnReady, T as Timeout } from './timeout.js';
import { a as analyticsManager } from './analytics-manager.js';
import { n as navContentStore } from './nav-content-store.js';
import { g as getOpeningHours, s as sanitizeDealerHomepage } from './dealer-search-helper.js';
import { f as featureToggles } from './feature-toggles.js';
import { d as defineCustomElement$1 } from './menu-item-card.js';

const dealerDetailsDrawerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-dealer-details-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-dealer-details-drawer{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-dealer-details-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-dealer-details-drawer{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-dealer-details-drawer{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-dealer-details-drawer{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-dealer-details-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-details-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-details-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-details-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-details-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-details-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-details-drawer-h{display:block;margin-top:1.625rem}@media (min-width: 760px){.sc-phn-dealer-details-drawer-h{margin-top:-0.125rem}}@media (min-width: 1300px){.sc-phn-dealer-details-drawer-h{margin-top:-0.1875rem}}@media (min-width: 1920px){.sc-phn-dealer-details-drawer-h{margin-top:-0.4375rem}}.sc-phn-dealer-details-drawer-h .skeleton-headline.sc-phn-dealer-details-drawer{width:auto;height:3.125rem;background:#d8d8db;margin-bottom:1.75rem;border-radius:4px}.sc-phn-dealer-details-drawer-h phn-p-heading.sc-phn-dealer-details-drawer{margin-bottom:1.5rem}.sc-phn-dealer-details-drawer-h phn-menu-item.sc-phn-dealer-details-drawer{margin-top:1.5rem}.sc-phn-dealer-details-drawer-h phn-menu-item.sc-phn-dealer-details-drawer:first-of-type{margin-top:0.875rem}.skeleton.sc-phn-dealer-details-drawer-h{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.skeleton.skeleton-menu-item.sc-phn-dealer-details-drawer-h{width:auto;height:1.25rem;background:#d8d8db;border-radius:4px}";

const DealerDetailsDrawer = /*@__PURE__*/ proxyCustomElement(class DealerDetailsDrawer extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.clickDrawerHeaderBack = createEvent(this, "clickDrawerHeaderBack", 7);
    this.dealerId = undefined;
    this.locale = undefined;
    this.breakpoint = undefined;
    this.errorMessage = '';
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
  }
  componentDidLoad() {
    const dealer = this.getDealer();
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_DETAILS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_DISPLAY_ELEMENT_ID),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer === null || dealer === void 0 ? void 0 : dealer.name
      },
      componentSearch: {
        searchTerm: dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: dealer === null || dealer === void 0 ? void 0 : dealer.name,
        companyId: dealer === null || dealer === void 0 ? void 0 : dealer.porschePartnerNo
      }
    });
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.showSkeleton = false;
  }
  getDealer() {
    const { ppnDealer: dealer } = dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};
    return dealer;
  }
  renderHeading(name) {
    return (h(Fragment, null, this.showSkeleton ? h("div", { class: "skeleton-headline" }) : null, h("phn-p-heading", { style: { display: this.showSkeleton ? 'none' : '' }, tag: "h3", size: "large", "data-test-id": "dealer-headline" }, name)));
  }
  render() {
    const ppnDealer = this.getDealer();
    if (ppnDealer === undefined) {
      return h("div", null, this.errorMessage);
    }
    const language = splitLocale(this.locale).language;
    const { testDrive, finder, bookService } = navContentStore.state.dealer.details;
    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');
    const address = language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;
    const name = language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;
    // postalCode is currently not available in addressLocalized
    const hasAddress = isString(address.street) || isString(ppnDealer.address.postalCode) || isString(address.city);
    const hasPhoneNumber = isString(ppnDealer.contactDetails.phoneNumber);
    const hasEmail = isString(ppnDealer.contactDetails.emailAddress);
    const hasHomepage = isString(ppnDealer.contactDetails.homepage);
    const hasTestdrive = testDrive && isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.text) && isString(testDrive === null || testDrive === void 0 ? void 0 : testDrive.link);
    const hasName = isString(ppnDealer.nameLocalized) || isString(ppnDealer.name);
    const openingHours = getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);
    const hasOpeningHours = openingHours !== '';
    let country = '';
    try {
      country = splitLocale(this.locale).country;
    }
    catch (err) {
      // throw the error away
    }
    const dealerAddress = country === 'JP'
      ? `ã€’${ppnDealer.address.postalCode} ${address.city} ${address.street}`
      : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;
    const customDatalayerProperties = {
      componentSearch: {
        searchTerm: dealerSearchResultsStore.state.searchTerm
      },
      partner: {
        companyName: name,
        companyId: ppnDealer.porschePartnerNo
      }
    };
    return (h(Host, null, hasName && isDesktop(this.breakpoint) ? this.renderHeading(name) : null, hasAddress ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'address'), analyticsId: "mainmenu.finddealer.map", text: dealerAddress, iconLeft: "pin", "data-test-id": "dealer-address", link: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${address.street},${ppnDealer.address.postalCode},${address.city}`)}`, target: "_blank", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'openingHours'), analyticsId: "mainmenu.finddealer.openinghours", text: openingHours, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-opening-hours", iconLeft: "clock" })) : null, hasPhoneNumber ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'number'), analyticsId: "mainmenu.finddealer.phone", text: ppnDealer.contactDetails.phoneNumber, iconLeft: "phone", "data-test-id": "dealer-phonenumber", link: `tel:${ppnDealer.contactDetails.phoneNumber}`, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, hasEmail ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'email'), analyticsId: "mainmenu.finddealer.email", text: ppnDealer.contactDetails.emailAddress, iconLeft: "email", "data-test-id": "dealer-email", link: `mailto:${ppnDealer.contactDetails.emailAddress}`, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, hasHomepage ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, 'homepage'), analyticsId: "mainmenu.finddealer.website", text: ppnDealer.contactDetails.homepage.replace('https://', ''), iconLeft: "globe", "data-test-id": "dealer-homepage", link: sanitizeDealerHomepage(ppnDealer.contactDetails.homepage), target: "_blank", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, finder && isString(country) ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, finder.id), analyticsId: finder.id, text: finder.text, "data-test-id": "dealer-finder-cars", link: addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId }), iconLeft: "car", datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails })) : null, bookService ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, bookService.text), analyticsId: bookService.id, text: bookService.text, link: addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo }), datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-service", iconLeft: 'wrench' })) : null, hasTestdrive ? (h(DealerDetailCard, { showSkeleton: this.showSkeleton, elementId: getDealerDetailsRoutingKey(this.dealerId, testDrive.text), analyticsId: testDrive.id, text: testDrive.text, link: testDrive.link, datalayerEventAction: EventActions.DEALER_CONTACT_CLICK, customDatalayerProperties: customDatalayerProperties, variant: MenuItemVariant.DealerDetails, "data-test-id": "dealer-book-testdrive", iconLeft: 'steering-wheel' })) : null));
  }
  get el() { return this; }
  static get style() { return dealerDetailsDrawerCss; }
}, [2, "phn-dealer-details-drawer", {
    "dealerId": [1, "dealer-id"],
    "locale": [1],
    "breakpoint": [2],
    "errorMessage": [32],
    "showSkeleton": [32]
  }]);
function DealerDetailCard(props) {
  return h("phn-menu-item-card", Object.assign({ tabIndex: 0, class: `${props.showSkeleton ? 'skeleton' : ''}` }, props));
}
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-dealer-details-drawer", "phn-menu-item-card"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-dealer-details-drawer":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DealerDetailsDrawer);
      }
      break;
    case "phn-menu-item-card":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { DealerDetailsDrawer as D, defineCustomElement as d };

//# sourceMappingURL=dealer-details-drawer.js.map