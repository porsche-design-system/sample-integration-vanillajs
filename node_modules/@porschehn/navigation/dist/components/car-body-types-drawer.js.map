{"file":"car-body-types-drawer.js","mappings":"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","names":[],"sources":["src/components/car-body-types-drawer/car-body-types-drawer.scss?tag=phn-car-body-types-drawer&encapsulation=scoped","src/components/car-body-types-drawer/car-body-types-drawer.tsx"],"sourcesContent":["@import '../../scss';\n\n:host {\n  display: block;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n\n  phn-p-headline {\n    font-size: p-px-to-rem(28px);\n  }\n\n  .model-link-content {\n    @include hoverZoom();\n    padding-bottom: 5px;\n  }\n\n  .skeleton-bodytype {\n    height: p-px-to-rem(135px);\n    width: p-px-to-rem(260px);\n    margin: p-px-to-rem(24px) 0 0 0 ;\n    background: $pds-theme-light-contrast-low;\n    border-radius: 4px;\n\n    @include pds-media-query-min('xs') {\n      height: p-px-to-rem(110px);\n    }\n\n    @include pds-media-query-min('s') {\n      height: p-px-to-rem(120px);\n      width: p-px-to-rem(260px);\n    }\n  }\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n    opacity: 60%;\n\n    & .skeleton-headline {\n      width: auto;\n      height: p-px-to-rem(38px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n\n    & .skeleton-link {\n      width: auto;\n      height: p-px-to-rem(48px);\n      margin: p-px-to-rem(16px) 0;\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n\n    & .skeleton-image {\n      width: auto;\n      height: p-px-to-rem(135px);\n      margin: p-px-to-rem(24px) 0;\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n\n      @include pds-media-query-min('xs') {\n        height: p-px-to-rem(145px);\n      }\n\n      @include pds-media-query-min('s') {\n        height: p-px-to-rem(120px);\n      }\n\n      @include pds-media-query-min('m') {\n        height: p-px-to-rem(137px);\n      }\n\n      @include pds-media-query-min('l') {\n        height: p-px-to-rem(133px);\n      }\n\n      @include pds-media-query-min('xxl') {\n        height: p-px-to-rem(145px);\n      }\n    }\n  }\n\n  .links {\n    .link {\n      width: 100%;\n      padding-top: p-px-to-rem(16px);\n    }\n  }\n\n  .series-body-type {\n    text-align: center;\n    padding: p-px-to-rem(2px);\n    margin-top: p-px-to-rem(2px);\n  }\n\n  .further {\n    width: 100%;\n    padding-top: p-px-to-rem(64px);\n  }\n\n  .car-models {\n    phn-p-text {\n      font-size: p-px-to-rem(16px);\n\n      @include pds-media-query-min('xs') {\n        font-size: p-px-to-rem(18px);\n      }\n\n      @include pds-media-query-min('s') {\n        font-size: p-px-to-rem(16px);\n      }\n\n      @include pds-media-query-min('xxl') {\n        font-size: p-px-to-rem(18px);\n      }\n    }\n  }\n}\n","import { breakpoint } from '@porsche-design-system/components-js/styles';\nimport { Component, Element, Fragment, getAssetPath, h, Host, Prop, State, Watch } from '@stencil/core';\nimport { BodyType, Series, TLink } from '../../entities/content';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { ClickElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport { getConfig, getHTMLElement, isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { getCurrentRoute } from '../../services/routing-manager';\n\n@Component({\n  tag: 'phn-car-body-types-drawer',\n  styleUrl: 'car-body-types-drawer.scss',\n  assetsDirs: ['model-assets'],\n  scoped: true\n})\nexport class CarBodyTypeDrawer {\n  @Prop() series!: Series;\n  @Prop() breakpoint!: number;\n\n  @State() seriesLoaded = false;\n  @State() showSkeleton = true;\n\n  @Element() el!: HTMLPhnCarBodyTypesDrawerElement;\n\n  @Watch('series')\n  seriesWatcher(): void {\n    this.seriesLoaded = false;\n    this.showSkeleton = true;\n  }\n\n  private bodyTypesImagesLoaded = new Set<string>();\n  private bodyTypesImagesNotLoaded = new Set<string>();\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.showSkeleton = !this.seriesLoaded;\n  }\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n  }\n\n  componentDidRender(): void {\n    this.showSkeleton = !this.seriesLoaded;\n  }\n\n  private handleImageLoad(seriesId: string) {\n    this.bodyTypesImagesLoaded.add(seriesId);\n\n    if (this.series.bodyTypes.every(({ id }) => this.bodyTypesImagesLoaded.has(id))) {\n      this.seriesLoaded = true;\n    }\n  }\n\n  private handleImageLoadError(seriesId: string) {\n    this.handleImageLoad(seriesId);\n    this.bodyTypesImagesNotLoaded.add(seriesId);\n  }\n\n  private sendMetaFunctionDataLayerEvent(link: TLink): void {\n    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CTA_CLICK, {\n      componentClick: {\n        clickElementId: link.id,\n        clickElementName: link.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: link.link\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          getCurrentRoute(),\n          ElementTypes.bodyTypeButton\n        ),\n        displayElementName: link.text\n      },\n      car: {\n        modelRangeName: link.id.split('.')[1]\n      }\n    });\n  }\n\n  private sendBodyTypeClickDataLayerEvent(bodyType: BodyType, tagName: string): void {\n    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {\n      componentClick: {\n        clickElementId: bodyType.id,\n        clickElementName: bodyType.name,\n        clickElementType: tagName === 'IMG' ? ClickElementTypes.Image : ClickElementTypes.Link,\n        targetUrl: bodyType.link\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          getCurrentRoute(),\n          ElementTypes.bodyTypeButton\n        ),\n        displayElementName: bodyType.name\n      },\n      car: {\n        modelRangeName: bodyType.id.split('.')[1],\n        modelName: analyticsManager.getModelName(bodyType)\n      }\n    });\n  }\n\n  private sendNavigationDataLayerEvent(): void {\n    globalDataLayerService.pushDataLayerEvent(EventActions.MODEL_CLICK, {\n      componentClick: {\n        clickElementId: this.series.all.id,\n        clickElementName: this.series.all.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: this.series.all.link\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          getCurrentRoute(),\n          ElementTypes.bodyTypeButton\n        ),\n        displayElementName: this.series.all.text\n      }\n    });\n  }\n\n  private getImageSize(currentBreakpoint: number): number {\n    switch (currentBreakpoint) {\n      case breakpoint.xxl:\n        return 1920;\n      case breakpoint.xl:\n      case breakpoint.l:\n        return 1360;\n      case breakpoint.m:\n        return 1024;\n      case breakpoint.s:\n        return 760;\n      case breakpoint.xs:\n      case breakpoint.base:\n      default:\n        return 320;\n    }\n  }\n\n  private getImageSource(image: string): string {\n    const assetPath = getAssetPath(`${getConfig(navStateStore.state.env).ASSETS_URL}/model-assets`);\n    const imageSize = this.getImageSize(this.breakpoint);\n    const imagePath = `${assetPath}/${imageSize}`;\n\n    return `${imagePath}/${image}.webp, ${imagePath}/${image}@2x.webp 2x`;\n  }\n\n  render(): HTMLPhnCarBodyTypesDrawerElement {\n    return (\n      <Host class={`${this.showSkeleton ? 'skeleton' : ''}`}>\n        <Fragment>\n          <ul class=\"links\">\n            {this.series.links.map((link) => (\n              <Fragment>\n                {this.showSkeleton ? <div class=\"skeleton-link\" /> : null}\n                <phn-p-link\n                  key={link.id}\n                  variant=\"tertiary\"\n                  href={link.link}\n                  icon={link.icon}\n                  size=\"inherit\"\n                  class=\"link\"\n                  style={{ display: this.showSkeleton ? 'none' : '' }}\n                  onClick={() => {\n                    this.sendMetaFunctionDataLayerEvent(link);\n                  }}\n                  role=\"listitem\"\n                >\n                  {link.text}\n                </phn-p-link>\n              </Fragment>\n            ))}\n          </ul>\n          <ul>\n            {this.series.bodyTypes.map((bodyType) => {\n              return (\n                <Fragment>\n                  {this.showSkeleton ? (\n                    <Fragment>\n                      <div class=\"skeleton-image\" />\n                    </Fragment>\n                  ) : null}\n                  <div\n                    class=\"series-body-type\"\n                    key={bodyType.id}\n                    style={{ display: this.showSkeleton ? 'none' : '' }}\n                    role=\"listitem\"\n                  >\n                    <phn-p-link-pure\n                      icon=\"none\"\n                      onClick={(e: MouseEvent) => {\n                        const clickedElement = getHTMLElement(e.target);\n                        if (clickedElement !== null) {\n                          this.sendBodyTypeClickDataLayerEvent(bodyType, clickedElement.tagName);\n                        }\n                      }}\n                    >\n                      <a href={bodyType.link}>\n                        {this.bodyTypesImagesNotLoaded.has(bodyType.id) ? (\n                          <Fragment>\n                            <div class=\"skeleton-bodytype\" />\n                          </Fragment>\n                        ) : (\n                          <div class=\"model-link-content\">\n                            <img\n                              srcSet={this.getImageSource(bodyType.image)}\n                              alt={`${bodyType.name} Sideshot`}\n                              onLoad={() => this.handleImageLoad(bodyType.id)}\n                              onError={() => this.handleImageLoadError(bodyType.id)}\n                            />\n\n                            <phn-p-text size=\"inherit\" color=\"inherit\" align=\"center\">\n                              {bodyType.name}\n                            </phn-p-text>\n\n                            {isString(bodyType.description) ? (\n                              <phn-p-text className=\"model-description\" size=\"x-small\" align=\"center\">\n                                {bodyType.description}\n                              </phn-p-text>\n                            ) : null}\n                          </div>\n                        )}\n                      </a>\n                    </phn-p-link-pure>\n                  </div>\n                </Fragment>\n              );\n            })}\n          </ul>\n          {this.showSkeleton ? null : (\n            <phn-p-link\n              variant=\"tertiary\"\n              href={this.series.all.link}\n              size=\"inherit\"\n              class=\"further\"\n              data-test-id=\"car-body-types-drawer-further-links-button\"\n              onClick={() => {\n                this.sendNavigationDataLayerEvent();\n              }}\n            >\n              {this.series.all.text}\n            </phn-p-link>\n          )}\n        </Fragment>\n      </Host>\n    );\n  }\n}\n"],"version":3}