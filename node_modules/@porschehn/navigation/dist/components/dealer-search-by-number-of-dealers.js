import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { s as splitLocale, g as globalDataLayerService, E as EventActions, a as ElementTypes, d as DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER } from './global-data-layer-service.js';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';
import { n as navStateStore } from './nav-state-store.js';
import { g as getAllPPNDealersForMarket } from './dealer-service.js';
import { u as DEALER_MARKET_SEARCH_TERM, a as isString, e as getConfig } from './helper.js';
import { l as logger } from './feature-toggles.js';
import { n as navContentStore } from './nav-content-store.js';
import { g as getErrorMessage } from './navi-error.js';
import { E as ErrorMessage } from './error-message.js';
import { c as componentsOnReady, T as Timeout } from './timeout.js';
import { a as analyticsManager } from './analytics-manager.js';

const dealerSearchByNumberOfDealersCss = ".sc-phn-dealer-search-by-number-of-dealers-h{display:block}.sc-phn-dealer-search-by-number-of-dealers-h .spinner.sc-phn-dealer-search-by-number-of-dealers{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}";

const DealerSearchByNumberOfDealers = /*@__PURE__*/ proxyCustomElement(class DealerSearchByNumberOfDealers extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.removeSkeletonOnDealerSearchForm = createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.isLoading = false;
    this.formErrorMessage = null;
    this.locale = undefined;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad().then(() => {
      const { dealer } = navContentStore.state;
      if (dealer.numberOfDealers <= 5) {
        this.fetchAllDealersForMarket();
      }
    });
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  async fetchAllDealersForMarket() {
    const { error: errorContent } = navContentStore.state;
    try {
      this.isLoading = true;
      const { country } = splitLocale(this.locale);
      const { env } = navStateStore.state;
      const ppnDealerSearchResults = await getAllPPNDealersForMarket(env, getConfig(env).DEALER_API_URL_ALL_DEALERS, country);
      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);
      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce((dealers, dealerSearchResult) => (Object.assign(Object.assign({}, dealers), { [dealerSearchResult.ppnDealer.id]: dealerSearchResult })), dealerSearchResultsStore.state.ppnDealers);
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.formErrorMessage = getErrorMessage(errorContent, err);
    }
    finally {
      this.isLoading = false;
      this.emitResultsLoadEvent();
    }
  }
  emitPageLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  emitResultsLoadEvent() {
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: DEALER_MARKET_SEARCH_TERM,
        numberOfResults: dealer.numberOfDealers
      }
    });
  }
  reset() {
    this.formErrorMessage = null;
    this.isLoading = false;
    dealerSearchResultsStore.state.results = null;
  }
  render() {
    if (this.isLoading) {
      return (h("div", { class: "spinner" }, h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } })));
    }
    if (isString(this.formErrorMessage))
      return h(ErrorMessage, { errorMessage: this.formErrorMessage, onDismiss: () => this.reset() });
  }
  get el() { return this; }
  static get style() { return dealerSearchByNumberOfDealersCss; }
}, [2, "phn-dealer-search-by-number-of-dealers", {
    "locale": [1],
    "isLoading": [32],
    "formErrorMessage": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-dealer-search-by-number-of-dealers"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-dealer-search-by-number-of-dealers":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DealerSearchByNumberOfDealers);
      }
      break;
  } });
}
defineCustomElement();

export { DealerSearchByNumberOfDealers as D, defineCustomElement as d };

//# sourceMappingURL=dealer-search-by-number-of-dealers.js.map