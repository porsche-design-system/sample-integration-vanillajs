import { w as windowService } from './window-service.js';

async function componentsOnReady(parent, timeout, ...selectors) {
  if (parent === null) {
    return null;
  }
  const waitForElement = async (selector) => {
    const el = await windowService.waitForElement(parent, selector);
    if (typeof (el === null || el === void 0 ? void 0 : el.componentOnReady) === 'function') {
      await el.componentOnReady();
    }
    return el;
  };
  const waitForElements = selectors.length > 0 ? selectors.map(waitForElement) : [waitForElement()];
  const timer = new Promise((resolve) => timeout.set(async () => resolve(null)));
  return Promise.race([Promise.all(waitForElements), timer]);
}

class Timeout {
  constructor(delay) {
    this.delay = delay;
    this.timer = null;
  }
  set(cb) {
    this.cancel();
    this.timer = setTimeout(async () => {
      await cb();
      this.cancel();
    }, this.delay);
  }
  cancel() {
    if (this.timer !== null) {
      clearTimeout(this.timer);
      if (typeof this.timer.unref === 'function') {
        this.timer.unref();
      }
      this.timer = null;
    }
  }
}

export { Timeout as T, componentsOnReady as c };

//# sourceMappingURL=timeout.js.map