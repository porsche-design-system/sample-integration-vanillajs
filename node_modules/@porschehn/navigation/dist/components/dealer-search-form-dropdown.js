import { proxyCustomElement, HTMLElement, createEvent, h, Host, Fragment } from '@stencil/core/internal/client';
import { a as getPPNDealersByRegion } from './dealer-service.js';
import { s as splitLocale, g as globalDataLayerService, E as EventActions, a as ElementTypes, d as DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER } from './global-data-layer-service.js';
import { d as dealerSearchResultsStore } from './dealer-search-results-store.js';
import { b as getErrorMessage } from './navi-error.js';
import { l as logger } from './feature-toggles.js';
import { n as navContentStore } from './nav-content-store.js';
import { E as ErrorMessage } from './error-message.js';
import { b as isString, G as GEOLOCATION_BUTTON_SEARCH_TERM } from './helper.js';
import { c as componentsOnReady, T as Timeout } from './timeout.js';
import { a as analyticsManager } from './analytics-manager.js';

const dealerSearchFormDropdownCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-dealer-search-form-dropdown{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-dealer-search-form-dropdown{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-dealer-search-form-dropdown{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-dealer-search-form-dropdown{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-dealer-search-form-dropdown{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-dealer-search-form-dropdown{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-dealer-search-form-dropdown{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-dealer-search-form-dropdown{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-dealer-search-form-dropdown{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-dealer-search-form-dropdown{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-dealer-search-form-dropdown-h{display:block}.sc-phn-dealer-search-form-dropdown-h .spinner.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;width:100%;margin-top:1.5rem}.sc-phn-dealer-search-form-dropdown-h .city-select-form-field.sc-phn-dealer-search-form-dropdown{padding-top:1.5rem}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;border:2px solid rgb(107, 109, 112);border-radius:5px;-webkit-transition:background-color 0.24s ease;transition:background-color 0.24s ease;margin:0;min-height:3.375rem}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown phn-p-text.sc-phn-dealer-search-form-dropdown{padding-left:19px}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown phn-p-icon.sc-phn-dealer-search-form-dropdown{margin-right:1rem;padding-top:-8px;outline:0}.sc-phn-dealer-search-form-dropdown-h .title-container.sc-phn-dealer-search-form-dropdown div.text-limit.sc-phn-dealer-search-form-dropdown{width:80%}";

const DealerSearchFormDropdown = /*@__PURE__*/ proxyCustomElement(class DealerSearchFormDropdown extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.dealerSearchFormEvent = createEvent(this, "dealerSearchFormEvent", 7);
    this.clearSearchEvent = createEvent(this, "clearSearchEvent", 7);
    this.removeSkeletonOnDealerSearchForm = createEvent(this, "removeSkeletonOnDealerSearchForm", 7);
    this.locale = '';
    this.breakpoint = undefined;
    this.isLoading = false;
    this.errorMessage = null;
    this.dealersOfRegion = { regions: [] };
    this.cities = [];
    this.selectedProvince = '';
    this.selectedCity = '';
    this.showSkeleton = true;
  }
  componentWillLoad() {
    this.waitForComponentsToLoad();
    this.getDealersByRegion();
  }
  componentDidLoad() {
    this.emitPageLoadEvent();
  }
  async waitForComponentsToLoad() {
    await componentsOnReady(this.el, new Timeout(5000));
    this.removeSkeletonOnDealerSearchForm.emit();
  }
  loadedAutoCompleteListener(_event) {
    this.showSkeleton = false;
  }
  async getDealersByRegion() {
    const { error: errorContent } = navContentStore.state;
    const { country } = splitLocale(this.locale);
    try {
      this.isLoading = true;
      this.dealersOfRegion = await getPPNDealersByRegion(country);
    }
    catch (err) {
      logger.error('FETCH_DEALERS', err);
      this.errorMessage = getErrorMessage(errorContent, err);
    }
    finally {
      this.isLoading = false;
      this.dealerSearchFormEvent.emit();
      this.emitResultsLoadEvent();
    }
  }
  onCitySelect(event) {
    var _a;
    /* istanbul ignore if */
    if (event.target === null) {
      return;
    }
    const selectedCity = event.target.value;
    this.selectedCity = selectedCity;
    dealerSearchResultsStore.state.ppnDealers =
      ((_a = this.cities.find((city) => {
        return [city.cityName, city.cityNameLocalized].includes(selectedCity);
      })) === null || _a === void 0 ? void 0 : _a.dealers) || {};
    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);
    dealerSearchResultsStore.state.searchTerm = `${this.selectedProvince}, ${this.selectedCity}`;
  }
  onProvinceSelect(event) {
    /* istanbul ignore if */
    if (event.target === null) {
      return;
    }
    const selectedProvince = event.target.value;
    this.cities = this.getCitiesByGivenRegionName(selectedProvince);
    this.selectedProvince = selectedProvince;
  }
  getCitiesByGivenRegionName(province) {
    const regions = this.dealersOfRegion.regions;
    const selectedRegion = regions.find(({ regionName, regionNameLocalized }) => [regionName, regionNameLocalized].includes(province));
    return (selectedRegion === null || selectedRegion === void 0 ? void 0 : selectedRegion.cities) || [];
  }
  emitPageLoadEvent() {
    const { results, searchTerm } = dealerSearchResultsStore.state;
    const { dealer } = navContentStore.state;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),
        displayElementName: dealer.text
      },
      componentSearch: {
        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,
        numberOfResults: (results === null || results === void 0 ? void 0 : results.length) || 0
      }
    });
  }
  emitResultsLoadEvent() {
    const { results, searchTerm } = dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.state;
    const numberOfResults = (results === null || results === void 0 ? void 0 : results.length) || 0;
    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {
      componentDisplay: {
        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER),
        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),
        displayElementName: dealerContent.text
      },
      componentSearch: {
        searchTerm: searchTerm,
        numberOfResults: numberOfResults
      }
    });
  }
  reset() {
    this.errorMessage = null;
    this.isLoading = false;
    this.selectedProvince = '';
    this.selectedCity = '';
    dealerSearchResultsStore.state.results = null;
    dealerSearchResultsStore.state.savedDealerCookie = null;
    this.clearSearchEvent.emit();
  }
  render() {
    const { results } = dealerSearchResultsStore.state;
    const { dealer: dealerContent } = navContentStore.state;
    const searchText = dealerSearchResultsStore.state.searchTerm;
    if (this.isLoading) {
      return (h("div", { class: "spinner" }, h("phn-p-spinner", { size: "medium", aria: { 'aria-label': 'Loading page content' } })));
    }
    return (h(Host, null, results && results.length > 0 ? (h("form", { class: "form-container", onSubmit: (event) => {
        event.preventDefault();
      } }, h("div", null, h("div", { class: "phn-flex-row phn-align-center phn-justify-between title-container" }, h("div", { class: "text-limit" }, h("phn-p-text", { weight: "regular", size: "small", tag: "div", ellipsis: "true", color: "contrast-medium", "data-test-id": "dealer-search-form-input" }, searchText)), h("phn-p-icon", { name: "close", class: "close-icon", style: { display: this.showSkeleton ? 'none' : '', cursor: 'pointer' }, onClick: (event) => {
        event.preventDefault();
        this.reset();
      } }))))) : (h(Fragment, null, h("phn-p-select-wrapper", { filter: true, label: dealerContent.search.dropdown.province, required: true, style: { display: this.showSkeleton ? 'none' : '' } }, h("select", { name: "dealers-province", onChange: (event) => this.onProvinceSelect(event), style: { display: this.showSkeleton ? 'none' : '' } }, h("option", { hidden: true, selected: true }, dealerContent.search.dropdown.selectAProvince), this.dealersOfRegion.regions.map((region) => {
      const province = splitLocale(this.locale).language === 'en' || region.regionNameLocalized === null
        ? region.regionName
        : region.regionNameLocalized;
      return h("option", { value: province }, province);
    }))), h("phn-p-select-wrapper", { style: { display: this.showSkeleton ? 'none' : '' }, class: "city-select-form-field", filter: "true", label: dealerContent.search.dropdown.city, required: true }, h("select", { disabled: !isString(this.selectedProvince), style: { display: this.showSkeleton ? 'none' : '' }, name: "dealers-cities", onChange: (event) => {
        this.onCitySelect(event);
      } }, h("option", { hidden: true }, dealerContent.search.dropdown.selectACity), this.cities.map((city) => (h("option", null, splitLocale(this.locale).language === 'en' || city.cityNameLocalized === null
      ? city.cityName
      : city.cityNameLocalized))))), isString(this.errorMessage) ? (h(ErrorMessage, { errorMessage: this.errorMessage, onDismiss: () => this.reset() })) : null))));
  }
  get el() { return this; }
  static get style() { return dealerSearchFormDropdownCss; }
}, [2, "phn-dealer-search-form-dropdown", {
    "locale": [1],
    "breakpoint": [2],
    "isLoading": [32],
    "errorMessage": [32],
    "dealersOfRegion": [32],
    "cities": [32],
    "selectedProvince": [32],
    "selectedCity": [32],
    "showSkeleton": [32]
  }, [[0, "removeSkeletonOnDealerSearchForm", "loadedAutoCompleteListener"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-dealer-search-form-dropdown"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-dealer-search-form-dropdown":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DealerSearchFormDropdown);
      }
      break;
  } });
}
defineCustomElement();

export { DealerSearchFormDropdown as D, defineCustomElement as d };

//# sourceMappingURL=dealer-search-form-dropdown.js.map