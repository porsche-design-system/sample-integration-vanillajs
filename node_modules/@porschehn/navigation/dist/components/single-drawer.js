import { h, Fragment, proxyCustomElement, HTMLElement, createEvent, Host } from '@stencil/core/internal/client';
import { R as RoutingKeys, h as RoutingKeyPointers } from './routing-key.js';
import { a as animationManager, m as makeSequence } from './animation-manager.js';
import { b as DisplayElementTypes, g as globalDataLayerService, E as EventActions, a as ElementTypes } from './global-data-layer-service.js';
import { w as focusOnElement, g as getHTMLElement, a as isString, F as FOCUSABLE_ELEMENTS_SELECTOR, D as DrawerStatusValues, i as isPromise } from './helper.js';
import { T as Timeout } from './timeout.js';
import { g as getBackButtonText, a as analyticsManager } from './analytics-manager.js';
import { n as navContentStore } from './nav-content-store.js';
import { A as AnimationSequences, g as getAllFocusableElements } from './helper2.js';
import { d as defineCustomElement$k } from './autocomplete-search-field.js';
import { d as defineCustomElement$j } from './back-button.js';
import { d as defineCustomElement$i } from './car-body-types-drawer.js';
import { d as defineCustomElement$h } from './dealer-details-drawer.js';
import { d as defineCustomElement$g } from './dealer-search-by-number-of-dealers.js';
import { d as defineCustomElement$f } from './dealer-search-form.js';
import { d as defineCustomElement$e } from './dealer-search-form-dropdown.js';
import { d as defineCustomElement$d } from './dealer-search-form-geolocation.js';
import { d as defineCustomElement$c } from './dealer-search-results.js';
import { d as defineCustomElement$b } from './drawer-header.js';
import { d as defineCustomElement$a } from './heading.js';
import { d as defineCustomElement$9 } from './level-1.js';
import { d as defineCustomElement$8 } from './menu.js';
import { d as defineCustomElement$7 } from './menu-item.js';
import { d as defineCustomElement$6 } from './menu-item-card.js';
import { d as defineCustomElement$5 } from './models.js';
import { d as defineCustomElement$4 } from './myporsche-drawer.js';
import { d as defineCustomElement$3 } from './myporsche-login.js';
import { d as defineCustomElement$2 } from './router.js';
import { d as defineCustomElement$1 } from './signature-heading.js';

const registerOpenSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer',
        animation: {
          className: 'slide-in-from-left',
          cleanUpAfterAnimation: (element) => {
            element.style.left = '0px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-in-animation',
          cleanUpAfterAnimation: (element) => {
            element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
            element.style.opacity = '1';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.OPEN_SINGLE_DRAWER, makeSequence(sequence));
};
const registerCloseSingleDrawerAnimation = ({ onAnimationStarts, onAnimationEnds }) => {
  const sequence = [
    [
      {
        onStart: onAnimationStarts,
        elementSelector: 'phn-single-drawer',
        animation: {
          className: 'slide-out-to-left',
          cleanUpBeforeAnimation: (element) => {
            element.style.left = '';
          },
          cleanUpAfterAnimation: (element) => {
            element.style.left = '-1000px';
          }
        }
      },
      {
        elementSelector: 'phn-backdrop',
        animation: {
          className: 'fade-out-animation',
          cleanUpBeforeAnimation: (element) => {
            element.style.backgroundColor = '';
            element.style.opacity = '';
          }
        },
        onEnd: onAnimationEnds
      }
    ]
  ];
  animationManager.register(AnimationSequences.CLOSE_SINGLE_DRAWER, makeSequence(sequence));
};
const registerTransitionNextLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.register(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          className: 'slide-in-from-right-fixed'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const registerTransitionPreviousLevelSingleDrawerAnimation = ({ onAnimationEnds }) => {
  animationManager.register(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER, makeSequence([
    [
      {
        elementSelector: 'phn-single-drawer .drawer.animating',
        animation: {
          className: 'slide-out-to-right-fixed'
        },
        onEnd: onAnimationEnds
      }
    ]
  ]));
};
const isPlayingSingleDrawerAnimation = () => {
  try {
    const singleDrawerAnimationSequences = [
      AnimationSequences.OPEN_SINGLE_DRAWER,
      AnimationSequences.CLOSE_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,
      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER
    ];
    return singleDrawerAnimationSequences.some((sequence) => {
      try {
        return animationManager.isPlaying(sequence);
      }
      catch (_a) {
        return false;
      }
    });
  }
  catch (e) {
    return false;
  }
};

function DrawerContent({ routingKey, previousRoutingKey, breakpoint, locale, showBackButton, receivedContent }) {
  const { menu } = navContentStore.state;
  const backButtonText = getBackButtonText(navContentStore.state, previousRoutingKey !== null && previousRoutingKey !== void 0 ? previousRoutingKey : '') || menu.text;
  return (h(Fragment, null,
    h("div", { class: "bottom-gradient" }),
    h("div", { class: "drawer-content" },
      h("phn-drawer-header", { showBackButton: showBackButton, backButtonAnalyticsId: menu.id, backButtonText: backButtonText, activeRoutingKey: routingKey, breakpoint: breakpoint, receivedContent: receivedContent, locale: locale }),
      h("phn-router", { activeRoutingKey: routingKey, breakpoint: breakpoint, locale: locale, receivedContent: receivedContent }))));
}

const singleDrawerCss = "@-webkit-keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@keyframes transition-forward-in-animation{from{left:150%}to{left:0%}}@-webkit-keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@keyframes transition-backward-in-animation{from{left:-150%}to{left:0%}}@-webkit-keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@keyframes single-drawer-transition-forward-in-animation{from{left:100%}to{left:0%}}@-webkit-keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@keyframes fade-in-animation{from{opacity:0;background-color:rgba(0, 0, 0, 0)}to{opacity:1;background-color:rgba(0, 0, 0, 0.6)}}@-webkit-keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@keyframes slide-in-from-left-absolute{from{left:-1000px}to{left:0px}}@-webkit-keyframes slideDown{from{max-height:0}to{max-height:1000px}}@keyframes slideDown{from{max-height:0}to{max-height:1000px}}@-webkit-keyframes slideUp{from{max-height:1000px}to{max-height:0}}@keyframes slideUp{from{max-height:1000px}to{max-height:0}}@-webkit-keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@keyframes slideLeft{from{max-width:0}to{max-width:1000px}}@-webkit-keyframes slideRight{from{max-width:1000px}to{max-width:0}}@keyframes slideRight{from{max-width:1000px}to{max-width:0}}@-webkit-keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@keyframes darken{from{background-color:rgba(0, 0, 0, 0)}to{background-color:rgba(0, 0, 0, 0.8)}}@-webkit-keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@keyframes lighten{from{background-color:rgba(0, 0, 0, 0.8)}to{background-color:rgba(0, 0, 0, 0)}}@-webkit-keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@keyframes fadeInFromBottom{0%{opacity:0;top:36px}100%{opacity:1;top:0px}}@-webkit-keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@keyframes fadeOutToTop{0%{opacity:1;bottom:0px}100%{opacity:0;bottom:16px}}@-webkit-keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@keyframes slideLeftDoubleDrawer{from{right:-1000px}to{right:0px}}@-webkit-keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@keyframes slideRightDoubleDrawer{from{right:0px}to{right:-1000px}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.transition-forward-animation-out.sc-phn-single-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:-150% !important}.transition-forward-animation-in.sc-phn-single-drawer{position:relative;-webkit-animation:transition-forward-in-animation 250ms;animation:transition-forward-in-animation 250ms}.transition-backward-animation-out.sc-phn-single-drawer{-webkit-transition:left 250ms;transition:left 250ms;position:relative !important;left:150% !important}.transition-backward-animation-in.sc-phn-single-drawer{position:relative !important;-webkit-animation:transition-backward-in-animation 250ms;animation:transition-backward-in-animation 250ms}.slide-out-to-right-fixed.sc-phn-single-drawer{-webkit-transition:left 400ms;transition:left 400ms;position:fixed;left:100% !important}.slide-in-from-right-fixed.sc-phn-single-drawer{position:fixed;-webkit-animation:single-drawer-transition-forward-in-animation 400ms;animation:single-drawer-transition-forward-in-animation 400ms}.phn-flex-col.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.phn-flex-row.sc-phn-single-drawer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}.phn-align-center.sc-phn-single-drawer{-ms-flex-align:center;align-items:center}.phn-justify-around.sc-phn-single-drawer{-ms-flex-pack:distribute;justify-content:space-around}.phn-justify-between.sc-phn-single-drawer{-ms-flex-pack:justify;justify-content:space-between}.phn-flex-wrap.sc-phn-single-drawer{-ms-flex-wrap:wrap;flex-wrap:wrap}.sc-phn-single-drawer-h{display:block;position:fixed;top:0;left:-1000px;height:100vh;width:100vw;z-index:301}.slide-in-from-left.sc-phn-single-drawer-h{position:absolute;-webkit-animation:slide-in-from-left-absolute 600ms;animation:slide-in-from-left-absolute 600ms}.slide-out-to-left.sc-phn-single-drawer-h{position:absolute;animation:slide-in-from-left-absolute 600ms reverse}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer{z-index:301;background-color:#fff;position:absolute;left:0}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{overflow-y:auto;height:100vh;width:100vw;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 1.6875rem 6.25rem 1.6875rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.1875rem 6.25rem 2.1875rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 3.375rem 6.25rem 3.375rem}}@media (min-width: 1000px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer{padding:0 2.25rem 6.25rem 2.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:1.125rem;margin-bottom:1.9375rem}@media (min-width: 480px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-top:2rem;margin-bottom:2.3125rem}}@media (min-width: 760px){.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-drawer-header.sc-phn-single-drawer{margin-bottom:1.25rem}}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .drawer-content.sc-phn-single-drawer phn-router.sc-phn-single-drawer{padding-bottom:4rem}.sc-phn-single-drawer-h .drawer.sc-phn-single-drawer .bottom-gradient.sc-phn-single-drawer{height:10rem;background:-webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(rgb(255, 255, 255)));background:linear-gradient(to bottom, rgba(255, 255, 255, 0), rgb(255, 255, 255));opacity:1;position:absolute;width:100%;bottom:0;margin-left:-1.5rem;pointer-events:none;margin-left:0;z-index:1}";

const SingleDrawer = /*@__PURE__*/ proxyCustomElement(class SingleDrawer extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.drawerClosed = createEvent(this, "drawerClosed", 7);
    this.drawerChanged = createEvent(this, "drawerChanged", 7);
    this.drawerStartsClosing = createEvent(this, "drawerStartsClosing", 7);
    this.backdropClosed = createEvent(this, "backdropClosed", 7);
    this.phnDrawerStatus = createEvent(this, "phnDrawerStatus", 7);
    this.focusTimeout = new Timeout(0);
    this.operationPipeline = [];
    this.breakpoint = undefined;
    this.locale = undefined;
    this.usingKeyboard = false;
    this.routingKeyHistory = undefined;
    this.routingKeyPointer = undefined;
    this.receivedContent = false;
    this.animatingPointer = -1;
  }
  handleKeyDown(e) {
    if (e.key !== 'Tab') {
      return;
    }
    const targetElement = getHTMLElement(e.target);
    if (targetElement === null) {
      return;
    }
    let focusableDrawerElements = getAllFocusableElements(this.el.querySelector('.active'));
    if (focusableDrawerElements.length === 0) {
      return;
    }
    const activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    if (activeRoutingKey.startsWith(RoutingKeys.DEALER_SEARCH)) {
      focusableDrawerElements = focusableDrawerElements.filter((element) => element.nodeName !== 'BUTTON' && element.nodeName !== 'A');
    }
    const firstFocusableDrawerElement = focusableDrawerElements[0];
    const lastFocusableDrawerElement = focusableDrawerElements[focusableDrawerElements.length - 1];
    if (targetElement === firstFocusableDrawerElement && e.shiftKey) {
      e.preventDefault();
      if (lastFocusableDrawerElement !== null) {
        focusOnElement(lastFocusableDrawerElement);
      }
      return;
    }
    if (targetElement === lastFocusableDrawerElement && !e.shiftKey) {
      e.preventDefault();
      if (firstFocusableDrawerElement !== null) {
        focusOnElement(firstFocusableDrawerElement);
      }
      return;
    }
  }
  handleMobileMenuItemClick(e) {
    if (isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
    this.animatingPointer = this.routingKeyPointer;
  }
  handleClickDrawerHeaderClose(e) {
    if (isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
  }
  handleClickDrawerHeaderBack(e) {
    if (isPlayingSingleDrawerAnimation()) {
      e.stopPropagation();
      return;
    }
    this.animatingPointer = this.routingKeyPointer;
  }
  onTransitionEnd() {
    const focussedElementId = this.animatingPointer > this.routingKeyPointer ? this.routingKeyHistory[this.animatingPointer] : '';
    this.animatingPointer = this.routingKeyPointer;
    const isNavigatingBackwards = this.routingKeyPointer < this.routingKeyHistory.length - 1;
    this.drawerChanged.emit(isNavigatingBackwards);
    // Focus needs to happen after rerender, so wait for next tick
    this.focusTimeout.set(async () => {
      this.focusOnActiveDrawer(focussedElementId);
    });
    this.sendDataLayerEvent();
  }
  componentWillLoad() {
    registerOpenSingleDrawerAnimation({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startOpening });
      },
      onAnimationEnds: () => {
        this.onTransitionEnd();
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishOpening });
      }
    });
    registerCloseSingleDrawerAnimation({
      onAnimationStarts: () => {
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.startClosing });
      },
      onAnimationEnds: () => {
        this.backdropClosed.emit();
        this.phnDrawerStatus.emit({ status: DrawerStatusValues.finishClosing });
      }
    });
    registerTransitionNextLevelSingleDrawerAnimation({
      onAnimationEnds: () => this.onTransitionEnd()
    });
    registerTransitionPreviousLevelSingleDrawerAnimation({ onAnimationEnds: () => this.onTransitionEnd() });
  }
  focusOnActiveDrawer(focussedElementId) {
    const autoFocusElement = getHTMLElement(this.el.querySelector('.active .autofocus'));
    if (autoFocusElement !== null) {
      focusOnElement(autoFocusElement);
      return;
    }
    if (this.usingKeyboard) {
      let focussableElement = null;
      if (isString(focussedElementId)) {
        focussableElement = getHTMLElement(this.el.querySelector(`.active [data-id="${focussedElementId}"]`));
      }
      if (focussableElement === null) {
        focussableElement = getHTMLElement(this.el.querySelector(`.active ${FOCUSABLE_ELEMENTS_SELECTOR}`));
      }
      if (focussableElement !== null) {
        focusOnElement(focussableElement);
      }
    }
    else {
      //Todo: Why first-focus class? We have it nowhere
      const firstFocus = getHTMLElement(this.el.querySelector('.first-focus'));
      if (firstFocus !== null) {
        focusOnElement(firstFocus);
      }
    }
  }
  sendDataLayerEvent() {
    analyticsManager.setDrawerType(DisplayElementTypes.SingleDrawer);
    const activeRoutingKey = this.routingKeyHistory[this.routingKeyPointer];
    globalDataLayerService.pushDataLayerEvent(EventActions.DRAWER_LOAD, {
      componentDisplay: {
        displayElementType: analyticsManager.calculateDisplayElementType(activeRoutingKey, ElementTypes.singleDrawer),
        displayElementId: analyticsManager.calculateDisplayElementId(),
        displayElementName: 'Single Drawer'
      }
    });
  }
  disconnectedCallback() {
    this.focusTimeout.cancel();
  }
  async componentDidRender() {
    const promises = [];
    for (const operation of this.operationPipeline) {
      const maybePromise = operation();
      if (isPromise(maybePromise)) {
        promises.push(maybePromise);
      }
    }
    await Promise.all(promises);
    this.operationPipeline.splice(0, this.operationPipeline.length);
  }
  render() {
    var _a, _b;
    const isAnimatingForward = this.routingKeyPointer > this.animatingPointer;
    const isAnimatingBackward = this.routingKeyPointer < this.animatingPointer;
    let topDrawerContentPointer = -1;
    let bottomDrawerContentPointer = this.routingKeyPointer;
    if (isAnimatingForward && this.animatingPointer !== RoutingKeyPointers.LEVEL_ZERO) {
      topDrawerContentPointer = this.routingKeyPointer;
      bottomDrawerContentPointer = this.animatingPointer;
      this.operationPipeline.push(async () => {
        animationManager.play(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);
      });
    }
    else if (isAnimatingBackward) {
      topDrawerContentPointer = this.animatingPointer;
      if (bottomDrawerContentPointer !== RoutingKeyPointers.LEVEL_ZERO) {
        this.operationPipeline.push(async () => {
          animationManager.play(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);
        });
      }
    }
    const animatingRoutingKey = (_a = this.routingKeyHistory[topDrawerContentPointer]) !== null && _a !== void 0 ? _a : '';
    const routingKey = (_b = this.routingKeyHistory[bottomDrawerContentPointer]) !== null && _b !== void 0 ? _b : '';
    return (h(Host, null, isString(routingKey) ? (h("div", { class: "drawer active", key: routingKey }, h("span", { class: "first-focus", tabIndex: -1, "aria-hidden": "true" }), h(DrawerContent, { routingKey: routingKey, previousRoutingKey: this.routingKeyHistory[bottomDrawerContentPointer - 1], breakpoint: this.breakpoint, locale: this.locale, showBackButton: bottomDrawerContentPointer > 0, receivedContent: this.receivedContent }))) : null, isString(animatingRoutingKey) ? (h("div", { class: `drawer animating`, style: isAnimatingForward ? { left: '100%' } : {}, key: animatingRoutingKey }, h(DrawerContent, { routingKey: animatingRoutingKey, previousRoutingKey: this.routingKeyHistory[topDrawerContentPointer - 1], breakpoint: this.breakpoint, locale: this.locale, showBackButton: topDrawerContentPointer > 0, receivedContent: this.receivedContent }))) : null));
  }
  get el() { return this; }
  static get style() { return singleDrawerCss; }
}, [2, "phn-single-drawer", {
    "breakpoint": [2],
    "locale": [1],
    "usingKeyboard": [4, "using-keyboard"],
    "routingKeyHistory": [16],
    "routingKeyPointer": [2, "routing-key-pointer"],
    "receivedContent": [4, "received-content"],
    "animatingPointer": [32]
  }, [[0, "keydown", "handleKeyDown"], [0, "mobileMenuItemClick", "handleMobileMenuItemClick"], [0, "clickDrawerHeaderClose", "handleClickDrawerHeaderClose"], [0, "clickDrawerHeaderBack", "handleClickDrawerHeaderBack"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["phn-single-drawer", "phn-autocomplete-search-field", "phn-back-button", "phn-car-body-types-drawer", "phn-dealer-details-drawer", "phn-dealer-search-by-number-of-dealers", "phn-dealer-search-form", "phn-dealer-search-form-dropdown", "phn-dealer-search-form-geolocation", "phn-dealer-search-results", "phn-drawer-header", "phn-heading", "phn-level-1", "phn-menu", "phn-menu-item", "phn-menu-item-card", "phn-models", "phn-myporsche-drawer", "phn-myporsche-login", "phn-router", "phn-signature-heading"];
  components.forEach(tagName => { switch (tagName) {
    case "phn-single-drawer":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, SingleDrawer);
      }
      break;
    case "phn-autocomplete-search-field":
      if (!customElements.get(tagName)) {
        defineCustomElement$k();
      }
      break;
    case "phn-back-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$j();
      }
      break;
    case "phn-car-body-types-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$i();
      }
      break;
    case "phn-dealer-details-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$h();
      }
      break;
    case "phn-dealer-search-by-number-of-dealers":
      if (!customElements.get(tagName)) {
        defineCustomElement$g();
      }
      break;
    case "phn-dealer-search-form":
      if (!customElements.get(tagName)) {
        defineCustomElement$f();
      }
      break;
    case "phn-dealer-search-form-dropdown":
      if (!customElements.get(tagName)) {
        defineCustomElement$e();
      }
      break;
    case "phn-dealer-search-form-geolocation":
      if (!customElements.get(tagName)) {
        defineCustomElement$d();
      }
      break;
    case "phn-dealer-search-results":
      if (!customElements.get(tagName)) {
        defineCustomElement$c();
      }
      break;
    case "phn-drawer-header":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "phn-heading":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "phn-level-1":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "phn-menu":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "phn-menu-item":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "phn-menu-item-card":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "phn-models":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "phn-myporsche-drawer":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "phn-myporsche-login":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "phn-router":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "phn-signature-heading":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { SingleDrawer as S, defineCustomElement as d, isPlayingSingleDrawerAnimation as i };

//# sourceMappingURL=single-drawer.js.map