{"version":3,"names":["async","getAllPPNDealersForMarket","env","dealerApiUrl","country","getPPNDealers","latitude","longitude","radius","coordinates","options","response","ppnDealerSearchResults","headers","Headers","set","Environments","LOCAL","windowService","btoa","requestParams","fetch","getQueryString","method","err","NaviError","NaviErrorTypes","GENERAL","status","NO_RESULTS","json","map","_a","dealer","rest","__rest","Object","assign","ppnDealer","getPPNDealer","id","find","dealerSearchResult","undefined","dealersByRegionMap","Map","getPPNDealerByRegion","region","dealersOfRegion","getPPNDealersByRegion","dealerResult","regions","flatMap","cities","dealers","values","reduce","dealerList","navStateStore","state","dealersByRegion","has","get","BFF_ENDPOINT","getConfig"],"sources":["src/services/dealer-service.ts"],"sourcesContent":["import { DealersByRegion, PPNDealer, PPNDealerSearchResult, PPNDistance } from '../entities/dealer-response';\nimport { Environment, Environments } from '../entities/environment';\nimport { LatLong } from '../entities/places';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getQueryString } from '../utility/helper';\n\nexport async function getAllPPNDealersForMarket(\n  env: Environment,\n  dealerApiUrl: string,\n  country: string\n): Promise<PPNDealerSearchResult[]> {\n  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });\n}\n\ntype GetPPNDealersOptions = {\n  /**\n   * The radius around the given coordinates to search for dealers\n   */\n  radius?: number;\n};\n\nexport async function getPPNDealers(\n  env: Environment,\n  dealerApiUrl: string,\n  coordinates: LatLong,\n  country: string,\n  options: GetPPNDealersOptions = {}\n): Promise<PPNDealerSearchResult[]> {\n  const { radius } = options;\n\n  let response: Response;\n  let ppnDealerSearchResults: { dealer: PPNDealer; distance: PPNDistance }[];\n\n  try {\n    const headers = new Headers();\n\n    headers.set('Accept', '*/*');\n\n    /* istanbul ignore next */\n    if (env === Environments.LOCAL) {\n      headers.set(\n        'Authorization',\n        'Basic ' + windowService.btoa(`${'DEALER_SEARCH_API_USER'}:${'DEALER_SEARCH_API_PASS'}`)\n      );\n    }\n\n    const requestParams = {\n      coordinates: `${coordinates.latitude},${coordinates.longitude}`,\n      radius\n    };\n\n    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {\n      method: 'GET',\n      headers\n    });\n  } catch (err) {\n    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 400) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 404) {\n    throw new NaviError(\n      'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results',\n      NaviErrorTypes.NO_RESULTS\n    );\n  }\n\n  if (response.status !== 200) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);\n  }\n\n  try {\n    ppnDealerSearchResults = await response.json();\n  } catch (err) {\n    throw new NaviError(\n      'dealerService.getPPNDealers could not parse response into json format',\n      NaviErrorTypes.GENERAL\n    );\n  }\n\n  return ppnDealerSearchResults.map(({ dealer, ...rest }) => ({ ppnDealer: dealer, ...rest }));\n}\n\nexport async function getPPNDealer(\n  env: Environment,\n  dealerApiUrl: string,\n  id: string,\n  coordinates: LatLong,\n  country: string\n): Promise<PPNDealerSearchResult> {\n  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer\n  let ppnDealer: PPNDealerSearchResult | undefined;\n\n  try {\n    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);\n    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);\n  } catch (err) {\n    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);\n  }\n\n  if (ppnDealer === undefined) {\n    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return ppnDealer;\n}\n\nconst dealersByRegionMap = new Map<string, DealersByRegion | undefined>();\n\nexport async function getPPNDealerByRegion(id: string, region: string): Promise<PPNDealerSearchResult> {\n  const dealersOfRegion = await getPPNDealersByRegion(region);\n\n  const dealerResult = dealersOfRegion.regions\n    .flatMap(({ cities }) =>\n      cities.flatMap(({ dealers }) =>\n        Object.values(dealers).reduce<{ ppnDealer: PPNDealer }[]>((dealerList, dealer) => [...dealerList, dealer], [])\n      )\n    )\n    .find(({ ppnDealer }) => ppnDealer.id === id);\n\n  if (dealerResult === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return dealerResult;\n}\n\nexport async function getPPNDealersByRegion(region: string): Promise<DealersByRegion> {\n  const { env } = navStateStore.state;\n  const headers = new Headers();\n  let dealersByRegion: DealersByRegion | undefined;\n  if (dealersByRegionMap.has(region)) {\n    dealersByRegion = dealersByRegionMap.get(region);\n  } else {\n    const { BFF_ENDPOINT } = getConfig(env);\n\n    headers.set('Accept', '*/*');\n\n    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {\n      method: 'GET',\n      headers\n    });\n\n    dealersByRegion = await response.json();\n    dealersByRegionMap.set(region, dealersByRegion);\n  }\n  if (dealersByRegion === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n  return dealersByRegion;\n}\n"],"mappings":"sfAQOA,eAAeC,EACpBC,EACAC,EACAC,GAEA,OAAOC,EAAcH,EAAKC,EAAc,CAAEG,SAAU,EAAGC,UAAW,GAAKH,EAAS,CAAEI,OAAQ,KAC5F,CASOR,eAAeK,EACpBH,EACAC,EACAM,EACAL,EACAM,EAAgC,IAEhC,MAAMF,OAAEA,GAAWE,EAEnB,IAAIC,EACJ,IAAIC,EAEJ,IACE,MAAMC,EAAU,IAAIC,QAEpBD,EAAQE,IAAI,SAAU,OAGtB,GAAIb,IAAQc,EAAaC,MAAO,CAC9BJ,EAAQE,IACN,gBACA,SAAWG,EAAcC,KAAK,GAAG,eAA4B,e,CAIjE,MAAMC,EAAgB,CACpBX,YAAa,GAAGA,EAAYH,YAAYG,EAAYF,YACpDC,UAGFG,QAAiBU,MAAM,GAAGlB,KAAgBC,aAAmBkB,EAAeF,KAAkB,CAC5FG,OAAQ,MACRV,W,CAEF,MAAOW,GACP,MAAM,IAAIC,EAAU,0BAA2BC,EAAeC,Q,CAGhE,GAAIhB,EAASiB,SAAW,IAAK,CAC3B,MAAM,IAAIH,EAAU,8DAA+DC,EAAeC,Q,CAGpG,GAAIhB,EAASiB,SAAW,IAAK,CAC3B,MAAM,IAAIH,EACR,uGACAC,EAAeG,W,CAInB,GAAIlB,EAASiB,SAAW,IAAK,CAC3B,MAAM,IAAIH,EAAU,2DAA4DC,EAAeC,Q,CAGjG,IACEf,QAA+BD,EAASmB,M,CACxC,MAAON,GACP,MAAM,IAAIC,EACR,wEACAC,EAAeC,Q,CAInB,OAAOf,EAAuBmB,KAAKC,I,IAAAC,OAAEA,GAAMD,EAAKE,EAAIC,EAAAH,EAAjB,YAAwB,OAAAI,OAAAC,OAAA,CAAGC,UAAWL,GAAWC,EAAI,GAC1F,CAEOlC,eAAeuC,EACpBrC,EACAC,EACAqC,EACA/B,EACAL,GAGA,IAAIkC,EAEJ,IACE,MAAM1B,QAA+BP,EAAcH,EAAKC,EAAcM,EAAaL,GACnFkC,EAAY1B,EAAuB6B,MAAMC,GAAuBF,IAAOE,EAAmBJ,UAAUE,I,CACpG,MAAOhB,GACP,MAAM,IAAIC,EAAU,2BAA4BC,EAAeC,Q,CAGjE,GAAIW,IAAcK,UAAW,CAC3B,MAAM,IAAIlB,EAAU,oBAAoBe,uBAAyBd,EAAeG,W,CAGlF,OAAOS,CACT,CAEA,MAAMM,EAAqB,IAAIC,IAExB7C,eAAe8C,EAAqBN,EAAYO,GACrD,MAAMC,QAAwBC,EAAsBF,GAEpD,MAAMG,EAAeF,EAAgBG,QAClCC,SAAQ,EAAGC,YACVA,EAAOD,SAAQ,EAAGE,aAChBlB,OAAOmB,OAAOD,GAASE,QAAmC,CAACC,EAAYxB,IAAW,IAAIwB,EAAYxB,IAAS,QAG9GQ,MAAK,EAAGH,eAAgBA,EAAUE,KAAOA,IAE5C,GAAIU,IAAiBP,UAAW,CAC9B,MAAM,IAAIlB,EAAU,sCAAuCC,EAAeG,W,CAG5E,OAAOqB,CACT,CAEOlD,eAAeiD,EAAsBF,GAC1C,MAAM7C,IAAEA,GAAQwD,EAAcC,MAC9B,MAAM9C,EAAU,IAAIC,QACpB,IAAI8C,EACJ,GAAIhB,EAAmBiB,IAAId,GAAS,CAClCa,EAAkBhB,EAAmBkB,IAAIf,E,KACpC,CACL,MAAMgB,aAAEA,GAAiBC,EAAU9D,GAEnCW,EAAQE,IAAI,SAAU,OAEtB,MAAMJ,QAAiBU,MAAM,GAAG0C,oBAA+BhB,SAAc7C,IAAO,CAClFqB,OAAQ,MACRV,YAGF+C,QAAwBjD,EAASmB,OACjCc,EAAmB7B,IAAIgC,EAAQa,E,CAEjC,GAAIA,IAAoBjB,UAAW,CACjC,MAAM,IAAIlB,EAAU,sCAAuCC,EAAeG,W,CAE5E,OAAO+B,CACT,Q"}