import{N as t,a as n,b as e,n as o}from"./p-ce02e561.js";import{f as i,l as s}from"./p-f9052552.js";import{t as r}from"./p-e1568a59.js";const c={};class a{constructor(){this.client=null;this.experiments=[]}async init(){if(i.isABTestingToggleActive()){try{await this.setClient();await this.loadExperiments()}catch(t){s.error("Could not initialize AbTesting",t)}}}execute(t){if(i.isABTestingToggleActive()){try{const n=this.getExperiment(t);const e=this.getVariation(n);e.activate()}catch(n){s.error(`Could not execute experiment ${t}`,n)}}}executeContentChange(t){if(i.isABTestingToggleActive()){try{const n=this.getExperiment(t.experienceName);const e=this.getVariation(n);if(e.name==="original"){return t.children}return e.activate()}catch(n){s.error(`Could not execute experiment ${t.experienceName}`,n)}}return t.children}async setClient(){if(this.client)return Promise.resolve(this.client);await this.injectScript();const t=window;this.client=t.Matomo;return this.client}async loadExperiments(){const t=this.getClient();const n=t.AbTesting.Experiment;const e=this.getAbTestingDefinitions();for(const t in e){const o=e[t];const i=new n(o);this.experiments.push(i)}}async loadContentGeneratorExperiments(){if(i.isABTestingToggleActive()){const t=this.getClient();const n=t.AbTesting.Experiment;const o=e.state.abExperiences;if(o){for(const t of o){const e=t.variations.map((t=>({name:t.name,activate:()=>t.children})));e.push({name:"original",activate:()=>null});const o=new n(Object.assign(Object.assign({},t),{variations:e}));this.experiments.push(o)}}}}getExperiment(e){const o=this.experiments.find((t=>t.name===e));if(!o)throw new t(`No experiment with name: ${e} found`,n.GENERAL);return o}getVariation(e){const o=e.getActivatedVariationName();const i=e.variations.find((t=>t.name===o));if(!i)throw new t(`No variation in experiment: ${e.name} with name: ${o} found`,n.GENERAL);return i}getClient(){if(!this.client)throw new t("No client is set, you must call init first",n.GENERAL);return this.client}injectScript(){return new Promise(((e,o)=>{const i=document.createElement("script");i.text=this.getMatomoScript();document.head.appendChild(i);const s=r(document.querySelector('script[src="//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js"]'));if(s){s.onload=()=>{e(true)};s.onerror=()=>o(new t("Could not inject Matomo script",n.GENERAL))}else{o(new t("There is no HTML Script element available",n.GENERAL))}}))}getAbTestingDefinitions(){return c}getMatomoScript(){const t=o.state.env;return`var _paq = window._paq = window._paq || [];\n    _paq.push(['trackPageView']);\n    _paq.push(['enableLinkTracking']);\n    (function() {\n      var u="https://porsche.matomo.cloud/";\n      _paq.push(['setTrackerUrl', u+'matomo.php']);\n      _paq.push(['setSiteId', ${t==="production"?"7":"8"}]);\n      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n      g.async=true; g.src='//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);\n    })\n   ();`}}const u=new a;function m(){return u}export{m as a};
//# sourceMappingURL=p-b44f163f.js.map