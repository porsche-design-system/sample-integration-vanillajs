{"version":3,"names":["showDealerSearchDropdown","country","countriesWithDropdown","includes","getRegionSpecificCountry","split","sanitizeDealerHomepage","originalUrl","startsWith","getOpeningHours","openingHoursData","openingHours","navContentStore","state","dealer","WEEK_DAYS","monday","tuesday","wednesday","thursday","friday","saturday","sunday","openingHoursMap","getOpeningHoursMap","result","previousOpeningHours","previousDayIndex","consecutiveDays","day","currentDayIndex","indexOf","openHours","get","openingHoursString","getOpeningHoursString","push","getDayRange","join","days","length","Map","item","toLowerCase","isString","set","open","close","getTimeFormat","timeFormat","convertToLocalTime","time","hour","minute","map","Number","date","Date","toLocaleString","undefined","hour12","toUpperCase"],"sources":["src/utility/helpers/dealer-search-helper.ts"],"sourcesContent":["import { OpenHours } from '../../entities/dealer-response';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { OpeningHours } from '../../entities/content';\nimport { isString } from '../helper';\n\nexport function showDealerSearchDropdown(country: string): boolean {\n  const countriesWithDropdown = ['CN'];\n\n  return countriesWithDropdown.includes(country);\n}\n\nexport function getRegionSpecificCountry(country: string): string {\n  return country.includes('-') ? country.split('-')[0] : country;\n}\n\nexport function sanitizeDealerHomepage(originalUrl: string): string {\n  if (!originalUrl.startsWith('https://')) {\n    return `http://${originalUrl}`;\n  }\n\n  return originalUrl;\n}\n\nexport function getOpeningHours(openingHoursData: OpenHours[]): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  if (!openingHours) {\n    return '';\n  }\n\n  const WEEK_DAYS = [\n    openingHours.monday,\n    openingHours.tuesday,\n    openingHours.wednesday,\n    openingHours.thursday,\n    openingHours.friday,\n    openingHours.saturday,\n    openingHours.sunday\n  ];\n\n  const openingHoursMap = getOpeningHoursMap(openingHours, openingHoursData);\n  const result: string[] = [];\n  let previousOpeningHours = '';\n  let previousDayIndex = -1;\n  let consecutiveDays: string[] = [];\n\n  for (const day of WEEK_DAYS) {\n    const currentDayIndex = WEEK_DAYS.indexOf(day);\n    const openHours = openingHoursMap.get(day);\n    const openingHoursString = getOpeningHoursString(openHours);\n\n    if (openingHoursString !== '') {\n      if (previousOpeningHours === '') {\n        previousOpeningHours = openingHoursString;\n        consecutiveDays.push(day);\n      } else if (previousOpeningHours !== openingHoursString || previousDayIndex !== currentDayIndex - 1) {\n        result.push(getDayRange(consecutiveDays, previousOpeningHours));\n        consecutiveDays = [day];\n        previousOpeningHours = openingHoursString;\n      } else {\n        consecutiveDays.push(day);\n      }\n      previousDayIndex = currentDayIndex;\n    }\n  }\n\n  if (previousOpeningHours !== '') {\n    result.push(getDayRange(consecutiveDays, previousOpeningHours));\n  }\n\n  return result.join('\\n');\n}\n\nfunction getDayRange(days: string[], openingHoursString: string) {\n  if (days.length === 1) {\n    return `${days[0]}: ${openingHoursString}`;\n  }\n  return `${days[0]} - ${days[days.length - 1]}: ${openingHoursString}`;\n}\n\nfunction getOpeningHoursMap(openingHours: OpeningHours, openingHoursData: OpenHours[]) {\n  const openingHoursMap: Map<string, { open: string; close: string }> = new Map();\n\n  for (const item of openingHoursData) {\n    const day = openingHours[item.day.toLowerCase() as keyof OpeningHours];\n\n    if (isString(day)) {\n      openingHoursMap.set(day, { open: item.open, close: item.close });\n    }\n  }\n\n  return openingHoursMap;\n}\n\nfunction getOpeningHoursString(openHours: { open: string; close: string } | undefined): string {\n  return openHours && openHours.open !== '' && openHours.close !== '' ? getTimeFormat(openHours) : '';\n}\n\nfunction getTimeFormat(openHours: { open: string; close: string }): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  const timeFormat = openingHours?.timeFormat === 12;\n\n  return `${convertToLocalTime(openHours.open, timeFormat)} - ${convertToLocalTime(openHours.close, timeFormat)}`;\n}\n\nfunction convertToLocalTime(time: string, timeFormat = false) {\n  const [hour, minute] = time.split(':').map(Number);\n  const date = new Date(0, 0, 0, hour, minute);\n\n  return date\n    .toLocaleString(undefined, {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: timeFormat\n    })\n    .toUpperCase();\n}\n"],"mappings":"iFAKgBA,EAAyBC,GACvC,MAAMC,EAAwB,CAAC,MAE/B,OAAOA,EAAsBC,SAASF,EACxC,C,SAEgBG,EAAyBH,GACvC,OAAOA,EAAQE,SAAS,KAAOF,EAAQI,MAAM,KAAK,GAAKJ,CACzD,C,SAEgBK,EAAuBC,GACrC,IAAKA,EAAYC,WAAW,YAAa,CACvC,MAAO,UAAUD,G,CAGnB,OAAOA,CACT,C,SAEgBE,EAAgBC,GAC9B,MAAMC,aAAEA,GAAiBC,EAAgBC,MAAMC,OAE/C,IAAKH,EAAc,CACjB,MAAO,E,CAGT,MAAMI,EAAY,CAChBJ,EAAaK,OACbL,EAAaM,QACbN,EAAaO,UACbP,EAAaQ,SACbR,EAAaS,OACbT,EAAaU,SACbV,EAAaW,QAGf,MAAMC,EAAkBC,EAAmBb,EAAcD,GACzD,MAAMe,EAAmB,GACzB,IAAIC,EAAuB,GAC3B,IAAIC,GAAoB,EACxB,IAAIC,EAA4B,GAEhC,IAAK,MAAMC,KAAOd,EAAW,CAC3B,MAAMe,EAAkBf,EAAUgB,QAAQF,GAC1C,MAAMG,EAAYT,EAAgBU,IAAIJ,GACtC,MAAMK,EAAqBC,EAAsBH,GAEjD,GAAIE,IAAuB,GAAI,CAC7B,GAAIR,IAAyB,GAAI,CAC/BA,EAAuBQ,EACvBN,EAAgBQ,KAAKP,E,MAChB,GAAIH,IAAyBQ,GAAsBP,IAAqBG,EAAkB,EAAG,CAClGL,EAAOW,KAAKC,EAAYT,EAAiBF,IACzCE,EAAkB,CAACC,GACnBH,EAAuBQ,C,KAClB,CACLN,EAAgBQ,KAAKP,E,CAEvBF,EAAmBG,C,EAIvB,GAAIJ,IAAyB,GAAI,CAC/BD,EAAOW,KAAKC,EAAYT,EAAiBF,G,CAG3C,OAAOD,EAAOa,KAAK,KACrB,CAEA,SAASD,EAAYE,EAAgBL,GACnC,GAAIK,EAAKC,SAAW,EAAG,CACrB,MAAO,GAAGD,EAAK,OAAOL,G,CAExB,MAAO,GAAGK,EAAK,QAAQA,EAAKA,EAAKC,OAAS,OAAON,GACnD,CAEA,SAASV,EAAmBb,EAA4BD,GACtD,MAAMa,EAAgE,IAAIkB,IAE1E,IAAK,MAAMC,KAAQhC,EAAkB,CACnC,MAAMmB,EAAMlB,EAAa+B,EAAKb,IAAIc,eAElC,GAAIC,EAASf,GAAM,CACjBN,EAAgBsB,IAAIhB,EAAK,CAAEiB,KAAMJ,EAAKI,KAAMC,MAAOL,EAAKK,O,EAI5D,OAAOxB,CACT,CAEA,SAASY,EAAsBH,GAC7B,OAAOA,GAAaA,EAAUc,OAAS,IAAMd,EAAUe,QAAU,GAAKC,EAAchB,GAAa,EACnG,CAEA,SAASgB,EAAchB,GACrB,MAAMrB,aAAEA,GAAiBC,EAAgBC,MAAMC,OAE/C,MAAMmC,GAAatC,IAAY,MAAZA,SAAY,SAAZA,EAAcsC,cAAe,GAEhD,MAAO,GAAGC,EAAmBlB,EAAUc,KAAMG,QAAiBC,EAAmBlB,EAAUe,MAAOE,IACpG,CAEA,SAASC,EAAmBC,EAAcF,EAAa,OACrD,MAAOG,EAAMC,GAAUF,EAAK9C,MAAM,KAAKiD,IAAIC,QAC3C,MAAMC,EAAO,IAAIC,KAAK,EAAG,EAAG,EAAGL,EAAMC,GAErC,OAAOG,EACJE,eAAeC,UAAW,CACzBP,KAAM,UACNC,OAAQ,UACRO,OAAQX,IAETY,aACL,Q"}