{"version":3,"names":["M","Object","defineProperty","W","r","t","e","enumerable","configurable","writable","value","o","y","BEFORE_MERGE","AFTER_MERGE","w","clean","enabled","executionPlace","values","logging","level","validation","allowUnknown","verbose","webProperties","eventNamePattern","reactiveUrl","reactiveDimensions","U","create","event","length","context","eventAction","S","_","s","i","m","P","n","l","includes","G","toString","k","B","split","C","push","j","x","error","warn","log","v","constructor","this","prefix","settings","_getMergedSettings","_isAllowed","isAvailable","_log","console","dir","debug","info","b","u","forEach","Array","isArray","q","timestamp","server","hostname","pageExperience","pageId","url","visitor","deviceBrowserBreakpoint","breakpoint","deviceBrowserHeight","height","deviceBrowserOrientation","orientation","deviceBrowserWidth","width","deviceType","useragent","userAgent","K","V","window","location","href","replace","Y","Date","toISOString","Q","R","innerHeight","D","innerWidth","T","X","matchMedia","matches","z","navigator","J","breakpoints","Z","ee","keys","indexOf","map","trim","test","Number","parseFloat","te","issues","eventMatrix","events","type","name","message","a","d","c","filter","g","h","f","p","E","N","ie","Map","_className","_logger","_settings","_dataLayerStore","pagData","_defaultProperties","setup","_handleDefaultWebProperties","Settings","DataLayerStore","getRegisteredExtension","getRegisteredExtensionByClassName","className","_extensions","has","get","getRegisteredExtensions","registerExtension","dataLayerInstance","set","removeExtension","delete","removeExtensionByClassName","_eventNamePayloadFactory","getDefaultProperties","sort","join","byName","byArray","byRegex","identifier","data","RegExp","setDefaultProperties","find","_webPropertiesHandled","_webPayloadFactory","oe","super","getEnvironmentAbbreviation","env","Environments","PRODUCTION","PREVIEW","GlobalDataLayerService","homeNavEventId","initialise","gdl","GlobalDataLayer","pushDataLayerEvent","eventData","setEnvironment","environment","setPageName","pageName","setUser","userId","loginStatus","ids","setLocale","locale","country","language","splitLocale","err","defaultGDLProperties","applicationId","DATA_LAYER_APP_ID","assign","applicationName","DATA_LAYER_APPLICATION_NAME","isString","globalDataLayerService"],"sources":["node_modules/@porsche/globaldatalayer/dist/GlobalDataLayer.es.js","src/services/analytics/global-data-layer-service.ts"],"sourcesContent":["var M = Object.defineProperty;\nvar W = (r, t, e) => t in r ? M(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e;\nvar o = (r, t, e) => (W(r, typeof t != \"symbol\" ? t + \"\" : t, e), e);\nconst y = {\n  BEFORE_MERGE: \"BEFORE_MERGE\",\n  AFTER_MERGE: \"AFTER_MERGE\"\n}, w = {\n  clean: {\n    enabled: !1,\n    executionPlace: y.AFTER_MERGE,\n    values: [\"\", void 0, null]\n  },\n  logging: {\n    enabled: !0,\n    level: \"warn\"\n  },\n  validation: {\n    enabled: !1,\n    allowUnknown: !1,\n    verbose: !0\n  },\n  webProperties: {\n    enabled: !0,\n    eventNamePattern: /.*/,\n    reactiveUrl: !0,\n    reactiveDimensions: !0\n  }\n};\nclass U {\n  /**\n   * Creates a PCOM (default) data layer schema specific object, that contains the given event name.\n   *\n   * @param data - Contains the event name in a standardized {@link IFactoryData} like way.\n   *\n   * @returns The event name in the PCOM (default) data layer schema specific object.\n   *\n   * @example\n   * myEventNameFactory.create({ event: 'MY_EVENT_NAME' });\n   * // returns:\n   * // {\n   * //   context: {\n   * //     eventAction: 'MY_EVENT_NAME'\n   * //   }\n   * // }\n   */\n  create(t) {\n    return typeof t.event != \"string\" || t.event.length === 0 ? {} : {\n      context: {\n        eventAction: t.event\n      }\n    };\n  }\n}\nconst S = (r, t) => {\n  let e;\n  for (e in r)\n    if (!(!r || !r[e]) && t(r[e], e) === !1)\n      return !1;\n  return !0;\n}, _ = (r, t) => S(r, (e, s) => {\n  for (const i in r[s])\n    if (t(e[i], i, e, s) === !1)\n      return !1;\n  return !0;\n}), ne = (r) => {\n  if (m(r))\n    return !0;\n  let t = 0, e = 0;\n  return S(r, (s) => {\n    t++, m(s) && e++;\n  }), t === e;\n}, m = (r) => {\n  for (const t in r)\n    return !1;\n  return !0;\n}, P = (r, t = ((e) => (e = w.clean) == null ? void 0 : e.values)() || []) => (_(\n  r,\n  (s, i, n, l) => {\n    t.includes(s) && (delete n[i], m(n) && delete r[l]);\n  }\n), r), G = (r, t) => r && (_(\n  r,\n  (e, s, i, n) => {\n    t.includes(`${n.toString()}.${s.toString()}`) && (delete i[s], m(i) && delete r[n]);\n  }\n), r), k = (r) => (_(\n  r,\n  (t, e, s) => (typeof t != \"function\" || (s[e] = t()), !0)\n), r);\nclass H {\n  /**\n   * Creates a new instance of {@link FrameTicker}.\n   *\n   * @param callback The functionality that should be called\n   * @param ticksPerSecond How many times should the functionality been called in one second\n   */\n  constructor(t, e = 10) {\n    o(this, \"tickInterval\");\n    o(this, \"callback\");\n    o(this, \"_tickTime\", Date.now());\n    o(this, \"_tickActive\", !1);\n    this.callback = t, this.tickInterval = 1e3 / e;\n  }\n  /**\n   * Start the {@link FrameTicker}.\n   */\n  start() {\n    this._tickActive || (this._tickActive = !0, this.run());\n  }\n  /**\n   * Stop the {@link FrameTicker}.\n   */\n  stop() {\n    this._tickActive = !1;\n  }\n  /**\n   * Internal function executed on each _tick_.\n   *\n   * @private\n   */\n  run() {\n    if (!this._tickActive)\n      return;\n    requestAnimationFrame(this.run.bind(this));\n    const t = Date.now(), e = t - this._tickTime;\n    e < this.tickInterval || (this._tickTime = t - e % this.tickInterval, this.callback());\n  }\n}\nconst B = (r, t) => {\n  const e = t.split(\".\");\n  if (e.length !== 2)\n    return;\n  const s = r[e[0]];\n  if (s)\n    return s[e[1]];\n}, C = (r) => {\n  if (!r)\n    return [];\n  const t = [];\n  return _(\n    r,\n    (e, s, i, n) => {\n      t.push(`${n.toString()}.${s.toString()}`);\n    }\n  ), t;\n}, j = w.logging;\nvar x = /* @__PURE__ */ ((r) => (r[r.error = 0] = \"error\", r[r.warn = 1] = \"warn\", r[r.log = 2] = \"log\", r))(x || {});\nconst v = class v {\n  /**\n   * Creates an instance of the {@link Logger} class.\n   *\n   * @param prefix A prefix that is used in all logs\n   *   (`[PREFIX] MESSAGE`, i.e. `[GlobalDataLayer] This is a serious message`).\n   * @param options Options to be merged as settings with the {@link DEFAULT_SETTINGS.logging}.\n   */\n  constructor(t, e) {\n    /**\n     * The prefix that is used in all logs.\n     * @private\n     */\n    o(this, \"prefix\");\n    /**\n     * The merged settings. Also see the options of the {@link constructor} and the {@link DEFAULT_SETTINGS.logging}.\n     *\n     * @see {@link TLoggerSettings}\n     *\n     * @private\n     */\n    o(this, \"settings\");\n    this.prefix = t, this.settings = {\n      ...j,\n      ...e\n    };\n  }\n  /**\n   * Helper function to merge the options of a log method call with the current {@link settings}.\n   *\n   * @param options  Options to be merged with the available {@link settings}\n   *\n   * @returns The merged temporary settings.\n   *\n   * @private\n   */\n  _getMergedSettings(t) {\n    return t ? {\n      ...this.settings,\n      ...t\n    } : this.settings;\n  }\n  /**\n   * Check, if this log message is allowed.\n   *\n   * @see {@link TLoggerSettings.enabled} and {@link TLoggerSettings.level} and {@link isAvailable}\n   *\n   * @param type Type of the current log message.\n   * @param settings The current (temporary) settings.\n   *\n   * @returns `true`if the log message is allowed.\n   *\n   * @private\n   */\n  _isAllowed(t, e) {\n    if (!v.isAvailable || !e.enabled)\n      return !1;\n    const s = x[e.level];\n    switch (t) {\n      case \"error\":\n      case \"warn\":\n        return s >= x[t];\n      case \"info\":\n      case \"log\":\n      case \"debug\":\n      case \"dir\":\n        return s >= 2;\n      default:\n        return !1;\n    }\n  }\n  /**\n   * A helper method to execute the log messages of all different types.\n   *\n   * @param msg The message text.\n   * @param type The type of the message.\n   * @param options Temporary options, that will be merged with the current {@link settings}.\n   *\n   * @private\n   */\n  _log(t, e = \"log\", s) {\n    const i = this._getMergedSettings(s);\n    if (this._isAllowed(e, i))\n      switch (e) {\n        case \"dir\":\n          console.log(`[${this.prefix}] ${e}:`), console[e](t);\n          break;\n        default:\n          console[e](`[${this.prefix}] ${t}`);\n      }\n  }\n  /**\n   * Write a normal log message.\n   *\n   * @param msg The message text.\n   * @param options Temporary options, that will be merged with the current {@link settings}.\n   */\n  log(t, e) {\n    this._log(t, \"log\", e);\n  }\n  /**\n   * Write a log message of type `dir`.\n   *\n   * This message will be split in two messages, the prefix with \" dir:\" and the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/console/dir dir} output as interactive list.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/dir console.dir()}\n   *\n   * @param msg The message text.\n   * @param options Temporary options, that will be merged with the current {@link settings}.\n   */\n  dir(t, e) {\n    this._log(t, \"dir\", e);\n  }\n  /**\n   * Write a log message of type `debug`.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/debug console.debug()}\n   *\n   * @param msg The message text.\n   * @param options Temporary options, that will be merged with the current {@link settings}.\n   */\n  debug(t, e) {\n    this._log(t, \"debug\", e);\n  }\n  /**\n   * Write a log message of type `error`.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/error console.error()}\n   *\n   * @param msg The message text.\n   * @param options Temporary options, that will be merged with the current {@link settings}.\n   */\n  error(t, e) {\n    this._log(t, \"error\", e);\n  }\n  /**\n   * Write a log message of type `info`.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/info console.info()}\n   *\n   * @param msg The message text.\n   * @param options Temporary options, that will be merged with the current {@link settings}.\n   */\n  info(t, e) {\n    this._log(t, \"info\", e);\n  }\n  /**\n   * Write a log message of type `warn`.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/console/warn console.warn()}\n   *\n   * @param msg The message text.\n   * @param options Temporary options, that will be merged with the current {@link settings}.\n   */\n  warn(t, e) {\n    this._log(t, \"warn\", e);\n  }\n};\n/**\n * Check if there is a console available that makes logging possible.\n */\no(v, \"isAvailable\", (() => typeof console < \"u\")());\nlet b = v;\nconst u = (...r) => {\n  const t = {};\n  return r.forEach((e) => {\n    if (m(e))\n      return;\n    const s = {\n      ...t,\n      ...e\n    };\n    let i;\n    for (i in s)\n      typeof s[i] == \"object\" && !Array.isArray(s[i]) ? t[i] = {\n        ...t[i],\n        ...e[i]\n      } : t[i] = s[i];\n  }), t;\n};\nclass q {\n  /**\n   * Creates a PCOM (default) data layer schema specific object, that contains the given web properties.\n   *\n   * @param data - Contains the web properties in a standardized {@link IFactoryData} like way.\n   *\n   * @returns The given web properties in the PCOM (default) data layer schema specific object.\n   *\n   * @example\n   * myWebPropertiesFactory.create({ userAgent: 'MY_USE_AGENT' });\n   * // returns:\n   * // {\n   * //   visitor: {\n   * //     userAgent: 'MY_USE_AGENT'\n   * //   }\n   * // }\n   */\n  create(t) {\n    return P(\n      {\n        context: {\n          timestamp: t.timestamp,\n          server: t.hostname\n        },\n        pageExperience: {\n          pageId: t.url\n        },\n        visitor: {\n          deviceBrowserBreakpoint: t.breakpoint,\n          deviceBrowserHeight: t.height,\n          deviceBrowserOrientation: t.orientation,\n          deviceBrowserWidth: t.width,\n          deviceType: t.deviceType,\n          useragent: t.userAgent\n        }\n      },\n      [void 0]\n    );\n  }\n}\nconst K = w.webProperties, V = () => window.location.href.replace(/[?#].*/, \"\"), Y = () => (/* @__PURE__ */ new Date()).toISOString(), Q = () => window.location.hostname, R = () => window.innerHeight.toString(), D = () => window.innerHeight > window.innerWidth ? \"p\" : \"l\", T = () => window.innerWidth.toString(), X = () => window.matchMedia(\"(hover: none), (pointer: coarse)\").matches ? \"mobile\" : \"desktop\", z = () => window.navigator.userAgent, J = (r) => {\n  if (!r.breakpoints || r.breakpoints.length < 1)\n    return;\n  const { breakpoints: t } = r, e = () => {\n    const s = window.innerWidth;\n    let i = 0, n = 0;\n    for (; n < t.length && s >= t[n]; )\n      i = t[n], n++;\n    return i.toString();\n  };\n  return r.reactiveDimensions ? e : e();\n}, Z = (r, t) => {\n  const e = {\n    ...K,\n    ...r\n  }, i = {\n    breakpoint: J(e),\n    timestamp: Y(),\n    hostname: Q(),\n    url: e.reactiveUrl ? V : V(),\n    height: e.reactiveDimensions ? R : R(),\n    orientation: e.reactiveDimensions ? D : D(),\n    width: e.reactiveDimensions ? T : T(),\n    deviceType: X(),\n    userAgent: z()\n  };\n  return t ? t.create(i) : i;\n}, ee = (r, t) => {\n  switch (t) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return typeof r === t;\n    case \"any[]\":\n      return Array.isArray(r) && r.length > 0;\n    case \"Record<string, any>\":\n      return typeof r == \"object\" && !Array.isArray(r) && Object.keys(r).length > 0;\n    case \"any\":\n      return !0;\n    default:\n      if ((typeof r == \"boolean\" || typeof r == \"number\" || typeof r == \"string\") && t.indexOf(\"|\") > 0)\n        return t.split(\"|\").map((s) => {\n          const i = s.trim();\n          return /^'.*'$/.test(i) ? i.replace(/(^ ?'?|'? ?$)/g, \"\") : /^(true|false)$/.test(i) ? i === \"true\" : /^-?(\\d*\\.)?\\d+$/.test(i) ? Number.parseFloat(i) : i.replace(/(^ ?'?|'? ?$)/g, \"\");\n        }).includes(r);\n  }\n  return !0;\n}, te = (r, t, e) => {\n  const s = {\n    level: null,\n    issues: []\n  };\n  if (!e.enabled || !e.eventMatrix)\n    return s;\n  const { events: i, ...n } = e.eventMatrix, l = i.indexOf(r);\n  if (l === -1)\n    return s.level = \"error\", s.issues.push({\n      level: \"error\",\n      type: \"EVENT_NOT_FOUND\",\n      name: r,\n      message: `'${r}': Event does not exist.`\n    }), s;\n  const a = C(t), d = Object.keys(n), c = a.filter(\n    (g) => !d.includes(g)\n  );\n  c.length > 0 && (e.allowUnknown || G(t, c), c.forEach((g) => {\n    s.level = s.level ?? \"warn\", s.issues.push({\n      level: \"warn\",\n      type: \"PROPERTY_DOES_NOT_EXIST\",\n      name: g,\n      message: `'${g}': Property does not exist in the given Event Matrix.${e.allowUnknown ? \"\" : \" It was omitted from the DataLayer payload.\"}`\n    });\n  }));\n  let h;\n  for (h in n) {\n    const g = n[h], f = typeof g.e[l] < \"u\", p = g.r === 1, E = t ? B(t, h) : void 0, N = typeof E < \"u\";\n    if (f && // Does the event want this property?\n    p && // Is the property mandatory in general?\n    !N && (s.level = \"error\", s.issues.push({\n      level: \"error\",\n      type: \"REQUIRED_PROPERTY_MISSING\",\n      name: h,\n      message: `'${h}': The required property is missing.`\n    }), !e.verbose) || N && !ee(E, g.t) && (s.level = \"error\", s.issues.push({\n      level: \"error\",\n      type: \"WRONG_PROPERTY_TYPE\",\n      name: h,\n      message: `'${h}': Wrong type detected. Expected '${g.t}', got '${typeof E}'.`\n    }), !e.verbose))\n      return s;\n  }\n  return s;\n};\nclass L {\n  constructor(t = \"DataLayerExtension\", e) {\n    /**\n     * A\n     * @protected\n     */\n    o(this, \"_logger\");\n    o(this, \"_className\");\n    o(this, \"_dataLayerInstance\");\n    this._className = t, this._logger = new b(this.className, e);\n  }\n  get dataLayerInstance() {\n    return this._dataLayerInstance;\n  }\n  set dataLayerInstance(t) {\n    this._dataLayerInstance = t;\n  }\n  get className() {\n    return this._className;\n  }\n  set className(t) {\n    this._className = t;\n  }\n  get isRegistered() {\n    return typeof this._dataLayerInstance < \"u\";\n  }\n}\nconst A = {\n  eventName: \"UNKNOWN\",\n  thresholds: {\n    filled: 0.5,\n    visible: 0.3,\n    minValidityPeriod: 1\n  },\n  triggerUpdates: {\n    enabled: !1,\n    eventName: \"VIEWPORT_TRACKER_STATUS_CHANGE\"\n  },\n  tickerSettings: {\n    ticksPerSecond: 10\n  }\n};\nclass se extends Event {\n  constructor(e, s) {\n    super(e);\n    o(this, \"registeredElement\");\n    this.registeredElement = s;\n  }\n}\nclass $ extends L {\n  /**\n   * Creates a new instance of {@link ViewportTrackerExtension} with optional settings of type\n   * {@link TViewportTrackerSettings}.\n   *\n   * @param options The settings to initialize the instance. Will be merged with the defaults.\n   */\n  constructor(e) {\n    var s;\n    super(\"ViewportTrackerExtension\", e == null ? void 0 : e.logger);\n    o(this, \"settings\");\n    o(this, \"observer\", null);\n    o(this, \"frameTicker\");\n    o(this, \"registeredElements\", []);\n    o(this, \"visibleElements\", []);\n    this.settings = e ? u(A, e) : A, this.observer = this.createObserver(), this.frameTicker = new H(\n      this.checkVisibilityOfElements.bind(this),\n      (s = this.settings.tickerSettings) == null ? void 0 : s.ticksPerSecond\n    );\n  }\n  /**\n   * Will create and return the mandatory {@link IntersectionObserver}. The function will log an error if this is not\n   * possible.\n   *\n   * @returns The ready-to-use {@link IntersectionObserver} instance or null.\n   *\n   * @private\n   */\n  createObserver() {\n    return !window || !(\"IntersectionObserver\" in window) ? (this._logger.error(\"The ViewportTrackerExtension will need IntersectionObserver to work.\"), null) : new IntersectionObserver(this.observerHandler.bind(this), {\n      threshold: 0,\n      rootMargin: \"0px 0px\"\n    });\n  }\n  /**\n   * Register an {@link HTMLElement} to be observed.\n   *\n   * @param element The {@link HTMLElement} to register with optional _DataLayer_ properties.\n   */\n  registerElement(e) {\n    var s;\n    this.unregisterElement(e.el), this.registeredElements.push({\n      el: e.el,\n      properties: e.properties,\n      state: {\n        isFilled: !1,\n        isVisible: !1,\n        passedValidityPeriod: !1\n      }\n    }), (s = this.observer) == null || s.observe(e.el);\n  }\n  /**\n   * Register multiple {@link HTMLElement}s to be observed.\n   *\n   * @param elements The {@link HTMLElement}s to register with optional _DataLayer_ properties.\n   */\n  registerElements(e) {\n    for (const s of e)\n      this.registerElement(s);\n  }\n  /**\n   * Unregister an {@link HTMLElement} from observation.\n   *\n   * @param element The {@link HTMLElement} to unregister.\n   */\n  unregisterElement(e) {\n    var i;\n    (i = this.observer) == null || i.unobserve(e);\n    const s = this.getRegisteredElementIndex(e);\n    s < 0 || this.registeredElements.splice(s, 1);\n  }\n  /**\n   * Unregister multiple {@link HTMLElement}s from observation.\n   *\n   * @param elements The {@link HTMLElement}s to unregister.\n   */\n  unregisterElements(e) {\n    for (const s of e)\n      this.unregisterElement(s);\n  }\n  /**\n   * Helper function to retrieve the index of a registered {@link HTMLElement} from the `registeredElements` array.\n   *\n   * @param el The {@link HTMLElement} to find.\n   * @returns The index of the element if found, otherwise `-1`.\n   *\n   * @private\n   */\n  getRegisteredElementIndex(e) {\n    return this.registeredElements.findIndex((s) => s.el === e);\n  }\n  /**\n   * Helper function to retrieve a registered {@link HTMLElement} from the `registeredElements` array.\n   *\n   * @param el The {@link HTMLElement} to find.\n   *\n   * @returns The found element, otherwise `undefined`.\n   *\n   * @private\n   */\n  getRegisteredElement(e) {\n    const s = this.getRegisteredElementIndex(e);\n    if (!(s < 0))\n      return this.registeredElements[s];\n  }\n  /**\n   * The {@link IntersectionObserver} callback function to handle updates to the registered {@link TRegisteredElement}s\n   * {@link HTMLElement}s. Registers or unregisters items based on the given settings and changes their state.\n   *\n   * @param entries Intersection element entries.\n   *\n   * @private\n   */\n  observerHandler(e) {\n    for (const s of e) {\n      const i = s.target, n = this.getRegisteredElement(i);\n      if (n) {\n        if (s.isIntersecting) {\n          this.visibleElements.findIndex((l) => l === n.el) === -1 && this.visibleElements.push(n.el);\n          continue;\n        }\n        this.removeFromVisibleStore(n.el), (n.state.isFilled || n.state.isVisible) && requestAnimationFrame(() => {\n          this.processViewportIntersection(n, {\n            isVisible: !1,\n            isFilled: !1,\n            passedValidityPeriod: !1\n          });\n        });\n      }\n    }\n    this.visibleElements.length > 0 && this.frameTicker.start();\n  }\n  /**\n   * Callback for the {@link FrameTicker} to frequently check the state of all elements which are currently marked as\n   * _in the viewport_.\n   *\n   * @private\n   */\n  checkVisibilityOfElements() {\n    if (this.visibleElements.length === 0)\n      return;\n    const e = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0), s = window.scrollY;\n    for (let i = 0; i < this.visibleElements.length; i++) {\n      const n = this.visibleElements[i], l = this.getRegisteredElement(n);\n      if (!l || !this.settings.triggerUpdates.enabled && l.state.passedValidityPeriod)\n        continue;\n      const { isVisible: a, isFilled: d } = $.percentWithinViewport(n, s, e), c = {\n        isVisible: a >= this.settings.thresholds.visible,\n        isFilled: d >= this.settings.thresholds.filled,\n        passedValidityPeriod: l.state.passedValidityPeriod\n      };\n      this.processViewportIntersection(l, c);\n    }\n  }\n  /**\n   * Get to know how much of the {@link HTMLElement} is visible the viewport.\n   *\n   * @param el The element in the viewport.\n   * @param scrollY The scrollY of the current window.\n   * @param viewportHeight The height of the viewport.\n   *\n   * @returns The % visible of the HTMLElement in the viewport.\n   *\n   * @private\n   */\n  static percentWithinViewport(e, s, i) {\n    const n = { top: s, bottom: s + i }, l = e.getBoundingClientRect(), a = {\n      top: l.y + s,\n      bottom: l.y + l.height + s\n    }, d = l.height;\n    let c = d;\n    a.top < n.top && (c = d - (s - a.top)), a.bottom > n.bottom && (c = c - (a.bottom - n.bottom));\n    let h = c / d, g = c / i;\n    return (n.top > a.bottom || n.bottom < a.top) && (h = 0, g = 0), n.top < a.top && n.bottom > a.bottom && (h = 1), a.top < n.top && a.bottom > n.bottom && (g = 1), {\n      isVisible: h,\n      isFilled: g\n    };\n  }\n  /**\n   * Processes a {@link TRegisteredElement} items intersection. If the element matches the\n   * {@link TViewportTrackerSettings.thresholds `thresholds`}, the {@link IGlobalDataLayer.push} method is called.\n   *\n   * Also dispatches the update event of the {@link TViewportTrackerSettings.triggerUpdates `triggerUpdates`} feature.\n   *\n   * @param registeredElement The registered element to process.\n   * @param isVisible Indicates, if the element is {@link TViewportTrackerSettings.thresholds.visible visible}.\n   * @param isFilled Indicates, if the element is {@link TViewportTrackerSettings.thresholds.filled filled}.\n   *\n   * @private\n   */\n  processViewportIntersection(e, { isVisible: s, isFilled: i }) {\n    const n = e.state || {\n      isVisible: !1,\n      isFilled: !1\n    }, l = Date.now(), a = {\n      isVisible: s,\n      isFilled: i,\n      timeVisible: n.isVisible !== s ? l : n.timeVisible,\n      timeFilled: n.isFilled !== i ? l : n.timeFilled,\n      passedValidityPeriod: n.passedValidityPeriod\n    }, d = (c) => (l - c) / 1e3;\n    if (n.isVisible !== a.isVisible || n.isFilled !== a.isFilled)\n      a.passedValidityPeriod = !1, e.state = a, this.dispatchEvent(e);\n    else if (!a.passedValidityPeriod && (a.isVisible || a.isFilled)) {\n      const c = d(a.timeVisible), h = d(a.timeFilled);\n      (s && c >= this.settings.thresholds.minValidityPeriod || i && h >= this.settings.thresholds.minValidityPeriod) && (a.passedValidityPeriod = !0, e.state = a, this.pushEvent(e), this.dispatchEvent(e));\n    }\n  }\n  /**\n   * Helper function to remove an {@link HTMLElement} from the state of being in the viewport. This will stop the\n   * {@link FrameTicker} checks from being processed for this {@link TRegisteredElement}.\n   *\n   * @param element The HTMLElement to remove.\n   *\n   * @private\n   */\n  removeFromVisibleStore(e) {\n    let s = -1;\n    for (; (s = this.visibleElements.findIndex((i) => i === e)) >= 0; )\n      this.visibleElements.splice(s, 1);\n    this.visibleElements.length === 0 && this.frameTicker.stop();\n  }\n  /**\n   * Will call the {@link IGlobalDataLayer.push} with the given {@link TViewportTrackerSettings.eventName `eventName`},\n   * whenever a {@link TRegisteredElement} matches the given {@link TViewportTrackerSettings.thresholds `thresholds`}.\n   *\n   * @param item The registered {@link HTMLElement} with its {@link TRegisteredElement.properties `properties` payload}.\n   *\n   * @private\n   */\n  pushEvent(e) {\n    if (!this.dataLayerInstance) {\n      this._logger.warn(\"This extension is not registered to a GlobalDataLayer instance.\");\n      return;\n    }\n    const { properties: s } = e, i = typeof s == \"function\" ? s() : s || {};\n    this.dataLayerInstance.push(this.settings.eventName, i);\n  }\n  /**\n   * Dispatches a {@link ViewportTrackerStatusChangeEvent}.\n   *\n   * @param registeredElement The registered {@link HTMLElement} to use as target.\n   *\n   * @private\n   */\n  dispatchEvent(e) {\n    this.settings.triggerUpdates && this.settings.triggerUpdates.enabled && e.el.dispatchEvent(\n      new se(this.settings.triggerUpdates.eventName, e)\n    );\n  }\n}\nconst F = (r) => r.length > 0, O = \"PageNameExtender_unknown_pageName\", I = {\n  initialPageName: O,\n  separator: \"/\"\n};\nclass ae extends L {\n  /**\n   * Constructor of PageNameExtender\n   *\n   * @param options Settings object for this extension.\n   */\n  constructor(e) {\n    super(\"PageNameExtenderExtension\", e == null ? void 0 : e.logger);\n    o(this, \"settings\");\n    /**\n     * Internal page name store. To handle the different levels.\n     */\n    o(this, \"pageName\", []);\n    /**\n     * Internal basic page name length. This is defined in the {@link set} method and used to make sure there is\n     * an option to keep ({@link reduce}) or replace ({@link set}) the basic page name.\n     */\n    o(this, \"basePageNameLength\", 0);\n    this.settings = e ? u(I, e) : I, this.set(this.settings.initialPageName);\n  }\n  /**\n   * Update the complete stored {@link pageName} with a string or an array of strings.\n   *\n   * @param pageName If a simple string is given, it will be separated by the given {@link settings} separator.\n   * @param keepExtensions Keep the parts which were added by {@link extend} method.\n   *\n   * @returns The new {@link pageName} joined with the {@link settings} separator.\n   */\n  set(e, s = !1) {\n    const i = this.basePageNameLength;\n    return typeof e == \"string\" && (e = e.split(this.settings.separator).filter(F)), e.length === 0 ? (this._logger.warn(\"`pageName` must not be empty\"), \"\") : (e[0] === O && this._logger.info(\n      \"No `initialPageName` was provided. Make sure the `pageName` is provided later via the `set` method.\"\n    ), this.basePageNameLength = e.length, s && e.push(...this.pageName.slice(i - 1)), this.pageName = e, this.get());\n  }\n  /**\n   * Get the current {@link pageName}.\n   *\n   * @param basePageNameOnly If you want to ignore the parts which were added by {@link extend}.\n   *\n   * @returns The current {@link pageName} joined with the {@link settings} separator.\n   */\n  get(e = !1) {\n    return (e ? this.pageName.slice(0, this.basePageNameLength) : this.pageName).join(\n      this.settings.separator\n    );\n  }\n  /**\n   * Add (multiple) sub levels to the {@link pageName}.\n   *\n   * @param levels If a simple string is given it will be split by the given {@link settings} separator.\n   *\n   * @returns The new {@link pageName} joined with the given {@link settings} separator.\n   */\n  extend(e) {\n    return Array.isArray(e) && (e = e.join(this.settings.separator)), e = e.split(this.settings.separator).filter(F), e.length === 0 ? this._logger.warn(\"`levels` must not be empty\") : this.pageName.push(...e), this.get();\n  }\n  /**\n   * Remove (multiple) sub levels from the {@link pageName}.\n   *\n   * @param [levelCount='last'] Number of levels that should be removed. You can also use a\n   *   {@link TPageNameExtenderReduceType} to define the \"last\" or \"all\" (except the root).\n   * @param keepBasePageName If the basic page name given by {@link set} should also be reducible. This\n   *   cannot be restored.\n   *\n   * @returns The new {@link pageName} joined with the given {@link settings} separator.\n   */\n  reduce(e = \"last\", s = !0) {\n    let i;\n    return e === \"all\" ? i = this.pageName.length - (s ? this.basePageNameLength : 1) : e === \"last\" ? i = this.pageName.length > (s ? this.basePageNameLength : 1) ? 1 : 0 : (i = e, (this.pageName.length <= e || s && this.pageName.length - this.basePageNameLength < e) && (this._logger.info(\n      `${this.pageName.length - (s ? this.basePageNameLength : 1)} - ${e} must not delete first level or more`\n    ), i = this.pageName.length - (s ? this.basePageNameLength : 1))), this.pageName.splice(i * -1, i), this.basePageNameLength > this.pageName.length && (this.basePageNameLength = this.pageName.length), this.get();\n  }\n  /**\n   * Get a temporary pre-fixed version of the current {@link pageName}.\n   *\n   * @param [prefix=''] The value that should be prepended temporarily.\n   *\n   * @returns The current {@link pageName} joined with the given {@link settings} separator pre-fixed with the given\n   *   string value.\n   */\n  getWithPrefix(e = \"\") {\n    return e + this.get();\n  }\n  /**\n   * Get a temporary post-fixed version of the current {@link pageName}.\n   *\n   * @param [postfix=''] The value that should be appended temporarily.\n   *\n   * @returns The current {@link pageName} joined with the given {@link Settings} separator post-fixed with the given\n   *   string value.\n   */\n  getWithPostfix(e = \"\") {\n    return this.get() + e;\n  }\n}\nclass ie {\n  /**\n   * Create an instance of the GlobalDataLayer library. This constructor has to be overwritten to initialize the needed\n   * factories ({@link _eventNamePayloadFactory} and {@link _webPayloadFactory}).\n   *\n   * @param options All options are merged with the {@link DEFAULT_SETTINGS} of type {@link TSettings}.\n   * @param [dataStore] The array where all the pushes are added to. The default tries to get or generate the\n   *   `window.pagData` array. If this is not possible, it creates an empty array, that is exposed via\n   *   {@link DataLayerStore}.\n   * @param [className] The class name of the library is here, because code can be uglified and/or minified later.\n   *\n   * @protected\n   */\n  constructor(t, e, s = \"GlobalDataLayer\") {\n    /**\n     * The class name of the library. This is needed, because code can be uglified and/or minified later.\n     * @protected\n     */\n    o(this, \"_className\");\n    /**\n     * The merged settings. Also see the options of the {@link constructor} and the {@link DEFAULT_SETTINGS}.\n     * @protected\n     */\n    o(this, \"_settings\");\n    /**\n     * An internal store where all default properties are added to.\n     * @protected\n     */\n    o(this, \"_defaultProperties\");\n    /**\n     * An internal logger, which has to be used for all console logs.\n     * @protected\n     */\n    o(this, \"_logger\");\n    /**\n     * A flag that indicates if the _Web Properties_ feature was already handled.\n     *\n     * @see {@link getWebProperties}\n     *\n     * @protected\n     */\n    o(this, \"_webPropertiesHandled\", !1);\n    /**\n     * the _DataLayer_ store array, that is used to push all the data.\n     *\n     * This can be transferred to the library with the second parameter `dataStore` of the {@link constructor}.\n     *\n     * @protected\n     */\n    o(this, \"_dataLayerStore\");\n    /**\n     * An internal store where all registered extensions are added to.\n     * @protected\n     */\n    o(this, \"_extensions\", /* @__PURE__ */ new Map());\n    const i = u(\n      w,\n      t || {}\n    );\n    this._className = s, this._logger = new b(this._className, i.logging), this._settings = i, e ? this._dataLayerStore = e : typeof window < \"u\" ? (this._dataLayerStore = window.pagData = window.pagData || [], this._logger.info(\"`dataLayerStore` was set to default `window.pagData`\")) : (this._dataLayerStore = [], this._logger.info(\"`dataLayerStore` was set to default `[]`\")), this._defaultProperties = [];\n  }\n  /**\n   * An internal function to set everything up after initialization is done. This has to be called at the end of the\n   * overwritten constructors.\n   * @protected\n   */\n  setup() {\n    this._handleDefaultWebProperties();\n  }\n  /**\n   * The current settings object.\n   * @readonly\n   */\n  get Settings() {\n    return this._settings;\n  }\n  /**\n   * Get the _DataLayer_ store, that is used to push all the data.\n   * @readonly\n   */\n  get DataLayerStore() {\n    return this._dataLayerStore;\n  }\n  /**\n   * Get a registered {@link DataLayerExtension} class instance based of the input type.\n   *\n   * @param TConstructor The class to search for.\n   *\n   * @returns The registered instance of the extension class, `undefined` if not found.\n   */\n  getRegisteredExtension(t) {\n    const e = new t();\n    return this.getRegisteredExtensionByClassName(e.className);\n  }\n  /**\n   * Get a registered {@link DataLayerExtension} class instance based of a classname.\n   *\n   * @param className The name of class instance to compare.\n   *\n   * @returns The registered instance of the extension class, undefined if not found.\n   */\n  getRegisteredExtensionByClassName(t) {\n    return this._extensions.has(t) ? this._extensions.get(t) : void 0;\n  }\n  /**\n   * Get all registered {@link DataLayerExtension}.\n   *\n   * @returns All registered DataLayerExtensions as array.\n   */\n  getRegisteredExtensions() {\n    const t = [];\n    for (const e of this._extensions.values())\n      t.push(e);\n    return t;\n  }\n  /**\n   * Register a new {@link DataLayerExtension} class for this instance.\n   *\n   * @param extension The extension class instance to register.\n   * @param override If there is an existing instance already registered, we override it, otherwise we do nothing.\n   */\n  registerExtension(t, e = !1) {\n    if (!e && this._extensions.has(t.className)) {\n      this._logger.warn(`Tried to register extension class <${t.className}> which already exists.`);\n      return;\n    }\n    t.dataLayerInstance = this, this._extensions.set(t.className, t), e ? this._logger.info(`Overriden registration for extension class <${t.className}>.`) : this._logger.info(`Registered extension class <${t.className}>.`);\n  }\n  /**\n   * Remove a registered {@link DataLayerExtension} instance.\n   *\n   * @param TConstructor The class to search for.\n   */\n  removeExtension(t) {\n    const e = new t();\n    if (this._extensions.has(e.className)) {\n      this._extensions.delete(e.className);\n      return;\n    }\n    this._logger.warn(`Tried to remove not existing extension class <${e.className}>.`);\n  }\n  /**\n   * Remove a registered {@link DataLayerExtension} instance by class name.\n   *\n   * @param className the name of the class\n   */\n  removeExtensionByClassName(t) {\n    if (this._extensions.has(t)) {\n      this._extensions.delete(t);\n      return;\n    }\n    this._logger.warn(`Tried to remove not existing extension class <${t}>.`);\n  }\n  /**\n   * Push a GlobalDataLayer Event with payload to the given data layer store. The method can fail and return `false`\n   *   because ...\n   *\n   *   - the given `eventName` was invalid\n   *   - the validation failed\n   *\n   * A settings object can be added as the third parameter to every call. This will then temporary override the provided\n   * settings for the time of the push action.\n   *\n   * @param eventName The name of the event that should be pushed.\n   * @param [payload] The _DataLayer_ properties to be merged and added to the data layer.\n   * @param [options] Temporary override the settings.\n   *\n   * @returns A boolean to indicate, if the push was successful.\n   */\n  push(t, e = [{}], s) {\n    var d, c;\n    if (t.length === 0)\n      return !1;\n    const i = s && !m(s) ? u(this._settings, s) : this._settings;\n    Array.isArray(e) || (e = [e]), e.forEach(k);\n    const n = this._eventNamePayloadFactory.create({ event: t }), l = k(this.getDefaultProperties(t));\n    i.clean.enabled && i.clean.executionPlace === y.BEFORE_MERGE && [l || {}, ...e].forEach(\n      (h) => P(h, i.clean.values)\n    );\n    const a = u(\n      n,\n      l || {},\n      ...e\n    );\n    if (i.clean.enabled && i.clean.executionPlace === y.AFTER_MERGE && P(a, i.clean.values), (d = i == null ? void 0 : i.validation) != null && d.enabled && ((c = i == null ? void 0 : i.validation) != null && c.eventMatrix)) {\n      const h = te(t, a, i.validation), g = h.issues.sort((f, p) => f.level !== p.level && p.level === \"warn\" ? -1 : 0).map((f) => `- [${f.level}]: ${f.message}`).join(`\n`);\n      switch (h.level) {\n        case \"error\":\n          return this._logger.error(\n            `Validation failed for event '${t}' with errors/warnings: \n${g}`,\n            i.logging\n          ), !1;\n        case \"warn\":\n          this._logger.warn(\n            `Validation success for event '${t}' with warnings: \n${g}`,\n            i.logging\n          );\n          break;\n        default:\n          this._logger.info(`Validation success for event '${t}'.`, i.logging);\n          break;\n      }\n    }\n    return this._dataLayerStore.push(a), !0;\n  }\n  /**\n   * Return the default properties for the given identifier.\n   *\n   * @param identifier The identifier to get the default properties for.\n   *\n   * @returns The found default properties for the identifier, otherwise `undefined`.\n   */\n  getDefaultProperties(t) {\n    const e = {\n      byName: [],\n      byArray: [],\n      byRegex: []\n    };\n    this._defaultProperties.forEach((i) => {\n      if (i.identifier === t)\n        return e.byName.push(i.data);\n      if (Array.isArray(i.identifier) && i.identifier.includes(t))\n        return e.byArray.push(i.data);\n      if (i.identifier instanceof RegExp && i.identifier.test(t))\n        return e.byRegex.push(i.data);\n    });\n    const s = [...e.byRegex, ...e.byArray, ...e.byName];\n    if (s.length)\n      return u(...s);\n  }\n  /**\n   * Set default properties, which will later be merged with the payload of a {@link push}, when the provided identifier\n   * matches the `eventName`.\n   *\n   * @param identifier The identifier to use the default properties for.\n   * @param data The default properties which will be used with the provided identifier to merge those properties with the payload.\n   */\n  setDefaultProperties(t, e) {\n    const s = this._defaultProperties.find((i) => i.identifier === t);\n    if (s) {\n      s.data = u(s.data, e);\n      return;\n    }\n    this._defaultProperties.push({\n      identifier: t,\n      data: e\n    });\n  }\n  /**\n   * Checks if the web properties feature ({@link getWebProperties}) is already handled or does the setup with the\n   * current settings.\n   *\n   * @private\n   */\n  _handleDefaultWebProperties() {\n    if (this._webPropertiesHandled || !this._settings.webProperties.enabled)\n      return;\n    const t = Z(\n      this._settings.webProperties,\n      this._webPayloadFactory\n    );\n    this.setDefaultProperties(this._settings.webProperties.eventNamePattern, t), this._webPropertiesHandled = !0;\n  }\n}\nclass oe extends ie {\n  /**\n   * Create an instance of the GlobalDataLayer library.\n   *\n   * @param options All options are merged with the {@link DEFAULT_SETTINGS} of type {@link TSettings}.\n   * @param [dataStore] The array where all the pushes are added to. The default tries to get or generate the\n   *   `window.pagData` array. If this is not possible, it creates an empty array, that is exposed via\n   *   {@link DataLayerStore}.\n   * @param [className] The class name of the library is here, because code can be uglified and/or minified later.\n   *\n   * @protected\n   */\n  constructor(e, s, i = \"GlobalDataLayer\") {\n    super(e, s, i);\n    o(this, \"_eventNamePayloadFactory\");\n    o(this, \"_webPayloadFactory\");\n    this._eventNamePayloadFactory = new U(), this._webPayloadFactory = new q(), this.setup();\n  }\n  setup() {\n    super.setup();\n  }\n}\nexport {\n  y as CleanExecutionPlace,\n  w as DEFAULT_SETTINGS,\n  L as DataLayerExtension,\n  U as EventNameFactory,\n  H as FrameTicker,\n  oe as GlobalDataLayer,\n  ie as GlobalDataLayerBaseClass,\n  b as Logger,\n  ae as PageNameExtenderExtension,\n  $ as ViewportTrackerExtension,\n  se as ViewportTrackerStatusChangeEvent,\n  q as WebPropertiesFactory,\n  P as clean,\n  G as cleanByDataLayerPaths,\n  _ as each,\n  S as eachFirstLevel,\n  k as executeEachFunction,\n  B as get,\n  C as getDataLayerPaths,\n  Z as getWebProperties,\n  m as isEmpty,\n  ne as isEmptyDataLayer,\n  u as merge,\n  te as validate\n};\n","import { GlobalDataLayer } from '@porsche/globaldatalayer';\nimport { TContextEnvironment, TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { Environment, Environments } from '../../entities/environment';\nimport { splitLocale } from '../../entities/locale';\nimport { DATA_LAYER_APPLICATION_NAME, DATA_LAYER_APP_ID, EventAction } from '../../utility/constants';\nimport { isString } from '../../utility/helper';\n\nfunction getEnvironmentAbbreviation(env: Environment): TContextEnvironment {\n  switch (env) {\n    case Environments.PRODUCTION:\n      return 'P';\n    case Environments.PREVIEW:\n      return 'PP';\n    default:\n      return 'K';\n  }\n}\n\nclass GlobalDataLayerService {\n  homeNavEventId = /^PAGHomeNav_/;\n  gdl!: GlobalDataLayer<TDataLayer>;\n\n  constructor() {\n    this.initialise();\n  }\n\n  initialise() {\n    this.gdl = new GlobalDataLayer();\n  }\n\n  pushDataLayerEvent(eventAction: EventAction, eventData?: TDataLayer): void {\n    if (eventData) {\n      this.gdl.push(eventAction, eventData);\n    } else {\n      this.gdl.push(eventAction);\n    }\n  }\n\n  setEnvironment(env: Environment) {\n    this.gdl.setDefaultProperties(this.homeNavEventId, {\n      context: { environment: getEnvironmentAbbreviation(env) }\n    });\n  }\n\n  setPageName(pageName?: string) {\n    this.gdl.setDefaultProperties(this.homeNavEventId, {\n      pageExperience: {\n        pageName: pageName\n      }\n    });\n  }\n\n  setUser(userId: string, loginStatus: boolean) {\n    this.gdl.setDefaultProperties(this.homeNavEventId, {\n      ids: { userId },\n      visitor: { loginStatus }\n    });\n  }\n\n  setLocale(locale: string) {\n    try {\n      const { country, language } = splitLocale(locale);\n\n      this.gdl.setDefaultProperties(this.homeNavEventId, {\n        context: { country: country, language: language }\n      });\n    } catch (err) {\n      // throw the error away\n    }\n  }\n\n  setDefaultProperties(locale: string, pageName?: string): void {\n    let defaultGDLProperties: TDataLayer = {\n      context: { applicationId: DATA_LAYER_APP_ID },\n      visitor: { loginStatus: false }\n    };\n\n    try {\n      const { country, language } = splitLocale(locale);\n\n      defaultGDLProperties = {\n        ...defaultGDLProperties,\n        context: { ...defaultGDLProperties.context, country, language, applicationName: DATA_LAYER_APPLICATION_NAME }\n      };\n    } catch (err) {\n      // throw the error away\n    }\n\n    if (isString(pageName)) {\n      defaultGDLProperties = { ...defaultGDLProperties, pageExperience: { pageName: pageName } };\n    }\n\n    this.gdl.setDefaultProperties(this.homeNavEventId, defaultGDLProperties);\n  }\n}\n\nexport default new GlobalDataLayerService();\n"],"mappings":"6FAAA,IAAIA,EAAIC,OAAOC,eACf,IAAIC,EAAI,CAACC,EAAGC,EAAGC,IAAMD,KAAKD,EAAIJ,EAAEI,EAAGC,EAAG,CAAEE,YAAa,EAAGC,cAAe,EAAGC,UAAW,EAAGC,MAAOJ,IAAOF,EAAEC,GAAKC,EAC7G,IAAIK,EAAI,CAACP,EAAGC,EAAGC,KAAOH,EAAEC,SAAUC,GAAK,SAAWA,EAAI,GAAKA,EAAGC,GAAIA,GAClE,MAAMM,EAAI,CACRC,aAAc,eACdC,YAAa,eACZC,EAAI,CACLC,MAAO,CACLC,SAAU,EACVC,eAAgBN,EAAEE,YAClBK,OAAQ,CAAC,QAAS,EAAG,OAEvBC,QAAS,CACPH,SAAU,EACVI,MAAO,QAETC,WAAY,CACVL,SAAU,EACVM,cAAe,EACfC,SAAU,GAEZC,cAAe,CACbR,SAAU,EACVS,iBAAkB,KAClBC,aAAc,EACdC,oBAAqB,IAGzB,MAAMC,EAiBJ,MAAAC,CAAOzB,GACL,cAAcA,EAAE0B,OAAS,UAAY1B,EAAE0B,MAAMC,SAAW,EAAI,GAAK,CAC/DC,QAAS,CACPC,YAAa7B,EAAE0B,OAGvB,EAEK,MAACI,EAAI,CAAC/B,EAAGC,KACZ,IAAIC,EACJ,IAAKA,KAAKF,EACR,MAAOA,IAAMA,EAAEE,KAAOD,EAAED,EAAEE,GAAIA,MAAQ,EACpC,OAAQ,EACZ,OAAQ,CAAC,EACR8B,EAAI,CAAChC,EAAGC,IAAM8B,EAAE/B,GAAG,CAACE,EAAG+B,KACxB,IAAK,MAAMC,KAAKlC,EAAEiC,GAChB,GAAIhC,EAAEC,EAAEgC,GAAIA,EAAGhC,EAAG+B,MAAQ,EACxB,OAAQ,EACZ,OAAQ,CAAC,IAQRE,EAAKnC,IACN,IAAK,MAAMC,KAAKD,EACd,OAAQ,EACV,OAAQ,CAAC,EACRoC,EAAI,CAACpC,EAAGC,EAAI,CAAEC,IAAOA,EAAIS,EAAEC,QAAU,UAAY,EAAIV,EAAEa,OAA3C,IAAwD,MAAQiB,EAC7EhC,GACA,CAACiC,EAAGC,EAAGG,EAAGC,KACRrC,EAAEsC,SAASN,YAAcI,EAAEH,GAAIC,EAAEE,WAAarC,EAAEsC,GAAG,IAEpDtC,GAAIwC,EAAI,CAACxC,EAAGC,IAAMD,IAAMgC,EACzBhC,GACA,CAACE,EAAG+B,EAAGC,EAAGG,KACRpC,EAAEsC,SAAS,GAAGF,EAAEI,cAAcR,EAAEQ,uBAAyBP,EAAED,GAAIE,EAAED,WAAalC,EAAEqC,GAAG,IAEpFrC,GAAI0C,EAAK1C,IAAOgC,EACjBhC,GACA,CAACC,EAAGC,EAAG+B,YAAchC,GAAK,aAAegC,EAAE/B,GAAKD,MAAO,KACtDD,GAwCH,MAAM2C,EAAI,CAAC3C,EAAGC,KACZ,MAAMC,EAAID,EAAE2C,MAAM,KAClB,GAAI1C,EAAE0B,SAAW,EACf,OACF,MAAMK,EAAIjC,EAAEE,EAAE,IACd,GAAI+B,EACF,OAAOA,EAAE/B,EAAE,GAAG,EACf2C,EAAK7C,IACN,IAAKA,EACH,MAAO,GACT,MAAMC,EAAI,GACV,OAAO+B,EACLhC,GACA,CAACE,EAAG+B,EAAGC,EAAGG,KACRpC,EAAE6C,KAAK,GAAGT,EAAEI,cAAcR,EAAEQ,aAAa,IAE1CxC,CAAC,EACH8C,EAAIpC,EAAEK,QACT,IAAIgC,EAAoB,CAAEhD,IAAOA,EAAEA,EAAEiD,MAAQ,GAAK,QAASjD,EAAEA,EAAEkD,KAAO,GAAK,OAAQlD,EAAEA,EAAEmD,IAAM,GAAK,MAAOnD,GAAjF,CAAqFgD,GAAK,IAClH,MAAMI,EAAI,MAAMA,EAQd,WAAAC,CAAYpD,EAAGC,GAKbK,EAAE+C,KAAM,UAQR/C,EAAE+C,KAAM,YACRA,KAAKC,OAAStD,EAAGqD,KAAKE,SAAW,IAC5BT,KACA7C,EAET,CAUE,kBAAAuD,CAAmBxD,GACjB,OAAOA,EAAI,IACNqD,KAAKE,YACLvD,GACDqD,KAAKE,QACb,CAaE,UAAAE,CAAWzD,EAAGC,GACZ,IAAKkD,EAAEO,cAAgBzD,EAAEW,QACvB,OAAQ,EACV,MAAMoB,EAAIe,EAAE9C,EAAEe,OACd,OAAQhB,GACN,IAAK,QACL,IAAK,OACH,OAAOgC,GAAKe,EAAE/C,GAChB,IAAK,OACL,IAAK,MACL,IAAK,QACL,IAAK,MACH,OAAOgC,GAAK,EACd,QACE,OAAQ,EAEhB,CAUE,IAAA2B,CAAK3D,EAAGC,EAAI,MAAO+B,GACjB,MAAMC,EAAIoB,KAAKG,mBAAmBxB,GAClC,GAAIqB,KAAKI,WAAWxD,EAAGgC,GACrB,OAAQhC,GACN,IAAK,MACH2D,QAAQV,IAAI,IAAIG,KAAKC,WAAWrD,MAAO2D,QAAQ3D,GAAGD,GAClD,MACF,QACE4D,QAAQ3D,GAAG,IAAIoD,KAAKC,WAAWtD,KAEzC,CAOE,GAAAkD,CAAIlD,EAAGC,GACLoD,KAAKM,KAAK3D,EAAG,MAAOC,EACxB,CAYE,GAAA4D,CAAI7D,EAAGC,GACLoD,KAAKM,KAAK3D,EAAG,MAAOC,EACxB,CASE,KAAA6D,CAAM9D,EAAGC,GACPoD,KAAKM,KAAK3D,EAAG,QAASC,EAC1B,CASE,KAAA+C,CAAMhD,EAAGC,GACPoD,KAAKM,KAAK3D,EAAG,QAASC,EAC1B,CASE,IAAA8D,CAAK/D,EAAGC,GACNoD,KAAKM,KAAK3D,EAAG,OAAQC,EACzB,CASE,IAAAgD,CAAKjD,EAAGC,GACNoD,KAAKM,KAAK3D,EAAG,OAAQC,EACzB,GAKAK,EAAE6C,EAAG,cAAe,YAAcS,QAAU,IAAxB,IACpB,IAAII,EAAIb,EACR,MAAMc,EAAI,IAAIlE,KACZ,MAAMC,EAAI,GACV,OAAOD,EAAEmE,SAASjE,IAChB,GAAIiC,EAAEjC,GACJ,OACF,MAAM+B,EAAI,IACLhC,KACAC,GAEL,IAAIgC,EACJ,IAAKA,KAAKD,SACDA,EAAEC,IAAM,WAAakC,MAAMC,QAAQpC,EAAEC,IAAMjC,EAAEiC,GAAK,IACpDjC,EAAEiC,MACFhC,EAAEgC,IACHjC,EAAEiC,GAAKD,EAAEC,EAAE,IACfjC,CAAC,EAEP,MAAMqE,EAiBJ,MAAA5C,CAAOzB,GACL,OAAOmC,EACL,CACEP,QAAS,CACP0C,UAAWtE,EAAEsE,UACbC,OAAQvE,EAAEwE,UAEZC,eAAgB,CACdC,OAAQ1E,EAAE2E,KAEZC,QAAS,CACPC,wBAAyB7E,EAAE8E,WAC3BC,oBAAqB/E,EAAEgF,OACvBC,yBAA0BjF,EAAEkF,YAC5BC,mBAAoBnF,EAAEoF,MACtBC,WAAYrF,EAAEqF,WACdC,UAAWtF,EAAEuF,YAGjB,MAAM,GAEZ,EAEA,MAAMC,EAAI9E,EAAEU,cAAeqE,EAAI,IAAMC,OAAOC,SAASC,KAAKC,QAAQ,SAAU,IAAKC,EAAI,KAAM,IAAqBC,MAAQC,cAAeC,EAAI,IAAMP,OAAOC,SAASnB,SAAU0B,EAAI,IAAMR,OAAOS,YAAY3D,WAAY4D,EAAI,IAAMV,OAAOS,YAAcT,OAAOW,WAAa,IAAM,IAAKC,EAAI,IAAMZ,OAAOW,WAAW7D,WAAY+D,EAAI,IAAMb,OAAOc,WAAW,oCAAoCC,QAAU,SAAW,UAAWC,EAAI,IAAMhB,OAAOiB,UAAUpB,UAAWqB,EAAK7G,IACnc,IAAKA,EAAE8G,aAAe9G,EAAE8G,YAAYlF,OAAS,EAC3C,OACF,MAAQkF,YAAa7G,GAAMD,EAAGE,EAAI,KAChC,MAAM+B,EAAI0D,OAAOW,WACjB,IAAIpE,EAAI,EAAGG,EAAI,EACf,KAAOA,EAAIpC,EAAE2B,QAAUK,GAAKhC,EAAEoC,IAC5BH,EAAIjC,EAAEoC,GAAIA,IACZ,OAAOH,EAAEO,UAAU,EAErB,OAAOzC,EAAEwB,mBAAqBtB,EAAIA,GAAG,EACpC6G,EAAI,CAAC/G,EAAGC,KACT,MAAMC,EAAI,IACLuF,KACAzF,GACFkC,EAAI,CACL6C,WAAY8B,EAAE3G,GACdqE,UAAWwB,IACXtB,SAAUyB,IACVtB,IAAK1E,EAAEqB,YAAcmE,EAAIA,IACzBT,OAAQ/E,EAAEsB,mBAAqB2E,EAAIA,IACnChB,YAAajF,EAAEsB,mBAAqB6E,EAAIA,IACxChB,MAAOnF,EAAEsB,mBAAqB+E,EAAIA,IAClCjB,WAAYkB,IACZhB,UAAWmB,KAEb,OAAO1G,EAAIA,EAAEyB,OAAOQ,GAAKA,CAAC,EACzB8E,EAAK,CAAChH,EAAGC,KACV,OAAQA,GACN,IAAK,SACL,IAAK,SACL,IAAK,UACH,cAAcD,IAAMC,EACtB,IAAK,QACH,OAAOmE,MAAMC,QAAQrE,IAAMA,EAAE4B,OAAS,EACxC,IAAK,sBACH,cAAc5B,GAAK,WAAaoE,MAAMC,QAAQrE,IAAMH,OAAOoH,KAAKjH,GAAG4B,OAAS,EAC9E,IAAK,MACH,OAAQ,EACV,QACE,WAAY5B,GAAK,kBAAoBA,GAAK,iBAAmBA,GAAK,WAAaC,EAAEiH,QAAQ,KAAO,EAC9F,OAAOjH,EAAE2C,MAAM,KAAKuE,KAAKlF,IACvB,MAAMC,EAAID,EAAEmF,OACZ,MAAO,SAASC,KAAKnF,GAAKA,EAAE4D,QAAQ,iBAAkB,IAAM,iBAAiBuB,KAAKnF,GAAKA,IAAM,OAAS,kBAAkBmF,KAAKnF,GAAKoF,OAAOC,WAAWrF,GAAKA,EAAE4D,QAAQ,iBAAkB,GAAG,IACvLvD,SAASvC,GAElB,OAAQ,CAAC,EACRwH,EAAK,CAACxH,EAAGC,EAAGC,KACb,MAAM+B,EAAI,CACRhB,MAAO,KACPwG,OAAQ,IAEV,IAAKvH,EAAEW,UAAYX,EAAEwH,YACnB,OAAOzF,EACT,MAAQ0F,OAAQzF,KAAMG,GAAMnC,EAAEwH,YAAapF,EAAIJ,EAAEgF,QAAQlH,GACzD,GAAIsC,KAAO,EACT,OAAOL,EAAEhB,MAAQ,QAASgB,EAAEwF,OAAO3E,KAAK,CACtC7B,MAAO,QACP2G,KAAM,kBACNC,KAAM7H,EACN8H,QAAS,IAAI9H,8BACXiC,EACN,MAAM8F,EAAIlF,EAAE5C,GAAI+H,EAAInI,OAAOoH,KAAK5E,GAAI4F,EAAIF,EAAEG,QACvCC,IAAOH,EAAEzF,SAAS4F,KAErBF,EAAErG,OAAS,IAAM1B,EAAEiB,cAAgBqB,EAAEvC,EAAGgI,GAAIA,EAAE9D,SAASgE,IACrDlG,EAAEhB,MAAQgB,EAAEhB,OAAS,OAAQgB,EAAEwF,OAAO3E,KAAK,CACzC7B,MAAO,OACP2G,KAAM,0BACNC,KAAMM,EACNL,QAAS,IAAIK,yDAAyDjI,EAAEiB,aAAe,GAAK,iDAC5F,KAEJ,IAAIiH,EACJ,IAAKA,KAAK/F,EAAG,CACX,MAAM8F,EAAI9F,EAAE+F,GAAIC,SAAWF,EAAEjI,EAAEoC,GAAK,IAAKgG,EAAIH,EAAEnI,IAAM,EAAGuI,EAAItI,EAAI0C,EAAE1C,EAAGmI,QAAU,EAAGI,SAAWD,EAAI,IACjG,GAAIF,GACJC,IACCE,IAAMvG,EAAEhB,MAAQ,QAASgB,EAAEwF,OAAO3E,KAAK,CACtC7B,MAAO,QACP2G,KAAM,4BACNC,KAAMO,EACNN,QAAS,IAAIM,2CACVlI,EAAEkB,UAAYoH,IAAMxB,EAAGuB,EAAGJ,EAAElI,KAAOgC,EAAEhB,MAAQ,QAASgB,EAAEwF,OAAO3E,KAAK,CACvE7B,MAAO,QACP2G,KAAM,sBACNC,KAAMO,EACNN,QAAS,IAAIM,sCAAsCD,EAAElI,mBAAmBsI,SACrErI,EAAEkB,SACL,OAAOa,CACb,CACE,OAAOA,CAAC,EAiZV,MAAMwG,EAaJ,WAAApF,CAAYpD,EAAGC,EAAG+B,EAAI,mBAKpB1B,EAAE+C,KAAM,cAKR/C,EAAE+C,KAAM,aAKR/C,EAAE+C,KAAM,sBAKR/C,EAAE+C,KAAM,WAQR/C,EAAE+C,KAAM,yBAA0B,GAQlC/C,EAAE+C,KAAM,mBAKR/C,EAAE+C,KAAM,cAA+B,IAAIoF,KAC3C,MAAMxG,EAAIgC,EACRvD,EACAV,GAAK,IAEPqD,KAAKqF,WAAa1G,EAAGqB,KAAKsF,QAAU,IAAI3E,EAAEX,KAAKqF,WAAYzG,EAAElB,SAAUsC,KAAKuF,UAAY3G,EAAGhC,EAAIoD,KAAKwF,gBAAkB5I,SAAWyF,OAAS,KAAOrC,KAAKwF,gBAAkBnD,OAAOoD,QAAUpD,OAAOoD,SAAW,GAAIzF,KAAKsF,QAAQ5E,KAAK,0DAA4DV,KAAKwF,gBAAkB,GAAIxF,KAAKsF,QAAQ5E,KAAK,6CAA8CV,KAAK0F,mBAAqB,EACtZ,CAME,KAAAC,GACE3F,KAAK4F,6BACT,CAKE,YAAIC,GACF,OAAO7F,KAAKuF,SAChB,CAKE,kBAAIO,GACF,OAAO9F,KAAKwF,eAChB,CAQE,sBAAAO,CAAuBpJ,GACrB,MAAMC,EAAI,IAAID,EACd,OAAOqD,KAAKgG,kCAAkCpJ,EAAEqJ,UACpD,CAQE,iCAAAD,CAAkCrJ,GAChC,OAAOqD,KAAKkG,YAAYC,IAAIxJ,GAAKqD,KAAKkG,YAAYE,IAAIzJ,QAAU,CACpE,CAME,uBAAA0J,GACE,MAAM1J,EAAI,GACV,IAAK,MAAMC,KAAKoD,KAAKkG,YAAYzI,SAC/Bd,EAAE6C,KAAK5C,GACT,OAAOD,CACX,CAOE,iBAAA2J,CAAkB3J,EAAGC,GAAK,GACxB,IAAKA,GAAKoD,KAAKkG,YAAYC,IAAIxJ,EAAEsJ,WAAY,CAC3CjG,KAAKsF,QAAQ1F,KAAK,sCAAsCjD,EAAEsJ,oCAC1D,MACN,CACItJ,EAAE4J,kBAAoBvG,KAAMA,KAAKkG,YAAYM,IAAI7J,EAAEsJ,UAAWtJ,GAAIC,EAAIoD,KAAKsF,QAAQ5E,KAAK,+CAA+C/D,EAAEsJ,eAAiBjG,KAAKsF,QAAQ5E,KAAK,+BAA+B/D,EAAEsJ,cACjN,CAME,eAAAQ,CAAgB9J,GACd,MAAMC,EAAI,IAAID,EACd,GAAIqD,KAAKkG,YAAYC,IAAIvJ,EAAEqJ,WAAY,CACrCjG,KAAKkG,YAAYQ,OAAO9J,EAAEqJ,WAC1B,MACN,CACIjG,KAAKsF,QAAQ1F,KAAK,iDAAiDhD,EAAEqJ,cACzE,CAME,0BAAAU,CAA2BhK,GACzB,GAAIqD,KAAKkG,YAAYC,IAAIxJ,GAAI,CAC3BqD,KAAKkG,YAAYQ,OAAO/J,GACxB,MACN,CACIqD,KAAKsF,QAAQ1F,KAAK,iDAAiDjD,MACvE,CAiBE,IAAA6C,CAAK7C,EAAGC,EAAI,CAAC,IAAK+B,GAChB,IAAI+F,EAAGC,EACP,GAAIhI,EAAE2B,SAAW,EACf,OAAQ,EACV,MAAMM,EAAID,IAAME,EAAEF,GAAKiC,EAAEZ,KAAKuF,UAAW5G,GAAKqB,KAAKuF,UACnDzE,MAAMC,QAAQnE,KAAOA,EAAI,CAACA,IAAKA,EAAEiE,QAAQzB,GACzC,MAAML,EAAIiB,KAAK4G,yBAAyBxI,OAAO,CAAEC,MAAO1B,IAAMqC,EAAII,EAAEY,KAAK6G,qBAAqBlK,IAC9FiC,EAAEtB,MAAMC,SAAWqB,EAAEtB,MAAME,iBAAmBN,EAAEC,cAAgB,CAAC6B,GAAK,MAAOpC,GAAGiE,SAC7EiE,GAAMhG,EAAEgG,EAAGlG,EAAEtB,MAAMG,UAEtB,MAAMgH,EAAI7D,EACR7B,EACAC,GAAK,MACFpC,GAEL,GAAIgC,EAAEtB,MAAMC,SAAWqB,EAAEtB,MAAME,iBAAmBN,EAAEE,aAAe0B,EAAE2F,EAAG7F,EAAEtB,MAAMG,SAAUiH,EAAI9F,GAAK,UAAY,EAAIA,EAAEhB,aAAe,MAAQ8G,EAAEnH,WAAaoH,EAAI/F,GAAK,UAAY,EAAIA,EAAEhB,aAAe,MAAQ+G,EAAEP,aAAc,CAC3N,MAAMU,EAAIZ,EAAGvH,EAAG8H,EAAG7F,EAAEhB,YAAaiH,EAAIC,EAAEX,OAAO2C,MAAK,CAAC/B,EAAGC,IAAMD,EAAEpH,QAAUqH,EAAErH,OAASqH,EAAErH,QAAU,QAAU,EAAI,IAAGkG,KAAKkB,GAAM,MAAMA,EAAEpH,WAAWoH,EAAEP,YAAWuC,KAAK,MAElK,OAAQjC,EAAEnH,OACR,IAAK,QACH,OAAOqC,KAAKsF,QAAQ3F,MAClB,gCAAgChD,8BAC1CkI,IACUjG,EAAElB,UACA,EACN,IAAK,OACHsC,KAAKsF,QAAQ1F,KACX,iCAAiCjD,uBAC3CkI,IACUjG,EAAElB,SAEJ,MACF,QACEsC,KAAKsF,QAAQ5E,KAAK,iCAAiC/D,MAAOiC,EAAElB,SAC5D,MAEV,CACI,OAAOsC,KAAKwF,gBAAgBhG,KAAKiF,IAAK,CAC1C,CAQE,oBAAAoC,CAAqBlK,GACnB,MAAMC,EAAI,CACRoK,OAAQ,GACRC,QAAS,GACTC,QAAS,IAEXlH,KAAK0F,mBAAmB7E,SAASjC,IAC/B,GAAIA,EAAEuI,aAAexK,EACnB,OAAOC,EAAEoK,OAAOxH,KAAKZ,EAAEwI,MACzB,GAAItG,MAAMC,QAAQnC,EAAEuI,aAAevI,EAAEuI,WAAWlI,SAAStC,GACvD,OAAOC,EAAEqK,QAAQzH,KAAKZ,EAAEwI,MAC1B,GAAIxI,EAAEuI,sBAAsBE,QAAUzI,EAAEuI,WAAWpD,KAAKpH,GACtD,OAAOC,EAAEsK,QAAQ1H,KAAKZ,EAAEwI,KAAK,IAEjC,MAAMzI,EAAI,IAAI/B,EAAEsK,WAAYtK,EAAEqK,WAAYrK,EAAEoK,QAC5C,GAAIrI,EAAEL,OACJ,OAAOsC,KAAKjC,EAClB,CAQE,oBAAA2I,CAAqB3K,EAAGC,GACtB,MAAM+B,EAAIqB,KAAK0F,mBAAmB6B,MAAM3I,GAAMA,EAAEuI,aAAexK,IAC/D,GAAIgC,EAAG,CACLA,EAAEyI,KAAOxG,EAAEjC,EAAEyI,KAAMxK,GACnB,MACN,CACIoD,KAAK0F,mBAAmBlG,KAAK,CAC3B2H,WAAYxK,EACZyK,KAAMxK,GAEZ,CAOE,2BAAAgJ,GACE,GAAI5F,KAAKwH,wBAA0BxH,KAAKuF,UAAUxH,cAAcR,QAC9D,OACF,MAAMZ,EAAI8G,EACRzD,KAAKuF,UAAUxH,cACfiC,KAAKyH,oBAEPzH,KAAKsH,qBAAqBtH,KAAKuF,UAAUxH,cAAcC,iBAAkBrB,GAAIqD,KAAKwH,uBAAyB,CAC/G,EAEA,MAAME,UAAWvC,EAYf,WAAApF,CAAYnD,EAAG+B,EAAGC,EAAI,mBACpB+I,MAAM/K,EAAG+B,EAAGC,GACZ3B,EAAE+C,KAAM,4BACR/C,EAAE+C,KAAM,sBACRA,KAAK4G,yBAA2B,IAAIzI,EAAK6B,KAAKyH,mBAAqB,IAAIzG,EAAKhB,KAAK2F,OACrF,CACE,KAAAA,GACEgC,MAAMhC,OACV,ECpnCA,SAASiC,EAA2BC,GAClC,OAAQA,GACN,KAAKC,EAAaC,WAChB,MAAO,IACT,KAAKD,EAAaE,QAChB,MAAO,KACT,QACE,MAAO,IAEb,CAEA,MAAMC,EAIJ,WAAAlI,GAHAC,KAAAkI,eAAiB,eAIflI,KAAKmI,Y,CAGP,UAAAA,GACEnI,KAAKoI,IAAM,IAAIC,C,CAGjB,kBAAAC,CAAmB9J,EAA0B+J,GAC3C,GAAIA,EAAW,CACbvI,KAAKoI,IAAI5I,KAAKhB,EAAa+J,E,KACtB,CACLvI,KAAKoI,IAAI5I,KAAKhB,E,EAIlB,cAAAgK,CAAeX,GACb7H,KAAKoI,IAAId,qBAAqBtH,KAAKkI,eAAgB,CACjD3J,QAAS,CAAEkK,YAAab,EAA2BC,K,CAIvD,WAAAa,CAAYC,GACV3I,KAAKoI,IAAId,qBAAqBtH,KAAKkI,eAAgB,CACjD9G,eAAgB,CACduH,SAAUA,I,CAKhB,OAAAC,CAAQC,EAAgBC,GACtB9I,KAAKoI,IAAId,qBAAqBtH,KAAKkI,eAAgB,CACjDa,IAAK,CAAEF,UACPtH,QAAS,CAAEuH,gB,CAIf,SAAAE,CAAUC,GACR,IACE,MAAMC,QAAEA,EAAOC,SAAEA,GAAaC,EAAYH,GAE1CjJ,KAAKoI,IAAId,qBAAqBtH,KAAKkI,eAAgB,CACjD3J,QAAS,CAAE2K,QAASA,EAASC,SAAUA,I,CAEzC,MAAOE,G,EAKX,oBAAA/B,CAAqB2B,EAAgBN,GACnC,IAAIW,EAAmC,CACrC/K,QAAS,CAAEgL,cAAeC,GAC1BjI,QAAS,CAAEuH,YAAa,QAG1B,IACE,MAAMI,QAAEA,EAAOC,SAAEA,GAAaC,EAAYH,GAE1CK,EAAoB/M,OAAAkN,OAAAlN,OAAAkN,OAAA,GACfH,GAAoB,CACvB/K,QAAOhC,OAAAkN,OAAAlN,OAAAkN,OAAA,GAAOH,EAAqB/K,SAAO,CAAE2K,UAASC,WAAUO,gBAAiBC,K,CAElF,MAAON,G,CAIT,GAAIO,EAASjB,GAAW,CACtBW,EAAoB/M,OAAAkN,OAAAlN,OAAAkN,OAAA,GAAQH,GAAoB,CAAElI,eAAgB,CAAEuH,SAAUA,I,CAGhF3I,KAAKoI,IAAId,qBAAqBtH,KAAKkI,eAAgBoB,E,EAIvD,MAAAO,EAAe,IAAI5B,S"}