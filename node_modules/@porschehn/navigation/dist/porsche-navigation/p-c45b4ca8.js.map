{"version":3,"names":["dealerSearchResultsStore","createStore","searchTerm","results","savedDealerCookie","readDealerCookie","ppnDealers","dealersOfRegion","regions","onChange","newValue","windowService","setCookie","SAVED_DEALER_COOKIE","JSON","stringify","parse","getCookie","err","experimentsDefinitions","MatomoAbTestingService","constructor","this","client","experiments","init","featureToggles","isABTestingToggleActive","setClient","loadExperiments","e","Logger","error","execute","experimentName","experiment","getExperiment","variation","getVariation","activate","executeContentChange","menu","experienceName","name","children","Promise","resolve","injectScript","w","window","Matomo","getClient","ExperimentCreator","AbTesting","Experiment","getAbTestingDefinitions","experimentKey","experimentDefinition","push","loadContentGeneratorExperiments","contentDefinitions","navContentStore","state","abExperiences","variationDefinition","variations","map","Object","assign","find","NaviError","NaviErrorTypes","GENERAL","variationName","getActivatedVariationName","reject","s","document","createElement","text","getMatomoScript","head","appendChild","matomoScript","getHTMLElement","querySelector","onload","onerror","currentEnvironment","navStateStore","env","MatomoAbTesting","abTestingService"],"sources":["src/state/dealer-search-results-store.ts","src/utility/constants/ab-testing.ts","src/services/ab-testing/matomo-ab-testing-service.ts","src/services/ab-testing/ab-testing-constructor-service.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\nimport { PPNDealerSearchResult } from '../entities/dealer-response';\nimport windowService from '../services/window-service';\nimport { SAVED_DEALER_COOKIE } from '../utility/constants';\n\nexport interface DealerSearchResults {\n  searchTerm: string;\n  results: string[] | null;\n  savedDealerCookie: SavedDealerCookie | null;\n  ppnDealers: { [dealerId: string]: PPNDealerSearchResult };\n  dealersOfRegion: any;\n}\n\nexport interface SavedDealerCookie {\n  id: string;\n  latitude: number;\n  longitude: number;\n}\n\nexport const dealerSearchResultsStore = createStore<DealerSearchResults>({\n  searchTerm: '',\n  results: null,\n  savedDealerCookie: readDealerCookie(),\n  ppnDealers: {},\n  dealersOfRegion: { regions: [] }\n});\n\ndealerSearchResultsStore.onChange('savedDealerCookie', (newValue) => {\n  windowService.setCookie(SAVED_DEALER_COOKIE, JSON.stringify(newValue));\n});\n\nfunction readDealerCookie(): SavedDealerCookie | null {\n  try {\n    return JSON.parse(windowService.getCookie(SAVED_DEALER_COOKIE));\n  } catch (err) {\n    return null;\n  }\n}\n","export type ExperimentDefinition = Record<string, unknown>;\n\nexport type AvailableExperiment = (typeof experimentsDefinitions)[keyof typeof experimentsDefinitions];\n\nexport const experimentsDefinitions: ExperimentDefinition = {};\n\nexport interface MatomoClient {\n  track: () => void;\n  AbTesting: {\n    Experiment: { new (definition: unknown): Experiment };\n  };\n}\n\nexport interface Experiment {\n  name: string;\n  getActivatedVariationName: () => string;\n  variations: Variation[];\n}\n\nexport interface Variation {\n  name: string;\n  activate: () => unknown;\n}\n","import { navStateStore } from '../../state/nav-state-store';\nimport { NaviError, NaviErrorTypes } from '../../utility/navi-error';\nimport { IAbTestingService } from './ab-testing-service.interface';\nimport {\n  AvailableExperiment,\n  Experiment,\n  experimentsDefinitions,\n  MatomoClient,\n  Variation\n} from '../../utility/constants/ab-testing';\nimport Logger from '../logger';\nimport { getHTMLElement } from '../../utility/helper';\nimport featureToggles from '../feature-toggles';\nimport { TMenu, VariationDefinition } from '../../entities/content';\nimport { navContentStore } from '../../state/nav-content-store';\n\nexport class MatomoAbTestingService implements IAbTestingService {\n  client: MatomoClient | null = null;\n  experiments: Experiment[] = [];\n\n  async init(): Promise<void> {\n    if (featureToggles.isABTestingToggleActive()) {\n      try {\n        await this.setClient();\n        await this.loadExperiments();\n      } catch (e) {\n        Logger.error('Could not initialize AbTesting', e as Error);\n      }\n    }\n  }\n\n  execute(experimentName: AvailableExperiment): void {\n    if (featureToggles.isABTestingToggleActive()) {\n      try {\n        const experiment = this.getExperiment(experimentName);\n        const variation = this.getVariation(experiment);\n        variation.activate();\n      } catch (e) {\n        Logger.error(`Could not execute experiment ${experimentName}`, e as Error);\n      }\n    }\n  }\n\n  executeContentChange(menu: TMenu): TMenu[] {\n    if (featureToggles.isABTestingToggleActive()) {\n      try {\n        const experiment = this.getExperiment(menu.experienceName);\n        const variation = this.getVariation(experiment);\n        if (variation.name === 'original') {\n          return menu.children;\n        }\n        return variation.activate() as unknown as TMenu[];\n      } catch (e) {\n        Logger.error(`Could not execute experiment ${menu.experienceName}`, e as Error);\n      }\n    }\n    return menu.children;\n  }\n\n  private async setClient(): Promise<MatomoClient> {\n    if (this.client) return Promise.resolve(this.client);\n\n    await this.injectScript();\n    const w = window as any;\n    this.client = w.Matomo as MatomoClient;\n    return this.client;\n  }\n\n  private async loadExperiments(): Promise<void> {\n    const client = this.getClient();\n    const ExperimentCreator = client.AbTesting.Experiment;\n    const experimentsDefinitions = this.getAbTestingDefinitions();\n    for (const experimentKey in experimentsDefinitions) {\n      const experimentDefinition = experimentsDefinitions[experimentKey];\n      const experiment = new ExperimentCreator(experimentDefinition);\n      this.experiments.push(experiment);\n    }\n  }\n\n  async loadContentGeneratorExperiments(): Promise<void> {\n    if (featureToggles.isABTestingToggleActive()) {\n      const client = this.getClient();\n      const ExperimentCreator = client.AbTesting.Experiment;\n      const contentDefinitions = navContentStore.state.abExperiences;\n\n      if (contentDefinitions) {\n        for (const experimentDefinition of contentDefinitions) {\n          const variationDefinition: Variation[] = experimentDefinition.variations.map(\n            (variation: VariationDefinition) => ({\n              name: variation.name,\n              activate: () => variation.children\n            })\n          );\n          variationDefinition.push({\n            name: 'original',\n            activate: () => null\n          });\n          const experiment = new ExperimentCreator({ ...experimentDefinition, variations: variationDefinition });\n          this.experiments.push(experiment);\n        }\n      }\n    }\n  }\n\n  private getExperiment(name: AvailableExperiment): Experiment {\n    const experiment = this.experiments.find((experiment) => experiment.name === name);\n    if (!experiment) throw new NaviError(`No experiment with name: ${name} found`, NaviErrorTypes.GENERAL);\n    return experiment;\n  }\n\n  private getVariation(experiment: Experiment): Variation {\n    const variationName = experiment.getActivatedVariationName();\n    const variation = experiment.variations.find((variation) => variation.name === variationName);\n\n    if (!variation)\n      throw new NaviError(\n        `No variation in experiment: ${experiment.name} with name: ${variationName} found`,\n        NaviErrorTypes.GENERAL\n      );\n    return variation;\n  }\n\n  private getClient(): MatomoClient {\n    if (!this.client) throw new NaviError('No client is set, you must call init first', NaviErrorTypes.GENERAL);\n    return this.client;\n  }\n\n  private injectScript(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      const s = document.createElement('script');\n      s.text = this.getMatomoScript();\n      document.head.appendChild(s);\n\n      const matomoScript = getHTMLElement(\n        document.querySelector('script[src=\"//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js\"]')\n      );\n\n      if (matomoScript) {\n        matomoScript.onload = () => {\n          resolve(true);\n        };\n        matomoScript.onerror = () => reject(new NaviError('Could not inject Matomo script', NaviErrorTypes.GENERAL));\n      } else {\n        reject(new NaviError('There is no HTML Script element available', NaviErrorTypes.GENERAL));\n      }\n    });\n  }\n\n  private getAbTestingDefinitions() {\n    return experimentsDefinitions;\n  }\n\n  private getMatomoScript(): string {\n    const currentEnvironment = navStateStore.state.env;\n    return `var _paq = window._paq = window._paq || [];\n    _paq.push(['trackPageView']);\n    _paq.push(['enableLinkTracking']);\n    (function() {\n      var u=\"https://porsche.matomo.cloud/\";\n      _paq.push(['setTrackerUrl', u+'matomo.php']);\n      _paq.push(['setSiteId', ${currentEnvironment === 'production' ? '7' : '8'}]);\n      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n      g.async=true; g.src='//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);\n    })\n   ();`;\n  }\n}\n\nexport const MatomoAbTesting = new MatomoAbTestingService();\n","import { IAbTestingService } from './ab-testing-service.interface';\nimport { MatomoAbTesting } from './matomo-ab-testing-service';\n\nexport default function abTestingService(): IAbTestingService {\n  return MatomoAbTesting;\n}\n"],"mappings":"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"}