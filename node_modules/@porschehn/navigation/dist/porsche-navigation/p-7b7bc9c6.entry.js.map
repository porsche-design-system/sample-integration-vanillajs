{"version":3,"names":["autocompleteSearchFieldCss","AutocompleteSearchField","this","initialValue","clickListener","e","showPredictions","composedPath","el","querySelector","predictions","length","keydownListener","key","preventDefault","stopPropagation","watchShowPredictions","newValue","predictionsToggle","emit","watchInitialValue","searchterm","componentDidRender","autoCompleteLoaded","onKeyDown","pressedKey","highlightedPredictionIndex","text","onSubmit","prediction","submitSearch","undefined","render","h","class","event","state","isString","errorMessage","message","type","placeholder","autocomplete","role","toString","String","value","onInput","_a","getHTMLInputElement","target","dealerSearchResultsStore","savedDealerCookie","clearSearch","searchInput","id","map","index","onClick","color","src","getAssetPath","getConfig","navStateStore","env","ASSETS_URL","alt","dealerDetailsDrawerCss","DealerDetailsDrawer","componentWillLoad","waitForComponentsToLoad","componentDidLoad","dealer","getDealer","globalDataLayerService","pushDataLayerEvent","EventActions","DEALER_DETAILS_SCREEN_LOAD","componentDisplay","displayElementId","analyticsManager","getDealerResultsLoadDisplayElementId","DEALER_SEARCH_DISPLAY_ELEMENT_ID","displayElementType","getDealerResultsLoadDisplayElementType","displayElementName","name","componentSearch","searchTerm","partner","companyName","companyId","porschePartnerNo","componentsOnReady","Timeout","showSkeleton","ppnDealer","ppnDealers","dealerId","renderHeading","Fragment","style","display","tag","size","language","splitLocale","locale","testDrive","finder","bookService","navContentStore","details","isAddressLocalized","Object","values","addressLocalized","every","x","address","nameLocalized","hasAddress","street","postalCode","city","hasPhoneNumber","contactDetails","phoneNumber","hasEmail","emailAddress","hasHomepage","homepage","hasTestdrive","link","hasName","openingHours","getOpeningHours","contactOpeningHours","hasOpeningHours","country","err","dealerAddress","customDatalayerProperties","Host","isDesktop","breakpoint","DealerDetailCard","elementId","getDealerDetailsRoutingKey","analyticsId","iconLeft","encodeURIComponent","datalayerEventAction","DEALER_CONTACT_CLICK","variant","MenuItemVariant","DealerDetails","featureToggles","isDealerSearchOpeningHoursEnabled","replace","sanitizeDealerHomepage","addQueryParamsToUrl","dealership","ppnOrgId","props","assign","tabIndex","ErrorMessage","onDismiss","description","dealerSearchByNumberOfDealersCss","DealerSearchByNumberOfDealers","then","numberOfDealers","fetchAllDealersForMarket","emitPageLoadEvent","removeSkeletonOnDealerSearchForm","error","errorContent","isLoading","ppnDealerSearchResults","getAllPPNDealersForMarket","DEALER_API_URL_ALL_DEALERS","results","reduce","dealers","dealerSearchResult","logger","formErrorMessage","getErrorMessage","emitResultsLoadEvent","DEALER_SEARCH_SCREEN_LOAD","calculateDisplayElementId","calculateDisplayElementType","ElementTypes","dealerSearchForm","DEALER_MARKET_SEARCH_TERM","numberOfResults","DEALER_RESULTS_SCREEN_LOAD","DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER","reset","aria","dealerSearchFormDropdownCss","DealerSearchFormDropdown","regions","getDealersByRegion","loadedAutoCompleteListener","_event","dealersOfRegion","getPPNDealersByRegion","Logger","dealerSearchFormEvent","onCitySelect","selectedCity","cities","find","cityName","cityNameLocalized","includes","keys","selectedProvince","onProvinceSelect","getCitiesByGivenRegionName","province","selectedRegion","regionName","regionNameLocalized","GEOLOCATION_BUTTON_SEARCH_TERM","dealerContent","clearSearchEvent","searchText","weight","ellipsis","cursor","filter","label","search","dropdown","required","onChange","hidden","selected","selectAProvince","region","disabled","selectACity","MapsService","constructor","autocompleteService","placesService","geocoderService","getLocation","init","apiKey","google","windowService","fetchGoogleMapsApi","maps","places","AutocompleteService","PlacesService","Map","createDiv","Geocoder","latLong","LatLng","latitude","longitude","NaviError","NaviErrorTypes","GENERAL","getPredictions","input","Promise","resolve","reject","getPlacePredictions","componentRestrictions","getRegionSpecificCountry","status","getErrorType","place_id","getPlaceCoordinates","placeId","response","getDetails","_b","geometry","location","lat","_d","_c","lng","NO_RESULTS","getFormattedAddressFromCoordinates","geocode","formatted_address","INVALID_INPUT","RETRY","mapsService","dealerSearchFormGeolocationCss","DealerSearchFormGeolocation","debounceTimeout","disconnectedCallback","cancel","catch","componentSearchSearchTerm","fetchDealers","getSearchTerms","placeCoordinates","getPPNDealers","DEALER_API_URL","showGeolocationButton","animateResults","noInput","async","DEALER_SEARCH_CLICK","componentClick","clickElementId","clickElementName","clickElementType","ClickElementTypes","Button","targetElement","DEALER_SEARCH_TARGET_ELEMENT","RoutingKeys","DEALER_SEARCH","getCurrentLocation","getNavigatorLatLong","formattedAddress","DEALER_GEOLOCATION_CLICK","geolocation","onDealerSearchEntry","form","inputPlaceholder","onSearchInput","set","detail","onClearSearch","onSubmitSearch","getString","onAnimationEnd","or","icon","DealerSearchFormItemCard","showOverlay","distance","onDealerCardClick","dealerDetailsRoutingKey","addRoute","coordinates","DEALER_RESULT_CLICK","Math","round","unit","toLowerCase","DealerSearchMapLink","emitDealersMapEvent","DEALER_MAP_CLICK","Link","targetUrl","href","dealerSearchResultsCss","DealerSearchResults","noResults","menuItemCardCss","MenuItemCard","NAVIGATION_CLICK","handleKeyDown","anchorElement","getHTMLElement","click","sendDataLayerEvent","renderTitle","className","renderSubtitle","subtext","body","myporscheLoginCss","MyPorscheLogin","NAVIGATION_LINK_CLICK","MY_PORSCHE","myPorscheDrawer","loginEvent","login","more","signup","signupText"],"sources":["src/components/autocomplete-search-field/autocomplete-search-field.scss?tag=phn-autocomplete-search-field&encapsulation=scoped","src/components/autocomplete-search-field/autocomplete-search-field.tsx","src/components/dealer-details-drawer/dealer-details-drawer.scss?tag=phn-dealer-details-drawer&encapsulation=scoped","src/components/dealer-details-drawer/dealer-details-drawer.tsx","src/components/dealer-search-form/error-message.tsx","src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.scss?tag=phn-dealer-search-by-number-of-dealers&encapsulation=scoped","src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.tsx","src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.scss?tag=phn-dealer-search-form-dropdown&encapsulation=scoped","src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.tsx","src/services/maps-service.ts","src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.scss?tag=phn-dealer-search-form-geolocation&encapsulation=scoped","src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.tsx","src/components/dealer-search-results/dealer-search-form-item-card.tsx","src/components/dealer-search-results/dealer-search-map-link.tsx","src/components/dealer-search-results/dealer-search-results.scss?tag=phn-dealer-search-results&encapsulation=scoped","src/components/dealer-search-results/dealer-search-results.tsx","src/components/menu-item-card/menu-item-card.scss?tag=phn-menu-item-card&encapsulation=scoped","src/components/menu-item-card/menu-item-card.tsx","src/components/myporsche-login/myporsche-login.scss?tag=phn-myporsche-login&encapsulation=scoped","src/components/myporsche-login/myporsche-login.tsx"],"sourcesContent":["@import '../../scss';\n\n:host {\n  display: block;\n\n  .form-container {\n    display: block;\n    position: relative;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    box-sizing: border-box;\n\n    phn-p-text-field-wrapper {\n      width: 100%;\n\n      input[type=search]::-ms-clear {  display: none; width : 0; height: 0; }\n      input[type=search]::-ms-reveal {  display: none; width : 0; height: 0; }\n      input[type=\"search\"]::-webkit-search-decoration,\n      input[type=\"search\"]::-webkit-search-cancel-button,\n      input[type=\"search\"]::-webkit-search-results-button,\n      input[type=\"search\"]::-webkit-search-results-decoration { display: none; }\n    }\n\n    &.inline-search-form {\n      margin-right: p-px-to-rem(16px);\n    }\n  }\n\n  .prediction-container {\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 10;\n    width: 100%;\n\n    background-color: white;\n    border: 1px solid $pds-theme-light-contrast-low;\n\n    ul {\n      margin-block: 0;\n      margin-inline: 0;\n      padding-inline: 0;\n      list-style-type: none;\n\n      li {\n        padding-left: p-px-to-rem(12px);\n        padding: p-px-to-rem(8px) 0 p-px-to-rem(8px) p-px-to-rem(12px);\n        color: $pds-theme-light-primary;\n\n        &:hover {\n          color: $pds-theme-light-notification-info;\n          background-color: $pds-theme-light-background-surface;\n        }\n\n        &.highlighted-prediction {\n          color: $pds-theme-light-notification-info;\n        }\n      }\n    }\n\n    .powered-by-google {\n      margin: p-px-to-rem(12px) 0 p-px-to-rem(12px) p-px-to-rem(12px);\n    }\n  }\n}\n","import { Component, EventEmitter, h, Prop, State, Event, getAssetPath, Element, Listen, Watch } from '@stencil/core';\nimport { Prediction } from '../../entities/places';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getConfig, getHTMLInputElement, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\n\n@Component({\n  tag: 'phn-autocomplete-search-field',\n  styleUrl: 'autocomplete-search-field.scss',\n  scoped: true\n})\nexport class AutocompleteSearchField {\n  @Prop() placeholder!: string;\n  @Prop() predictions!: Prediction[];\n  @Prop() initialValue = '';\n  @Prop() errorState = '';\n  @Prop() errorMessage = '';\n\n  @State() showPredictions = false;\n  @State() highlightedPredictionIndex = -1;\n  @State() searchterm = this.initialValue;\n\n  @Event() searchInput!: EventEmitter<string>;\n  @Event() clearSearch!: EventEmitter<void>;\n  @Event() submitSearch!: EventEmitter<Prediction | null>;\n  @Event() predictionsToggle!: EventEmitter<boolean>;\n  @Event() autoCompleteLoaded!: EventEmitter<boolean>;\n\n  @Element() el!: HTMLPhnAutocompleteSearchFieldElement;\n\n  @Listen('click', { passive: true, target: 'window' })\n  clickListener(e: MouseEvent): void {\n    this.showPredictions =\n      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;\n  }\n\n  @Listen('keydown', { passive: false })\n  keydownListener(e: KeyboardEvent): void {\n    if (e.key === 'Escape' && this.showPredictions) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.showPredictions = false;\n    }\n  }\n\n  @Watch('showPredictions')\n  watchShowPredictions(newValue: boolean): void {\n    this.predictionsToggle.emit(newValue);\n  }\n\n  @Watch('initialValue')\n  watchInitialValue(): void {\n    this.searchterm = this.initialValue;\n  }\n\n  componentDidRender(): void {\n    this.autoCompleteLoaded.emit(true);\n  }\n\n  private onKeyDown(pressedKey: string): void {\n    if (this.predictions.length === 0) return;\n\n    switch (pressedKey) {\n      case 'ArrowDown':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex === this.predictions.length - 1) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        }\n        this.highlightedPredictionIndex++;\n        break;\n\n      case 'ArrowUp':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex < 0) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        } else if (this.highlightedPredictionIndex === 0) {\n          this.highlightedPredictionIndex = this.predictions.length - 1;\n          break;\n        }\n        this.highlightedPredictionIndex--;\n        break;\n    }\n\n    if (this.highlightedPredictionIndex > -1) {\n      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;\n    }\n  }\n\n  private onSubmit() {\n    const prediction =\n      this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];\n    this.submitSearch.emit(prediction ?? null);\n    this.showPredictions = false;\n    if (prediction !== undefined) this.searchterm = prediction.text;\n  }\n\n  render(): HTMLPhnAutocompleteSearchFieldElement {\n    return (\n      <form\n        class=\"form-container\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n      >\n        <phn-p-text-field-wrapper\n          data-test-id=\"dealer-search-form-input\"\n          state={isString(this.errorMessage) ? 'error' : 'none'}\n          message={this.errorMessage}\n        >\n          <input\n            class=\"autofocus\"\n            aria-label=\"Find a dealer by typing a city name or zip code\"\n            type=\"search\"\n            placeholder={this.placeholder}\n            autocomplete=\"off\"\n            role=\"combobox\"\n            data-validate=\"required\"\n            aria-expanded={(this.predictions.length > 0 && this.showPredictions).toString()}\n            aria-controls=\"predictions\"\n            aria-autocomplete=\"list\"\n            aria-activedescendant={this.showPredictions ? String(this.highlightedPredictionIndex) : undefined}\n            value={this.searchterm}\n            onInput={(event: Event) => {\n              event.preventDefault();\n\n              this.showPredictions = true;\n              this.highlightedPredictionIndex = -1;\n\n              const value = getHTMLInputElement(event.target)?.value;\n\n              if (!isString(value)) {\n                this.searchterm = '';\n                this.showPredictions = false;\n                dealerSearchResultsStore.state.savedDealerCookie = null;\n                this.clearSearch.emit();\n                return;\n              }\n\n              this.searchInput.emit(value);\n            }}\n            onKeyDown={(event: KeyboardEvent) => {\n              this.onKeyDown(event.key);\n            }}\n          />\n        </phn-p-text-field-wrapper>\n\n        {this.predictions.length > 0 && this.showPredictions ? (\n          <div class=\"prediction-container\">\n            <ul\n              id=\"predictions\"\n              data-test-id=\"dealer-search-autocomplete-predictions\"\n              role=\"listbox\"\n              aria-label=\"List of location predictions\"\n            >\n              {this.predictions.map((prediction, index) => (\n                <li\n                  key={prediction.id}\n                  class={index === this.highlightedPredictionIndex ? 'highlighted-prediction' : ''}\n                  role=\"option\"\n                  aria-selected={String(index === this.highlightedPredictionIndex)}\n                  id={String(index)}\n                  onClick={() => {\n                    this.highlightedPredictionIndex = index;\n                    this.onSubmit();\n                  }}\n                  onKeyDown={(event: KeyboardEvent) => {\n                    // TODO: does this code ever get executed?\n                    if (event.key === 'Enter') {\n                      this.onSubmit();\n                    }\n                  }}\n                >\n                  <phn-p-text color=\"inherit\">{prediction.text}</phn-p-text>\n                </li>\n              ))}\n            </ul>\n            <img\n              class=\"powered-by-google\"\n              src={getAssetPath(\n                `${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`\n              )}\n              alt=\"powered by Google\"\n            />\n          </div>\n        ) : null}\n      </form>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  margin-top: p-px-to-rem(26px);\n\n  @include pds-media-query-min('s') {\n    margin-top: p-px-to-rem(-2px);\n  }\n\n  @include pds-media-query-min('l') {\n    margin-top: p-px-to-rem(-3px);\n  }\n\n  @include pds-media-query-min('xxl') {\n    margin-top: p-px-to-rem(-7px);\n  }\n\n  .skeleton-headline {\n    width: auto;\n    height: p-px-to-rem(50px);\n    background: $pds-theme-light-contrast-low;\n    margin-bottom:  p-px-to-rem(28px);\n    border-radius: 4px;\n  }\n\n  phn-p-heading{\n    margin-bottom: p-px-to-rem(24px);\n  }\n\n  phn-menu-item {\n    margin-top: p-px-to-rem(24px);\n\n    &:first-of-type {\n      margin-top: p-px-to-rem(14px);\n    }\n  }\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    &.skeleton-menu-item {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { getDealerDetailsRoutingKey } from '../../entities/routing-key';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { DEALER_SEARCH_DISPLAY_ELEMENT_ID, EventAction, EventActions, MenuItemVariant } from '../../utility/constants';\nimport { addQueryParamsToUrl, isDesktop, isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { PPNDealer } from '../../entities/dealer-response';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getOpeningHours, sanitizeDealerHomepage } from '../../utility/helpers/dealer-search-helper';\nimport featureToggles from '../../services/feature-toggles';\n\n@Component({\n  tag: 'phn-dealer-details-drawer',\n  styleUrl: 'dealer-details-drawer.scss',\n  scoped: true\n})\nexport class DealerDetailsDrawer {\n  @Prop() dealerId!: string;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  @State() errorMessage = '';\n  @State() showSkeleton = true;\n\n  @Element() el!: HTMLPhnDealerDetailsDrawerElement;\n\n  @Event() clickDrawerHeaderBack!: EventEmitter<void>;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n  }\n\n  componentDidLoad(): void {\n    const dealer = this.getDealer();\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_DETAILS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_DISPLAY_ELEMENT_ID),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer?.name\n      },\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: dealer?.name,\n        companyId: dealer?.porschePartnerNo\n      }\n    });\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.showSkeleton = false;\n  }\n\n  private getDealer(): PPNDealer {\n    const { ppnDealer: dealer } = dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};\n\n    return dealer;\n  }\n\n  private renderHeading(name: string): HTMLElement | null {\n    return (\n      <Fragment>\n        {this.showSkeleton ? <div class=\"skeleton-headline\" /> : null}\n        <phn-p-heading\n          style={{ display: this.showSkeleton ? 'none' : '' }}\n          tag=\"h3\"\n          size=\"large\"\n          data-test-id=\"dealer-headline\"\n        >\n          {name}\n        </phn-p-heading>\n      </Fragment>\n    );\n  }\n\n  render(): HTMLPhnDealerDetailsDrawerElement {\n    const ppnDealer = this.getDealer();\n\n    if (ppnDealer === undefined) {\n      return <div>{this.errorMessage}</div>;\n    }\n    const language = splitLocale(this.locale).language;\n    const { testDrive, finder, bookService } = navContentStore.state.dealer.details;\n\n    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n    const address =\n      language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n    const name =\n      language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n    // postalCode is currently not available in addressLocalized\n    const hasAddress = isString(address.street) || isString(ppnDealer.address.postalCode) || isString(address.city);\n    const hasPhoneNumber = isString(ppnDealer.contactDetails.phoneNumber);\n    const hasEmail = isString(ppnDealer.contactDetails.emailAddress);\n    const hasHomepage = isString(ppnDealer.contactDetails.homepage);\n    const hasTestdrive = testDrive && isString(testDrive?.text) && isString(testDrive?.link);\n    const hasName = isString(ppnDealer.nameLocalized) || isString(ppnDealer.name);\n    const openingHours = getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);\n    const hasOpeningHours = openingHours !== '';\n\n    let country = '';\n    try {\n      country = splitLocale(this.locale).country;\n    } catch (err) {\n      // throw the error away\n    }\n    const dealerAddress =\n      country === 'JP'\n        ? `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`\n        : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;\n    const customDatalayerProperties = {\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    };\n\n    return (\n      <Host>\n        {hasName && isDesktop(this.breakpoint) ? this.renderHeading(name) : null}\n        {hasAddress ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'address')}\n            analyticsId=\"mainmenu.finddealer.map\"\n            text={dealerAddress}\n            iconLeft=\"pin\"\n            data-test-id=\"dealer-address\"\n            link={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(\n              `${address.street},${ppnDealer.address.postalCode},${address.city}`\n            )}`}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'openingHours')}\n            analyticsId=\"mainmenu.finddealer.openinghours\"\n            text={openingHours}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-opening-hours\"\n            iconLeft=\"clock\"\n          />\n        ) : null}\n\n        {hasPhoneNumber ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'number')}\n            analyticsId=\"mainmenu.finddealer.phone\"\n            text={ppnDealer.contactDetails.phoneNumber}\n            iconLeft=\"phone\"\n            data-test-id=\"dealer-phonenumber\"\n            link={`tel:${ppnDealer.contactDetails.phoneNumber}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasEmail ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'email')}\n            analyticsId=\"mainmenu.finddealer.email\"\n            text={ppnDealer.contactDetails.emailAddress}\n            iconLeft=\"email\"\n            data-test-id=\"dealer-email\"\n            link={`mailto:${ppnDealer.contactDetails.emailAddress}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasHomepage ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'homepage')}\n            analyticsId=\"mainmenu.finddealer.website\"\n            text={ppnDealer.contactDetails.homepage.replace('https://', '')}\n            iconLeft=\"globe\"\n            data-test-id=\"dealer-homepage\"\n            link={sanitizeDealerHomepage(ppnDealer.contactDetails.homepage)}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {finder && isString(country) ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, finder.id)}\n            analyticsId={finder.id}\n            text={finder.text}\n            data-test-id=\"dealer-finder-cars\"\n            link={addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId })}\n            iconLeft=\"car\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {bookService ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, bookService.text)}\n            analyticsId={bookService.id}\n            text={bookService.text}\n            link={addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo })}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-service\"\n            iconLeft={'wrench'}\n          />\n        ) : null}\n\n        {hasTestdrive ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, testDrive.text)}\n            analyticsId={testDrive.id}\n            text={testDrive.text}\n            link={testDrive.link}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-testdrive\"\n            iconLeft={'steering-wheel'}\n          />\n        ) : null}\n      </Host>\n    );\n  }\n}\n\ntype DealerDetailCardType = {\n  showSkeleton: boolean;\n  elementId?: string;\n  'data-test-id': string;\n  analyticsId: string;\n  text: string;\n  link?: string;\n  customDatalayerProperties: TDataLayer;\n  datalayerEventAction: EventAction;\n  variant: string;\n  iconLeft: string;\n  target?: string;\n  ariaLabel?: string;\n};\n\nfunction DealerDetailCard(props: DealerDetailCardType): HTMLElement {\n  return <phn-menu-item-card tabIndex={0} class={`${props.showSkeleton ? 'skeleton' : ''}`} {...props} />;\n}\n","import { h } from '@stencil/core';\n\nexport default function ErrorMessage({\n  errorMessage,\n  onDismiss\n}: {\n  errorMessage: string;\n  onDismiss: () => void;\n}): HTMLElement {\n  return (\n    <div class=\"error-message animated\">\n      <phn-p-inline-notification state=\"error\" description={errorMessage} onDismiss={onDismiss} />\n    </div>\n  );\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getAllPPNDealersForMarket } from '../../services/dealer-service';\nimport { getConfig, isString } from '../../utility/helper';\nimport logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport {\n  DEALER_MARKET_SEARCH_TERM,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\n\n@Component({\n  tag: 'phn-dealer-search-by-number-of-dealers',\n  styleUrl: 'dealer-search-by-number-of-dealers.scss',\n  scoped: true\n})\nexport class DealerSearchByNumberOfDealers {\n  @State() isLoading = false;\n  @State() formErrorMessage: string | null = null;\n\n  @Prop() locale!: string;\n\n  @Element() el!: HTMLPhnDealerSearchByNumberOfDealersElement;\n\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { dealer } = navContentStore.state;\n      if (dealer.numberOfDealers <= 5) {\n        this.fetchAllDealersForMarket();\n      }\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  private async fetchAllDealersForMarket() {\n    const { error: errorContent } = navContentStore.state;\n\n    try {\n      this.isLoading = true;\n\n      const { country } = splitLocale(this.locale);\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getAllPPNDealersForMarket(\n        env,\n        getConfig(env).DEALER_API_URL_ALL_DEALERS,\n        country\n      );\n\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private reset() {\n    this.formErrorMessage = null;\n    this.isLoading = false;\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render() {\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    if (isString(this.formErrorMessage))\n      return <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />;\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n\n  .city-select-form-field{\n    padding-top: p-px-to-rem(24px);\n  }\n\n  .title-container {\n    display: flex;\n    flex-direction: row;\n    border: 2px solid rgb(107, 109, 112);\n    border-radius: 5px;\n\n    transition: background-color 0.24s ease;\n    margin: 0;\n    min-height: p-px-to-rem(54px);\n\n    phn-p-text {\n      padding-left: 19px;\n    }\n\n\n    phn-p-icon{\n      margin-right: p-px-to-rem(16px);\n      padding-top: -8px;\n      outline: 0;\n    }\n\n    div.text-limit {\n      width: 80%;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, JSX, Listen, Prop, State } from '@stencil/core';\nimport { getPPNDealersByRegion } from '../../services/dealer-service';\nimport { splitLocale } from '../../entities/locale';\nimport { City, DealersByRegion } from '../../entities/dealer-response';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport Logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport {\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport analyticsManager from '../../services/analytics/analytics-manager';\n\n@Component({\n  tag: 'phn-dealer-search-form-dropdown',\n  styleUrl: 'dealer-search-form-dropdown.scss',\n  scoped: true\n})\nexport class DealerSearchFormDropdown {\n  @Prop() locale = '';\n  @Prop() breakpoint!: number;\n\n  @State() isLoading = false;\n  @State() errorMessage: string | null = null;\n  @State() dealersOfRegion: DealersByRegion = { regions: [] };\n  @State() cities: City[] = [];\n  @State() selectedProvince = '';\n  @State() selectedCity = '';\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormDropdownElement;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n    this.getDealersByRegion();\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  @Listen('removeSkeletonOnDealerSearchForm')\n  loadedAutoCompleteListener(_event: Event): void {\n    this.showSkeleton = false;\n  }\n\n  private async getDealersByRegion() {\n    const { error: errorContent } = navContentStore.state;\n    const { country } = splitLocale(this.locale);\n\n    try {\n      this.isLoading = true;\n      this.dealersOfRegion = await getPPNDealersByRegion(country);\n    } catch (err) {\n      Logger.error('FETCH_DEALERS', err as Error);\n      this.errorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.dealerSearchFormEvent.emit();\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private onCitySelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedCity = (event.target as HTMLSelectElement).value;\n    this.selectedCity = selectedCity;\n    dealerSearchResultsStore.state.ppnDealers =\n      this.cities.find((city) => {\n        return [city.cityName, city.cityNameLocalized].includes(selectedCity);\n      })?.dealers || {};\n    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);\n    dealerSearchResultsStore.state.searchTerm = `${this.selectedProvince}, ${this.selectedCity}`;\n  }\n\n  private onProvinceSelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedProvince = (event.target as HTMLSelectElement).value;\n    this.cities = this.getCitiesByGivenRegionName(selectedProvince);\n    this.selectedProvince = selectedProvince;\n  }\n\n  private getCitiesByGivenRegionName(province: string): City[] {\n    const regions = this.dealersOfRegion.regions;\n\n    const selectedRegion = regions.find(({ regionName, regionNameLocalized }) =>\n      [regionName, regionNameLocalized].includes(province)\n    );\n\n    return selectedRegion?.cities || [];\n  }\n\n  private emitPageLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length || 0\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.isLoading = false;\n    this.selectedProvince = '';\n    this.selectedCity = '';\n\n    dealerSearchResultsStore.state.results = null;\n    dealerSearchResultsStore.state.savedDealerCookie = null;\n\n    this.clearSearchEvent.emit();\n  }\n\n  render(): JSX.Element {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n    const searchText = dealerSearchResultsStore.state.searchTerm;\n\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    return (\n      <Host>\n        {results && results.length > 0 ? (\n          <form\n            class=\"form-container\"\n            onSubmit={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <div>\n              <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n                <div class=\"text-limit\">\n                  <phn-p-text\n                    weight=\"regular\"\n                    size=\"small\"\n                    tag=\"div\"\n                    ellipsis=\"true\"\n                    color=\"contrast-medium\"\n                    data-test-id=\"dealer-search-form-input\"\n                  >\n                    {searchText}\n                  </phn-p-text>\n                </div>\n                <phn-p-icon\n                  name=\"close\"\n                  class=\"close-icon\"\n                  style={{ display: this.showSkeleton ? 'none' : '', cursor: 'pointer' }}\n                  onClick={(event: Event) => {\n                    event.preventDefault();\n                    this.reset();\n                  }}\n                />\n              </div>\n            </div>\n          </form>\n        ) : (\n          <Fragment>\n            <phn-p-select-wrapper\n              filter\n              label={dealerContent.search.dropdown.province}\n              required\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n            >\n              <select\n                name=\"dealers-province\"\n                onChange={(event) => this.onProvinceSelect(event)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                <option hidden selected>\n                  {dealerContent.search.dropdown.selectAProvince}\n                </option>\n                {this.dealersOfRegion.regions.map((region) => {\n                  const province =\n                    splitLocale(this.locale).language === 'en' || region.regionNameLocalized === null\n                      ? region.regionName\n                      : region.regionNameLocalized;\n                  return <option value={province}>{province}</option>;\n                })}\n              </select>\n            </phn-p-select-wrapper>\n\n            <phn-p-select-wrapper\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n              class=\"city-select-form-field\"\n              filter=\"true\"\n              label={dealerContent.search.dropdown.city}\n              required\n            >\n              <select\n                disabled={!isString(this.selectedProvince)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n                name=\"dealers-cities\"\n                onChange={(event) => {\n                  this.onCitySelect(event);\n                }}\n              >\n                <option hidden>{dealerContent.search.dropdown.selectACity}</option>\n                {this.cities.map((city) => (\n                  <option>\n                    {splitLocale(this.locale).language === 'en' || city.cityNameLocalized === null\n                      ? city.cityName\n                      : city.cityNameLocalized}\n                  </option>\n                ))}\n              </select>\n            </phn-p-select-wrapper>\n\n            {isString(this.errorMessage) ? (\n              <ErrorMessage errorMessage={this.errorMessage} onDismiss={() => this.reset()} />\n            ) : null}\n          </Fragment>\n        )}\n      </Host>\n    );\n  }\n}\n","/* istanbul ignore file */\nimport { splitLocale } from '../entities/locale';\nimport { LatLong, Prediction } from '../entities/places';\nimport { isString } from '../utility/helper';\nimport windowService from './window-service';\nimport { NaviErrorTypes, NaviError, NaviErrorType } from '../utility/navi-error';\nimport { getRegionSpecificCountry } from '../utility/helpers/dealer-search-helper';\n\nexport class MapsService {\n  private autocompleteService: google.maps.places.AutocompleteService | null = null;\n  private placesService: google.maps.places.PlacesService | null = null;\n  private geocoderService: google.maps.Geocoder | null = null;\n  private getLocation: ((latLong: LatLong) => google.maps.LatLng) | null = null;\n\n  async init(apiKey: string): Promise<void> {\n    try {\n      const google = await windowService.fetchGoogleMapsApi(apiKey);\n      this.autocompleteService = new google.maps.places.AutocompleteService();\n      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(windowService.createDiv()));\n      this.geocoderService = new google.maps.Geocoder();\n      this.getLocation = (latLong: LatLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);\n    } catch (err) {\n      throw new NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, NaviErrorTypes.GENERAL);\n    }\n  }\n\n  async getPredictions(input: string, locale: string): Promise<Prediction[]> {\n    if (input.length === 0) {\n      return [];\n    }\n    //ToDo: Check what todo if country is no valid iso-code\n    const predictions = await new Promise<google.maps.places.AutocompletePrediction[] | null>((resolve, reject) => {\n      if (this.autocompleteService === null) {\n        reject(new NaviError('autocompleteService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.autocompleteService.getPlacePredictions(\n        {\n          input,\n          componentRestrictions: { country: getRegionSpecificCountry(splitLocale(locale).country) }\n        },\n        (predictions, status) =>\n          status === 'OK'\n            ? resolve(predictions)\n            : reject(\n                new NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))\n              )\n      );\n    });\n\n    return (\n      predictions\n        ?.filter(({ place_id, description }) => isString(place_id) && isString(description))\n        .map(({ place_id: id, description: text }) => ({ id, text })) ?? []\n    );\n  }\n\n  async getPlaceCoordinates(placeId: string): Promise<LatLong> {\n    const response = await new Promise<google.maps.places.PlaceResult | null>((resolve, reject) => {\n      if (this.placesService === null) {\n        reject(new NaviError('placesService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.placesService.getDetails(\n        {\n          placeId\n        },\n        (response, status) =>\n          status === 'OK'\n            ? resolve(response)\n            : reject(new NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status)))\n      );\n    });\n\n    const latitude = response?.geometry?.location?.lat();\n    const longitude = response?.geometry?.location?.lng();\n\n    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n      throw new NaviError(\n        `placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`,\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return { latitude, longitude };\n  }\n\n  async getFormattedAddressFromCoordinates(latLong: LatLong): Promise<string> {\n    if (this.getLocation === null) {\n      throw new NaviError('getLocation is not initialised', NaviErrorTypes.GENERAL);\n    }\n\n    const location = this.getLocation(latLong);\n\n    const response = await new Promise<google.maps.GeocoderResult[] | null>((resolve, reject) => {\n      if (this.geocoderService === null) {\n        reject(new NaviError('geocoderService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.geocoderService.geocode({ location }, (response, status) => {\n        status === 'OK'\n          ? resolve(response)\n          : reject(new NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));\n      });\n    });\n\n    if (response === null || response.length === 0) {\n      throw new NaviError(\n        'geocoderService.geocode did not find the location based on coordinates.',\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return response[0].formatted_address;\n  }\n}\n\nexport function getErrorType(status: string): NaviErrorType {\n  switch (status) {\n    case 'INVALID_REQUEST': {\n      return NaviErrorTypes.INVALID_INPUT;\n    }\n    case 'NOT_FOUND':\n    case 'ZERO_RESULTS': {\n      return NaviErrorTypes.NO_RESULTS;\n    }\n    case 'OVER_QUERY_LIMIT':\n    case 'UNKNOWN_ERROR': {\n      return NaviErrorTypes.RETRY;\n    }\n    case 'ERROR':\n    case 'REQUEST_DENIED':\n    default: {\n      return NaviErrorTypes.GENERAL;\n    }\n  }\n}\n\nexport default new MapsService();\n","@import '../../scss/index';\n\n:host {\n  display: block;\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    & .skeleton-autocomplete-search-field {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n\n    & .skeleton-or-text {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px 4px 0 0;\n    }\n\n    & .skeleton-geolocation-button {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 0 0 4px 4px;\n    }\n  }\n\n  .or-container {\n    position: relative;\n    width: 100%;\n    margin-top: p-px-to-rem(20px);\n\n    .geolocation {\n      width: 100%;\n      padding-bottom: 24px;\n    }\n\n    phn-p-text {\n      margin-bottom: p-px-to-rem(4px);\n      color: $pds-theme-light-primary;\n    }\n  }\n\n  .animate-out {\n    animation: fadeOutToTop 0.75s ease-in-out 0s;\n  }\n\n  .input-container {\n    width: 100%;\n  }\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { LatLong, Prediction } from '../../entities/places';\nimport { splitLocale } from '../../entities/locale';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getPPNDealers } from '../../services/dealer-service';\nimport { getConfig, getString, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport logger from '../../services/logger';\nimport { getErrorMessage, NaviError, NaviErrorTypes } from '../../utility/navi-error';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  DEALER_SEARCH_TARGET_ELEMENT,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport mapsService from '../../services/maps-service';\nimport windowService from '../../services/window-service';\nimport { Timeout } from '../../utility/timeout';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { getRegionSpecificCountry } from '../../utility/helpers/dealer-search-helper';\n\n@Component({\n  tag: 'phn-dealer-search-form-geolocation',\n  styleUrl: 'dealer-search-form-geolocation.scss',\n  scoped: true\n})\nexport class DealerSearchFormGeolocation {\n  @Prop() locale!: string;\n\n  @State() predictions: Prediction[] = [];\n  @State() errorMessage: string | null = null;\n  @State() formErrorMessage: string | null = null;\n  @State() isLoading = false;\n  @State() showGeolocationButton = dealerSearchResultsStore.state.results === null;\n  @State() animateResults = false;\n  @State() searchTerm = dealerSearchResultsStore.state.searchTerm;\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormGeolocationElement;\n\n  private debounceTimeout = new Timeout(100);\n\n  @Listen('autoCompleteLoaded')\n  loadedAutoCompleteListener(): void {\n    this.showSkeleton = false;\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  disconnectedCallback(): void {\n    dealerSearchResultsStore.state.searchTerm = this.searchTerm;\n    this.debounceTimeout.cancel();\n  }\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { error: errorContent } = navContentStore.state;\n\n      mapsService.init('GOOGLE_API_KEY').catch((err: Error) => {\n        logger.error('INIT_MAPS_SERVICE', err);\n        this.formErrorMessage = getErrorMessage(errorContent, err);\n        this.errorMessage = null;\n      });\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm, true),\n        displayElementName: dealer.text\n      }\n    });\n  }\n\n  private emitResultsLoadEvent(searchTerm: string) {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const componentSearchSearchTerm = isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM;\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: componentSearchSearchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private async fetchDealers(getSearchTerms: () => Promise<[string, LatLong]>) {\n    const { error: errorContent } = navContentStore.state;\n    try {\n      this.reset();\n      this.isLoading = true;\n\n      const [searchTerm, placeCoordinates] = await getSearchTerms();\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getPPNDealers(\n        env,\n        getConfig(env).DEALER_API_URL,\n        placeCoordinates,\n        getRegionSpecificCountry(splitLocale(this.locale).country)\n      );\n\n      dealerSearchResultsStore.state.searchTerm = searchTerm;\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n      this.showGeolocationButton = false;\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n      this.errorMessage = null;\n    } finally {\n      this.isLoading = false;\n      this.animateResults = true;\n    }\n  }\n\n  private async onSubmit(prediction: Prediction | null) {\n    const { dealer: dealerContent, error: errorContent } = navContentStore.state;\n\n    if (!isString(this.searchTerm)) {\n      this.errorMessage = errorContent.noInput;\n      this.formErrorMessage = '';\n      return;\n    }\n\n    await this.fetchDealers(async () => {\n      if (prediction === null) {\n        throw new NaviError('Dealer search form submitted without prediction', NaviErrorTypes.INVALID_INPUT);\n      }\n\n      this.searchTerm = prediction.text;\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_CLICK, {\n        componentClick: {\n          clickElementId: prediction.id,\n          clickElementName: prediction.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: prediction.text\n        }\n      });\n\n      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);\n\n      return [prediction.text, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(this.searchTerm);\n  }\n\n  private async getCurrentLocation(): Promise<void> {\n    const { dealer: dealerContent } = navContentStore.state;\n\n    await this.fetchDealers(async () => {\n      const placeCoordinates = await windowService.getNavigatorLatLong();\n      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);\n\n      this.searchTerm = '';\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_GEOLOCATION_CLICK, {\n        componentClick: {\n          clickElementId: dealerContent.search.geolocation.id,\n          clickElementName: dealerContent.search.geolocation.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM\n        }\n      });\n\n      return [formattedAddress, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(GEOLOCATION_BUTTON_SEARCH_TERM);\n  }\n\n  private async onDealerSearchEntry(searchTerm: string): Promise<void> {\n    const { error } = navContentStore.state;\n    try {\n      this.searchTerm = searchTerm;\n      this.errorMessage = null;\n      this.formErrorMessage = null;\n      this.showGeolocationButton = dealerSearchResultsStore.state.results === null;\n      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);\n    } catch (err) {\n      logger.error('GET_PREDICTIONS', err as Error);\n      this.errorMessage = getErrorMessage(error, err as Error);\n      this.predictions = [];\n    }\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.formErrorMessage = null;\n    this.animateResults = false;\n    this.showGeolocationButton = true;\n    this.isLoading = false;\n\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render(): HTMLPhnDealerSearchFormElement {\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results } = dealerSearchResultsStore.state;\n\n    return (\n      <Host class={this.showSkeleton ? 'skeleton' : ''}>\n        <div class=\"input-container\">\n          {this.showSkeleton ? <div class=\"skeleton-autocomplete-search-field\" /> : null}\n          <phn-autocomplete-search-field\n            placeholder={dealerContent.search.form.inputPlaceholder}\n            initialValue={dealerSearchResultsStore.state.searchTerm}\n            predictions={this.predictions}\n            onSearchInput={(e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail))}\n            onClearSearch={() => {\n              this.predictions = [];\n              dealerSearchResultsStore.state.searchTerm = '';\n              this.searchTerm = '';\n              this.reset();\n              this.clearSearchEvent.emit();\n              this.showGeolocationButton = true;\n            }}\n            onSubmitSearch={(e) => this.onSubmit(e.detail)}\n            errorMessage={getString(this.errorMessage)}\n            style={{ display: this.showSkeleton ? 'none' : '' }}\n          />\n        </div>\n\n        {this.isLoading && (\n          <div class=\"spinner\">\n            <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n          </div>\n        )}\n\n        {this.showGeolocationButton && results === null ? (\n          <Fragment>\n            <div\n              class={`or-container ${this.isLoading ? 'animate-out' : ''}`}\n              onAnimationEnd={() => {\n                this.showGeolocationButton = false;\n              }}\n            >\n              {this.showSkeleton ? <div class=\"skeleton-or-text\" /> : null}\n              <phn-p-text\n                color=\"inherit\"\n                size=\"inherit\"\n                tag=\"div\"\n                data-test-id=\"dealer-search-or-label\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.or}\n              </phn-p-text>\n              {this.showSkeleton ? <div class=\"skeleton-geolocation-button\" /> : null}\n              <phn-p-button\n                class={'geolocation'}\n                onClick={() => this.getCurrentLocation()}\n                variant=\"tertiary\"\n                icon=\"locate\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.geolocation.text}\n              </phn-p-button>\n            </div>\n          </Fragment>\n        ) : null}\n\n        {isString(this.formErrorMessage) ? (\n          <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />\n        ) : null}\n      </Host>\n    );\n  }\n}\n","import { PPNDealer, PPNDealerSearchResult } from '../../entities/dealer-response';\nimport { h, JSX } from '@stencil/core';\nimport { isString } from '../../utility/helper';\nimport { getDealerDetailsRoutingKey, RoutingKeys } from '../../entities/routing-key';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { splitLocale } from '../../entities/locale';\nimport { addRoute } from '../../services/routing-manager';\n\nexport function DealerSearchFormItemCard({\n  dealer,\n  showOverlay,\n  locale\n}: {\n  dealer: PPNDealerSearchResult;\n  showOverlay?: boolean;\n  locale: string;\n}): JSX.Element | null {\n  const { ppnDealer, distance } = dealer;\n  const language = splitLocale(locale).language;\n  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n  // postalCode is currently not available in addressLocalized\n  const address =\n    language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n  const name =\n    language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n  const numberOfDealers = navContentStore.state.dealer.numberOfDealers;\n  let country = '';\n  try {\n    country = splitLocale(locale).country;\n  } catch (err) {\n    // throw the error away\n  }\n  const onDealerCardClick = (ppnDealer: PPNDealer): void => {\n    const dealerDetailsRoutingKey = getDealerDetailsRoutingKey(ppnDealer.id);\n    addRoute([ppnDealer.id]);\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    dealerSearchResultsStore.state.savedDealerCookie = {\n      id: ppnDealer.id,\n      latitude: ppnDealer.coordinates.latitude,\n      longitude: ppnDealer.coordinates.longitude\n    };\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULT_CLICK, {\n      componentClick: {\n        clickElementId: ppnDealer.id,\n        clickElementName: ppnDealer.name,\n        clickElementType: ClickElementTypes.Button,\n        targetElement: `level2_${dealerDetailsRoutingKey}`\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: results?.length\n      },\n      partner: {\n        companyName: ppnDealer.name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    });\n  };\n\n  return (\n    <phn-menu-item-card\n      tabIndex={0}\n      text={name}\n      class={`animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`}\n      onClick={() => onDealerCardClick(ppnDealer)}\n      analyticsId={ppnDealer.id}\n    >\n      <div class=\"phn-flex-row phn-justify-between phn-align-center\">\n        {country === 'JP' ? (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`}\n          </phn-p-text>\n        ) : (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`${address.street}, `}\n            <span class=\"city\">\n              {ppnDealer.address.postalCode} {address.city}\n            </span>\n          </phn-p-text>\n        )}\n\n        {distance && distance.value >= 1 && numberOfDealers > 5 ? (\n          <phn-p-tag color=\"notification-info-soft\">{`${Math.round(\n            distance.value\n          )}${distance.unit.toLowerCase()}`}</phn-p-tag>\n        ) : null}\n      </div>\n    </phn-menu-item-card>\n  );\n}\n","import { navContentStore } from '../../state/nav-content-store';\nimport { h } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport { isString } from '../../utility/helper';\n\nexport function DealerSearchMapLink() {\n  const { dealer: dealerContent } = navContentStore.state;\n\n  function emitDealersMapEvent() {\n    const map = dealerContent.search.map;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_MAP_CLICK, {\n      componentClick: {\n        clickElementId: map.id,\n        clickElementName: map.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: map.link\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length\n      }\n    });\n  }\n  return (\n    <a class={'animated'} href={dealerContent.search.map.link} aria-label={dealerContent.search.map.description}>\n      <phn-p-button onClick={emitDealersMapEvent} variant=\"tertiary\">\n        {dealerContent.search.map.text}{' '}\n      </phn-p-button>\n    </a>\n  );\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  phn-dealer-details-drawer{\n    margin-top: p-px-to-rem(20px);\n  }\n\n\n  phn-menu-item-card {\n    & > div {\n      margin-top: 14px;\n    }\n  }\n\n  .dealer-card-overlay {\n    opacity: 0.3;\n  }\n\n  .dealer-card{\n    phn-p-tag{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n\n  .error-message {\n    position: relative;\n    margin-top: p-px-to-rem(32px);\n  }\n\n  .animated {\n    animation: fadeInFromBottom 0.75s ease-in-out 0s;\n  }\n\n  a {\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    text-decoration-line: none;\n    margin-top: p-px-to-rem(36px);\n\n    phn-p-button {\n      width: 100%;\n    }\n  }\n}\n","import { Component, Fragment, h, Host, Prop } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { DealerSearchFormItemCard } from './dealer-search-form-item-card';\nimport { JSX } from '@stencil/core/internal';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { DealerSearchMapLink } from './dealer-search-map-link';\n\n@Component({\n  tag: 'phn-dealer-search-results',\n  styleUrl: 'dealer-search-results.scss',\n  scoped: true\n})\nexport class DealerSearchResults {\n  @Prop() showOverlay = false;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  render(): JSX.Element | null {\n    const { results, ppnDealers } = dealerSearchResultsStore.state;\n    const { error: errorContent } = navContentStore.state;\n\n    if (results === null) return null;\n\n    if (results?.length === 0)\n      return (\n        <Fragment>\n          <ErrorMessage errorMessage={errorContent.noResults} onDismiss={() => null} />\n        </Fragment>\n      );\n    const dealerId = results[0];\n    if (results.length === 1 && ppnDealers[dealerId]) {\n      dealerSearchResultsStore.state.savedDealerCookie = {\n        id: dealerId,\n        latitude: ppnDealers[dealerId].ppnDealer.coordinates.latitude,\n        longitude: ppnDealers[dealerId].ppnDealer.coordinates.longitude\n      };\n\n      return <phn-dealer-details-drawer breakpoint={this.breakpoint} dealerId={dealerId} locale={this.locale} />;\n    }\n\n    return (\n      <Host>\n        <Fragment>\n          {results.map((dealerId) => {\n            const dealer = ppnDealers[dealerId];\n\n            if (dealer === undefined || dealer.ppnDealer === undefined) {\n              return null;\n            }\n            return <DealerSearchFormItemCard dealer={dealer} showOverlay={this.showOverlay} locale={this.locale} />;\n          })}\n          <DealerSearchMapLink />\n        </Fragment>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n@mixin renderTitle() {\n  .title-container {\n    width: 100%;\n    margin: 0;\n\n    phn-p-heading {\n      word-break: break-word;\n      white-space: pre-line;\n    }\n\n    phn-p-icon{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n}\n\n@mixin default-skeleton() {\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n    background: $pds-theme-light-contrast-low;\n    border-radius: 4px;\n\n    & * {\n      visibility: hidden;\n    }\n  }\n}\n\n:host {\n  display: block;\n  padding: p-px-to-rem(19px);\n  margin-top: p-px-to-rem(16px);\n  border-radius: 8px;\n  background-color: $pds-theme-light-state-hover;\n  transition: background-color 0.24s ease;\n  cursor: pointer;\n\n  button{\n    all: unset;\n    display: block;\n    width: 100%;\n  }\n\n  @include default-skeleton();\n\n  @include pds-media-query-min('s') {\n    background-color: $pds-theme-light-background-base;\n  }\n\n  &:hover {\n    @include pds-media-query-min('s') {\n      background-color: $pds-theme-light-state-hover;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .subtext {\n    color: $pds-theme-light-primary;\n  }\n\n  .dealer-card-item {\n    font-size: 16px;\n    font-family: \"Porsche Next\";\n    font-style: normal;\n    font-weight: 400;\n    line-height: 24px;\n    color: $pds-theme-light-primary;\n    word-break: break-word;\n    white-space: pre-line;\n  }\n\n  @include renderTitle();\n}\n","import { Component, Element, Fragment, h, Host, JSX, Listen, Prop } from '@stencil/core';\nimport { ClickElementType, ClickElementTypes, EventAction, EventActions } from '../../utility/constants';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { getHTMLElement, isString } from '../../utility/helper';\nimport { sendDataLayerEvent } from '../../services/analytics/data-layer-event-sender';\n\n@Component({\n  tag: 'phn-menu-item-card',\n  styleUrl: 'menu-item-card.scss',\n  scoped: true\n})\nexport class MenuItemCard {\n  @Prop() text!: string;\n  @Prop() analyticsId!: string;\n  @Prop() subtext = '';\n  @Prop() elementId = '';\n  @Prop() link = '';\n  @Prop() datalayerEventAction: EventAction = EventActions.NAVIGATION_CLICK;\n  @Prop() customDatalayerProperties: TDataLayer = {};\n  @Prop() target = '_self';\n  @Prop() iconLeft = '';\n\n  @Element() el!: HTMLPhnMenuItemCardElement;\n\n  @Listen('keydown', { passive: false })\n  handleKeyDown(e: KeyboardEvent): void {\n    if (e.key === 'Enter') {\n      const anchorElement = getHTMLElement(e.target)?.querySelector('a');\n      const targetElement = anchorElement ? anchorElement : getHTMLElement(e.target);\n\n      if (targetElement) {\n        targetElement.click();\n        !anchorElement ? this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId) : null;\n      }\n    }\n  }\n\n  private sendDataLayerEvent(clickElementType: ClickElementType, elementId: string): void {\n    sendDataLayerEvent({\n      analyticsId: this.analyticsId,\n      text: this.text,\n      elementId,\n      clickElementType,\n      link: this.link,\n      customDatalayerProperties: this.customDatalayerProperties,\n      datalayerEventAction: this.datalayerEventAction\n    });\n  }\n\n  private renderTitle(): HTMLElement {\n    return (\n      <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n        {this.elementId ? (\n          <phn-p-text className={'dealer-card-item'}>{this.text}</phn-p-text>\n        ) : (\n          <phn-p-heading tag=\"h3\" size=\"medium\">\n            {this.text}\n          </phn-p-heading>\n        )}\n        {isString(this.iconLeft) ? <phn-p-icon name={this.iconLeft}></phn-p-icon> : null}\n      </div>\n    );\n  }\n\n  private renderSubtitle(): JSX.Element | null {\n    if (!isString(this.subtext)) {\n      return null;\n    }\n\n    return (\n      <phn-p-text\n        class={'subtext'}\n        color=\"contrast-medium\"\n        weight=\"regular\"\n        size=\"xx-small\"\n        tag=\"div\"\n        ellipsis=\"true\"\n        data-test-id=\"subtext\"\n      >\n        {this.subtext}\n      </phn-p-text>\n    );\n  }\n\n  render(): JSX.Element {\n    const body = (\n      <Fragment>\n        <div class=\"texts\">\n          {this.renderTitle()}\n          {this.renderSubtitle()}\n        </div>\n        <slot />\n      </Fragment>\n    );\n\n    if (isString(this.link))\n      return (\n        <a\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);\n          }}\n          class=\"card-link\"\n          href={this.link}\n          target={this.target}\n        >\n          {body}\n        </a>\n      );\n\n    return (\n      <Host>\n        <button\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);\n          }}\n        >\n          {body}\n        </button>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  .button-container {\n    display: flex;\n\n    @include pds-media-query-min-max('base', 'xs') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    @include pds-media-query-min-max('s', 'l') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    .login {\n      padding: p-px-to-rem(36px) 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n        padding-top: 0;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 p-px-to-rem(8px) p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min-max('s', 'l') {\n        padding: 0 0 p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n\n    .more {\n      padding: 0 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 0 p-px-to-rem(16px) p-px-to-rem(8px);\n      }\n\n      @include pds-media-query-min('s') {\n        padding: 0 0 p-px-to-rem(23px) 0\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n  }\n\n  phn-p-text {\n    padding-bottom: p-px-to-rem(24px);\n    border-bottom: 2px solid $pds-theme-light-contrast-low;\n    margin-bottom: p-px-to-rem(10px);\n\n    @include pds-media-query-min('xxl') {\n      margin-bottom: p-px-to-rem(16px);\n    }\n  }\n\n  phn-p-link-pure {\n    float: left;\n    text-decoration: underline;\n    color: black;\n  }\n}\n","import { Component, Event, EventEmitter, Fragment, h, JSX, Prop } from '@stencil/core';\nimport { TLink } from '../../entities/content';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { ClickElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport { isString } from '../../utility/helper';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\n\n@Component({\n  tag: 'phn-myporsche-login',\n  styleUrl: 'myporsche-login.scss',\n  scoped: true\n})\nexport class MyPorscheLogin {\n  @Prop() login!: TLink;\n  @Prop() more: TLink | null = null;\n  @Prop() signup!: TLink;\n  @Prop() signupText!: string;\n\n  @Event() loginEvent!: EventEmitter<void>;\n\n  private sendDataLayerEvent(link: TLink | null): void {\n    globalDataLayerService.pushDataLayerEvent(EventActions.NAVIGATION_LINK_CLICK, {\n      componentClick: {\n        clickElementId: link?.id,\n        clickElementName: link?.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: link?.link\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.MY_PORSCHE,\n          ElementTypes.myPorscheDrawer\n        ),\n        displayElementName: link?.text\n      }\n    });\n  }\n\n  render(): JSX.Element {\n    return (\n      <Fragment>\n        <div class=\"button-container\">\n          <phn-p-button\n            variant=\"primary\"\n            class=\"login\"\n            onClick={() => {\n              this.loginEvent.emit();\n              this.sendDataLayerEvent(this.login);\n            }}\n          >\n            {this.login.text}\n          </phn-p-button>\n          {this.more && isString(this.more.link) ? (\n            <phn-p-link\n              variant=\"tertiary\"\n              class=\"more\"\n              href={this.more.link}\n              onClick={() => {\n                this.sendDataLayerEvent(this.more);\n              }}\n            >\n              {this.more.text}\n            </phn-p-link>\n          ) : null}\n        </div>\n        <div>\n          <phn-p-link-pure\n            icon=\"none\"\n            onClick={() => {\n              this.sendDataLayerEvent(this.signup);\n            }}\n          >\n            <a href={this.signup.link}>{this.signup.text}</a>\n          </phn-p-link-pure>\n          <phn-p-text>&nbsp;{this.signupText}</phn-p-text>\n        </div>\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"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"}